#if defined _anticheat_included
    #endinput
#endif
#define _anticheat_included

#define VER_CLIENT			("0.3")
#define MAX_PING 			(2000)
#define MAX_MODEL        	(212)
#define MAX_DLIST           (20)
#define PANEL_LINE     		(16)

#define strnah(%0,%1)       	format(%0, 255, %1)
#define pressed(%0) 			(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#define fstrcat(%0,%1,%2)       format(sctring, sizeof(sctring), %1, %2), strcat(%0, sctring)
#define function%0(%1) 			forward%0(%1); public%0(%1)
#define CLIENT_CACHE			"514F495A504F50424751353841504F54324D3448"

native gpci(playerid, buffer[], size = sizeof(buffer));

new engine,lights,alarm,doors;

static LogsTick;
static DebugOff;
static StartTick;
static DebugTime;
static Astr[128];
static AstrF[128];
static File:FileID;
static Text:DmgHealFon;
static PlayerText:DmgHealProgres[MAX_PLAYERS][2];

static connectTime[PANEL_LINE];
static connectText[PANEL_LINE][100];
static Text:connectDraw[PANEL_LINE];
static warningTime[PANEL_LINE];
static warningText[PANEL_LINE][100];
static Text:warningDraw[PANEL_LINE];

static Iterator:PlReconPool<MAX_PLAYERS>;
static connblockTime[MAX_PLAYERS];
static connblockData[MAX_PLAYERS][16];

static vehicleEnterTick[MAX_VEHICLES];
static vehicleOccupied[MAX_VEHICLES][9];
static Float:vehicleHealth[MAX_VEHICLES];
static Float:vehiclePassVelX[MAX_VEHICLES];
static Float:vehiclePassVelY[MAX_VEHICLES];
static Float:vehiclePassVelZ[MAX_VEHICLES];

static Float:playerSpawnPosX[MAX_PLAYERS];
static Float:playerSpawnPosY[MAX_PLAYERS];
static Float:playerSpawnPosZ[MAX_PLAYERS];
static Float:playerCheckPosX[MAX_PLAYERS];
static Float:playerCheckPosY[MAX_PLAYERS];
static Float:playerCheckPosZ[MAX_PLAYERS];
static Float:playerArmour[MAX_PLAYERS];
static Float:playerHealth[MAX_PLAYERS];
static Float:playerPosX[MAX_PLAYERS];
static Float:playerPosY[MAX_PLAYERS];
static Float:playerPosZ[MAX_PLAYERS];
static Float:playerPacketX[MAX_PLAYERS];
static Float:playerPacketY[MAX_PLAYERS];
static Float:playerPacketZ[MAX_PLAYERS];
static Float:playerFlyLastZ[MAX_PLAYERS];
static Float:playerOspLastPosZ[MAX_PLAYERS];

static playerIP[MAX_PLAYERS][16];
static playerName[MAX_PLAYERS][25];
static playerAmmo[MAX_PLAYERS][13];
static playerWeapon[MAX_PLAYERS][13];
static playerSettingData[MAX_PLAYERS][MAX_DLIST];
static playerShowLogData[MAX_PLAYERS][MAX_DLIST][32];
static playerLogDialogName[MAX_PLAYERS][16];
static playerLogDialogDate[MAX_PLAYERS][12];

static playerPing[MAX_PLAYERS];
static playerEnter[MAX_PLAYERS];
static playerLagFly[MAX_PLAYERS];
static playerLagSpeed[MAX_PLAYERS];
static playerLastShot[MAX_PLAYERS];
static playerWeaponID[MAX_PLAYERS];
static playerLastDoors[MAX_PLAYERS];
static playerEnterTime[MAX_PLAYERS];
static playerVehicleID[MAX_PLAYERS];
static playerLastHitID[MAX_PLAYERS];
static playerKickTimer[MAX_PLAYERS];
static playerLastSpeed0[MAX_PLAYERS];
static playerDeathTimer[MAX_PLAYERS];
static playerSpawnTimer[MAX_PLAYERS];
static playerPausedTick[MAX_PLAYERS];
static playerLastHitTick[MAX_PLAYERS];
static playerOldTargetID[MAX_PLAYERS];
static playerSpeedUpdate[MAX_PLAYERS];
static playerMainTimerOne[MAX_PLAYERS];
static playerMainTimerTwo[MAX_PLAYERS];
static playerMainTimerThre[MAX_PLAYERS];
static playerLogDialogPage[MAX_PLAYERS];
static playerLastPublicTick[MAX_PLAYERS][28];
static playerStatsDialogPage[MAX_PLAYERS];
static playerSettingDialogPage[MAX_PLAYERS];

static playerIsNPC[MAX_PLAYERS char];
static playerSleep[MAX_PLAYERS char];
static playerState[MAX_PLAYERS char];
static playerSpawn[MAX_PLAYERS char];
static playerRemvVeh[MAX_PLAYERS char];
static playerUseSlot[MAX_PLAYERS char];
static playerIsMobile[MAX_PLAYERS char];
static playerFakeKill[MAX_PLAYERS char];
static playerPutInVeh[MAX_PLAYERS char];
static playerInModShop[MAX_PLAYERS char];
static playerRetardKill[MAX_PLAYERS char];
static playerEnterCount[MAX_PLAYERS char];
static playerTargetTime[MAX_PLAYERS char];
static playerDescentTime[MAX_PLAYERS char];
static playerFreezeSpeed[MAX_PLAYERS char];
static playerCheckFlyAll[MAX_PLAYERS char];

static playerWarningFly[MAX_PLAYERS char];
static playerWarningRcon[MAX_PLAYERS char];
static playerWarningPing[MAX_PLAYERS char];
static playerWarningSlapp[MAX_PLAYERS char];
static playerWarningSpeed[MAX_PLAYERS char];
static playerWarningNoppos[MAX_PLAYERS char];
static playerWarningReapir[MAX_PLAYERS char];
static playerWarningHealth[MAX_PLAYERS char];
static playerWarningPacktp[MAX_PLAYERS char];
static playerWarningPublic[MAX_PLAYERS][28];

static playerCheckFly[MAX_PLAYERS char];
static playerCheckNop[MAX_PLAYERS char];
static playerCheckHPnARM[MAX_PLAYERS char];

enum
{
	AC_WEAPON,
	AC_AMMO,
	AC_IKILL,
	AC_IKILLER,
	AC_RAPID,
	AC_CRASH3,
	AC_CRASH13,
	AC_LOADENTER,
	AC_CARSPAWN1,
	AC_CRASH11,
	AC_VEHTP0,
	AC_VEHTP1,
	AC_SHOTCMD,
	AC_DERPCAM,
	AC_NOPPOS,
	AC_TP0,
	AC_TP1,
	AC_HEALTH,
	AC_ARMOUR,
	AC_FLYVELO,
	AC_FLYSURF,
	AC_FLYMOP,
	AC_FLYMOPFIX,
	AC_REPAIR,
	AC_CARSPAWN0,
	AC_CARHACK0,
	AC_CARSHOT,
	AC_BDOORS,
	AC_CRASH9,
	AC_DAMAGESYS,
    AC_INFDAMAGE,
    AC_SPEED0,
    AC_CRASH10,
    AC_ENTCOUNT,
    AC_DSPEED1,
    AC_DSPEED2,
	AC_OVERSPEED,
    AC_NTINCAR,
    AC_VEHREMOVE,
    AC_CARHACK1,
	AC_CARHACK2,
    AC_FLY,
	AC_FASTTP,
    AC_NOPPOSK,
    AC_IVERSION,
	AC_MAXCONNIP,
	AC_SPOOFCONN,
	AC_IEMODSHOP,
	AC_IRCON,
	AC_PING,
	AC_IVEHMOD,
	AC_IPAINTJOB,
    AC_JETPACK,
	AC_SPAWN,
	AC_RECONNECT,
	AC_CROSFLOOD,
	AC_PUBFLOOD
}
static CheatName[][32] =
{
    "[block] gun",      		// AC_WEAPON
    "[block] ammo", 			// AC_AMMO
    "[block] fake kill", 		// AC_IKILL | от себя
    "[block] inv kill", 		// AC_IKILLER | от невалидного игрока
    "[block] rapid", 			// AC_RAPID
    "[block] crash pass #2", 	// AC_CRASH3 | пасажирским местом
    "[block] crash tint", 		// AC_CRASH13 | тюнингом в 255 инту
    "[block] enter load",  		// AC_LOADENTER
    "[block] spawn car #2", 	// AC_CARSPAWN1
    "[block] crash skin",   	// AC_CRASH11
    "[block] tpcar #1",        	// AC_VEHTP0
    "[block] tpcar #2",        	// AC_VEHTP1
    "[block] shot cmd",  		// AC_SHOTCMD
    "[block] derpcam", 			// AC_DERPCAM
    "[block] nop pos",       	// AC_NOPPOS
    "[block] tp incar", 		// AC_TP0
    "[block] tp onfoot", 		// AC_TP1
    "[spawn] nop health", 		// AC_HEALTH
    "[spawn] nop armour", 		// AC_ARMOUR
    "[spawn] fly velo", 		// AC_FLYVELO
	"[spawn] fly surf", 		// AC_FLYSURF
	"[spawn] fly mop", 			// AC_FLYMOP
	"[spawn] fly mopfix", 		// AC_FLYMOPFIX
	"[remove] nop hpcar", 		// AC_REPAIR
    "[remove] spawn car #1", 	// AC_CARSPAWN0
    "[remove] carhack #1", 		// AC_CARHACK0
    "[remove] carshot",  		// AC_CARSHOT
    "[remove] doors", 			// AC_BDOORS
    "[remove] crash pass #1", 	// AC_CRASH9
    "[add] damage",  			// AC_DAMAGESYS
    "[add] dmginfo",  			// AC_INFDAMAGE
    "[kick] ultra speed", 		// AC_SPEED0
    "[kick] crash state", 		// AC_CRASH10 | сменами состояний
    "[kick] over enter", 		// AC_ENTCOUNT
    "[kick] speed diff #2", 	// AC_DSPEED1
    "[kick] speed diff #3", 	// AC_DSPEED2
    "[kick] over speed",  		// AC_OVERSPEED
    "[kick] enter incar", 		// AC_NTINCAR
    "[kick] nop rpveh", 		// AC_VEHREMOVE
    "[kick] carhack #2", 		// AC_CARHACK1 | на задержку
    "[kick] carhack #3", 		// AC_CARHACK2
    "[kick] fly sbo", 			// AC_FLY | slonoboyko | coordmaster
    "[kick] fast tp", 			// AC_FASTTP
    "[kick] noppos kick",       // AC_NOPPOSK
    "[kick] inv client", 		// AC_IVERSION
    "[kick] max conn", 			// AC_MAXCONNIP
    "[kick] spoof conn", 		// AC_SPOOFCONN
    "[kick] inv tune", 			// AC_IEMODSHOP
    "[kick] inv rcon", 			// AC_IRCON
    "[kick] max ping", 			// AC_PING
    "[kick] crash tune", 		// AC_IVEHMOD
    "[kick] crash farb", 		// AC_IPAINTJOB
    "[kick] jetpack", 			// AC_JETPACK
    "[kick] spawn", 			// AC_SPAWN
    "[kick] reconnect", 		// AC_RECONNECT
    "[kick] wide flood", 		// AC_CROSFLOOD
    "[kick] pub flood #" 		// AC_PUBFLOOD
};
static CheatStatus[sizeof(CheatName)];
static CheatCount[sizeof(CheatName)];

static Float:SprayPos[10][3] =
{
	{2064.2842, -1831.4736, 13.5469},
	{-2425.7822, 1022.1392, 50.3977},
	{-1420.5195, 2584.2305, 55.8433},
	{487.6401, -1739.9479, 11.1385},
	{1024.8651, -1024.087, 32.1016},
	{-1904.7019, 284.5968, 41.0469},
	{1975.2384, 2162.5088, 11.0703},
	{2393.4456, 1491.5537, 10.5616},
	{720.0854, -457.8807, 16.3359},
	{-99.9417, 1117.9048, 19.7417}
};

static Float:WaterPos[21][4] =
{
	{884.5607,-1720.8746,12.9217,25.0},
	{2313.5029,-1416.8055,21.6150,20.0},
	{1970.9321,-1200.1354,17.4500,45.0},
	{1094.7080,-672.1907,111.4500,15.0},
	{512.8158,-1105.0758,78.8238,15.0},
	{226.4365,-1184.9742,73.4500,15.0},
	{195.2572,-1232.7897,76.5034,20.0},
	{1279.6432,-806.7355,86.1230,15.0},
	{-645.3854,-1927.5696,17.1965,200.0},
	{-2710.0344,-468.7650,2.2426,55.0},
	{-2449.1758,-270.7404,35.6148,75.0},
	{-2023.0673,-859.7955,32.1719,100.0},
	{1769.9637,2817.6643,8.3359,40.0},
	{2531.6294,1569.6953,8.4171,25.0},
	{2178.7285,1116.1986,12.6484,70.0},
	{2141.7139,1286.6537,7.9766,55.0},
	{1936.2334,1610.5770,22.7679,150.0},
	{2116.8345,1683.3533,13.0060,30.0},
	{2090.9016,1914.8190,9.0792,55.0},
	{1280.4600,-774.4617,1082.1799,15.0},
	{1243.8796,-2382.2717,8.3145,45.0}
};

static Float:WeaponDamage[47] =
{
	6.60, 1.32, 4.62, 6.60, 6.60, 6.60, 6.60,
	6.60, 6.60, 27.06, 4.62, 6.60, 6.60, 6.60,
	4.62, 6.60, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
	8.25, 13.2, 46.2, 49.5, 49.5, 39.6, 6.6,
	8.25, 9.9, 9.9, 6.6, 24.75, 41.25, 0.0,
	0.0, 0.0, 46.2, 0.0, 0.0, 0.33, 0.33,
	0.0, 0.0, 0.0, 0.0
};

static Float:MaxDistShot[17] = {45.0, 45.0, 45.0, 50.0, 45.0, 50.0, 45.0, 55.0, 100.0, 120.0, 45.0, 110.0, 320.0, 0.0, 0.0, 0.0, 75.0};
static WeaponReload[17] = {150, 300, 100, 1000, 2400, 270, 30, 60, 100, 100, 30, 1000, 1000, 0, 0, 0, 0}; // 24: 650
static WeaponSlots[47] = {0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10, 10, 8, 8, 8, -1, -1, -1, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 4, 6, 6, 7, 7, 7, 7, 8, 12, 9, 9, 9, 11, 11, 11};

static MaxPassengers[MAX_MODEL] =
{
	3, 1, 1, 1, 3, 3, 0, 1, 1, 3, 1, 1, 1, 3, 1, 1, 3, 1, 3, 1, 3, 3, 1, 1, 1, 0, 3, 3, 3, 1, 0, 8, 0, 1, 1, 15, 1, 8, 3, 1, 3, 0, 1, 1,
	1, 3, 0, 1, 0, 1, 15, 1, 0, 0, 0, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 3, 1, 0, 0, 1, 1, 0, 1, 1, 3, 1, 0, 3, 2, 0, 0, 0, 3,
	1, 1, 3, 1, 3, 0, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 0, 0, 1, 0, 0, 1, 1, 3, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 3, 0, 0,
	0, 1, 1, 1, 1, 2, 2, 0, 3, 1, 1, 1, 1, 1, 3, 3, 1, 1, 3, 3, 1, 0, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 0, 1, 3, 3, 0, 15, 1, 0, 0, 1, 0, 1,
	1, 1, 1, 3, 3, 1, 3, 0, 15, 3, 1, 1, 1, 1, 15, 15, 1, 1, 1, 0, 3, 3, 3, 1, 1, 1, 1, 1, 3, 1, 15, 15, 15, 3, 15, 15
};

static PublicMaxTick[28] =
{
	50,		// 0 OnDialogResponse
	800,	// 1 OnEnterExitModShop
	200,	// 2 OnPlayerClickMap
	400,	// 3 OnPlayerClickPlayer
	50,		// 4 OnPlayerClickTextDraw
	200,	// 5 OnPlayerCommandText
	50,		// 6 OnPlayerEnterVehicle
	50,		// 7 OnPlayerExitVehicle
	100,	// 8 OnPlayerPickUpPickup
	100,	// 9 OnPlayerRequestClass
	50,		// 10 OnPlayerSelectedMenuRow
	200,	// 11 OnPlayerStateChange
	500,	// 12 OnVehicleMod
	500,	// 13 OnVehiclePaintjob
	500,	// 14 OnVehicleRespray
	300,	// 15 OnVehicleDeath
	200,	// 16 OnPlayerText
	500,	// 17 OnPlayerEnterCheckpoint
	500,	// 18 OnPlayerLeaveCheckpoint
	100,	// 19 OnPlayerRequestSpawn
	200,	// 20 OnPlayerExitedMenu
	500,	// 21 OnPlayerEnterRaceCheckpoint
	500,	// 22 OnPlayerLeaveRaceCheckpoint
	50,		// 23 OnPlayerClickPlayerTextDraw
	50,		// 24 OnVehicleDamageStatusUpdate
	100,	// 25 OnVehicleSirenStateChange
	100,	// 26 OnPlayerSelectObject
	100		// 27 Cross-public
};

static VehicleMaxSpeed[MAX_MODEL] =
{
	157, 147, 186, 110, 133, 164, 110, 148, 100, 158, 129, 221, 168, 110,
	105, 192, 154, 270, 115, 149, 145, 154, 140, 99, 135, 270, 173, 165,
	157, 201, 190, 130, 94, 110, 167, 0, 149, 158, 142, 168, 136, 145, 139,
	126, 110, 164, 270, 270, 111, 0, 0, 193, 270, 60, 135, 157, 106, 95, 157,
	136, 270, 160, 150, 142, 145, 145, 147, 140, 144, 270, 157, 110, 190, 190,
	149, 173, 270, 186, 117, 140, 184, 73, 156, 122, 190, 99, 64, 270, 270, 139,
	157, 149, 140, 270, 214, 176, 162, 270, 108, 123, 140, 145, 216, 216, 173,
	140, 179, 166, 108, 79, 101, 270, 270, 270, 120, 142, 157, 157, 164, 270,
	270, 160, 176, 151, 130, 160, 158, 149, 176, 149, 60, 70, 110, 167,
	168, 158, 173, 0, 0, 270, 149, 203, 164, 151, 150, 147, 149, 142, 270,
	153, 145, 157, 121, 270, 144, 158, 113, 113, 156, 178, 169, 154, 178,
	270, 145, 165, 160, 173, 146, 0, 0, 93, 60, 110, 60, 158, 158, 270, 130,
	158, 153, 151, 136, 85, 0, 153, 142, 165, 108, 162, 0, 0, 270, 270, 130,
	190, 175, 175, 175, 158, 151, 110, 169, 171, 148, 152, 0, 0, 0, 108, 0, 0
};

static VehicleVelo[MAX_MODEL] = // 481, 509, 510
{
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

static VehicleAir[MAX_MODEL] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,
	0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

static VehicleWater[MAX_MODEL] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
	0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

static VehicleMoto[MAX_MODEL] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

static VehicleMods[MAX_MODEL][] =
{
	{0b00000011001111000010011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000110100010011111111010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010001110110010011110000101, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010101111000100011100000011, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000011101110100010011110001010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010100011100000011110001010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010001100010000011101000100, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010001010000000011100111010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010101111010100011100000001, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010001110100010011110000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010001010000000011101111010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010011110100010011111001010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010100000100010011110001010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010001111100000011111000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000011011100000011011100110000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000011000111010010011101110101, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010101111100100011110001000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000010000011101110001, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010100110100000111111001110, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000001100000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000011001110000010011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010001111111000011110010101, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010100111110000011110001100, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000},
	{0b00000010100101100010011111101010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010001101101100011110000010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010100111100001111111001010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b11111100000000000000010000110111, 0b00000000000000000000000000000000, 0b00000010000111000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000011111111100110000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000001101110000111, 0b00000000000000000000000000000001, 0b00000001111000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000011100111100000011111010010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010001111001100011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000110000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000011100011100000011111010110, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000},
	{0b00000010001111010000011100001001, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000001100000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010100111100001111110001010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000},
	{0b00000010100111000000011101111010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000},
	{0b00000010101111010000011101101100, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b11111111111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000111111000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111111111110, 0b00000000000000000000000000000111, 0b11000000000000000000000000000000, 0b00000000000000000010000000000111},
	{0b11111110000000000000011100000000, 0b00000000000000000000000000000011, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000011110000000000, 0b00000000000000000000011000000000},
	{0b11001110000000000000011100000000, 0b11111111100000000000000000000000, 0b00000000111111111111111000000001, 0b00000000000000000000000000000111, 0b00111100000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000001111111100, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000001111000000000000000000, 0b00000000000000000001100000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000011111111110000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000011110000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000001000111, 0b00000000000000000000000000111110, 0b00111100000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000001110000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000001111, 0b00000000000000000000000000000000, 0b00000000000000111100000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000001111000000, 0b11000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010100101100000011111000010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000011000101110010011111110001, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000110000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010010101100010011111110000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000011100111100000011111000010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000}
};

stock ac_tolower(chars)
{
	switch(chars)
	{
		case 'A'..'Z', 192..223: return (chars + 32);
		case 184: return (chars + 16);
	}
	return chars;
}
#if defined _ALS_tolower
	#undef tolower
#else
	#define	_ALS_tolower
#endif
#define tolower ac_tolower

stock ac_strcmp(const acsctring[], const acstr2[], bool:ignor = false, length = cellmax)
{
	new ret = strcmp(acsctring, acstr2, ignor, length);
    if(!ret && (!strlen(acsctring) || !strlen(acstr2))) return 255;
	return ret;
}
#if defined _ALS_strcmp
	#undef strcmp
#else
	#define	_ALS_strcmp
#endif
#define strcmp ac_strcmp

stock ac_GetPlayerFacingAngle(playerid, &Float:ang)
{
    GetPlayerFacingAngle(playerid, ang);
    if(CheckFloat(ang)) ang = 0.0;
    return 1;
}
#if defined _ALS_GetPlayerFacingAngle
    #undef GetPlayerFacingAngle
#else
    #define _ALS_GetPlayerFacingAngle
#endif
#define GetPlayerFacingAngle ac_GetPlayerFacingAngle

stock GetWeaponSlotAC(weap) return WeaponSlots[weap];
stock IsPlayerMobile(playerid) return playerIsMobile{playerid};
stock IsPlayerPausedAC(playerid) return (playerPausedTick[playerid] > 3);
stock GetPlayerPausedAC(playerid) return playerPausedTick[playerid];
stock GetPlayerLastSpeedAC(playerid) return playerSpeedUpdate[playerid];
stock ShowSetAndLogsPanel(playerid) return ShowPlayerDialog(playerid, 6157, DIALOG_STYLE_LIST, "{3E8BFE}AC", "{FFFFFF}1. Настройка\n2. NetStats\n3. MysqlStats\n4. Логи\n5. Статистика", "Выбрать", "Закрыть");

stock ShowConnectPanelAC(playerid) { for(new id; id < PANEL_LINE; id++) TextDrawShowForPlayer(playerid, connectDraw[id]); }
stock HideConnectPanelAC(playerid) { for(new id; id < PANEL_LINE; id++) TextDrawHideForPlayer(playerid, connectDraw[id]); }
stock ShowWarningPanelAC(playerid) { for(new id; id < PANEL_LINE; id++) TextDrawShowForPlayer(playerid, warningDraw[id]); }
stock HideWarningPanelAC(playerid) { for(new id; id < PANEL_LINE; id++) TextDrawHideForPlayer(playerid, warningDraw[id]); }

stock DebugSyncAC(text[])
{
	if(++DebugTime > 20) return;
    new ayear, amonth, aday, ahour, aminute, asecond;
    getdate(ayear, amonth, aday);
	gettime(ahour, aminute, asecond);
	mysql_format(mysql, str, sizeof(str), "INSERT INTO `debug` (`text`, `date`) VALUES ('%e', '%i.%i.%i %i:%i:%i')", text, ayear, amonth, aday, ahour, aminute, asecond);
	mysql_tquery(mysql, str);
}

stock SetVehicleSpeedAC(vehicleid, mph)
{
	new Float:vel_x, Float:vel_y, Float:vel_z, Float:speed, Float:multiple;
	GetVehicleVelocity(vehicleid, vel_x, vel_y, vel_z);
	speed = VectorSize(vel_x, vel_y, vel_z);
	if(speed)
	{
		multiple = (mph / (speed * 170.0));
		return SetVehicleVelocity(vehicleid, (vel_x * multiple), (vel_y * multiple), (vel_z * multiple));
	}
	return 0;
}

stock SetDebugStateLogAC(playerid)
{
	DebugOff = !DebugOff;
	format(str, sizeof(str), "debug: %i", DebugOff);
	SendClientMessage(playerid, -1, str);
}

stock GetPlayerWeaponDataAC(playerid, slot, &weap, &ammo)
{
    ammo = playerAmmo[playerid][slot];
	weap = playerWeapon[playerid][slot];
}

stock GetMaxPassengersAC(vehid)
{
	new model = GetVehicleModel(vehid);
	return (!model) ? (0) : (MaxPassengers[model - 400]);
}

stock IsVeloTransportAC(vehid)
{
	new model = GetVehicleModel(vehid);
	return (!model) ? (0) : (VehicleVelo[model - 400]);
}

stock IsMotoTransportAC(vehid)
{
	new model = GetVehicleModel(vehid);
	return (!model) ? (0) : (VehicleMoto[model - 400]);
}

stock IsAirTransportAC(vehid)
{
	new model = GetVehicleModel(vehid);
	return (!model) ? (0) : (VehicleAir[model - 400]);
}

stock IsWaterTransportAC(vehid)
{
	new model = GetVehicleModel(vehid);
	return (!model) ? (0) : (VehicleWater[model - 400]);
}

stock GetVehicleDriverIDAC(vehid)
{
    if(!GetVehicleModel(vehid)) return INVALID_PLAYER_ID;
	new id = vehicleOccupied[vehid][0];
	return (playerUseSlot{id} && playerVehicleID[id] == vehid && playerState{id} == PLAYER_STATE_DRIVER) ? (id) : (INVALID_PLAYER_ID);
}

stock IsVehicleOccupiedAC(vehid)
{
	if(!GetVehicleModel(vehid)) return 0;
	for(new otherid, id; id < 9; id++)
	{
	    otherid = vehicleOccupied[vehid][id];
		if(playerUseSlot{otherid} && playerVehicleID[otherid] == vehid) return 1;
	}
	return 0;
}

stock IsPlayerInPayNSprayAC(playerid)
{
    for(new id; id < sizeof(SprayPos); id++) if(IsPlayerInRangeOfPoint(playerid, 10.0, SprayPos[id][0], SprayPos[id][1], SprayPos[id][2])) return 1;
	return 0;
}

stock GetPlayerSpeedAC(playerid)
{
	new Float:vel_x, Float:vel_y, Float:vel_z;
	if(playerVehicleID[playerid]) GetVehicleVelocity(playerVehicleID[playerid], vel_x, vel_y, vel_z);
	else GetPlayerVelocity(playerid, vel_x, vel_y, vel_z);
	return floatround(VectorSize(vel_x, vel_y, vel_z) * 170.0);
}

stock IsVehicleInWaterAC(vehid)
{
	new Float:pos_z;
    GetVehiclePos(vehid, pos_z, pos_z, pos_z);
	if(pos_z < 0.0) return 1;
	for(new id; id < sizeof(WaterPos); id++) if(GetVehicleDistanceFromPoint(vehid, WaterPos[id][0], WaterPos[id][1], WaterPos[id][2]) <= WaterPos[id][3]) return 1;
	return 0;
}

stock IsComponentidCompatibleAC(modelid, componentid)
{
	if(!(1000 <= componentid <= 1191)) { if(modelid == 576 && (componentid == 1192 || componentid == 1193)) return 1; }
	else
	{
		componentid -= 1000;
		if(VehicleMods[modelid - 400][componentid >>> 5] & (1 << (componentid & 0b00011111))) return 1;
	}
	return 0;
}

stock GetMonthDaysAC(fyear, fmonth)
{
	switch(fmonth)
	{
		case 1, 3, 5, 7, 8, 10, 12: return 31;
		case 2: return (!(fyear % 4)) ? (29) : (28);
		case 4, 6, 9, 11: return 30;
	}
	return -1;
}

stock ShowLogDialogAC(playerid, const name[], const date[], page = 0)
{
    playerLogDialogPage[playerid] = page;
    strnah(playerLogDialogName[playerid], name);
	strnah(playerLogDialogDate[playerid], date);
	
    format(str, sizeof(str), "SELECT `name`, `reason`, `data` FROM `aclogs` WHERE `type` = '%s' AND `date` = '%s' ORDER BY `id` DESC LIMIT %i, 20", name, date, (page * 20));
	mysql_tquery(mysql, str, "ac_CallBackGetDialog", "ii", playerid, page);
}

function ac_CallBackGetDialog(playerid, page)
{
    new rows = cache_num_rows();
	if(!rows)
	{
	    if(page) ShowLogDialogAC(playerid, playerLogDialogName[playerid], playerLogDialogDate[playerid], (page - 1));
	 	return SendClientMessage(playerid, -1, "Данные не найдены");
	}
	new name[24], reason[32], data[128];
	str = "{FFFFFF}Ник\tПричина\tПрочие\n";
	for(new i; i < rows; i++)
	{
		cache_get_field_content(i, "name", name, mysql, 24);
		cache_get_field_content(i, "reason", reason, mysql, 32);
		cache_get_field_content(i, "data", data, mysql, 128);
        fstrcat(str, "%s\t%s\t%s\n", name, reason, data);
	}
	strcat(str, "-----------------\n");
    strcat(str, "Следующая страница\n");
	if(page) strcat(str, "Предыдущая страница");
 
	format(Astr, sizeof(Astr), "{3E8BFE}Логи, страница: %i", page);
    return ShowPlayerDialog(playerid, 6151, DIALOG_STYLE_TABLIST_HEADERS, Astr, str, "Выбрать", "Назад");
}

stock ShowSettingDialogAC(playerid, page = 0)
{
    str = "{FFFFFF}Ник\tСтатус\n";
	new count, next, tmp;
    for(new id; id < sizeof(CheatName); id++) if(CheatName[id][0])
    {
    	if((page + 1) * MAX_DLIST <= count < ((page + 1) * MAX_DLIST) + MAX_DLIST)
		{
			next++;
			break;
		}
        if((page * MAX_DLIST) <= count < (page * MAX_DLIST) + MAX_DLIST)
		{
		    playerSettingData[playerid][tmp++] = id;
			fstrcat(str, "%s\t%s\n", CheatName[id], CheatStatus[id] ? ("{FF6347}off") : ("{33AA33}on"));
		}
        count++;
	}
	strcat(str, "-----------------\n");
    if(next) strcat(str, "Следующая страница\n");
	if(page) strcat(str, "Предыдущая страница");
	
	playerSettingDialogPage[playerid] = page;
	format(Astr, sizeof(Astr), "{3E8BFE}Настройки, страница: %i", page);
    ShowPlayerDialog(playerid, 6147, DIALOG_STYLE_TABLIST_HEADERS, Astr, str, "Выбрать", "Назад");
}

stock ShowCheatStatsAC(playerid)
{
    str = "{FFFFFF}Имя\tКол.во\n";
	new next, count, page = playerStatsDialogPage[playerid];
    for(new id; id < sizeof(CheatName); id++) if(CheatName[id][0])
    {
        if((page + 1) * MAX_DLIST <= count < ((page + 1) * MAX_DLIST) + MAX_DLIST)
		{
			next++;
			break;
		}
        if((page * MAX_DLIST) <= count < (page * MAX_DLIST) + MAX_DLIST) fstrcat(str, "%s[%s]\t%i\n", CheatName[id], CheatStatus[id] ? ("{FF6347}off{FFFFFF}") : ("{33AA33}on{FFFFFF}"), CheatCount[id]);
		count++;
	}
	strcat(str, "-----------------\n");
    if(next) strcat(str, "Следующая страница\n");
	if(page) strcat(str, "Предыдущая страница");
    ShowPlayerDialog(playerid, 6156, DIALOG_STYLE_TABLIST_HEADERS, "{3E8BFE}Статистика", str, "Выбрать", "Назад");
}

static CheckFloat(Float:data)
{
	if(floatcmp(data, data) != 0 || floatcmp(data, 0x7F800000) == 0 || floatcmp(data, 0xFF800000) == 0) return 1;
	return 0;
}

static AddConnect(playerid, type)
{
    for(new id = (PANEL_LINE - 1); id > 0; id--)
	{
	    connectTime[id] = connectTime[id - 1];
		connectText[id] = connectText[id - 1];
	}
	switch(type)
	{
    	case 0: format(connectText[0], 112, "~g~~h~(connect) ~w~%s(%i)", playerName[playerid], playerid);
		case 1: format(connectText[0], 112, "~y~(disconnect) ~w~%s(%i)", playerName[playerid], playerid);
	}
	connectTime[0] = 30;
 	for(new id; id < PANEL_LINE; id++) TextDrawSetString(connectDraw[id], connectText[id]);
}

static AddWarning(playerid, reason[], type = 0)
{
	#if defined OnPlayerWarningPanelAC
    	if(!OnPlayerWarningPanelAC(playerid, reason)) return;
	#endif
	switch(type)
	{
    	case 0: format(AstrF, sizeof(AstrF), "~r~~h~~h~~h~(warning) ~w~%s(%i) reason: %s", playerName[playerid], playerid, reason);
    	case 1: format(AstrF, sizeof(AstrF), "~g~~h~(kick) ~w~%s(%i) reason: %s", playerName[playerid], playerid, reason);
	}
	for(new id; id < PANEL_LINE; id++) if(!strcmp(warningText[id], AstrF))
	{
	    warningTime[id] = 30;
		return;
	}
 	for(new id = (PANEL_LINE - 1); id > 0; id--)
	{
	    warningTime[id] = warningTime[id - 1];
		warningText[id] = warningText[id - 1];
	}
	warningTime[0] = 30;
	strnah(warningText[0], AstrF);
 	for(new id; id < PANEL_LINE; id++) TextDrawSetString(warningDraw[id], warningText[id]);
 	if(!type) LogCheat(playerid, "panellog", reason);
}

static HideDamage(playerid) if(playerOldTargetID[playerid] != INVALID_PLAYER_ID)
{
    playerOldTargetID[playerid] = INVALID_PLAYER_ID;
    TextDrawHideForPlayer(playerid, DmgHealFon);
	PlayerTextDrawHide(playerid, DmgHealProgres[playerid][0]);
	PlayerTextDrawHide(playerid, DmgHealProgres[playerid][1]);
}

static ShowDamage(playerid, hitid)
{
	PlayerPlaySound(playerid, 17802, 0.0, 0.0, 0.0);
	PlayerPlaySound(hitid, 17802, 0.0, 0.0, 0.0);
	playerTargetTime{playerid} = 5;
	
	if(playerOldTargetID[playerid] != hitid)
	{
	    playerOldTargetID[playerid] = hitid;
        TextDrawShowForPlayer(playerid, DmgHealFon);
		PlayerTextDrawSetString(playerid, DmgHealProgres[playerid][1], playerName[hitid]);
	}
	if(playerArmour[hitid] <= 0.0)
	{
	    PlayerTextDrawColor(playerid, DmgHealProgres[playerid][1], -1);
		PlayerTextDrawBoxColor(playerid, DmgHealProgres[playerid][0], -16776961);
		if(playerHealth[hitid] > 100.0) PlayerTextDrawTextSize(playerid, DmgHealProgres[playerid][0], ((265.076629 - 5.0) + (100.0 / 100.0) * 109.862549), 0.0);
		else PlayerTextDrawTextSize(playerid, DmgHealProgres[playerid][0], ((265.076629 - 5.0) + (playerHealth[hitid] / 100.0) * 109.862549), 0.0);
	}
	else
	{
	    PlayerTextDrawColor(playerid, DmgHealProgres[playerid][1], -2139062017);
		PlayerTextDrawBoxColor(playerid, DmgHealProgres[playerid][0], -1);
		if(playerArmour[hitid] > 100.0) PlayerTextDrawTextSize(playerid, DmgHealProgres[playerid][0], ((265.076629 - 5.0) + (100.0 / 100.0) * 109.862549), 0.0);
		else PlayerTextDrawTextSize(playerid, DmgHealProgres[playerid][0], ((265.076629 - 5.0) + (playerArmour[hitid] / 100.0) * 109.862549), 0.0);
	}
	PlayerTextDrawShow(playerid, DmgHealProgres[playerid][0]);
	PlayerTextDrawShow(playerid, DmgHealProgres[playerid][1]);
}

static LogCheat(playerid, const fname[], const reason[])
{
    if(++LogsTick > 20) return;
    new ayear, amonth, aday, ahour, aminute, asecond;
    getdate(ayear, amonth, aday);
	gettime(ahour, aminute, asecond);
	mysql_format(mysql, str, sizeof(str), "INSERT INTO `aclogs` (`type`, `date`, `name`, `reason`, `data`) VALUES ('%s', '%i-%i-%i', '%e', '%s', '%i:%i:%i | %s | %i | %i | %f')", fname, aday, amonth, ayear, playerName[playerid], reason, ahour, aminute, asecond, playerIP[playerid], playerState{playerid}, GetPlayerPing(playerid), NetStats_PacketLossPercent(playerid));
	mysql_tquery(mysql, str);
}

static CheatRemove(playerid, code) if(!CheatStatus[code])
{
    #if defined OnPlayerRemoveAC
		if(!OnPlayerRemoveAC(playerid, code, CheatName[code])) return;
	#endif
	CheatCount[code]++;
 	ac_RemovePlayerFromVehicle(playerid);
	AddWarning(playerid, CheatName[code]);
}

static CheatSpawn(playerid, code) if(!CheatStatus[code])
{
    #if defined OnPlayerSpawnAC
		if(!OnPlayerSpawnAC(playerid, code, CheatName[code])) return;
	#endif
	CheatCount[code]++;
	ac_SpawnPlayer(playerid);
	AddWarning(playerid, CheatName[code]);
}

static CheatDetect(playerid, code, type = 0) if(!playerKickTimer[playerid] && IsPlayerConnected(playerid) && !playerIsNPC{playerid})
{
	
		if(code != AC_PUBFLOOD) strnah(Astr, CheatName[code]);
		else format(Astr, sizeof(Astr), "%s%i", CheatName[AC_PUBFLOOD], type);

		if(DebugOff)
		{
		    format(AstrF, sizeof(AstrF), "CheatDetect | %i, %s", code, Astr);
		    LogCheat(playerid, "debug", AstrF);
		}
		if(!CheatStatus[code])
		{
		    CheatCount[code]++;
		    #if defined OnPlayerCheatAC
				if(!OnPlayerCheatAC(playerid, code, Astr)) return;
			#endif
			AddWarning(playerid, Astr, 1);
			new ping = GetPlayerPing(playerid);

			format(sctring, sizeof(sctring), "Уважаемый %s\n\n\t\t\tВы были кикнуты по подозрению в читерстве code: %d (%s)\n\t\t\t Вы можете сделать скриншот клавишей F8 и обратится на форум forum.truee-russia.ru",GetPlayerNameEx(playerid), code, CheatName[code]);
			ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "АНТИЧИТ", sctring, "Okey", "");

			playerKickTimer[playerid] = SetTimerEx("ac_KickTimer", (ping < 1000) ? (ping + 100) : (1000), 0, "i", playerid);
			LogCheat(playerid, "kicklog", Astr);
		}
}

static PublicFlood(playerid, id)
{
	new tick = GetTickCount();
    if((tick - playerLastPublicTick[playerid][id]) < PublicMaxTick[id]) { if(++playerWarningPublic[playerid][id] > 10) CheatDetect(playerid, AC_PUBFLOOD, id); }
	else playerWarningPublic[playerid][id] = 0;
	
	if((tick - playerLastPublicTick[playerid][27]) < PublicMaxTick[27]) { if(++playerWarningPublic[playerid][27] > 10) CheatDetect(playerid, AC_CROSFLOOD); }
	else playerWarningPublic[playerid][27] = 0;
	
	playerLastPublicTick[playerid][id] =
	playerLastPublicTick[playerid][27] = tick;
}

static AddRecon(playerid)
{
    foreach(PlReconPool, id) if(connblockTime[id] && !strcmp(connblockData[id], playerIP[playerid]))
    {
        connblockTime[id] = 5;
        return;
    }
    new tmp = Iter_Free(PlReconPool);
    if(tmp != -1)
    {
        connblockTime[tmp] = 5;
		strnah(connblockData[tmp], playerIP[playerid]);
		Iter_Add(PlReconPool, tmp);
	}
}

static CheckRepair(playerid, vehid)
{
    new Float:heal;
	GetVehicleHealth(vehid, heal);
	if(!playerInModShop{playerid} && (heal > vehicleHealth[vehid]) && !IsPlayerInPayNSprayAC(playerid))
	{
	    SetVehicleHealth(vehid, vehicleHealth[vehid]);
		if(++playerWarningReapir{playerid} > 10) CheatRemove(playerid, AC_REPAIR);
	}
	else
	{
        vehicleHealth[vehid] = heal;
        playerWarningReapir{playerid} = 0;
	}
}

static FastUpdate(playerid, tick)
{
    new speed = playerSpeedUpdate[playerid] = GetPlayerSpeedAC(playerid);
    if(speed > 300) CheatDetect(playerid, AC_SPEED0);
	if(playerState{playerid} == PLAYER_STATE_DRIVER) SpeedDiff(playerid, tick, speed);
}

static CheckTeleport(playerid, tick, gstate, &Float:pos_x, &Float:pos_y, &Float:pos_z, &Float:dist)
{
	GetPlayerPos(playerid, pos_x, pos_y, pos_z);
	dist = VectorSize((playerPosX[playerid] - pos_x), (playerPosY[playerid] - pos_y), (playerPosZ[playerid] - pos_z));
	
	if(!playerCheckFly{playerid} && (tick - playerLagFly[playerid]) < 2000 && dist > 0.0)
 	{
 	    if(dist > 160.0)
	 	{
		 	switch(gstate)
	 	    {
	 	        case PLAYER_STATE_ONFOOT, PLAYER_STATE_PASSENGER: if(!CheatStatus[AC_TP1])
				{
				 	CheatCount[AC_TP1]++;
				 	ac_SetPlayerPos(playerid, playerPosX[playerid], playerPosY[playerid], playerPosZ[playerid]);
		 		}
	 	        case PLAYER_STATE_DRIVER: if(!CheatStatus[AC_TP0])
	 	        {
			  		CheatCount[AC_TP0]++;
			  		ac_SetVehiclePos(playerVehicleID[playerid], playerPosX[playerid], playerPosY[playerid], playerPosZ[playerid]);
			  	}
			}
		}
		if(dist > 20.0 && floatround(dist) > GetPlayerSpeedAC(playerid)) { if(++playerWarningFly{playerid} > 3) CheatDetect(playerid, AC_FLY); }
		else playerWarningFly{playerid} = 0;
	}
	playerPosX[playerid] = pos_x;
	playerPosY[playerid] = pos_y;
	playerPosZ[playerid] = pos_z;
}

static SecondUpdate(playerid, tick)
{
    new gstate = playerState{playerid};
	if(gstate != PLAYER_STATE_NONE && gstate != PLAYER_STATE_SPECTATING)
    {
        new Float:pos_x, Float:pos_y, Float:pos_z, Float:dist;
        CheckTeleport(playerid, tick, gstate, pos_x, pos_y, pos_z, dist);

		if(!playerCheckHPnARM{playerid})
		{
			new Float:heal;
			GetPlayerHealth(playerid, heal);
			if(playerHealth[playerid] < heal)
			{
			    SetPlayerHealth(playerid, playerHealth[playerid]);
			    if(++playerWarningHealth{playerid} > 10) CheatSpawn(playerid, AC_HEALTH);
			}
			else if(playerHealth[playerid] > heal)
			{
				playerHealth[playerid] = heal;
				playerWarningHealth{playerid} = 0;
			}
			else playerWarningHealth{playerid} = 0;

			new Float:arm;
			GetPlayerArmour(playerid, arm);
			if(playerArmour[playerid] < arm)
			{
			    SetPlayerArmour(playerid, playerArmour[playerid]);
			    if(++playerWarningHealth{playerid} > 10) CheatSpawn(playerid, AC_ARMOUR);
			}
			else if(playerArmour[playerid] > arm)
			{
				playerArmour[playerid] = arm;
				playerWarningHealth{playerid} = 0;
			}
			else playerWarningHealth{playerid} = 0;
		}
	    new weap, ammo;
	    for(new i; i < 13; i++)
	    {
	  		GetPlayerWeaponData(playerid, i, weap, ammo);
	  		if(weap && ammo)
	  		{
	  		    if(ammo < playerAmmo[playerid][i]) playerAmmo[playerid][i] = ammo;
	  		    else if(ammo > playerAmmo[playerid][i]) SetPlayerAmmo(playerid, weap, playerAmmo[playerid][i]);
			}
		}
		if(!CheatStatus[AC_NOPPOS] && playerCheckNop{playerid} == 1 && !IsPlayerInRangeOfPoint(playerid, 100.0, playerCheckPosX[playerid], playerCheckPosY[playerid], playerCheckPosZ[playerid]))
		{
		    if(playerWarningNoppos{playerid} > 100) CheatDetect(playerid, AC_NOPPOSK);
	    	else playerWarningNoppos{playerid} += 10;

		    CheatCount[AC_NOPPOS]++;
		    ac_SetPlayerPos(playerid, playerCheckPosX[playerid], playerCheckPosY[playerid], playerCheckPosZ[playerid]);
		}
		if(playerVehicleID[playerid])
		{
		    if(gstate == PLAYER_STATE_DRIVER) CheckRepair(playerid, playerVehicleID[playerid]);
			if(playerRemvVeh{playerid}) { if(--playerRemvVeh{playerid} <= 0) CheatDetect(playerid, AC_VEHREMOVE); }
		}
		else
		{
		    switch(GetPlayerAnimationIndex(playerid))
		    {
		        case 157, 159, 161: if(dist > 20.0)
				{
				    if(playerCheckFlyAll{playerid} >= 10) CheatSpawn(playerid, AC_FLYVELO);
		    		else playerCheckFlyAll{playerid} += 5;
				}
		        case 1058: if(dist > 20.0)
				{
				    if(playerCheckFlyAll{playerid} >= 10) CheatSpawn(playerid, AC_FLYMOP);
		    		else playerCheckFlyAll{playerid} += 5;
				}
	         	case 958: if(dist > 20.0 && playerWeaponID[playerid] != 46)
				{
				    if(playerCheckFlyAll{playerid} >= 10) CheatSpawn(playerid, AC_FLYSURF);
		    		else playerCheckFlyAll{playerid} += 5;
				}
				case 1130: if(dist > 20.0 && (pos_z - playerFlyLastZ[playerid]) > 0.5)
				{
				    if(playerCheckFlyAll{playerid} >= 10) CheatSpawn(playerid, AC_FLYMOPFIX);
		    		else playerCheckFlyAll{playerid} += 5;
				}
		    }
		    playerRemvVeh{playerid} = 0;
    	}
		playerFlyLastZ[playerid] = pos_z;
	}
    if(playerCheckNop{playerid}) playerCheckNop{playerid}--;
	if(playerCheckFly{playerid}) playerCheckFly{playerid}--;
	if(playerEnterCount{playerid}) playerEnterCount{playerid}--;
	if(playerCheckHPnARM{playerid}) playerCheckHPnARM{playerid}--;
	if(playerCheckFlyAll{playerid}) playerCheckFlyAll{playerid}--;
	if(playerDescentTime{playerid}) playerDescentTime{playerid}--;
	if(playerFreezeSpeed{playerid}) playerFreezeSpeed{playerid}--;
	if(playerWarningSpeed{playerid}) playerWarningSpeed{playerid}--;
	if(playerWarningSlapp{playerid}) playerWarningSlapp{playerid}--;
	if(playerWarningPacktp{playerid}) playerWarningPacktp{playerid}--;
	if(playerWarningNoppos{playerid}) playerWarningNoppos{playerid}--;
	if(playerOldTargetID[playerid] != INVALID_PLAYER_ID) { if(--playerTargetTime{playerid} <= 0) HideDamage(playerid); }
}
	
function ac_MainTimer()
{
	for(new id; id < PANEL_LINE; id++)
	{
		if(warningTime[id] > 0)
		{
		    warningTime[id] -= 5;
			if(warningTime[id] <= 0)
			{
				warningTime[id] = 0;
			    warningText[id] = "_";
				TextDrawSetString(warningDraw[id], "_");
			}
		}
		if(connectTime[id] > 0)
		{
		    connectTime[id] -= 5;
			if(connectTime[id] <= 0)
			{
				connectTime[id] = 0;
			    connectText[id] = "_";
				TextDrawSetString(connectDraw[id], "_");
			}
		}
	}
	foreach(PlReconPool, id) if(connblockTime[id] > 0)
	{
	    connblockTime[id] -= 5;
		if(connblockTime[id] <= 0)
		{
		    connblockTime[id] = 0;
			SetTimerEx("ac_DellRecon", 0, 0, "i", id);
		}
	}
	LogsTick =
	DebugTime = 0;
	#if defined OnGameModeUpdate5000AC
	    OnGameModeUpdate5000AC();
	#endif
}

function ac_MainUpdate200(playerid)
{
	new tick = GetTickCount();
	if(!IsPlayerPausedAC(playerid)) FastUpdate(playerid, tick);
	playerLagSpeed[playerid] = tick;
	#if defined OnPlayerUpdate200AC
	    OnPlayerUpdate200AC(playerid);
	#endif
}

function ac_MainUpdate1000(playerid)
{
    new tick = GetTickCount();
    if(++playerPausedTick[playerid] <= 3) SecondUpdate(playerid, tick);
    playerLagFly[playerid] = tick;
    #if defined OnPlayerUpdate1000AC
        OnPlayerUpdate1000AC(playerid);
	#endif
}

function ac_MainUpdate5000(playerid)
{
    new ping = GetPlayerPing(playerid);
    if(ping != INVALID_PLAYER_ID)
    {
		playerPing[playerid] = ping;
		playerSleep{playerid} = (floatround(ping / 100) + 3);
		if(playerSleep{playerid} < 3) playerSleep{playerid} = 3;
		else if(playerSleep{playerid} > 15) playerSleep{playerid} = 15;

		if(ping > MAX_PING) { if(++playerWarningPing{playerid} > 10) CheatDetect(playerid, AC_PING); }
		else playerWarningPing{playerid} = 0;
	}
    playerVehicleID[playerid] = GetPlayerVehicleID(playerid);
    if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK) CheatDetect(playerid, AC_JETPACK);
	#if defined OnPlayerUpdate5000AC
        OnPlayerUpdate5000AC(playerid);
	#endif
}

function ac_DellRecon(id)
{
	Iter_Remove(PlReconPool, id);
}

function ac_KickTimer(playerid)
{
    Kick(playerid);
    playerKickTimer[playerid] = 0;
}

function ac_SpawnTimer(playerid)
{
	playerSpawn{playerid} =
	playerSpawnTimer[playerid] = 0;
}

function ac_DeathRespawn(playerid)
{
    playerRetardKill{playerid} =
    playerDeathTimer[playerid] = 0;
    ac_SetPlayerHealth(playerid, 100.0);
	ac_SetPlayerArmour(playerid, 0.0);
    SetPlayerVirtualWorld(playerid, 10444);
    TogglePlayerControllable(playerid, 1);
	ac_SpawnPlayer(playerid);
}

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
    if(DebugOff)
	{
 		format(AstrF, sizeof(AstrF), "OnPlayerGiveDamage | %i, %f, %i, %i", damagedid, amount, weaponid, bodypart);
	    LogCheat(playerid, "debug", AstrF);
	}
    if(!(0 <= weaponid <= 54) || amount <= 0.0 || !IsPlayerConnected(damagedid) || playerIsNPC{damagedid}
	|| IsPlayerPausedAC(playerid) || IsPlayerPausedAC(damagedid) || !IsPlayerStreamedIn(playerid, damagedid)
    || !(0.2 <= GetPlayerDistanceFromPoint(damagedid, playerPosX[playerid], playerPosY[playerid], playerPosZ[playerid]) <= 5.0)) return 0;
	#if defined ac_OnPlayerGiveDamage
		return ac_OnPlayerGiveDamage(playerid, damagedid, amount, weaponid, bodypart);
	#else
	    return 0;
	#endif
}
#if defined _ALS_OnPlayerGiveDamage
    #undef OnPlayerGiveDamage
#else
    #define _ALS_OnPlayerGiveDamage
#endif
#if defined ac_OnPlayerGiveDamage
	forward ac_OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart);
#endif
#define	OnPlayerGiveDamage ac_OnPlayerGiveDamage

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
    if(DebugOff)
	{
 		format(AstrF, sizeof(AstrF), "OnPlayerTakeDamage | %i, %f, %i, %i", issuerid, amount, weaponid, bodypart);
	    LogCheat(playerid, "debug", AstrF);
	}
	if(!(0 <= weaponid <= 54) || amount <= 0.0 || !IsPlayerConnected(playerid) || playerIsNPC{playerid}) return 0;
	if(issuerid != INVALID_PLAYER_ID && IsPlayerConnected(issuerid))
	{
	    if(!IsPlayerStreamedIn(playerid, issuerid) || IsPlayerPausedAC(playerid) || IsPlayerPausedAC(issuerid)
        || !(0.2 <= GetPlayerDistanceFromPoint(playerid, playerPosX[issuerid], playerPosY[issuerid], playerPosZ[issuerid]) <= 5.0)) return 0;
	}
	#if defined ac_OnPlayerTakeDamage
		return ac_OnPlayerTakeDamage(playerid, issuerid, amount, weaponid, bodypart);
	#else
	    return 0;
	#endif
}
#if defined _ALS_OnPlayerTakeDamage
    #undef OnPlayerTakeDamage
#else
    #define _ALS_OnPlayerTakeDamage
#endif
#if defined ac_OnPlayerTakeDamage
	forward ac_OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart);
#endif
#define	OnPlayerTakeDamage ac_OnPlayerTakeDamage

stock ac_SetSpawnInfo(playerid, team, skin, Float:pos_x, Float:pos_y, Float:pos_z, Float:pos_r, weap1, ammo1, weap2, ammo2, weap3, ammo3)
{
	playerSpawnPosX[playerid] = pos_x;
	playerSpawnPosY[playerid] = pos_y;
	playerSpawnPosZ[playerid] = pos_z;
	return SetSpawnInfo(playerid, team, skin, pos_x, pos_y, pos_z, pos_r, weap1, ammo1, weap2, ammo2, weap3, ammo3);
}
#if defined _ALS_SetSpawnInfo
    #undef SetSpawnInfo
#else
    #define _ALS_SetSpawnInfo
#endif
#define	SetSpawnInfo ac_SetSpawnInfo

stock ac_SpawnPlayer(playerid)
{
    FreezeFly(playerid, 0, playerSpawnPosX[playerid], playerSpawnPosY[playerid], playerSpawnPosZ[playerid]);
    playerSpawn{playerid} = 1;
    if(playerSpawnTimer[playerid])
	{
		KillTimer(playerSpawnTimer[playerid]);
		playerSpawnTimer[playerid] = 0;
	}
	return SpawnPlayer(playerid);
}
#if defined _ALS_SpawnPlayer
    #undef SpawnPlayer
#else
    #define _ALS_SpawnPlayer
#endif
#define	SpawnPlayer ac_SpawnPlayer

stock ac_SetPlayerAmmo(playerid, weap, ammo)
{
   	new slot = WeaponSlots[weap];
   	if(slot != -1) playerAmmo[playerid][slot] = ammo;
	return SetPlayerAmmo(playerid, weap, ammo);
}
#if defined _ALS_SetPlayerAmmo
    #undef SetPlayerAmmo
#else
    #define _ALS_SetPlayerAmmo
#endif
#define	SetPlayerAmmo ac_SetPlayerAmmo

stock ac_GivePlayerWeapon(playerid, weap, ammo)
{
   	new slot = WeaponSlots[weap];
   	if(slot != -1)
   	{
	   	playerAmmo[playerid][slot] += ammo;
	   	playerWeapon[playerid][slot] = weap;
   	}
	return GivePlayerWeapon(playerid, weap, ammo);
}
#if defined _ALS_GivePlayerWeapon
    #undef GivePlayerWeapon
#else
    #define _ALS_GivePlayerWeapon
#endif
#define	GivePlayerWeapon ac_GivePlayerWeapon

stock ac_ResetPlayerWeapons(playerid)
{
   	for(new id; id < 13; id++)
	{
		playerAmmo[playerid][id] =
		playerWeapon[playerid][id] = 0;
	}
	return ResetPlayerWeapons(playerid);
}
#if defined _ALS_ResetPlayerWeapons
    #undef ResetPlayerWeapons
#else
    #define _ALS_ResetPlayerWeapons
#endif
#define	ResetPlayerWeapons ac_ResetPlayerWeapons

stock ac_TogglePlayerSpectating(playerid, type)
{
	if(!type)
	{
     	FreezeFly(playerid, 0, playerSpawnPosX[playerid], playerSpawnPosY[playerid], playerSpawnPosZ[playerid]);
	    playerSpawn{playerid} = 1;
	    if(playerSpawnTimer[playerid])
		{
			KillTimer(playerSpawnTimer[playerid]);
			playerSpawnTimer[playerid] = 0;
		}
	}
	else
	{
	    playerCheckHPnARM{playerid} = playerSleep{playerid};
	    playerHealth[playerid] = 100.0;
 		playerArmour[playerid] = 0.0;
	}
	return TogglePlayerSpectating(playerid, type);
}
#if defined _ALS_TogglePlayerSpectating
    #undef TogglePlayerSpectating
#else
    #define _ALS_TogglePlayerSpectating
#endif
#define	TogglePlayerSpectating ac_TogglePlayerSpectating

stock ac_RemovePlayerFromVehicle(playerid)
{
    playerRemvVeh{playerid} = (playerSleep{playerid} + 5);
	new Float:pos_x, Float:pos_y, Float:pos_z;
	GetPlayerPos(playerid, pos_x, pos_y, pos_z);
    return SetPlayerPos(playerid, pos_x, pos_y, (pos_z + 2.0));
}
#if defined _ALS_RemovePlayerFromVehicle
    #undef RemovePlayerFromVehicle
#else
    #define _ALS_RemovePlayerFromVehicle
#endif
#define	RemovePlayerFromVehicle ac_RemovePlayerFromVehicle

stock ac_SetPlayerSkin(playerid, skinid)
{
	if(!CheatStatus[AC_CRASH11] && (GetTickCount() - playerEnterTime[playerid]) < (playerSleep{playerid} * 1000))
	{
	    CheatCount[AC_CRASH11]++;
		return 0;
	}
	return SetPlayerSkin(playerid, skinid);
}
#if defined _ALS_SetPlayerSkin
    #undef SetPlayerSkin
#else
    #define _ALS_SetPlayerSkin
#endif
#define	SetPlayerSkin ac_SetPlayerSkin

stock ac_SetPlayerHealth(playerid, Float:heal)
{
	if(heal > 0.0)
	{
	    playerCheckHPnARM{playerid} = playerSleep{playerid};
		playerHealth[playerid] = heal;
		SetPlayerHealth(playerid, heal);
	}
	else DeathSystem(playerid, INVALID_PLAYER_ID, 53);
	return 1;
}
#if defined _ALS_SetPlayerHealth
    #undef SetPlayerHealth
#else
    #define _ALS_SetPlayerHealth
#endif
#define	SetPlayerHealth ac_SetPlayerHealth

stock ac_SetPlayerArmour(playerid, Float:arm)
{
    playerCheckHPnARM{playerid} = playerSleep{playerid};
 	playerArmour[playerid] = arm;
	return SetPlayerArmour(playerid, arm);
}
#if defined _ALS_SetPlayerArmour
    #undef SetPlayerArmour
#else
    #define _ALS_SetPlayerArmour
#endif
#define	SetPlayerArmour ac_SetPlayerArmour

stock ac_PutPlayerInVehicle(playerid, vehid, seatid)
{
	playerEnter[playerid] = vehid;
	playerEnterTime[playerid] = (GetTickCount() - 400);

	FreezeFly(playerid);
	playerPutInVeh{playerid} = PutPlayerInVehicle(playerid, vehid, seatid);
    return playerPutInVeh{playerid};
}
#if defined _ALS_PutPlayerInVehicle
    #undef PutPlayerInVehicle
#else
    #define _ALS_PutPlayerInVehicle
#endif
#define	PutPlayerInVehicle ac_PutPlayerInVehicle

stock ac_SetPlayerPos(playerid, Float:pos_x, Float:pos_y, Float:pos_z)
{
    FreezeFly(playerid, 0, pos_x, pos_y, pos_z);
	return SetPlayerPos(playerid, pos_x, pos_y, pos_z);
}
#if defined _ALS_SetPlayerPos
    #undef SetPlayerPos
#else
    #define _ALS_SetPlayerPos
#endif
#define	SetPlayerPos ac_SetPlayerPos

stock ac_SetPlayerPosFindZ(playerid, Float:pos_x, Float:pos_y, Float:pos_z)
{
    FreezeFly(playerid, 0, pos_x, pos_y, pos_z);
	return SetPlayerPosFindZ(playerid, pos_x, pos_y, pos_z);
}
#if defined _ALS_SetPlayerPosFindZ
    #undef SetPlayerPosFindZ
#else
    #define _ALS_SetPlayerPosFindZ
#endif
#define	SetPlayerPosFindZ ac_SetPlayerPosFindZ

stock ac_SetVehicleVelocity(vehid, Float:vel_x, Float:vel_y, Float:vel_z)
{
    for(new id; id < 9; id++) if(playerVehicleID[vehicleOccupied[vehid][id]] == vehid) playerFreezeSpeed{vehicleOccupied[vehid][id]} = 30;
 	return SetVehicleVelocity(vehid, vel_x, vel_y, vel_z);
}
#if defined _ALS_SetVehicleVelocity
    #undef SetVehicleVelocity
#else
    #define _ALS_SetVehicleVelocity
#endif
#define	SetVehicleVelocity ac_SetVehicleVelocity

stock ac_SetVehiclePos(vehid, Float:pos_x, Float:pos_y, Float:pos_z)
{
    foreach(Player, otherid) if(playerVehicleID[otherid] == vehid) FreezeFly(otherid, 0, pos_x, pos_y, pos_z);
	return SetVehiclePos(vehid, pos_x, pos_y, pos_z);
}
#if defined _ALS_SetVehiclePos
    #undef SetVehiclePos
#else
    #define _ALS_SetVehiclePos
#endif
#define	SetVehiclePos ac_SetVehiclePos

stock ac_RepairVehicle(vehid)
{
    vehicleHealth[vehid] = 1000.0;
	return RepairVehicle(vehid);
}
#if defined _ALS_RepairVehicle
    #undef RepairVehicle
#else
    #define _ALS_RepairVehicle
#endif
#define	RepairVehicle ac_RepairVehicle

stock ac_SetVehicleHealth(vehid, Float:heal)
{
    vehicleHealth[vehid] = heal;
	return SetVehicleHealth(vehid, heal);
}
#if defined _ALS_SetVehicleHealth
    #undef SetVehicleHealth
#else
    #define _ALS_SetVehicleHealth
#endif
#define	SetVehicleHealth ac_SetVehicleHealth

/*stock ac_CreateVehicle(model, Float:pos_x, Float:pos_y, Float:pos_z, Float:pos_r, col1, col2, respawn, siren = 0)
{
	new vehid = CreateVehicle(model, pos_x, pos_y, pos_z, pos_r, col1, col2, respawn, siren);
    if(vehid != INVALID_VEHICLE_ID) vehicleHealth[vehid] = 1000.0;
	return vehid;
}
#if defined _ALS_CreateVehicle
    #undef CreateVehicle
#else
    #define _ALS_CreateVehicle
#endif
#define	CreateVehicle ac_CreateVehicle

stock ac_AddStaticVehicle(model, Float:pos_x, Float:pos_y, Float:pos_z, Float:pos_r, col1, col2)
{
	new vehid = AddStaticVehicle(model, pos_x, pos_y, pos_z, pos_r, col1, col2);
	if(vehid != INVALID_VEHICLE_ID) vehicleHealth[vehid] = 1000.0;
	return vehid;
}
#if defined _ALS_AddStaticVehicle
    #undef AddStaticVehicle
#else
    #define _ALS_AddStaticVehicle
#endif
#define	AddStaticVehicle ac_AddStaticVehicle

stock ac_AddStaticVehicleEx(model, Float:pos_x, Float:pos_y, Float:pos_z, Float:pos_r, col1, col2, respawn, siren = 0)
{
	new vehid = AddStaticVehicleEx(model, pos_x, pos_y, pos_z, pos_r, col1, col2, respawn, siren);
	if(vehid != INVALID_VEHICLE_ID) vehicleHealth[vehid] = 1000.0;
	return vehid;
}
#if defined _ALS_AddStaticVehicleEx
    #undef AddStaticVehicleEx
#else
    #define _ALS_AddStaticVehicleEx
#endif
#define	AddStaticVehicleEx ac_AddStaticVehicleEx
*/
static FreezeFly(playerid, type = 1, Float:pos_x = 0.0, Float:pos_y = 0.0, Float:pos_z = 0.0)
{
    if(!type)
	{
		playerCheckNop{playerid} = playerSleep{playerid};
		playerCheckPosX[playerid] = pos_x;
	    playerCheckPosY[playerid] = pos_y;
	    playerCheckPosZ[playerid] = pos_z;
  	}
  	playerCheckFly{playerid} = playerSleep{playerid};
  	playerWarningFly{playerid} = 0;
}

static CheckPack(playerid, Float:pos_x, Float:pos_y, Float:pos_z)
{
    if(!playerCheckFly{playerid})
    {
        new Float:dist = VectorSize((playerPacketX[playerid] - pos_x), (playerPacketY[playerid] - pos_y), (playerPacketZ[playerid] - pos_z));
        if(dist > 10.0)
		{
		    if(playerWarningPacktp{playerid} > 30) CheatDetect(playerid, AC_FASTTP);
			else playerWarningPacktp{playerid} += 10;
		}
  	}
  	playerPacketX[playerid] = pos_x;
  	playerPacketY[playerid] = pos_y;
  	playerPacketZ[playerid] = pos_z;
}

static SpeedDiff(playerid, tick, speed)
{
	new Float:pos_z, vehid = playerVehicleID[playerid];
 	GetPlayerPos(playerid, pos_z, pos_z, pos_z);
	if(vehid && !playerFreezeSpeed{playerid} && !IsAirTransportAC(vehid) && (tick - playerLagSpeed[playerid]) < 400)
	{
		if((pos_z - playerOspLastPosZ[playerid]) < -1.0) playerDescentTime{playerid} = 10;
		else { if(!playerDescentTime{playerid})
		{
		    new model = GetVehicleModel(vehid);
		    if(model && !CheatStatus[AC_OVERSPEED])
		    {
			    new count = (VehicleMaxSpeed[model - 400] + 20);
			    if(IsMotoTransportAC(vehid) || IsVeloTransportAC(vehid)) count += 100;
			 	if(speed > count)
		 		{
		 		    if(playerWarningSpeed{playerid} > 20) CheatDetect(playerid, AC_OVERSPEED);
					else playerWarningSpeed{playerid} += 10;
		 		
				 	AddWarning(playerid, CheatName[AC_OVERSPEED]);
				 	SetVehicleSpeedAC(vehid, count);
			 	}
			}
			new diff = (speed - playerLastSpeed0[playerid]);
            if(diff > 70) CheatDetect(playerid, AC_DSPEED2);
			else if(diff > 35)
			{
			    if(playerWarningSpeed{playerid} > 20) CheatDetect(playerid, AC_DSPEED1);
				else playerWarningSpeed{playerid} += 10;

			    AddWarning(playerid, CheatName[AC_DSPEED1]);
			    SetVehicleSpeedAC(vehid, playerLastSpeed0[playerid]);
			}
		}}
	}
	playerLastSpeed0[playerid] = speed;
 	playerOspLastPosZ[playerid] = pos_z;
}

static FastBullet(playerid, weap)
{
	new count = WeaponReload[weap - 22], tick = GetTickCount(), diff = (tick - playerLastShot[playerid]); playerLastShot[playerid] = tick;
	if(playerVehicleID[playerid])
	{
		switch(weap)
		{
			case 25, 33, 34: count = 1000;
			case 26: count = 2000;
		    default: count = 120;
	    }
   	}
 	if(!CheatStatus[AC_RAPID] && diff < count)
 	{
 	    CheatCount[AC_RAPID]++;
 	    return 0;
 	}
	return 1;
}

IPacket:212(playerid, BitStream:bs) // SPECTATOR_SYNC
{
	new data[PR_SpectatingSync];
	BS_IgnoreBits(bs, 8);
	BS_ReadSpectatingSync(bs, data);
    for(new i; i < 3; i++) if(CheckFloat(data[PR_position][i]) || floatabs(data[PR_position][i]) > 20000.0) return 0;
	return 1;
}

IPacket:210(playerid, BitStream:bs) // TRAILER_SYNC
{
	new data[PR_TrailerSync];
	BS_IgnoreBits(bs, 8);
	BS_ReadTrailerSync(bs, data);
	for(new id; id < 3; id++)
	{
	    if(CheckFloat(data[PR_position][id]) || floatabs(data[PR_position][id]) > 20000.0
	    || CheckFloat(data[PR_quaternion][id]) || floatabs(data[PR_quaternion][id]) > 1.0
	    || CheckFloat(data[PR_velocity][id]) || floatabs(data[PR_velocity][id]) > 100.0
		|| CheckFloat(data[PR_angularVelocity][id]) || floatabs(data[PR_angularVelocity][id]) > 1.0) return 0;
	}
	if(!CheatStatus[AC_VEHTP1])
	{
	    new Float:pos_x, Float:pos_y, Float:pos_z;
	    GetVehiclePos(data[PR_trailerId], pos_x, pos_y, pos_z);
	    if(GetPlayerDistanceFromPoint(playerid, pos_x, pos_y, pos_z) > 15.0)
	    {
		    CheatCount[AC_VEHTP1]++;
			return 0;
		}
	}
	return 1;
}

IPacket:206(playerid, BitStream:bs) // BULLET_SYNC
{
    new data[PR_BulletSync];
    BS_IgnoreBits(bs, 8);
    BS_ReadBulletSync(bs, data);
	switch(data[PR_hitType])
	{
		case BULLET_HIT_TYPE_PLAYER: if(data[PR_hitId] != INVALID_PLAYER_ID)
		{
			new Float:pos_x, Float:pos_y, Float:pos_z;
			GetPlayerPos(data[PR_hitId], pos_x, pos_y, pos_z);
			if(data[PR_hitPos][0] == pos_x || data[PR_hitPos][1] == pos_y || data[PR_hitPos][2] == pos_z) return 0;
		}
		case BULLET_HIT_TYPE_VEHICLE: if(data[PR_hitId] != INVALID_VEHICLE_ID)
		{
			new Float:pos_x, Float:pos_y, Float:pos_z;
			GetVehiclePos(data[PR_hitId], pos_x, pos_y, pos_z);
			if(data[PR_hitPos][0] == pos_x || data[PR_hitPos][1] == pos_y || data[PR_hitPos][2] == pos_z) return 0;
		}
    }
	if(data[PR_hitType] != BULLET_HIT_TYPE_NONE)
	{
		new Float:pos_x, Float:pos_y, Float:pos_z;
		GetPlayerPos(playerid, pos_x, pos_y, pos_z);
		if(data[PR_origin][0] == pos_x || data[PR_origin][1] == pos_y || data[PR_origin][2] == pos_z) return 0;
	}
	return 1;
}

IPacket:211(playerid, BitStream:bs) // PASSENGER_SYNC
{
    new data[PR_PassengerSync];
    BS_IgnoreBits(bs, 8);
    BS_ReadPassengerSync(bs, data);
    for(new i; i < 3; i++) if(CheckFloat(data[PR_position][i]) || floatabs(data[PR_position][i]) > 20000.0) return 0;
    
    if(!data[PR_seatId] && data[PR_vehicleId])
	{
	    CheatCount[AC_CRASH3]++;
		return 0;
	}
    return 1;
}

IPacket:200(playerid, BitStream:bs) // VEHICLE_SYNC
{
    new data[PR_InCarSync];
    BS_IgnoreBits(bs, 8);
    BS_ReadInCarSync(bs, data);
    
    CheckPack(playerid, data[PR_position][0], data[PR_position][1], data[PR_position][2]);
    if(CheckFloat(data[PR_vehicleHealth]) || CheckFloat(data[PR_trainSpeed]) || floatabs(data[PR_trainSpeed]) > 3.5) return 0;
    for(new i; i < 4; i++) if(CheckFloat(data[PR_quaternion][i]) || floatabs(data[PR_quaternion][i]) > 1.0) return 0;
    
    for(new i; i < 3; i++)
    {
    	if(CheckFloat(data[PR_position][i]) || floatabs(data[PR_position][i]) > 20000.0
    	|| CheckFloat(data[PR_velocity][i]) || floatabs(data[PR_velocity][i]) > 4.0) return 0;
   	}
	if(!CheatStatus[AC_CARHACK0] && data[PR_vehicleId] != playerEnter[playerid])
	{
	    CheatRemove(playerid, AC_CARHACK0);
		return 0;
	}
    return 1;
}

IPacket:207(playerid, BitStream:bs) // PLAYER_SYNC
{
    new data[PR_OnFootSync];
    BS_IgnoreBits(bs, 8);
    BS_ReadOnFootSync(bs, data);
    
    playerWeaponID[playerid] = data[PR_weaponId];
    CheckPack(playerid, data[PR_position][0], data[PR_position][1], data[PR_position][2]);
    for(new i; i < 4; i++) if(CheckFloat(data[PR_quaternion][i]) || floatabs(data[PR_quaternion][i]) > 1.0) return 0;
    
    for(new i; i < 3; i++)
	{
		if(CheckFloat(data[PR_position][i]) || floatabs(data[PR_position][i]) > 20000.0
		|| CheckFloat(data[PR_velocity][i]) || floatabs(data[PR_velocity][i]) > 1.5
		|| CheckFloat(data[PR_surfingOffsets][i]) || floatabs(data[PR_surfingOffsets][i]) > 50.0) return 0;
	}
	if(data[PR_weaponId])
	{
    	if(data[PR_weaponId] == 40 || data[PR_weaponId] == 44 || data[PR_weaponId] == 45)
		{
			data[PR_weaponId] = 0;
			BS_SetWriteOffset(bs, 8);
			BS_WriteOnFootSync(bs, data);
		}
		if(!CheatStatus[AC_WEAPON] && data[PR_weaponId] != playerWeapon[playerid][WeaponSlots[data[PR_weaponId]]])
	    {
	        data[PR_weaponId] = 0;
			BS_SetWriteOffset(bs, 8);
			BS_WriteOnFootSync(bs, data);
	    }
	}
	return 1;
}

IPacket:203(playerid, BitStream:bs) // AIM_SYNC
{
    new data[PR_AimSync];
    BS_IgnoreBits(bs, 8);
    BS_ReadAimSync(bs, data);
    if(CheckFloat(data[PR_aimZ]) || floatabs(data[PR_aimZ]) > 1.5) return 0;
    
    for(new i; i < 3; i++)
	{
		if(CheckFloat(data[PR_camFrontVec][i]) || floatabs(data[PR_camFrontVec][i]) > 1.0
    	|| CheckFloat(data[PR_camPos][i]) || floatabs(data[PR_camPos][i]) > 20000.0) return 0;
 	}
    if(!CheatStatus[AC_DERPCAM] && (data[PR_camMode] == 34 || data[PR_camMode] == 45))
    {
        CheatCount[AC_DERPCAM]++;
        return 0;
    }
	return 1;
}

IPacket:209(playerid, BitStream:bs) // UNOCCUPIED_SYNC
{
	new data[PR_UnoccupiedSync];
	BS_IgnoreBits(bs, 8);
	BS_ReadUnoccupiedSync(bs, data);
	
	if(CheckFloat(data[PR_vehicleHealth])) return 0;
	if((data[PR_roll][0] == data[PR_direction][0]) && (data[PR_roll][1] == data[PR_direction][1]) && (data[PR_roll][2] == data[PR_direction][2])) return 0;
	
	for(new id; id < 3; id++)
	{
	    if(CheckFloat(data[PR_roll][id]) || floatabs(data[PR_roll][id]) > 1.0
		|| CheckFloat(data[PR_direction][id]) || floatabs(data[PR_direction][id]) > 1.0
		|| CheckFloat(data[PR_position][id]) || floatabs(data[PR_position][id]) > 20000.0
		|| CheckFloat(data[PR_velocity][id]) || floatabs(data[PR_velocity][id]) > 100.0
		|| CheckFloat(data[PR_angularVelocity][id]) || floatabs(data[PR_angularVelocity][id]) > 1.0) return 0;
	}
	if(data[PR_seatId])
	{
		if(data[PR_velocity][2] < -0.5 || data[PR_velocity][2] > 0.5 || (VectorSize(data[PR_velocity][0], data[PR_velocity][1], 0.0) - VectorSize(vehiclePassVelX[data[PR_vehicleId]], vehiclePassVelY[data[PR_vehicleId]], 0.0)) > 0.3)
		{
		    new Float:pos_z;
			GetPlayerPos(playerid, pos_z, pos_z, pos_z);
			if(!CheatStatus[AC_CARSHOT] && (data[PR_position][2] - pos_z) > -1.0)
			{
				CheatRemove(playerid, AC_CARSHOT);
				return 0;
			}
		}
	   	if(!CheatStatus[AC_CARSPAWN0] && data[PR_vehicleId] != playerEnter[playerid])
  		{
  		    CheatRemove(playerid, AC_CARSPAWN0);
		  	return 0;
	  	}
	}
	else
	{
	    if(!CheatStatus[AC_VEHTP0] && GetVehicleDistanceFromPoint(data[PR_vehicleId], data[PR_position][0], data[PR_position][1], data[PR_position][2]) > 30.0)
		{
		    new Float:pos_z;
			GetVehiclePos(data[PR_vehicleId], pos_z, pos_z, pos_z);
			if(pos_z > -70.0)
			{
		        CheatCount[AC_VEHTP0]++;
		        return 0;
		    }
		}
	}
	if(!CheatStatus[AC_LOADENTER] && (GetTickCount() - vehicleEnterTick[data[PR_vehicleId]]) < 1000)
	{
	    CheatCount[AC_LOADENTER]++;
	    return 0;
	}
	vehiclePassVelX[data[PR_vehicleId]] = data[PR_velocity][0];
	vehiclePassVelY[data[PR_vehicleId]] = data[PR_velocity][1];
	vehiclePassVelZ[data[PR_vehicleId]] = data[PR_velocity][2];
	return 1;
}

IRPC:96(playerid, BitStream:bs) // SCM_EVENT
{
	if(playerid == -1) return 1;
	new vehid, event, data[2];
	BS_ReadValue(bs, PR_UINT16, vehid, PR_UINT8, data[0], PR_UINT8, data[1], PR_UINT8, event);
	
	if(!CheatStatus[AC_CRASH13] && (data[0] < 0 || data[1] < 0))
	{
	    CheatCount[AC_CRASH13]++;
		return 0;
	}
	return 1;
}

IRPC:136(playerid, BitStream:bs) // VEHICLE_DEATH
{
    if(playerid == -1) return 1;
    new vehid;
    BS_ReadValue(bs, PR_UINT16, vehid);

    if(!CheatStatus[AC_CARSPAWN1] && !IsVehicleInWaterAC(vehid))
	{
	    new Float:heal;
    	GetVehicleHealth(vehid, heal);
	    if(heal > 300.0)
	    {
		    CheatCount[AC_CARSPAWN1]++;
			return 0;
		}
	}
    return 1;
}

/*public OnPlayerCommandReceived(playerid, cmd[], params[], flags)
{
    if(DebugOff)
	{
 		format(AstrF, sizeof(AstrF), "OnPlayerCommandReceived | %s, %s", cmd, params);
	    LogCheat(playerid, "debug", AstrF);
	}
	PublicFlood(playerid, 5);
    if(!CheatStatus[AC_SHOTCMD] && (GetTickCount() - playerLastHitTick[playerid]) < (playerSleep{playerid} * 1000) && (!strcmp(cmd, "healme") || !strcmp(cmd, "usedrugs")))
	{
	    CheatCount[AC_SHOTCMD]++;
		return 0;
	}
	#if defined ac_OnPlayerCommandReceived
		return ac_OnPlayerCommandReceived(playerid, cmd, params, flags);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerCommandReceived
    #undef OnPlayerCommandReceived
#else
    #define _ALS_OnPlayerCommandReceived
#endif
#if defined ac_OnPlayerCommandReceived
	forward ac_OnPlayerCommandReceived(playerid, cmd[], params[], flags);
#endif
#define	OnPlayerCommandReceived ac_OnPlayerCommandReceived

*/
public OnPlayerUpdate(playerid)
{
    playerPausedTick[playerid] = 0;
	#if defined ac_OnPlayerUpdate
		return ac_OnPlayerUpdate(playerid);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerUpdate
    #undef OnPlayerUpdate
#else
    #define _ALS_OnPlayerUpdate
#endif
#if defined ac_OnPlayerUpdate
	forward ac_OnPlayerUpdate(playerid);
#endif
#define	OnPlayerUpdate ac_OnPlayerUpdate

public OnPlayerConnect(playerid)
{
	GetPlayerIp(playerid, playerIP[playerid], 16);
	GetPlayerName(playerid, playerName[playerid], 25);

	playerIsNPC{playerid} = IsPlayerNPC(playerid);
	playerOldTargetID[playerid] = INVALID_VEHICLE_ID;
	playerCheckFly{playerid} = 15;
    playerSettingDialogPage[playerid] = -1;
    playerSleep{playerid} = 5;
    playerState{playerid} =
	playerSpawn{playerid} =
    playerPutInVeh{playerid} =
	playerFakeKill{playerid} =
	playerCheckNop{playerid} =
	playerIsMobile{playerid} =
	playerInModShop{playerid} =
	playerVehicleID[playerid] =
	playerRetardKill{playerid} =
	playerWarningRcon{playerid} =
	playerWarningPacktp{playerid} = 0;

	SetPlayerHealth(playerid, 100.0);
	SetPlayerArmour(playerid, 0.0);
	ResetPlayerWeapons(playerid);
	
	if(!playerIsNPC{playerid})
	{
	    if(DebugOff) LogCheat(playerid, "debug", "OnPlayerConnect");
	    AddConnect(playerid, 0);
		if(!GetPlayerVersion(playerid, str, sizeof(str)) || strfind(str, VER_CLIENT) == -1) CheatDetect(playerid, AC_IVERSION);
		
		gpci(playerid, str, sizeof(str));
		if(!strcmp(str, CLIENT_CACHE)) playerIsMobile{playerid} = 1;
	
	    if(playerUseSlot{playerid}) CheatDetect(playerid, AC_SPOOFCONN);
		playerUseSlot{playerid} = 1;

		if(StartTick < gettime())
		{
			foreach(PlReconPool, id) if(connblockTime[id] && !strcmp(connblockData[id], playerIP[playerid]))
			{
				CheatDetect(playerid, AC_RECONNECT);
				break;
			}
		}
		new count = 3;
		foreach(Player, otherid) if(otherid != playerid && !strcmp(playerIP[otherid], playerIP[playerid]))
		{
			if(--count <= 0)
			{
				CheatDetect(playerid, AC_MAXCONNIP);
				break;
			}
		}
		if(playerMainTimerOne[playerid]) KillTimer(playerMainTimerOne[playerid]);
		if(playerMainTimerTwo[playerid]) KillTimer(playerMainTimerTwo[playerid]);
		if(playerMainTimerThre[playerid]) KillTimer(playerMainTimerThre[playerid]);
		playerMainTimerOne[playerid] = SetTimerEx("ac_MainUpdate200", 200, 1, "i", playerid);
		playerMainTimerTwo[playerid] = SetTimerEx("ac_MainUpdate1000", 1000, 1, "i", playerid);
		playerMainTimerThre[playerid] = SetTimerEx("ac_MainUpdate5000", 5000, 1, "i", playerid);

		new PlayerText:textid;
		DmgHealProgres[playerid][0] = textid = CreatePlayerTextDraw(playerid, 265.076629, 431.666778, "_");
		PlayerTextDrawLetterSize(playerid, textid, 0.000000, 0.924167);
		PlayerTextDrawTextSize(playerid, textid, 374.939178, 0.319999);
		PlayerTextDrawAlignment(playerid, textid, 1);
		PlayerTextDrawColor(playerid, textid, -1);
		PlayerTextDrawUseBox(playerid, textid, 1);
		PlayerTextDrawBoxColor(playerid, textid, -2147483393);
		PlayerTextDrawBackgroundColor(playerid, textid, 255);
		PlayerTextDrawFont(playerid, textid, 1);
		PlayerTextDrawSetProportional(playerid, textid, 1);

		DmgHealProgres[playerid][1] = textid = CreatePlayerTextDraw(playerid, 319.782470, 430.683746, "_");
		PlayerTextDrawLetterSize(playerid, textid, 0.191470, 0.984165);
		PlayerTextDrawAlignment(playerid, textid, 2);
		PlayerTextDrawColor(playerid, textid, -1);
		PlayerTextDrawBackgroundColor(playerid, textid, 255);
		PlayerTextDrawFont(playerid, textid, 2);
		PlayerTextDrawSetProportional(playerid, textid, 1);
		PlayerTextDrawSetShadow(playerid, textid, 0);
		PlayerTextDrawSetOutline(playerid, textid, 0);
	}
    #if defined ac_OnPlayerConnect
		return ac_OnPlayerConnect(playerid);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerConnect
    #undef OnPlayerConnect
#else
    #define _ALS_OnPlayerConnect
#endif
#if defined ac_OnPlayerConnect
	forward ac_OnPlayerConnect(playerid);
#endif
#define	OnPlayerConnect ac_OnPlayerConnect

public OnPlayerSpawn(playerid)
{
	if(!playerIsNPC{playerid})
	{
	    if(DebugOff) LogCheat(playerid, "debug", "OnPlayerSpawn");
		if(!playerIsMobile{playerid} && !playerSpawn{playerid}) CheatDetect(playerid, AC_SPAWN);
		if(!playerSpawnTimer[playerid]) playerSpawnTimer[playerid] = SetTimerEx("ac_SpawnTimer", (playerSleep{playerid} * 1000), 0, "i", playerid);

	    playerFakeKill{playerid} =
	    playerWarningFly{playerid} =
	    playerRetardKill{playerid} = 0;
		playerCheckFly{playerid} = playerSleep{playerid};

        SetPlayerHealth(playerid, 100.0);
		SetPlayerArmour(playerid, 0.0);
        ResetPlayerWeapons(playerid);
		ApplyAnimation(playerid, "PED", "null", 0.0, 0, 0, 0, 0, 0);
	    for(new id; id < 13; id++) if(playerWeapon[playerid][id] && playerAmmo[playerid][id]) GivePlayerWeapon(playerid, playerWeapon[playerid][id], playerAmmo[playerid][id]);
	}
	#if defined ac_OnPlayerSpawn
		return ac_OnPlayerSpawn(playerid);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerSpawn
    #undef OnPlayerSpawn
#else
    #define _ALS_OnPlayerSpawn
#endif
#if defined ac_OnPlayerSpawn
	forward ac_OnPlayerSpawn(playerid);
#endif
#define	OnPlayerSpawn ac_OnPlayerSpawn

public OnPlayerDisconnect(playerid, reason)
{
	if(!playerIsNPC{playerid})
	{
	    if(DebugOff)
		{
		    format(AstrF, sizeof(AstrF), "OnPlayerDisconnect | %i", reason);
		    LogCheat(playerid, "debug", AstrF);
		}
	    AddConnect(playerid, 1);
	    playerUseSlot{playerid} = 0;
	    if(playerMainTimerOne[playerid])
		{
			KillTimer(playerMainTimerOne[playerid]);
			playerMainTimerOne[playerid] = 0;
		}
		if(playerMainTimerTwo[playerid])
		{
			KillTimer(playerMainTimerTwo[playerid]);
			playerMainTimerTwo[playerid] = 0;
		}
		if(playerMainTimerThre[playerid])
		{
			KillTimer(playerMainTimerThre[playerid]);
			playerMainTimerThre[playerid] = 0;
		}
	    if(playerKickTimer[playerid])
		{
			KillTimer(playerKickTimer[playerid]);
			playerKickTimer[playerid] = 0;
		}
	    if(playerSpawnTimer[playerid])
		{
			KillTimer(playerSpawnTimer[playerid]);
			playerSpawnTimer[playerid] = 0;
		}
		if(playerDeathTimer[playerid])
		{
			KillTimer(playerDeathTimer[playerid]);
			playerDeathTimer[playerid] = 0;
		}
	    if(1 <= reason <= 2) AddRecon(playerid);
  	}
    #if defined ac_OnPlayerDisconnect
		return ac_OnPlayerDisconnect(playerid, reason);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerDisconnect
    #undef OnPlayerDisconnect
#else
    #define _ALS_OnPlayerDisconnect
#endif
#if defined ac_OnPlayerDisconnect
	forward ac_OnPlayerDisconnect(playerid, reason);
#endif
#define	OnPlayerDisconnect ac_OnPlayerDisconnect

public OnPlayerDeath(playerid, killerid, reason)
{
	if(playerRetardKill{playerid}) return 0;
	if(!playerIsNPC{playerid})
	{
	    if(DebugOff)
		{
		    format(AstrF, sizeof(AstrF), "OnPlayerDeath | %i, %i", killerid, reason);
		    LogCheat(playerid, "debug", AstrF);
		}
		if(!CheatStatus[AC_IKILLER] && (!IsPlayerConnected(killerid) || !IsPlayerStreamedIn(playerid, killerid)))
		{
	        CheatCount[AC_IKILLER]++;
	        return 0;
	    }
		if(!CheatStatus[AC_IKILL] && (killerid == playerid || playerFakeKill{playerid}))
		{
	        CheatCount[AC_IKILL]++;
	        return 0;
	    }
	    if(playerSpawnTimer[playerid])
		{
			KillTimer(playerSpawnTimer[playerid]);
			playerSpawnTimer[playerid] = 0;
		}
		if(killerid == INVALID_PLAYER_ID && reason == 255 && (GetTickCount() - playerLastHitTick[playerid]) < 1000) killerid = playerLastHitID[playerid];

		playerSpawn{playerid} =
		playerFakeKill{playerid} = 1;
		FreezeFly(playerid);
		ResetPlayerWeapons(playerid);
	}
	#if defined ac_OnPlayerDeath
		return ac_OnPlayerDeath(playerid, killerid, reason);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerDeath
    #undef OnPlayerDeath
#else
    #define _ALS_OnPlayerDeath
#endif
#if defined ac_OnPlayerDeath
	forward ac_OnPlayerDeath(playerid, killerid, reason);
#endif
#define	OnPlayerDeath ac_OnPlayerDeath

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
    if(DebugOff)
	{
	    format(AstrF, sizeof(AstrF), "OnPlayerWeaponShot | %i, %i, %i, %f, %f, %f", weaponid, hittype, hitid, fX, fY, fZ);
	    LogCheat(playerid, "debug", AstrF);
	}
    if((!(22 <= weaponid <= 34) && weaponid != 38) || IsPlayerPausedAC(playerid) || !FastBullet(playerid, weaponid)) return 0;
    
	new weap, ammo, slot = WeaponSlots[weaponid];
  	GetPlayerWeaponData(playerid, slot, weap, ammo);
	playerAmmo[playerid][slot]--;
	
	if(!CheatStatus[AC_AMMO] && ammo > (playerAmmo[playerid][slot] + 5))
	{
        CheatCount[AC_AMMO]++;
        return 0;
    }
    if(!CheatStatus[AC_WEAPON] && weaponid != playerWeapon[playerid][slot])
    {
        CheatCount[AC_WEAPON]++;
        return 0;
    }
    new Float:topldist;
	switch(hittype)
	{
		case BULLET_HIT_TYPE_PLAYER:
		{
			if(!IsPlayerConnected(hitid) || IsPlayerPausedAC(hitid)) return 0;
            new Float:pos_x, Float:pos_y, Float:pos_z;
			GetPlayerPos(hitid, pos_x, pos_y, pos_z);
		 	if((topldist = GetPlayerDistanceFromPoint(playerid, pos_x, pos_y, pos_z)) > MaxDistShot[weap - 22]) return 0;
		}
		case BULLET_HIT_TYPE_VEHICLE:
		{
			if(!GetVehicleModel(hitid)) return 0;
			if(GetVehicleDriverIDAC(hitid) == INVALID_PLAYER_ID) return 0;
		}
		case BULLET_HIT_TYPE_OBJECT: if(!IsValidObject(hitid)) return 0;
		case BULLET_HIT_TYPE_PLAYER_OBJECT: if(!IsValidPlayerObject(playerid, hitid)) return 0;
	}
	new ret = 1;
	#if defined ac_OnPlayerWeaponShot
		ret = ac_OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, fX, fY, fZ);
	#endif
	if(ret && hittype == BULLET_HIT_TYPE_PLAYER)
	{
		if(!CheatStatus[AC_DAMAGESYS] && !playerIsNPC{hitid})
		{
		    ret = 0;
		    CheatCount[AC_DAMAGESYS]++;
			DamageSystem(playerid, weaponid, hitid, topldist);
		}
	}
	return ret;
}
#if defined _ALS_OnPlayerWeaponShot
    #undef OnPlayerWeaponShot
#else
    #define _ALS_OnPlayerWeaponShot
#endif
#if defined ac_OnPlayerWeaponShot
	forward ac_OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ);
#endif
#define	OnPlayerWeaponShot ac_OnPlayerWeaponShot

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if(!playerIsNPC{playerid})
	{ 
	    PublicFlood(playerid, 11);
	    playerState{playerid} = newstate;

	    if(DebugOff)
		{
		    format(AstrF, sizeof(AstrF), "OnPlayerStateChange | %i, %i", newstate, oldstate);
		    LogCheat(playerid, "debug", AstrF);
		}
		if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
		{
		    new vehid = playerVehicleID[playerid] = GetPlayerVehicleID(playerid);
		    if(vehid != playerEnter[playerid]) CheatDetect(playerid, AC_CARHACK2);
		    if(playerEnterCount{playerid} >= 50) CheatDetect(playerid, AC_ENTCOUNT);
		    else playerEnterCount{playerid} += 5;

			if(!IsWaterTransportAC(vehid) && (GetTickCount() - playerEnterTime[playerid]) < 400) CheatDetect(playerid, AC_CARHACK1);
			playerRemvVeh{playerid} = 0;
		}
		if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
		{
		    playerVehicleID[playerid] = 0;
		}
	    if(newstate == PLAYER_STATE_DRIVER)
	    {
	        new vehid = playerVehicleID[playerid], model = GetVehicleModel(vehid);
	        if(!model || MaxPassengers[model - 400] == 15 || GetPlayerVehicleSeat(playerid) != 0) CheatRemove(playerid, AC_CRASH9);

	        new tmp;
			GetVehicleParamsEx(vehid, tmp, tmp, tmp, doors, tmp, tmp, tmp);
			if(!CheatStatus[AC_BDOORS] && !playerPutInVeh{playerid} && doors == 1 && playerLastDoors[playerid] == 1) CheatRemove(playerid, AC_BDOORS);

			playerPutInVeh{playerid} = 0;
			vehicleOccupied[vehid][0] = playerid;
		}
	    if(newstate == PLAYER_STATE_PASSENGER)
	    {
	        new vehid = playerVehicleID[playerid], model = GetVehicleModel(vehid), seat = GetPlayerVehicleSeat(playerid);
	 		if(!model || MaxPassengers[model - 400] == 15 || !(1 <= seat <= MaxPassengers[model - 400])) CheatDetect(playerid, AC_CRASH9);
			if(seat >= 9) seat = 8;
	 		vehicleOccupied[vehid][seat] = playerid;
		}
		if(newstate == oldstate
		|| (newstate == PLAYER_STATE_DRIVER && oldstate == PLAYER_STATE_PASSENGER)
		|| (newstate == PLAYER_STATE_PASSENGER && oldstate == PLAYER_STATE_DRIVER)) CheatDetect(playerid, AC_CRASH10);
	}
    #if defined ac_OnPlayerStateChange
		return ac_OnPlayerStateChange(playerid, newstate, oldstate);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerStateChange
    #undef OnPlayerStateChange
#else
    #define _ALS_OnPlayerStateChange
#endif
#if defined ac_OnPlayerStateChange
	forward ac_OnPlayerStateChange(playerid, newstate, oldstate);
#endif
#define	OnPlayerStateChange ac_OnPlayerStateChange

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
    PublicFlood(playerid, 0);
    if(DebugOff)
	{
	    format(AstrF, sizeof(AstrF), "OnDialogResponse | %i, %i, %i, %s", dialogid, response, listitem, inputtext);
	    LogCheat(playerid, "debug", AstrF);
	}
	#if defined ac_OnDialogResponse
		return ac_OnDialogResponse(playerid, dialogid, response, listitem, inputtext);
	#else
	    return 0;
	#endif
}
#if defined _ALS_OnDialogResponse
    #undef OnDialogResponse
#else
    #define _ALS_OnDialogResponse
#endif
#if defined ac_OnDialogResponse
	forward ac_OnDialogResponse(playerid, dialogid, response, listitem, inputtext[]);
#endif
#define	OnDialogResponse ac_OnDialogResponse

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
    if(DebugOff)
	{
	    format(AstrF, sizeof(AstrF), "OnPlayerEnterVehicle | %i, %i", vehicleid, ispassenger);
	    LogCheat(playerid, "debug", AstrF);
	}
    PublicFlood(playerid, 6);
	if(playerVehicleID[playerid] && playerVehicleID[playerid] != vehicleid) CheatDetect(playerid, AC_NTINCAR);

	if(!ispassenger && GetVehicleDriverIDAC(vehicleid) != INVALID_PLAYER_ID)
	{
		ClearAnimations(playerid);
		GameTextForPlayer(playerid, "~r~~h~car is used", 5000, 6);
		new Float:pos_x, Float:pos_y, Float:pos_z;
 		GetPlayerPos(playerid, pos_x, pos_y, pos_z);
	    SetPlayerPos(playerid, pos_x, pos_y, pos_z);
	    return 1;
	}
	new tmp;
	GetVehicleParamsEx(vehicleid, tmp, tmp, tmp, playerLastDoors[playerid], tmp, tmp, tmp);
	if(playerLastDoors[playerid] == 1)
	{
		ClearAnimations(playerid);
		GameTextForPlayer(playerid, "~r~~h~car is closed", 5000, 6);
		new Float:pos_x, Float:pos_y, Float:pos_z;
 		GetPlayerPos(playerid, pos_x, pos_y, pos_z);
	    SetPlayerPos(playerid, pos_x, pos_y, pos_z);
	    return 1;
	}

	new tick = GetTickCount();
    playerEnter[playerid] = vehicleid;
    playerEnterTime[playerid] = tick;
    vehicleEnterTick[vehicleid] = tick;
	#if defined ac_OnPlayerEnterVehicle
		return ac_OnPlayerEnterVehicle(playerid, vehicleid, ispassenger);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerEnterVehicle
    #undef OnPlayerEnterVehicle
#else
    #define _ALS_OnPlayerEnterVehicle
#endif
#if defined ac_OnPlayerEnterVehicle
	forward ac_OnPlayerEnterVehicle(playerid, vehicleid, ispassenger);
#endif
#define	OnPlayerEnterVehicle ac_OnPlayerEnterVehicle

public OnEnterExitModShop(playerid, enterexit, interiorid)
{
    if(DebugOff)
	{
	    format(AstrF, sizeof(AstrF), "OnEnterExitModShop | %i, %i", enterexit, interiorid);
	    LogCheat(playerid, "debug", AstrF);
	}
    PublicFlood(playerid, 1);
    FreezeFly(playerid);
	playerInModShop{playerid} = !!enterexit;
 	#if defined ac_OnEnterExitModShop
		return ac_OnEnterExitModShop(playerid, enterexit, interiorid);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnEnterExitModShop
    #undef OnEnterExitModShop
#else
    #define _ALS_OnEnterExitModShop
#endif
#if defined ac_OnEnterExitModShop
	forward ac_OnEnterExitModShop(playerid, enterexit, interiorid);
#endif
#define	OnEnterExitModShop ac_OnEnterExitModShop

public OnRconLoginAttempt(ip[], password[], success)
{
	foreach(Player, otherid) if(!strcmp(ip, playerIP[otherid]))
	{
	    if(success) playerWarningRcon{otherid} = 0;
		else { if(++playerWarningRcon{otherid} > 2) CheatDetect(otherid, AC_IRCON); }
	}
 	#if defined ac_OnRconLoginAttempt
		return ac_OnRconLoginAttempt(ip, password, success);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnRconLoginAttempt
    #undef OnRconLoginAttempt
#else
    #define _ALS_OnRconLoginAttempt
#endif
#if defined ac_OnRconLoginAttempt
	forward ac_OnRconLoginAttempt(ip[], password[], success);
#endif
#define	OnRconLoginAttempt ac_OnRconLoginAttempt

public OnVehicleMod(playerid, vehicleid, componentid)
{
    if(DebugOff)
	{
	    format(AstrF, sizeof(AstrF), "OnVehicleMod | %i, %i", vehicleid, componentid);
	    LogCheat(playerid, "debug", AstrF);
	}
    PublicFlood(playerid, 12);
    if(!playerInModShop{playerid})
	{
	    SetVehicleToRespawn(vehicleid);
		CheatDetect(playerid, AC_IEMODSHOP);
		return 0;
	}
    if(!IsComponentidCompatibleAC(GetVehicleModel(vehicleid), componentid))
	{
	    SetVehicleToRespawn(vehicleid);
		CheatDetect(playerid, AC_IVEHMOD);
		return 0;
	}
   	#if defined ac_OnVehicleMod
		return ac_OnVehicleMod(playerid, vehicleid, componentid);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnVehicleMod
    #undef OnVehicleMod
#else
    #define _ALS_OnVehicleMod
#endif
#if defined ac_OnVehicleMod
	forward ac_OnVehicleMod(playerid, vehicleid, componentid);
#endif
#define	OnVehicleMod ac_OnVehicleMod

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
    if(DebugOff)
	{
	    format(AstrF, sizeof(AstrF), "OnVehiclePaintjob | %i, %i", vehicleid, paintjobid);
	    LogCheat(playerid, "debug", AstrF);
	}
    PublicFlood(playerid, 13);
    if(!(0 <= paintjobid <= 2))
	{
	    SetVehicleToRespawn(vehicleid);
		CheatDetect(playerid, AC_IPAINTJOB);
	}
	if(!playerInModShop{playerid})
	{
	    SetVehicleToRespawn(vehicleid);
		CheatDetect(playerid, AC_IEMODSHOP);
	}
	#if defined ac_OnVehiclePaintjob
		return ac_OnVehiclePaintjob(playerid, vehicleid, paintjobid);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnVehiclePaintjob
    #undef OnVehiclePaintjob
#else
    #define _ALS_OnVehiclePaintjob
#endif
#if defined ac_OnVehiclePaintjob
	forward ac_OnVehiclePaintjob(playerid, vehicleid, paintjobid);
#endif
#define	OnVehiclePaintjob ac_OnVehiclePaintjob



public OnPlayerRequestClass(playerid, classid)
{
    if(DebugOff)
	{
	    format(AstrF, sizeof(AstrF), "OnPlayerRequestClass | %i", classid);
	    LogCheat(playerid, "debug", AstrF);
	}
    PublicFlood(playerid, 9);
	#if defined ac_OnPlayerRequestClass
		return ac_OnPlayerRequestClass(playerid, classid);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerRequestClass
    #undef OnPlayerRequestClass
#else
    #define _ALS_OnPlayerRequestClass
#endif
#if defined ac_OnPlayerRequestClass
	forward ac_OnPlayerRequestClass(playerid, classid);
#endif
#define	OnPlayerRequestClass ac_OnPlayerRequestClass

public OnPlayerRequestSpawn(playerid)
{
    if(DebugOff) LogCheat(playerid, "debug", "OnPlayerRequestSpawn");
    PublicFlood(playerid, 19);
    if(playerState{playerid} == PLAYER_STATE_NONE)
	{
	    playerSpawn{playerid} = 1;
	    if(playerSpawnTimer[playerid])
		{
			KillTimer(playerSpawnTimer[playerid]);
			playerSpawnTimer[playerid] = 0;
		}
	}
	#if defined ac_OnPlayerRequestSpawn
		return ac_OnPlayerRequestSpawn(playerid);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerRequestSpawn
    #undef OnPlayerRequestSpawn
#else
    #define _ALS_OnPlayerRequestSpawn
#endif
#if defined ac_OnPlayerRequestSpawn
	forward ac_OnPlayerRequestSpawn(playerid);
#endif
#define	OnPlayerRequestSpawn ac_OnPlayerRequestSpawn

public OnPlayerSelectedMenuRow(playerid, row)
{
    if(DebugOff)
	{
	    format(AstrF, sizeof(AstrF), "OnPlayerSelectedMenuRow | %i", row);
	    LogCheat(playerid, "debug", AstrF);
	}
    PublicFlood(playerid, 10);
	#if defined ac_OnPlayerSelectedMenuRow
		return ac_OnPlayerSelectedMenuRow(playerid, row);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerSelectedMenuRow
    #undef OnPlayerSelectedMenuRow
#else
    #define _ALS_OnPlayerSelectedMenuRow
#endif
#if defined ac_OnPlayerSelectedMenuRow
	forward ac_OnPlayerSelectedMenuRow(playerid, row);
#endif
#define	OnPlayerSelectedMenuRow ac_OnPlayerSelectedMenuRow

public OnPlayerExitedMenu(playerid)
{
    if(DebugOff) LogCheat(playerid, "debug", "OnPlayerExitedMenu");
    PublicFlood(playerid, 20);
	#if defined ac_OnPlayerExitedMenu
		return ac_OnPlayerExitedMenu(playerid);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerExitedMenu
    #undef OnPlayerExitedMenu
#else
    #define _ALS_OnPlayerExitedMenu
#endif
#if defined ac_OnPlayerExitedMenu
	forward ac_OnPlayerExitedMenu(playerid);
#endif
#define	OnPlayerExitedMenu ac_OnPlayerExitedMenu

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
    if(DebugOff)
	{
	    format(AstrF, sizeof(AstrF), "OnPlayerClickPlayer | %i", clickedplayerid);
	    LogCheat(playerid, "debug", AstrF);
	}
    PublicFlood(playerid, 3);
	#if defined ac_OnPlayerClickPlayer
		return ac_OnPlayerClickPlayer(playerid, clickedplayerid, source);
	#else
	    return 0;
	#endif
}
#if defined _ALS_OnPlayerClickPlayer
    #undef OnPlayerClickPlayer
#else
    #define _ALS_OnPlayerClickPlayer
#endif
#if defined ac_OnPlayerClickPlayer
	forward ac_OnPlayerClickPlayer(playerid, clickedplayerid, source);
#endif
#define	OnPlayerClickPlayer ac_OnPlayerClickPlayer

public OnVehicleDeath(vehicleid, killerid)
{
    PublicFlood(killerid, 15);
   	#if defined ac_OnVehicleDeath
		return ac_OnVehicleDeath(vehicleid, killerid);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnVehicleDeath
    #undef OnVehicleDeath
#else
    #define _ALS_OnVehicleDeath
#endif
#if defined ac_OnVehicleDeath
	forward ac_OnVehicleDeath(vehicleid, killerid);
#endif
#define	OnVehicleDeath ac_OnVehicleDeath

public OnGameModeInit()
{
	FileID = fopen("anticheat/setting.txt", io_readwrite);
	if(FileID)
	{
	    new len, tempstr0[64], tempsctring[64];
	    while(fread(FileID, str))
		{
		    format(tempstr0, sizeof(tempstr0), str);
		    format(tempsctring, sizeof(tempsctring), str);
		    
		    len = strlen(tempstr0);
		    for(new i = len; i >= 0; i--) if(tempstr0[i] == '=') strdel(tempstr0, i, len); 
		    len = strlen(tempsctring);
		    for(new i = len; i >= 0; i--) if(tempsctring[i] == '=') strdel(tempsctring, 0, (i + 1));
		    for(new i; i < sizeof(CheatName); i++) if(!strcmp(tempstr0, CheatName[i])) CheatStatus[i] = strval(tempsctring);
		}
		fclose(FileID);
	}
	new Text:textid, Float:pos_y = 437.669403;
    for(new id; id < PANEL_LINE; id++)
    {
        warningDraw[id] = textid = TextDrawCreate(326.995300, pos_y, "_");
		TextDrawLetterSize(textid, 0.177199, 0.852200);
		TextDrawAlignment(textid, 2);
		TextDrawColor(textid, -1);
		TextDrawSetShadow(textid, 1);
		TextDrawBackgroundColor(textid, 255);
		TextDrawFont(textid, 1);
		TextDrawSetProportional(textid, 1);
		
		connectDraw[id] = textid = TextDrawCreate(637.875854, pos_y, "_");
		TextDrawLetterSize(textid, 0.177199, 0.852200);
		TextDrawAlignment(textid, 3);
		TextDrawColor(textid, -1);
		TextDrawSetShadow(textid, 1);
		TextDrawBackgroundColor(textid, 255);
		TextDrawFont(textid, 1);
		TextDrawSetProportional(textid, 1);
		
		pos_y -= 7.0;
		warningText[id] = "_";
		connectText[id] = "_";
	}
 	DmgHealFon = textid = TextDrawCreate(263.758728, 430.267517, "box");
	TextDrawLetterSize(textid, 0.000000, 1.247057);
	TextDrawTextSize(textid, 375.699920, 0.000000);
	TextDrawAlignment(textid, 1);
	TextDrawColor(textid, -2139062017);
	TextDrawUseBox(textid, 1);
	TextDrawBoxColor(textid, 255);
	TextDrawBackgroundColor(textid, -2139062017);
	TextDrawFont(textid, 1);
	TextDrawSetProportional(textid, 1);
	
    StartTick = (gettime() + 30);
    SetTimer("ac_MainTimer", 5000, 1);
	#if defined ac_OnGameModeInit
		return ac_OnGameModeInit();
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnGameModeInit
    #undef OnGameModeInit
#else
    #define _ALS_OnGameModeInit
#endif
#if defined ac_OnGameModeInit
	forward ac_OnGameModeInit();
#endif
#define	OnGameModeInit ac_OnGameModeInit

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
    PublicFlood(playerid, 24);
	#if defined ac_OnVehicleDamageStatusUp
		return ac_OnVehicleDamageStatusUp(vehicleid, playerid);
	#else
	    return 0;
	#endif
}
#if defined _ALS_OnVehicleDamageStatusUp
    #undef OnVehicleDamageStatusUpdate
#else
    #define _ALS_OnVehicleDamageStatusUp
#endif
#if defined ac_OnVehicleDamageStatusUp
	forward ac_OnVehicleDamageStatusUp(vehicleid, playerid);
#endif
#define	OnVehicleDamageStatusUpdate ac_OnVehicleDamageStatusUp

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
    if(DebugOff)
	{
	    format(AstrF, sizeof(AstrF), "OnPlayerClickMap | %f, %f, %f", fX, fY, fZ);
	    LogCheat(playerid, "debug", AstrF);
	}
    PublicFlood(playerid, 2);
	#if defined ac_OnPlayerClickMap
		return ac_OnPlayerClickMap(playerid, fX, fY, fZ);
	#else
	    return 0;
	#endif
}
#if defined _ALS_OnPlayerClickMap
    #undef OnPlayerClickMap
#else
    #define _ALS_OnPlayerClickMap
#endif
#if defined ac_OnPlayerClickMap
	forward ac_OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ);
#endif
#define	OnPlayerClickMap ac_OnPlayerClickMap

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
    if(DebugOff)
	{
	    format(AstrF, sizeof(AstrF), "OnPlayerClickTextDraw | %i", _:clickedid);
	    LogCheat(playerid, "debug", AstrF);
	}
	PublicFlood(playerid, 4);
	#if defined ac_OnPlayerClickTextDraw
		return ac_OnPlayerClickTextDraw(playerid, clickedid);
	#else
	    return 0;
	#endif
}
#if defined _ALS_OnPlayerClickTextDraw
    #undef OnPlayerClickTextDraw
#else
    #define _ALS_OnPlayerClickTextDraw
#endif
#if defined ac_OnPlayerClickTextDraw
	forward ac_OnPlayerClickTextDraw(playerid, Text:clickedid);
#endif
#define	OnPlayerClickTextDraw ac_OnPlayerClickTextDraw

public OnPlayerExitVehicle(playerid, vehicleid)
{
    if(DebugOff)
	{
	    format(AstrF, sizeof(AstrF), "OnPlayerExitVehicle | %i", vehicleid);
	    LogCheat(playerid, "debug", AstrF);
	}
    PublicFlood(playerid, 7);
	#if defined ac_OnPlayerExitVehicle
		return ac_OnPlayerExitVehicle(playerid, vehicleid);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerExitVehicle
    #undef OnPlayerExitVehicle
#else
    #define _ALS_OnPlayerExitVehicle
#endif
#if defined ac_OnPlayerExitVehicle
	forward ac_OnPlayerExitVehicle(playerid, vehicleid);
#endif
#define	OnPlayerExitVehicle ac_OnPlayerExitVehicle

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
    if(DebugOff)
	{
	    format(AstrF, sizeof(AstrF), "OnVehicleRespray | %i, %i, %i", vehicleid, color1, color2);
	    LogCheat(playerid, "debug", AstrF);
	}
    PublicFlood(playerid, 14);
	#if defined ac_OnVehicleRespray
		return ac_OnVehicleRespray(playerid, vehicleid, color1, color2);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnVehicleRespray
    #undef OnVehicleRespray
#else
    #define _ALS_OnVehicleRespray
#endif
#if defined ac_OnVehicleRespray
	forward ac_OnVehicleRespray(playerid, vehicleid, color1, color2);
#endif
#define	OnVehicleRespray ac_OnVehicleRespray

public OnPlayerText(playerid, text[])
{
    if(DebugOff)
	{
	    format(AstrF, sizeof(AstrF), "OnPlayerText | %s", text);
	    LogCheat(playerid, "debug", AstrF);
	}
    PublicFlood(playerid, 16);
	#if defined ac_OnPlayerText
		return ac_OnPlayerText(playerid, text);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerText
    #undef OnPlayerText
#else
    #define _ALS_OnPlayerText
#endif
#if defined ac_OnPlayerText
	forward ac_OnPlayerText(playerid, text[]);
#endif
#define	OnPlayerText ac_OnPlayerText

public OnPlayerEnterCheckpoint(playerid)
{
    if(DebugOff) LogCheat(playerid, "debug", "OnPlayerEnterCheckpoint");
    PublicFlood(playerid, 17);
	#if defined ac_OnPlayerEnterCheckpoint
		return ac_OnPlayerEnterCheckpoint(playerid);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerEnterCheckpoint
    #undef OnPlayerEnterCheckpoint
#else
    #define _ALS_OnPlayerEnterCheckpoint
#endif
#if defined ac_OnPlayerEnterCheckpoint
	forward ac_OnPlayerEnterCheckpoint(playerid);
#endif
#define	OnPlayerEnterCheckpoint ac_OnPlayerEnterCheckpoint

public OnPlayerLeaveCheckpoint(playerid)
{
    if(DebugOff) LogCheat(playerid, "debug", "OnPlayerLeaveCheckpoint");
    PublicFlood(playerid, 18);
	#if defined ac_OnPlayerLeaveCheckpoint
		return ac_OnPlayerLeaveCheckpoint(playerid);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerLeaveCheckpoint
    #undef OnPlayerLeaveCheckpoint
#else
    #define _ALS_OnPlayerLeaveCheckpoint
#endif
#if defined ac_OnPlayerLeaveCheckpoint
	forward ac_OnPlayerLeaveCheckpoint(playerid);
#endif
#define	OnPlayerLeaveCheckpoint ac_OnPlayerLeaveCheckpoint

public OnPlayerEnterRaceCheckpoint(playerid)
{
    if(DebugOff) LogCheat(playerid, "debug", "OnPlayerEnterRaceCheckpoint");
    PublicFlood(playerid, 21);
	#if defined ac_OnPlayerEnterRaceCP
		return ac_OnPlayerEnterRaceCP(playerid);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerEnterRaceCP
    #undef OnPlayerEnterRaceCheckpoint
#else
    #define _ALS_OnPlayerEnterRaceCP
#endif
#if defined ac_OnPlayerEnterRaceCP
	forward ac_OnPlayerEnterRaceCP(playerid);
#endif
#define	OnPlayerEnterRaceCheckpoint ac_OnPlayerEnterRaceCP

public OnPlayerLeaveRaceCheckpoint(playerid)
{
    if(DebugOff) LogCheat(playerid, "debug", "OnPlayerLeaveRaceCheckpoint");
    PublicFlood(playerid, 22);
	#if defined ac_OnPlayerLeaveRaceCP
		return ac_OnPlayerLeaveRaceCP(playerid);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerLeaveRaceCP
    #undef OnPlayerLeaveRaceCheckpoint
#else
    #define _ALS_OnPlayerLeaveRaceCP
#endif
#if defined ac_OnPlayerLeaveRaceCP
	forward ac_OnPlayerLeaveRaceCP(playerid);
#endif
#define	OnPlayerLeaveRaceCheckpoint ac_OnPlayerLeaveRaceCP

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
    if(DebugOff)
	{
	    format(AstrF, sizeof(AstrF), "OnPlayerClickPlayerTextDraw | %i", _:playertextid);
	    LogCheat(playerid, "debug", AstrF);
	}
	PublicFlood(playerid, 23);
	#if defined ac_OnPlayerClickPlayerTextD
		return ac_OnPlayerClickPlayerTextD(playerid, playertextid);
	#else
	    return 0;
	#endif
}
#if defined _ALS_OnPlayerClickPlayerTextD
    #undef OnPlayerClickPlayerTextDraw
#else
    #define _ALS_OnPlayerClickPlayerTextD
#endif
#if defined ac_OnPlayerClickPlayerTextD
	forward ac_OnPlayerClickPlayerTextD(playerid, PlayerText:playertextid);
#endif
#define	OnPlayerClickPlayerTextDraw ac_OnPlayerClickPlayerTextD

public OnVehicleSirenStateChange(playerid, vehicleid, newstate)
{
    if(DebugOff)
	{
	    format(AstrF, sizeof(AstrF), "OnVehicleSirenStateChange | %i, %i", vehicleid, newstate);
	    LogCheat(playerid, "debug", AstrF);
	}
	PublicFlood(playerid, 25);
	#if defined ac_OnVehicleSirenStateChange
		return ac_OnVehicleSirenStateChange(playerid, vehicleid, newstate);
	#else
	    return 0;
	#endif
}
#if defined _ALS_OnVehicleSirenStateChange
    #undef OnVehicleSirenStateChange
#else
    #define _ALS_OnVehicleSirenStateChange
#endif
#if defined ac_OnVehicleSirenStateChange
	forward ac_OnVehicleSirenStateChange(playerid, vehicleid, newstate);
#endif
#define	OnVehicleSirenStateChange ac_OnVehicleSirenStateChange

public OnPlayerSelectObject(playerid, type, objectid, modelid, Float:fX, Float:fY, Float:fZ)
{
    if(DebugOff)
	{
	    format(AstrF, sizeof(AstrF), "OnPlayerSelectObject | %i, %i, %i, %f, %f, %f", type, objectid, modelid, fX, fY, fZ);
	    LogCheat(playerid, "debug", AstrF);
	}
	PublicFlood(playerid, 26);
	#if defined ac_OnPlayerSelectObject
		return ac_OnPlayerSelectObject(playerid, type, objectid, modelid, fX, fY, fZ);
	#else
	    return 0;
	#endif
}
#if defined _ALS_OnPlayerSelectObject
    #undef OnPlayerSelectObject
#else
    #define _ALS_OnPlayerSelectObject
#endif
#if defined ac_OnPlayerSelectObject
	forward ac_OnPlayerSelectObject(playerid, type, objectid, modelid, Float:fX, Float:fY, Float:fZ);
#endif
#define	OnPlayerSelectObject ac_OnPlayerSelectObject

public OnVehicleSpawn(vehicleid)
{
	vehicleHealth[vehicleid] = 1000.0;
	#if defined ac_OnVehicleSpawn
		return ac_OnVehicleSpawn(vehicleid);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnVehicleSpawn
    #undef OnVehicleSpawn
#else
    #define _ALS_OnVehicleSpawn
#endif
#if defined ac_OnVehicleSpawn
	forward ac_OnVehicleSpawn(vehicleid);
#endif
#define	OnVehicleSpawn ac_OnVehicleSpawn

static DamageSystem(playerid, weap, hitid, Float:topldist) if(!playerRetardKill{hitid} && !playerFakeKill{hitid})
{
 	new Float:ndmg, Float:dmg = WeaponDamage[weap];
	if(25 <= weap <= 27)
	{
		ndmg = (topldist / 7.5);
		if(ndmg >= 1.0 && (5.0 <= topldist <= MaxDistShot[weap - 22])) dmg = (dmg / ndmg);
	}
 	new Float:heal = playerHealth[hitid], Float:arm = playerArmour[hitid];
 	#if defined OnPlayerDamageStatusUpdateAC
		if(!OnPlayerDamageStatusUpdateAC(playerid, hitid, dmg, heal, arm, weap)) return;
	#endif
	playerLastHitID[hitid] = playerid;
    playerLastHitTick[hitid] = GetTickCount();
	if(!arm)
    {
        if((heal - dmg) > 0.0) SetPlayerHealth(hitid, (heal - dmg));
        else
		{
		    DeathSystem(hitid, playerid, weap);
		    if(!CheatStatus[AC_INFDAMAGE]) HideDamage(playerid);
		}
    }
	else if(dmg > arm)
    {
        SetPlayerArmour(hitid, 0.0);
        if((heal - (dmg - arm)) > 0.0) SetPlayerHealth(hitid, (heal - (dmg - arm)));
        else
		{
		    DeathSystem(hitid, playerid, weap);
		    if(!CheatStatus[AC_INFDAMAGE]) HideDamage(playerid);
		}
    }
	else SetPlayerArmour(hitid, (arm - dmg));
    if(!CheatStatus[AC_INFDAMAGE])
	{
	    CheatCount[AC_INFDAMAGE]++;
		ShowDamage(playerid, hitid);
	}
}

static DeathSystem(playerid, killerid, reason)
{
    if(playerRetardKill{playerid} || playerFakeKill{playerid}) return;
    playerRetardKill{playerid} = 1;
    
    #if defined ac_OnPlayerDeath
		ac_OnPlayerDeath(playerid, killerid, reason);
	#else
	    #pragma unused killerid
	    #pragma unused reason
	#endif
	SetPlayerHealth(playerid, 1.0);
	ResetPlayerWeapons(playerid);
	ClearAnimations(playerid);
	TogglePlayerControllable(playerid, 0);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	
	if(playerDeathTimer[playerid]) KillTimer(playerDeathTimer[playerid]);
    playerDeathTimer[playerid] = SetTimerEx("ac_DeathRespawn", 3000, 0, "i", playerid);
    
	new anim = GetPlayerAnimationIndex(playerid);
	if(1195 <= anim <= 1198) // jump
	{
	    ApplyAnimation(playerid, "PED", "KO_skid_back", 4.1, 0, 0, 0, 1, 0, 1);
		return;
	}
	if((1538 <= anim <= 1544) || anim == 1250) // water
	{
		ApplyAnimation(playerid, "PED", "Drown", 4.1, 0, 0, 0, 1, 0, 1);
		return;
	}
	ApplyAnimation(playerid, "PED", "KO_shot_front", 4.1, 0, 0, 0, 1, 0, 1);
}

DLG(6157, playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
    switch(listitem)
    {
		case 0: ShowSettingDialogAC(playerid, 0);
		case 1:
		{
		    str = "";
			GetNetworkStats(str, sizeof(str));
			strins(str, "{FFFFFF}", 0);
			ShowPlayerDialog(playerid, 6148, DIALOG_STYLE_MSGBOX, "{3E8BFE}NetStats", str, "Назад", "");
		}
		case 2:
		{
		    str = "";
			mysql_stat(str);
   			strins(str, "{FFFFFF}", 0);
		    for(new id, i; i < 10; i++)
			{
			    id = strfind(str, "  ");
				if(id != -1) str[id + 1] = '\n';
			}
		    ShowPlayerDialog(playerid, 6148, DIALOG_STYLE_MSGBOX, "{3E8BFE}MysqlStats", str, "Назад", "");
		}
		case 3: ShowPlayerDialog(playerid, 6153, DIALOG_STYLE_LIST, "{3E8BFE}Логи", "{FFFFFF}kicklog\npanellog", "Выбрать", "Назад");
		case 4:
		{
		    playerStatsDialogPage[playerid] = 0;
			ShowCheatStatsAC(playerid);
		}
    }
    return 1;
}

DLG(6156, playerid, response, listitem, inputtext[])
{
	if(!response) ShowSetAndLogsPanel(playerid);
	else
	{
		if(!strcmp(inputtext, "Следующая страница")) playerStatsDialogPage[playerid]++;
		else if(!strcmp(inputtext, "Предыдущая страница")) playerStatsDialogPage[playerid]--;
		ShowCheatStatsAC(playerid);
	}
	return 1;
}

DLG(6154, playerid, response, listitem, inputtext[])
{
    if(!response) ShowPlayerDialog(playerid, 6153, DIALOG_STYLE_LIST, "{3E8BFE}Логи", "{FFFFFF}kicklog\npanellog", "Выбрать", "Назад");
    else
    {
        new fname[16], fdate[12];
	    sscanf(playerShowLogData[playerid][listitem], "p<|>s[16]s[12]", fname, fdate);
		if(fname[0] && fdate[0]) ShowLogDialogAC(playerid, fname, fdate);
	}
	return 1;
}

DLG(6153, playerid, response, listitem, inputtext[])
{
	if(!response) ShowSetAndLogsPanel(playerid);
	else
	{
        new ayear, amonth, aday, count, fdate[12];
	    getdate(ayear, amonth, aday);
	    str = "{FFFFFF}";
	    for(new id; id < 365; id++)
	    {
	        if(count >= MAX_DLIST) break;
	    	format(fdate, sizeof(fdate), "%i-%i-%i", aday, amonth, ayear);
	    	if(--aday <= 0)
			{
				if(--amonth <= 0)
				{
				    ayear--;
				    amonth = 12;
  				}
  				aday = GetMonthDaysAC(ayear, amonth);
			}
		    fstrcat(str, "%s\n", fdate);
			format(playerShowLogData[playerid][count++], 32, "%s|%s", inputtext, fdate);
        }
        if(str[0]) ShowPlayerDialog(playerid, 6154, DIALOG_STYLE_LIST, "{3E8BFE}Логи", str, "Выбрать", "Назад");
	}
	return 1;
}

DLG(6152, playerid, response, listitem, inputtext[])
{
    if(!response) ShowSetAndLogsPanel(playerid);
    else ShowLogDialogAC(playerid, playerLogDialogName[playerid], playerLogDialogDate[playerid], strval(inputtext));
    return 1;
}

DLG(6151, playerid, response, listitem, inputtext[])
{
    if(!response) ShowSetAndLogsPanel(playerid);
    else
    {
        if(!strcmp(inputtext, "Следующая страница")) ShowLogDialogAC(playerid, playerLogDialogName[playerid], playerLogDialogDate[playerid], (playerLogDialogPage[playerid] + 1));
	    else if(!strcmp(inputtext, "Предыдущая страница")) ShowLogDialogAC(playerid, playerLogDialogName[playerid], playerLogDialogDate[playerid], (playerLogDialogPage[playerid] - 1));
	    else if(!strcmp(inputtext, "-----------------")) ShowPlayerDialog(playerid, 6152, DIALOG_STYLE_INPUT, "{3E8BFE}Логи", "{FFFFFF}Введите номер страницы:", "Принять", "Назад");
		else ShowLogDialogAC(playerid, playerLogDialogName[playerid], playerLogDialogDate[playerid], playerLogDialogPage[playerid]);
	}
	return 1;
}

DLG(6148, playerid, response, listitem, inputtext[])
{
 	ShowSetAndLogsPanel(playerid);
 	return 1;
}

DLG(6147, playerid, response, listitem, inputtext[])
{
	if(!response)
	{
		playerSettingDialogPage[playerid] = -1;
		ShowSetAndLogsPanel(playerid);
	}
	else
	{
        if(!strcmp(inputtext, "Следующая страница")) ShowSettingDialogAC(playerid, (playerSettingDialogPage[playerid] + 1));
	    else if(!strcmp(inputtext, "Предыдущая страница")) ShowSettingDialogAC(playerid, (playerSettingDialogPage[playerid] - 1));
	    else if(!strcmp(inputtext, "-----------------")) playerSettingDialogPage[playerid] = -1;
	    else
	    {
	        CheatStatus[playerSettingData[playerid][listitem]] = !CheatStatus[playerSettingData[playerid][listitem]];
		    FileID = fopen("anticheat/setting.txt", io_write);
			if(FileID)
			{
			    str = "";
		        for(new id; id < sizeof(CheatName); id++) fstrcat(str, "%s=%i\r\n", CheatName[id], CheatStatus[id]);
			    fwrite(FileID, str);
				fclose(FileID);
			}
			foreach(Player, otherid) if(playerSettingDialogPage[playerid] == playerSettingDialogPage[otherid] && playerSettingDialogPage[otherid] != -1) ShowSettingDialogAC(otherid, playerSettingDialogPage[otherid]);
		}
	}
	return 1;
}

stock ac_ApplyAnimation(playerid, lib[], name[], Float:delta, loop, lockx, locky, freeze, time, sync = 0)
{
	if(playerRetardKill{playerid}) return 0;
    return ApplyAnimation(playerid, lib, name, delta, loop, lockx, locky, freeze, time, sync);
}
#if defined _ALS_ApplyAnimation
    #undef ApplyAnimation
#else
    #define _ALS_ApplyAnimation
#endif
#define	ApplyAnimation ac_ApplyAnimation

#if defined OnPlayerWarningPanelAC
	forward OnPlayerWarningPanelAC(playerid, reason[]);
#endif
#if defined OnPlayerCheatAC
	forward OnPlayerCheatAC(playerid, code, name[]);
#endif
#if defined OnPlayerSpawnAC
	forward OnPlayerSpawnAC(playerid, code, name[]);
#endif
#if defined OnPlayerRemoveAC
	forward OnPlayerRemoveAC(playerid, code, name[]);
#endif
#if defined OnPlayerUpdate1000AC
	forward OnPlayerUpdate1000AC(playerid);
#endif
#if defined OnPlayerUpdate5000AC
	forward OnPlayerUpdate5000AC(playerid);
#endif
#if defined OnPlayerUpdate200AC
	forward OnPlayerUpdate200AC(playerid);
#endif
#if defined OnGameModeUpdate5000AC
    forward OnGameModeUpdate5000AC();
#endif
#if defined OnPlayerDamageStatusUpdateAC
    forward OnPlayerDamageStatusUpdateAC(playerid, hitid, &Float:dmg, &Float:heal, &Float:arm, weaponid);
#endif

stock ac_GetPlayerWeapon(playerid)
{
	new weap = playerWeaponID[playerid];
    if(weap && weap != playerWeapon[playerid][WeaponSlots[weap]]) return playerWeapon[playerid][WeaponSlots[weap]];
	return weap;
}
#if defined _ALS_GetPlayerWeapon
    #undef GetPlayerWeapon
#else
    #define _ALS_GetPlayerWeapon
#endif
#define	GetPlayerWeapon ac_GetPlayerWeapon

stock ac_GetPlayerAmmo(playerid)
{
	new ammo = GetPlayerAmmo(playerid), weap = playerWeaponID[playerid];
    if(ammo && ammo != playerAmmo[playerid][WeaponSlots[weap]]) return playerAmmo[playerid][WeaponSlots[weap]];
	return ammo;
}
#if defined _ALS_GetPlayerAmmo
    #undef GetPlayerAmmo
#else
    #define _ALS_GetPlayerAmmo
#endif
#define	GetPlayerAmmo ac_GetPlayerAmmo

stock ac_GetPlayerPing(playerid) return playerPing[playerid];
#if defined _ALS_GetPlayerPing
    #undef GetPlayerPing
#else
    #define _ALS_GetPlayerPing
#endif
#define	GetPlayerPing ac_GetPlayerPing

stock ac_GetPlayerVehicleID(playerid) return playerVehicleID[playerid];
#if defined _ALS_GetPlayerVehicleID
    #undef GetPlayerVehicleID
#else
    #define _ALS_GetPlayerVehicleID
#endif
#define	GetPlayerVehicleID ac_GetPlayerVehicleID

stock ac_GetPlayerState(playerid) return playerState{playerid};
#if defined _ALS_GetPlayerState
    #undef GetPlayerState
#else
    #define _ALS_GetPlayerState
#endif
#define	GetPlayerState ac_GetPlayerState

stock ac_IsPlayerNPC(playerid) return playerIsNPC{playerid};
#if defined _ALS_IsPlayerNPC
    #undef IsPlayerNPC
#else
    #define _ALS_IsPlayerNPC
#endif
#define	IsPlayerNPC ac_IsPlayerNPC

#undef VER_CLIENT
#undef MAX_PING
#undef MAX_MODEL
#undef MAX_DLIST
#undef PANEL_LINE

#undef strnah
#undef pressed
#undef function

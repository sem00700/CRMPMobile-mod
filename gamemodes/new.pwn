/*

	- Станции тех.обслуживания транспорта

*/

@___If_u_can_read_this_u_r_nerd();    // 10 different ways to crash DeAMX
@___If_u_can_read_this_u_r_nerd()    // and also a nice tag for exported functions table in the AMX file
{ // by Daniel_Cortez \\ pro-pawn.ru
    #emit    stack    0x7FFFFFFF    // wtf (1) (stack over... overf*ck!?)
    #emit    inc.s    cellmax    // wtf (2) (this one should probably make DeAMX allocate all available memory and lag forever)
    static const ___[][] = {"pro-pawn", ".ru"};    // pretty old anti-deamx trick
    #emit    retn
    #emit    load.s.pri    ___    // wtf (3) (opcode outside of function?)
    #emit    proc    // wtf (4) (if DeAMX hasn't crashed already, it would think it is a new function)
    #emit    proc    // wtf (5) (a function inside of another function!?)
    #emit    fill    cellmax    // wtf (6) (fill random memory block with 0xFFFFFFFF)
    #emit    proc
    #emit    stack    1    // wtf (7) (compiler usually allocates 4 bytes or 4*N for arrays of N elements)
    #emit    stor.alt    ___    // wtf (8) (...)
    #emit    strb.i    2    // wtf (9)
    #emit    switch    0
    #emit    retn    // wtf (10) (no "casetbl" opcodes before retn - invalid switch statement?)
L1:
    #emit    jump    L1    // avoid compiler crash from "#emit switch"
    #emit    zero    cellmin    // wtf (11) (nonexistent address)
}

#pragma dynamic 6250

#include <a_samp>
#include <a_http>

// include
#include "../include/a_mysql.inc"
#include "../include/Pawn.CMD.inc"
#include "../include/Pawn.RakNet.inc"
#include "../include/streamer.inc"
#include "../include/sscanf2.inc"
#define FOREACH_I_Bot 0
#define FOREACH_I_Character 0
#include "../include/foreach.inc"

// lib
#include "../include/lib/m_crzones.inc"
#include "../include/lib/m_crp.inc"
#define M_DIALOG_DialogForPlayer 1
#include "../include/lib/m_dialog.inc"

#include "../include/mxdate.inc"

#include "../include/fdialog.inc"
#include "../include/fly.inc"

#include "../include/system/cp.pwn"
#include "../include/system/cp_race.pwn"
#include "../include/system/pickup.pwn"
#include "../include/system/vehicle.pwn"

#define COLOR_YELLOW       0xFFFF00AA

#define MAX_GOV_ORG 8
#define START_MAX_GANG 9

new cont1 = 10;
new cont3 = 10;

new gPlayerLoggin[MAX_PLAYERS char];

new DuelOffer[MAX_PLAYERS]; // Кто кому предложил дуэль и наоборот
new timeduel[MAX_PLAYERS]; // Специально, чтобы отсчитывать секунды
new DuelTimer[MAX_PLAYERS]; // Таймер new
new DuelCash[MAX_PLAYERS]; // Ставка

//new connects;
new stringer1[256];
//new stringer[2048];

new Text:autosalon_select_TD[3];
new Text:autosalon_color_TD[9];
new PlayerText:autosalon_select_PTD[MAX_PLAYERS][1];
new Text:autosalon_price_TD[3];
new PlayerText:autosalon_price_PTD[MAX_PLAYERS][1];
new Text:business_menu_TD[4];
new PlayerText:business_menu_PTD[MAX_PLAYERS][4];
new PlayerText:shop_clothes_PTD[MAX_PLAYERS][1];
new Text:shop_clothes_TD[6];
new Text:logo_TD[1];
new Text:buy_car_number_TD[14];
new PlayerText:buy_car_number_PTD[MAX_PLAYERS][2];
new mysql_query_[512];
new PlayerText:speedometr02_PTD[MAX_PLAYERS][8];
new Text:speedometr02_TD[1];
new Text:enter_speedometr_TD[4];

new PlayerReportFix[MAX_PLAYERS];

#define REPORT_STATUS_NONE			0
#define REPORT_STATUS_ANSWERED		1
#define REPORT_STATUS_SKIPPED		2
#define REPORT_STATUS_DISCONNECT	3

#define TABLE_REPORTS				"reports_list"

enum TEMP_REPORT_E {
	reportID,
	reportPlayerID,
	reportDate[20],
	reportText[144]
};
new TempReportInfo[MAX_PLAYERS][TEMP_REPORT_E];



// ------------------------------------------
main()
{
	print("---------------------------------");
	print("    	         					");
	print("          BAN         ");
	print("     2020 START DEVELOPMENT      ");
	print(" DEVELOPER ALEKSEEVICH AND OSCAR ");
	print("---------------------------------");
}

// ------------------------------------------
#define SERVER_NAME 	"Discovery Russia" 		// название мода
#define SERVER_SITE 	"discovery-rp.ru" // сайт сервера
#define SERVER_MAP_NAME "Criminal Russia"			// название карты
#define SERVER_VERSION	"1.0"			// версия мода

#define AUTH_CAMERA_POS 	236.4, 810.1, 20.0 // позиции камеры при авторизации/регистрации
#define AUTH_CAMERA_LOOK 	-400.0, 400.0, 5.0 // позиции камеры при авторизации/регистрации

#define LAN_MODE

#if defined LAN_MODE

	/*#define	MYSQL_HOST		"91.134.194.237"
	#define MYSQL_USER		"gs12008"
	#define MYSQL_BASE		"gs12008"
	#define MYSQL_PASS		"ebaltvoyrot777"*/

/*	#define	MYSQL_HOST		"localhost"
	#define MYSQL_USER		"root"
	#define MYSQL_BASE		"trueerussiarp"
	#define MYSQL_PASS		""*/
	
	#define	MYSQL_HOST		"mysql.royal-host.ru"
	#define MYSQL_USER		"gs35735"
	#define MYSQL_BASE		"gs35735"
	#define MYSQL_PASS		"tFb-ZK5-PRT-nyE"

#else

/*	#define	MYSQL_HOST		"91.134.194.237"
	#define MYSQL_USER		"gs16044"
	#define MYSQL_BASE		"gs16044"
	#define MYSQL_PASS		"shabanovlox777"*/
	
/*	#define	MYSQL_HOST		"91.134.194.237"
	#define MYSQL_USER		"gs16719"
	#define MYSQL_BASE		"gs16719"
	#define MYSQL_PASS		"SsGMKZ4CoGdNAeCnRT0GFyUBfVcfrB6b"*/

	#define	MYSQL_HOST		"mysql.royal-host.ru"
	#define MYSQL_USER		"gs35735"
	#define MYSQL_BASE		"gs35735"
	#define MYSQL_PASS		"tFb-ZK5-PRT-nyE"
#endif

#pragma warning disable 239 // - Прихоти самблайма
#pragma warning disable 214 // - Прихоти самблайма


new l_string[64];

#define MAX_FLOOD_RATE	(3000)
#define FLOOD_RATE_INC	(1000)
#define FLOOD_RATE_KICK	(5000)

#define DONATE_CAR_ID_1 	1
#define DONATE_CAR_ID_2 	1
#define DONATE_CAR_ID_3 	1
#define DONATE_CAR_ID_4 	1
#define DONATE_CAR_ID_5 	1
#define DONATE_CAR_ID_6 	1
#define DONATE_CAR_ID_7 	1
#define DONATE_CAR_ID_8 	1
#define DONATE_CAR_ID_9 	1
#define DONATE_CAR_ID_10 	1

#define DONATE_CAR_PRICE_1 		1
#define DONATE_CAR_PRICE_2 		1
#define DONATE_CAR_PRICE_3 		1
#define DONATE_CAR_PRICE_4 		1
#define DONATE_CAR_PRICE_5 		1
#define DONATE_CAR_PRICE_6 		1
#define DONATE_CAR_PRICE_7 		1
#define DONATE_CAR_PRICE_8 		1
#define DONATE_CAR_PRICE_9 		1
#define DONATE_CAR_PRICE_10 	1

#define RAND_WEATHER				// система рандомной погоды
#define ATM_CREATED_PICKUP			// создавать ли пикапы для банкоматов
#define FUEL_ST_CREATED_PICKUP		// создавать ли пикапы для азс

#define ENTER_PASSWORD_ATTEMPS 	(3)  // кол-во попыток на ввод пароля
#define REFER_BONUS_MONEY	(50_000) // бонус выдача денег реферу

#define MAX_FAMILY              (200) // максимальное кол-во семей
#define MAX_GIFT                (100) // максимальное кол-во подков

#define MAX_AFK_TIME 			(30) // максимальное время афк (в минутах)
#define MAX_BANK_ACCOUNTS 		(8)	 // максимальное кол счетов в банке
#define MAX_PHONE_BOOK_CONTACTS (20) // макс. кол-во контактов для телефонной книги
#define MAX_AUTHORIZATION_TIME	(90) // время на авторизацию (в секундах)
#define MAX_FUEL_STATIONS		(18) // максимальное кол-во заправок
#define MAX_BUSINESS			(200)// максимальное кол-во предприятий
#define MAX_BUSINESS_GPS		(50) // максимальное кол-во предприятий в GPS
#define MAX_HOUSES				(900)// максимальное кол-во домов
#define MAX_HOUSE_ROOMS			(5)	 // максимальное кол-во комнат в доме
#define MAX_GATES				(1)	 // максимальное кол-во шлагбаум/ворот
#define MAX_ENTRANCES			(200) // максимальное кол-во подъездов
#define MAX_ENTRANCE_FLOORS		(5)	 // максимальное кол-во этажей в подъезде
#define MAX_HOTELS 				(3)	 // максимальное кол-во отелей
#define MAX_HOTEL_FLOORS 		(7)  // максимальное кол-во этажей отеля
#define MAX_HOTEL_ROOMS 		(MAX_HOTEL_FLOORS * 12) // максимальное кол-во номеров в отеле
#define MAX_OWNABLE_CARS		(1500)// максимальное кол-во личных ТС
#define MAX_VEHICLE_TRUNK_SLOTS	(8)	 // максимальное кол-во слотов багажника
#define MAX_GANG_REPOSITORIES	(3)  // максимальное кол-во складов для банд
#define MAX_GZ					(101)// максимальное кол-во ганг-зон
//#define MAX_RADARS				(100)// максимальное кол-во радаров
//#define MAX_WEAPON_TINTS		(13) // максимальное кол-во раскрасок оружия
#define MAX_ADVERTS				(100)// максимальное кол-во объявлений
#define MAX_GREEN_ZONES			(13)	 // максимальное кол-во зеленых зон

#define MIN_PLAYERS_FOR_CAPTURE (1)	 // минимальное кол-во игроков для захвата территории

#define BIZ_HEALTH_SERVICE_PRICE (150)	// стоимость использование аптечки в бизнесе

#define ADVERT_SEND_PRICE		(250) // стоимость отправки объявления

#define MAP_ICON_STREAM_DISTANCE (100.0) // прорисовка иконок на карте (радиус)

#define MAX_ADMINS 14

#define MAX_BIND 20
#define DIALOG_QM 6565
#define DIALOG_EDIT_QM 6566
#define DIALOG_TEXT_QM 6567

// ------------------------------------------
#define public:%0(%1) \
			forward %0(%1); \
				public %0(%1)

#define Kick:(%0) FixKick(%0)


#define RandomPrize   100000
//#define Dialog ShowPlayerDialog

#define HOLDING(%0) \
	((newkeys & (%0)) == (%0))

#define PRESSED(%0) \
	(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))

#define RELEASED(%0) \
	(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))

#define PRESSING(%0,%1) \
	(%0 & (%1))

forward AntiBH(playerid);
forward AntiBH1(playerid);

// ------------------------------------------
#define VEHICLE_COORD_TYPE_BOOT		(1)
#define VEHICLE_COORD_TYPE_BONNET	(2)

// ------------------------------------------
#define SELECT_PANEL_TYPE_NONE			0
#define SELECT_PANEL_TYPE_CLOTHING		1
#define SELECT_PANEL_TYPE_REG_SKIN		2
#define SELECT_PANEL_TYPE_CAR_MARKET 	3
//*****************************************

#define PT_ITEM_TYPE_NONE   		(0)
#define PT_ITEM_TYPE_ENGINE     	(1)
#define PT_ITEM_TYPE_BRAKE     		(2)
#define PT_ITEM_TYPE_STABILITY     	(3)

// ------------------------------------------
#define GATE_STATUS_OPEN	true
#define GATE_STATUS_CLOSE	false

// ------------------------------------------
#define GPS_STATUS_ON	true
#define GPS_STATUS_OFF	false

// ------------------------------------------
#define ADMIN_TYPE_NONE 	0

// ------------------------------------------
#define CONVERT_TIME_TO_SECONDS 	1
#define CONVERT_TIME_TO_MINUTES 	2
#define CONVERT_TIME_TO_HOURS 		3
#define CONVERT_TIME_TO_DAYS 		4
#define CONVERT_TIME_TO_MONTHS 		5
#define CONVERT_TIME_TO_YEARS 		6

// ------------------------------------------
#define ACCOUNT_STATE_NONE 		0
#define ACCOUNT_STATE_REGISTER 	1
#define ACCOUNT_STATE_LOGIN 	2
#define ACCOUNT_STATE_REG_SKIN 	3

// ------------------------------------------
#define REQUEST_TYPE_OFF		-1
#define REQUEST_TYPE_SUBNET		1
#define REQUEST_TYPE_IP			2

// ------------------------------------------
#define PIN_CODE_STATE_NONE 	0
#define PIN_CODE_STATE_SET 		1 // установка пин кода
#define PIN_CODE_STATE_CHECK	2 // проверка пин кода
#define PIN_CODE_STATE_CHANGE	3 // смена пин кода
#define PIN_CODE_STATE_LOGIN_CHECK 4 // проверка пин кода при авторизации

// ------------------------------------------
#define HOUSE_TYPE_NONE		(-1) 	// нет
#define HOUSE_TYPE_HOME		(0) 	// дом
#define HOUSE_TYPE_ROOM		(1) 	// аренда комнаты
#define HOUSE_TYPE_HOTEL	(2) 	// отель

// ------------------------------------------
#define REALTOR_TYPE_NONE	(0)
#define REALTOR_TYPE_HOUSE	(1) // дом
#define REALTOR_TYPE_BIZ	(2) // биз

// ------------------------------------------
#define GetItemInfo(%0,%1) 		g_item_type[%0][%1]

// ------------------------------------------
#define GetTrunkData(%0,%1,%2) 			g_vehicle_trunk[%0][%1][%2]
#define SetTrunkData(%0,%1,%2,%3) 		g_vehicle_trunk[%0][%1][%2] = %3
#define AddTrunkData(%0,%1,%2,%3,%4) 	g_vehicle_trunk[%0][%1][%2] %3= %4

#define IsTrunkFreeSlot(%0,%1)			!GetTrunkData(%0, %1, VT_SQL_ID)
#define MAX_BIZ 150

// ------------------------------------------
#define GetOwnableCarData(%0,%1) 		g_ownable_car[%0][%1]
#define SetOwnableCarData(%0,%1,%2)		g_ownable_car[%0][%1] = %2
#define AddOwnableCarData(%0,%1,%2,%3)	g_ownable_car[%0][%1] %2= %3

#define IsOwnableCarOwned(%0)			(GetOwnableCarData(%0, OC_OWNER_ID) > 0)

// ------------------------------------------
#define GetHotelData(%0,%1,%2) 			g_hotel[%0][%1][%2]
#define SetHotelData(%0,%1,%2,%3) 		g_hotel[%0][%1][%2] = %3
#define AddHotelData(%0,%1,%2,%3,%4) 	g_hotel[%0][%1][%2] %3= %4

#define IsHotelRoomOwned(%0,%1)		(GetHotelData(%0, %1, H_OWNER_ID) > 0) // занят ли номер отеля

// ------------------------------------------
#define GetEntranceData(%0,%1) 			g_entrance[%0][%1]
#define SetEntranceData(%0,%1,%2) 		g_entrance[%0][%1] = %2
#define AddEntranceData(%0,%1,%2,%3) 	g_entrance[%0][%1] %2= %3

#define GetPlayerPremium(%0)	GetPlayerData(%0, P_PREMIUM)		// премиум-аккаунт

#define GetFamilyCarData(%0,%1)        g_family_car[%0][%1]
#define SetFamilyCarData(%0,%1,%2)     g_family_car[%0][%1] = %2
#define AddFamilyCarData(%0,%1,%2,%3)  g_family_car[%0][%1] %2= %3

// ------------------------------------------
/*#define GetGateData(%0,%1)			g_gate[%0][%1]
#define SetGateData(%0,%1,%2)		g_gate[%0][%1] = %2
#define AddGateData(%0,%1,%2,%3)	g_gate[%0][%1] %2= %3*/

// ------------------------------------------
#define GetOrderData(%0,%1)			g_order[%0][%1]
#define SetOrderData(%0,%1,%2)		g_order[%0][%1] = %2
#define AddOrderData(%0,%1,%2,%3)	g_order[%0][%1] %2= %3

#define	GetPlayerYouTubeEx(%0)	GetPlayerData(%0, P_YOUTUBE) 			// уровень ютуберки

// ------------------------------------------
#define AntiFloodPlayerInit(%0) 			g_player_flood[%0] = g_flood_default_values

#define GetPlayerAntiFloodData(%0,%1) 		g_player_flood[%0][%1]
#define SetPlayerAntiFloodData(%0,%1,%2)	g_player_flood[%0][%1] = %2
#define AddPlayerAntiFloodData(%0,%1,%2,%3)	g_player_flood[%0][%1] %2= %3

#define GetFamilyData(%0,%1)    g_family[%0][%1]
#define SetFamilyData(%0,%1,%2) g_family[%0][%1] = %2
#define AddFamilyData(%0,%1,%2,%3) g_family[%0][%1] %2= %3

#define GetGiftData(%0,%1) 			g_gift[%0][%1]
#define SetGiftData(%0,%1,%2)		g_gift[%0][%1] = %2
#define AddGiftData(%0,%1,%2,%3) 	g_gift[%0][%1] %2= %3

#define GetPlayerCurrentDonate(%0)      GetPlayerData(%0, P_DONATE_MONEY)     // текущий баланс донат-очков
#define GetPlayerTotalDonate(%0)        GetPlayerData(%0, P_DONATE_TOTAL)   // всего пополнений баланса

// ------------------------------------------
#define GetPlayerPhoneBook(%0,%1,%2) 	g_player_phone_book[%0][%1][%2]
#define SetPlayerPhoneBook(%0,%1,%2,%3)	g_player_phone_book[%0][%1][%2] = %3

#define IsPlayerPhoneBookInit(%0) 			g_player_phone_book_init[%0]
#define SetPlayerPhoneBookInitStatus(%0,%1) g_player_phone_book_init[%0] = %1

#define GetPlayerPhoneBookContacts(%0) 		g_player_phone_book_contacts[%0]
#define SetPlayerPhoneBookContacts(%0,%1) 	g_player_phone_book_contacts[%0] = %1

#define GetPlayerPhoneBookSelectContact(%0) 		g_player_phone_book_select_cont[%0]
#define SetPlayerPhoneBookSelectContact(%0,%1) 		g_player_phone_book_select_cont[%0] = %1

// ------------------------------------------
#define GetPlayerPhoneCall(%0,%1) 		g_player_phone_call[%0][%1]
#define SetPlayerPhoneCall(%0,%1,%2)	g_player_phone_call[%0][%1] = %2

#define ClearPlayerPhoneCall(%0) g_player_phone_call[%0] = g_phone_call_default_values

// ------------------------------------------
#define GetPlayerOfferInfo(%0,%1) 		g_player_offer[%0][%1]
#define SetPlayerOfferInfo(%0,%1,%2) 	g_player_offer[%0][%1] = %2

#define SetPlayerOfferValue(%0,%1,%2) g_player_offer[%0][O_INCOMING_VALUE][%1] = %2
#define ClearPlayerOffer(%0) g_player_offer[%0] = g_offer_default_values

// ------------------------------------------
#define GetRepositoryData(%0,%1,%2) 	g_repository[%0][%1][%2]
#define SetRepositoryData(%0,%1,%2,%3)	g_repository[%0][%1][%2] = %3

#define	GetPlayerTest(%0)	GetPlayerData(%0, P_TEST)

// ------------------------------------------
#define GetPlayerListitemValue(%0,%1) 		g_player_listitem[%0][%1]
#define SetPlayerListitemValue(%0,%1,%2) 	g_player_listitem[%0][%1] = %2

#define ClearPlayerListitemValues(%0)		g_player_listitem[%0] = g_listitem_values

#define GetPlayerUseListitem(%0) 		g_player_listitem_use[%0]
#define SetPlayerUseListitem(%0,%1) 	g_player_listitem_use[%0] = %1

// ------------------------------------------
#define GetBankAccountData(%0,%1,%2)		g_bank_account[%0][%1][%2]
#define SetBankAccountData(%0,%1,%2,%3) 	g_bank_account[%0][%1][%2] = %3

#define GetPlayerBankTransfer(%0,%1) 	g_player_bank_transfer[%0][%1]
#define SetPlayerBankTransfer(%0,%1,%2)	g_player_bank_transfer[%0][%1] = %2

// ------------------------------------------
#define GetInfoPickupData(%0,%1) info_pickup[%0][%1]

// ------------------------------------------
#define GetTempJobInfo(%0,%1) g_temp_jobs[%0][%1]

// ------------------------------------------
#define GetMonthName(%0) 	month_name[%0 - 1]
#define GetDayName(%0) 		day_name[%0 - 1]

// ------------------------------------------
#define GetNumericName(%0)	numeric_name[%0 - 1]

// ------------------------------------------
#define GetATMInfo(%0,%1)	g_atm[%0][%1]

// ------------------------------------------
#define GetPlayerDrivingExamInfo(%0,%1) 	g_player_driving_exam[%0][%1]
#define SetPlayerDrivingExamInfo(%0,%1,%2) 	g_player_driving_exam[%0][%1] = %2
#define ClearPlayerDrivingExamInfo(%0) 		g_player_driving_exam[%0] = g_driving_exam_default_values

// ------------------------------------------
#define GetTeleportData(%0,%1)		g_teleport[%0][%1]
#define SetTeleportData(%0,%1,%2)	g_teleport[%0][%1] = %2

// ------------------------------------------
#define GetTeleportListData(%0,%1)		g_teleport_list[%0][%1]

// ------------------------------------------
#define GetGangZoneData(%0,%1)			g_gang_zone[%0][%1]
#define SetGangZoneData(%0,%1,%2)		g_gang_zone[%0][%1] = %2

// ------------------------------------------
#define GetGangRepositoryData(%0,%1)		g_gang_repository[%0][%1]
#define SetGangRepositoryData(%0,%1,%2)		g_gang_repository[%0][%1] = %2

// ------------------------------------------
#define GetServerRadioData(%0,%1)	g_server_radio[%0][%1]
#define GetHelpInfoData(%0,%1) 		help_info[%0][%1]
#define GetAnimListData(%0,%1) 		anim_list[%0][%1]
#define GetMapIconsData(%0,%1) 		map_icons[%0][%1]

// ------------------------------------------
#define GetPlayerGPSInfo(%0,%1) 	g_player_gps[%0][%1]
#define SetPlayerGPSInfo(%0,%1,%2) 	g_player_gps[%0][%1] = %2

// ------------------------------------------
#define GetPlayerImprovementInfo(%0,%1) g_player_improvements[%0][%1]

// ------------------------------------------
#define GetPlayerPinCodeState(%0) 		pin_code_state[%0]
#define SetPlayerPinCodeState(%0,%1) 	pin_code_state[%0] = %1

#define GetPlayerPinCodeValue(%0,%1) 	pin_code_value[%0][%1]
#define SetPlayerPinCodeValue(%0,%1,%2)	pin_code_value[%0][%1] = %2

// ------------------------------------------
#define GetPlayerSettingData(%0,%1)		g_player_setting[%0][%1]
#define SetPlayerSettingData(%0,%1,%2)	g_player_setting[%0][%1] = %2
#define AddPlayerSettingData(%0,%1,%2)	g_player_setting[%0][%1] += %2

// ------------------------------------------
#define GetPlayerData(%0,%1) 	g_player[%0][%1]

//23
#define	GetPlayerBoxEx(%0)	GetPlayerData(%0, P_BOXQUEST) 			// уровень админки
//

#define SetPlayerData(%0,%1,%2)	g_player[%0][%1] = %2
#define AddPlayerData(%0,%1,%2,%3) g_player[%0][%1] %2= %3

#define GetPlayerAccountID(%0)	GetPlayerData(%0, P_ACCOUNT_ID) 	// ид аккаунта
#define GetPlayerIpEx(%0)		GetPlayerData(%0, P_IP) 			// ип игрока
#define GetPlayerNameEx(%0)		GetPlayerData(%0, P_NAME) 			// имя игрока
#define GetPlayerColorEx(%0)	GetPlayerData(%0, P_COLOR)			// цвет игрока
#define GetPlayerSelectSkin(%0)	GetPlayerData(%0, P_SELECT_SKIN) 	// выбраный скин
#define GetPlayerLevel(%0)		GetPlayerData(%0, P_LEVEL)			// уровень игрока
#define GetPlayerExp(%0)		GetPlayerData(%0, P_EXP)			// очки опыта игрока
#define GetPlayerSuspect(%0)	GetPlayerData(%0, P_SUSPECT)		// уровень розыска игрока
#define GetExpToNextLevel(%0)	((GetPlayerData(%0, P_LEVEL)+1)*4) 	// очков опыта к следуйщему уровню
#define GetPlayerPhone(%0)		GetPlayerData(%0, P_PHONE)			// номер телефона игрока
#define GetPlayerSex(%0)		GetPlayerData(%0, P_SEX)			// пол игрока
#define GetPlayerSexName(%0)	GetPlayerData(%0, P_SEX) ? ("Женский") : ("Мужской") // название пола
#define GetPlayerChatType(%0)	GetPlayerData(%0, P_CHAT_TYPE) 		// тип чата GetPlayerRepCar
#define GetPlayerRepCar(%0)	GetPlayerData(%0, P_REPCARID) 		// тип чата GetPlayerRepCar
#define	GetPlayerAdminEx(%0)	GetPlayerData(%0, P_ADMIN) 			// уровень админки
#define	GetPlayerWeaponLic(%0)	GetPlayerData(%0, P_WEAPON_LIC)
#define	GetPlayerHelperEx(%0)	GetPlayerData(%0, P_HELPER) 			// уровень хелперки
#define	GetPlayerSecretEx(%0)	GetPlayerData(%0, P_SECRET) 			// скрытность
#define GetPlayerMoneyEx(%0)	GetPlayerData(%0, P_MONEY) 			// деньги игрока
#define GetPlayerBankMoney(%0)	GetPlayerData(%0, P_BANK) 			// деньги игрока
#define GetPlayerAFKTime(%0)	GetPlayerData(%0, P_AFK_TIME) 		// время афк
#define GetPlayerLastVehicle(%0) GetPlayerData(%0, P_LAST_VEHICLE) 	// ид последнего авто в котором сидел
#define GetPlayerJobCar(%0)		GetPlayerData(%0, P_JOB_CAR) 		// рабочий транспорт
#define GetPlayerJob(%0)		GetPlayerData(%0, P_JOB) 			// работа
#define GetPlayerInBiz(%0)		GetPlayerData(%0, P_IN_BUSINESS) 	// в какой бизнес вошел\находится
#define GetPlayerInHouse(%0)	GetPlayerData(%0, P_IN_HOUSE) 		// в какой доме вошел\находится
#define GetPlayerTeamEx(%0)		GetPlayerData(%0, P_TEAM)			// организация в которой состоит игрок
#define GetPlayerHealthEx(%0)	GetPlayerData(%0, P_HEALTH)			// количество здоровья
#define GetPlayerPremiumTime(%0)	GetPlayerData(%0, P_PREMIUM_TIME) // время действия премиум-аккаунта

#define GetPlayerSpawnSetting(%0) 		GetPlayerData(%0, P_SPAWN)  // место спавна
#define SetPlayerSpawnSetting(%0,%1) 	SetPlayerData(%0, P_SPAWN, %1)  // установка места спавна

//#define GetPlayerDonateRub(%0) 			GetPlayerData(%0, P_DONATE_RUB) 	// текущий баланс донат-рублей

#define GetPlayerDonateMoney(%0) 		GetPlayerData(%0, P_DONATE_MONEY) 	// текущий баланс донат-очков
#define GetPlayerTotalDonate(%0) 		GetPlayerData(%0, P_DONATE_TOTAL) 	// всего пополнений баланса

#define GetPlayerInEntrance(%0)			GetPlayerData(%0, P_IN_ENTRANCE)		// в каком подъезде
#define GetPlayerInEntranceFloor(%0)	GetPlayerData(%0, P_IN_ENTRANCE_FLOOR)	// на каком этаже в подъезде

#define GetPlayerJobName(%0) 	job_name[GetPlayerData(%0, P_JOB)]

#define GetPlayerTempJob(%0) 			GetPlayerData(%0, P_TEMP_JOB) 		// временная работа
#define GetPlayerTempJobState(%0) 		GetPlayerData(%0, P_TEMP_JOB_STATE) // что делать
#define GetPlayerTempJobCheckAnim(%0)	GetPlayerData(%0, P_TEMP_JOB_CHECK) // проверка анимки
#define GetPlayerJobLoadItems(%0) 		GetPlayerData(%0, P_JOB_LOAD_ITEMS) // загружено (...)
#define GetPlayerJobWage(%0) 			GetPlayerData(%0, P_JOB_WAGE) 		// зарплата

#define GetPlayerOwnableCar(%0)			GetPlayerData(%0, P_OWNABLE_CAR)	// ид личного ТС
#define GetPlayerRentCar(%0)			GetPlayerData(%0, P_RENT_CAR)		// ид арендованного ТС
#define GetPlayerAllowedCar(%0)			GetPlayerData(%0, P_ALLOWED_CAR)	// ид доверенного ТС
#define GetPlayerUseTrunk(%0)			GetPlayerData(%0, P_USE_TRUNK)		// ид авто используемого багажника

#define GetPlayerCarSlots(%0)			GetPlayerData(%0, P_CAR_SLOTS)		// количество слотов для транспорта

#define GetPlayerAdminWarn(%0)			GetPlayerData(%0, P_ADMIN_WARN)		// количество админ варнов

#define SetPlayerUseTrunk(%0,%1)			SetPlayerData(%0, P_USE_TRUNK,	%1)	// установить ид авто используемого багажника
#define SetPlayerLogged(%0,%1)				SetPlayerData(%0, P_LOGGED, %1) 	// установить статус авторизации
#define SetPlayerChatType(%0,%1)			SetPlayerData(%0, P_CHAT_TYPE, %1) 	// установить тип чата

#define SetPlayerInBiz(%0,%1)				SetPlayerData(%0, P_IN_BUSINESS, %1)	// установить биз в котором находится
#define SetPlayerInHouse(%0,%1)				SetPlayerData(%0, P_IN_HOUSE, %1)		// установить дом в котором находится
#define SetPlayerTeamEx(%0,%1)				SetPlayerData(%0, P_TEAM, %1)			// организация в которой состоит игрок

#define SetPlayerInEntrance(%0,%1)			SetPlayerData(%0, P_IN_ENTRANCE, %1)		// установить подъезд в котором находится
#define SetPlayerInEntranceFloor(%0,%1)		SetPlayerData(%0, P_IN_ENTRANCE_FLOOR, %1)  // установить этаж в подъезд котором находится

#define SetPlayerTempJob(%0,%1) 			SetPlayerData(%0, P_TEMP_JOB, %1) 		// временная работа
#define SetPlayerTempJobState(%0,%1) 		SetPlayerData(%0, P_TEMP_JOB_STATE, %1)	// что делать
#define SetPlayerTempJobCheckAnim(%0,%1)	SetPlayerData(%0, P_TEMP_JOB_CHECK, %1) // проверка анимки
#define SetPlayerJobLoadItems(%0,%1) 		SetPlayerData(%0, P_JOB_LOAD_ITEMS, %1)	// загружено (...)

#define IsPlayerLogged(%0)		GetPlayerData(%0, P_LOGGED)		// статус авторизации
#define IsPlayerUseAnim(%0)		GetPlayerData(%0, P_USE_ANIM)	// использует ли анимку (/anim)
#define IsPlayerInJob(%0)		GetPlayerData(%0, P_IN_JOB)		// на работе ли
#define IsPlayerAFK(%0)			(GetPlayerData(%0, P_AFK_TIME) >= 5) // афк ли игрок
#define IsPlayerMuted(%0)       GetPlayerData(%0, P_MUTE)       // есть ли мут
#define IsPlayerFMuted(%0)       GetPlayerData(%0, P_FMUTE)       // есть ли мут

// ------------------------------------------
#define GetHouseTypeInfo(%0,%1)		g_house_type[%0][%1]
#define SetHouseTypeInfo(%0,%1,%2)	g_house_type[%0][%1] = %2

#define GetHouseData(%0,%1)			g_house[%0][%1]
#define SetHouseData(%0,%1,%2)		g_house[%0][%1] = %2
#define AddHouseData(%0,%1,%2,%3)	g_house[%0][%1] %2= %3

#define IsHouseOwned(%0)			(GetHouseData(%0, H_OWNER_ID) > 0) // куплен ли дом

// ------------------------------------------
#define GetHouseRenterInfo(%0,%1,%2) 		g_house_renters[%0][%1][%2]
#define SetHouseRenterInfo(%0,%1,%2,%3) 	g_house_renters[%0][%1][%2] = %3
#define AddHouseRenterInfo(%0,%1,%2,%3,%4)	g_house_renters[%0][%1][%2] %3= %4

#define GetHouseRentersCount(%0)			g_house_renters_count[%0]
#define SetHouseRentersCount(%0,%1)			g_house_renters_count[%0] = %1
#define AddHouseRentersCount(%0,%1,%2)		g_house_renters_count[%0] %1= %2

#define IsHouseRoomOwned(%0,%1)				(GetHouseRenterInfo(%0, %1, HR_OWNER_ID) > 0)

// ------------------------------------------
#define GetBusinessInteriorInfo(%0,%1)	 	g_business_interiors[%0][%1]
#define SetBusinessInteriorInfo(%0,%1,%2) 	g_business_interiors[%0][%1] = %2

#define GetBusinessData(%0,%1) 			g_business[%0][%1]
#define SetBusinessData(%0,%1,%2) 		g_business[%0][%1] = %2
#define AddBusinessData(%0,%1,%2,%3) 	g_business[%0][%1] %2= %3

#define IsBusinessOwned(%0)				(GetBusinessData(%0, B_OWNER_ID) > 0)

#define GetBusinessGPSInfo(%0,%1)		g_business_gps[%0][%1]
#define SetBusinessGPSInfo(%0,%1,%2)	g_business_gps[%0][%1] = %2
#define AddBusinessGPSInfo(%0,%1,%2,%3) g_business_gps[%0][%1] %2= %3

// ------------------------------------------
#define GetFuelStationData(%0,%1)		g_fuel_station[%0][%1]
#define SetFuelStationData(%0,%1,%2)	g_fuel_station[%0][%1] = %2
#define AddFuelStationData(%0,%1,%2,%3)	g_fuel_station[%0][%1] %2= %3

#define IsFuelStationOwned(%0)			(GetFuelStationData(%0, FS_OWNER_ID) > 0) // куплена ли заправка

#define GetTeamRankName(%0,%1)			rank_names[%0-1][%1-1]
#define GetTeamData(%0,%1)				g_organization[%0][%1]
#define SetTeamData(%0,%1,%2)			g_organization[%0][%1] = %2
#define GetTeamName(%0)					GetTeamData(%0, O_NAME)

#define GetWeaponName(%0)				weapon_names[%0]

//#define GetWeaponTint(%0)				weapon_tints[%0]
#define GetWeaponTintData(%0,%1)		g_weapon_tint[%0][%1]

#define GetPlayerSpectateData(%0,%1)	g_spectate[%0][%1]
#define SetPlayerSpectateData(%0,%1,%2) g_spectate[%0][%1] = %2

// ------------------------------------------
#define GetDonatePrice(%0)				g_donate_prices[%0]

//

// ------------------------------------------
/*#define GetRadarData(%0,%1)				g_radar[%0][%1]
#define SetRadarData(%0,%1,%2)			g_radar[%0][%1] = %2*/

// ------------------------------------------
#define GetAdvertData(%0,%1)			g_advert[%0][%1]
#define SetAdvertData(%0,%1,%2)			g_advert[%0][%1] = %2
//***********
#define COR_SERVER          0xFF0000FF
#define COR_QUEST           0xFFD700FF
#define c_server            "{FF0000}"
#define c_s		            "{FF0000}"
#define c_b     	        "{FFFFFF}"
#define c_i		             "{32CD32}"
#define c_m		             "{009900}"
#define COR_RED             0xFF0000FF
#define c_red               "{FF0000}"

#define f_1					"{FFFFFF}" // белый
#define f_2					"{CD5C5C}" // багровый
#define f_3					"{FF0000}" // красный
#define f_4					"{8B0000}" // темно-красный
#define f_5					"{FFC0CB}" // светло-розовый
#define f_6					"{FFA07A}" // цвет кожи
#define f_7					"{FFFF00}" // желтый
#define f_8					"{FFD700}" // золотой
#define f_9					"{EE82EE}" // фиолетовый
#define f_10				"{800080}" // темно-фиолетовый
#define f_11				"{808080}" // серый
#define f_12				"{C0C0C0}" // серебристый
#define f_13				"{00FF00}" // лайм
#define f_14				"{008000}" // зеленый
#define f_15				"{228B22}" // лесной
#define f_16				"{1E90FF}" // синий
#define f_17				"{00BFFF}" // цвет неба

#define Send            SendClientMessage
#define SCM 											SendClientMessage
#define f( 				format(string, sizeof(string),


new VehicleColoursTableRGBA[128] = {
// The existing colours from San Andreas
	0x000000FF, 0xF5F5F5FF, 0x2A77A1FF, 0x840410FF, 0x263739FF, 0x86446EFF, 0xD78E10FF, 0x4C75B7FF, 0xBDBEC6FF, 0x5E7072FF,
	0x46597AFF, 0x656A79FF, 0x5D7E8DFF, 0x58595AFF, 0xD6DAD6FF, 0x9CA1A3FF, 0x335F3FFF, 0x730E1AFF, 0x7B0A2AFF, 0x9F9D94FF,
	0x3B4E78FF, 0x732E3EFF, 0x691E3BFF, 0x96918CFF, 0x515459FF, 0x3F3E45FF, 0xA5A9A7FF, 0x635C5AFF, 0x3D4A68FF, 0x979592FF,
	0x421F21FF, 0x5F272BFF, 0x8494ABFF, 0x767B7CFF, 0x646464FF, 0x5A5752FF, 0x252527FF, 0x2D3A35FF, 0x93A396FF, 0x6D7A88FF,
	0x221918FF, 0x6F675FFF, 0x7C1C2AFF, 0x5F0A15FF, 0x193826FF, 0x5D1B20FF, 0x9D9872FF, 0x7A7560FF, 0x989586FF, 0xADB0B0FF,
	0x848988FF, 0x304F45FF, 0x4D6268FF, 0x162248FF, 0x272F4BFF, 0x7D6256FF, 0x9EA4ABFF, 0x9C8D71FF, 0x6D1822FF, 0x4E6881FF,
	0x9C9C98FF, 0x917347FF, 0x661C26FF, 0x949D9FFF, 0xA4A7A5FF, 0x8E8C46FF, 0x341A1EFF, 0x6A7A8CFF, 0xAAAD8EFF, 0xAB988FFF,
	0x851F2EFF, 0x6F8297FF, 0x585853FF, 0x9AA790FF, 0x601A23FF, 0x20202CFF, 0xA4A096FF, 0xAA9D84FF, 0x78222BFF, 0x0E316DFF,
	0x722A3FFF, 0x7B715EFF, 0x741D28FF, 0x1E2E32FF, 0x4D322FFF, 0x7C1B44FF, 0x2E5B20FF, 0x395A83FF, 0x6D2837FF, 0xA7A28FFF,
	0xAFB1B1FF, 0x364155FF, 0x6D6C6EFF, 0x0F6A89FF, 0x204B6BFF, 0x2B3E57FF, 0x9B9F9DFF, 0x6C8495FF, 0x4D8495FF, 0xAE9B7FFF,
	0x406C8FFF, 0x1F253BFF, 0xAB9276FF, 0x134573FF, 0x96816CFF, 0x64686AFF, 0x105082FF, 0xA19983FF, 0x385694FF, 0x525661FF,
	0x7F6956FF, 0x8C929AFF, 0x596E87FF, 0x473532FF, 0x44624FFF, 0x730A27FF, 0x223457FF, 0x640D1BFF, 0xA3ADC6FF, 0x695853FF,
	0x9B8B80FF, 0x620B1CFF, 0x5B5D5EFF, 0x624428FF, 0x731827FF, 0x1B376DFF, 0xEC6AAEFF, 0x000000FF
};

// ------------------------------------------
stock Float: GetAngleToPoint(Float:x1, Float:y1, Float:x2, Float:y2)
{
	return atan2(y1-y2, x1-x2)-90.0;
}

// ------------------------------------------
stock Float: GetVehicleSpeed(vehicleid)
{
	new Float: speed = -1;

	if(vehicleid != INVALID_VEHICLE_ID)
	{
		new Float: x,
			Float: y,
			Float: z,
			Float: angle;

		GetVehicleVelocity(vehicleid, x, y, z);
		GetVehicleZAngle(vehicleid, angle);

		speed = x / floatsin(-angle, degrees);

		speed *= 100.0;
	}

	return speed;
}


enum e_QM_DATA
{
	line[128]
}
new quick_mes[MAX_PLAYERS][MAX_BIND][e_QM_DATA];

// GLOBAL STRING


new sctring[256], stringer[2000];

// ------------------------------------------
enum
{
	CMD_SETLEADER,
	CMD_SETADMIN,
	CMD_VEH,
	CMD_AWARN,
	CMD_AUNWARN,
	CMD_BANIP,
	CMD_NUM
};
// ------------------------------------------
enum E_PLAYER_STRUCT // структура игрока
{
	P_ACCOUNT_ID, 	// ид аккаунта
	P_REFER,		// рефер
	P_SEX,			// пол игрока
	P_SALT[11],		// Соль
	P_PASSWORD[65], // пароль игрока
	P_EMAIL[60 + 1],// емайл игрока
	bool: P_CONFIRM_EMAIL,// подтвержден ли емайл
	P_SKIN,			// скин игрока
	P_MONEY,		// деньги игрока
	P_BANK,			// деньги в банке
	P_ADMIN,		// уровень админки
	P_DRIVING_LIC,	// лицензия на управление авто
	P_WEAPON_LIC,	// лицензия на оружие
	P_REG_TIME,		// время регистрации
	P_REG_IP[16],	// ип при регистрации
	P_LAST_IP[16],	// ип при последнем входе
	P_LEVEL,		// уровень игрока
	P_EXP,			// очки опыта игрока
	P_SUSPECT,		// уровень розыска
	P_PHONE,		// номер телефона
	P_PHONE_BALANCE,// на счету телефона
	P_PHONE_COLOR,	// цвет телефона
	P_LAW_ABIDING,	// законопослушность
	P_IMPROVEMENTS, // улучшения
	P_DRUGS,		// наркотики
	P_AMMO,			// патроны
	P_METALL,		// металл
	P_WIFE,			// жена
	P_TEAM,			// организация
	P_OSKIN,		// скин организации
	P_SUBDIVISON,	// подразделение
	P_WAGE,			// зарплата
	P_JOB,			// работа / должность(ранг)
	P_HOUSE_TYPE,	// тип жилья (дом/отель/в гостях)
	P_HOUSE_ROOM,	// комната в доме
	P_HOUSE,		// дом
	P_BUSINESS,		// бизнес
	P_FUEL_ST,	 	// заправка
	P_SETTING_PHONE[13],// реальный телефон игрока
	P_SETTING_PIN[5], 	// пин код
	P_REQUEST_PHONE,	// запрос телефона при авторизации
	P_REQUEST_PIN,		// запрос пин кода при авторизации
	// -------------------------
	P_LAST_LOGIN_TIME,	// время последнего входа\выхода
	// -------------------------
	P_GAME_FOR_HOUR,	// время игры за час
	P_GAME_FOR_DAY,		// время игры за день
	P_GAME_FOR_DAY_PREV,// время игры за вчерашний день
	// -------------------------
	P_COLOR,		// цвет игрока
	P_SELECT_SKIN, 	// выбраный скин
	P_CHAT_TYPE,	// тип чата
	P_AFK_TIME,		// время афк
	P_LAST_VEHICLE,	// ид последнего авто в котором сидел
	P_LAST_DIALOG,	// ид последнего диалога
	P_USE_ANIM_TYPE,// тип анимки который использует
	P_PASS_ATTEMPS, // кол-во попыток на авторизацию
	P_TARGET_ID,	// нацелен на игрока
	Float: P_HEALTH,// хп игрока
	// -------------------------
	P_TEMP_JOB,				// временная работа
	P_TEMP_JOB_STATE,		// действие что надо делать
	P_TEMP_JOB_CHECK,		// проверка анимки
	// -------------------------
	P_JOB_SERVICE_NAME[17],	// название службы
	P_JOB_TARIFF,			// тариф
	P_JOB_WAGE,				// Зарплата
	P_JOB_LOAD_ITEMS,		// загружено/перенесено (груза/руды)
	P_JOB_CAR,				// рабочий транспорт
	P_END_JOB_TIMER,		// таймер окончания работы
	P_FACTORY_USE_DESK,		// Какой стол использует на заводе
	P_BUS_ROUTE, 			// маршрут автобуса
	P_BUS_ROUTE_STEP,		// шаг маршрута
	P_MECHANIC_FILL_PAY,	// заправлено на N руб
	P_MECHANIC_REPAIR_PAY,	// отремонтировано на N руб
	bool: P_IN_JOB,			// на работе ли
	// -------------------------
	bool: P_LOGGED,				// статус авторизации
	bool: P_USE_ANIM,			// использует ли анимку (/anim)
	bool: P_BLOCK_LEAVE_AREA, 	// заблокировать вызов OnPlayerLeaveDynamicArea
	bool: P_ANIMS_INIT,			// прогружены ли анимки при спавне
	bool: P_ANIM_LIST_INIT,		// прогружен ли анимлист
	bool: P_SNACK,				// есть ли у игрока закуска
	Text3D: P_ADVISOR_LABEL,	// бейджик советника
	Text3D: P_ADMIN_LABEL,	// АДМИН ПРЕФИКС
	bool: P_ADVISOR_BLOCK_CHAT,	// отключение чата организации
	// -------------------------
	P_AUTH_TIME,		// время на авторизаци
	P_IN_BUSINESS,		// в какой бизнес вошел
	P_IN_HOUSE,			// в какой дом вошел
	P_IN_ENTRANCE,		// в каком подъезде
	P_IN_ENTRANCE_FLOOR,// на каком этаже в подъезде
	P_LAST_PICKUP,		// ид пикапа на которым стоял последний раз
	P_IN_HOTEL_ROOM,	// в каком номере в отеле
	P_IN_HOTEL_FLOOR,	// на каком этаже в отеле
	P_MED_CHEST,		// аптечка
	P_MASK,				// маска
	P_LOTTERY,			// лотерейный билет
	P_DRINK_STEP,		// кол-во использование напитка
	P_REALTOR_TYPE,		// риелторка
	P_USE_SELECT_PANEL,	// использует ли панель выбора
	P_OWNABLE_CAR,		// ид личного ТС
	P_USE_TRUNK,		// ид авто используемого багажника
	// -------------------------
	P_IP[16], 			// ип игрока
	P_NAME[20 + 1], 	// имя игрока
	P_WIFE_NAME[21],	// имя жены
	// -------------------------
	P_ACCOUNT_STATE, 		// статус аккаунта (авторизаци/регистрация)
	P_ACCOUNT_STEP_STATE, 	// шаг (регистрации/авторизации)
	// -------------------------
	P_WARN,             // варны
	P_WARN_TIME,        // время варнов
	P_MUTE,             // время мута
	// -------------------------
	P_POWER,			// сила
	P_SKILL_COLT,     	// скилл кольт
	P_SKILL_SDPISTOL,   // скилл пистолет с глушителем
	P_SKILL_DEAGLE,     // скилл дигл
	P_SKILL_SHOTGUN,    // скилл дробовик
	P_SKILL_MP5,        // скилл мп5
	P_SKILL_AK47,	    // скилл ак47
	P_SKILL_M4,         // скилл м4
	P_SKILL_SNIPER_RIFLE,	// скилл снайперская винтовка
	P_SKILL_SAWNOFF,    // скилл обрез
	P_SKILL_COMBAT_SG,  // скилл тактический дробовик
 	P_SKILL_MICRO_UZI,  // скилл микро-узи
 	// -------------------------
 	P_SPAWN,            // место спавна
 	// -------------------------
// 	P_DONATE_RUB,	// Текущий баланс донат-рублей
	P_DONATE_MONEY,	// текущий баланс донат-очков
	P_DONATE_TOTAL,		// всего приобретено донат-очков
	// -------------------------
	bool: P_HOSPITAL,	// лежит ли в больнице
	P_OCCUPIED_BED,		// номер койки
	// -------------------------
	bool: P_WEAPON_RELOADING,	// перезаряжает ли оружие
	P_RELOADINGS_COUNT[11],		// количество перезарядок для каждого оружия
	bool: P_CUFFED,		// наручники на игроке
	// -------------------------
	P_BUY_CAR,			// покупает ли авто
	P_RENT_CAR,			// арендованная машина
	P_ALLOWED_CAR,		// доверенная машина
	P_CAR_SLOTS,		// количество слотов для авто
	// -------------------------
	P_JAIL,				// время заключения
	// -------------------------
//	P_WEAPON_TINT[MAX_WEAPON_TINTS], // раскраски оружия
	P_PREMIUM,			// уровень премиум аккаунта
	P_PREMIUM_DATE,
	P_PREMIUM_CHAT,
	// -------------------------
	P_ORDER,			// выполняет ли заказ
	// -------------------------
	P_PREMIUM_TIME,		// время действия премиум аккаунта
	//
	P_LOADER_SKILL,
	P_LAST_MP,              // мероприятие
	P_PREFIX[32], 				// prefix админ
	// ----------------------------
	P_APASS,			// Админ авторизация
	P_ADMIN_LOGGED,			// Админ авторизация
	P_ADMIN_WARN,			// Варн администрации
	P_SECRET,               //скрытность
	P_3D_PREFIX,            //3d префикс на персонаже
	// ----------------------------
	P_PLAY_PLAYER,
	// -----------------------------
	P_FAMILY,           // Семья
    P_FAMILY_RANK,      // Ранг в семье
    // -----------------------------
   	P_GIFTS,                // подковы
   	// ------------------------------
   	P_RENT_BIKE,        // Аренда велосипеда
   	// ------------------------------
   	CMD_ACCESS[CMD_NUM+1],
   	//
   	P_TEST,
   	//
	P_QUEST_1,
	P_QUEST_2,
	P_QUEST_3,
	P_QUEST_4,
	P_QUEST_5,
	P_QUEST_6,
	P_QUEST_7,
	P_QUEST_8,
	//
	P_QUEST_EXP_1,
	P_QUEST_EXP_2,
	P_QUEST_EXP_3,
	P_QUEST_EXP_4,
	P_QUEST_EXP_5,
	P_QUEST_EXP_6,
	P_QUEST_EXP_7,
	P_QUEST_EXP_8,
	//
	P_UNJ,
	//
	P_YOUTUBE,
	//
	P_BANIHOP,
	//
	P_ADMIN_STATUS,
	P_ADMIN_HOUR,
	P_GET_RUB,
	//
	P_HELPER,
	P_FRACTION_CAR,
	P_PICKUP_TIME,
	P_ANTISLIV,
	P_TOTALHOUR,
	P_BOXQUEST,
	P_QUEST231,
	P_QUEST232,
	P_REPCARID,
	P_QUEST233,
	P_POSTCARD,
	P_BOX_QUEST_1,
	P_BOX_QUEST_2,
	P_BOX_QUEST_3,
	P_BOX_QUEST_4,
	P_BOX_QUEST_5,
	P_BOX_QUEST_6,
	
	P_FMUTE,
	P_FWARN,
	P_OWARN,
	
	P_DMZ_STATUS,
	P_DMZ_KILL,
	P_DMZ_KILL1,
	
	P_PROGRESS_EXP_1,
	P_PROGRESS_EXP_2,
	P_PROGRESS_EXP_3,
	P_PROGRESS_EXP_4,
	P_PROGRESS_EXP_5,
	P_PROGRESS_EXP_6,
	P_PROGRESS_1,
	P_PROGRESS_2,
	P_PROGRESS_3,
	P_PROGRESS_4,
	P_PROGRESS_5,
	P_PROGRESS_6,
	
	P_CAPT_KILL,
	
	P_DONATE_CASE,
	
	P_FLOWER_1,
	P_FLOWER_2,
	P_FLOWER_3,
	P_TAKE_FLOWER,
	P_CONGRATULATE_WOMEN,
	P_BUY_PERFUME,
	P_GIVE_PERFUME,
	P_BUY_CAKE,
	P_BUY_PRODUCTS,
	P_BUY_CANDLE,
	P_END_QUEST_8MARTA,
	
	P_COINS,
	
	P_YTPROMO_ACTIVATE,
	
	P_F_QUEST_EXP_1,
	P_F_QUEST_EXP_2,
	P_F_QUEST_EXP_3,
	P_F_QUEST_EXP_4,
	P_F_QUEST_EXP_5,
	
	P_F_QUEST_1,
	P_F_QUEST_2,
	P_F_QUEST_3,
	P_F_QUEST_4,
	P_F_QUEST_5,
	
	P_TOP_1,
	P_TOP_2,
	P_TOP_3,
	P_TOP_4,
	P_TOP_5,
	
	P_BOOMBOX,
	
	P_AUTOSALON_COLOR,
	
	P_CARREGION_ENTER,
	P_CARNUMBER_ENTER,
	P_CARNUMBER_REGION,
	
	P_SPEEDOMETR,
	
	P_ATWORK,
};

enum E_GIFT_STRUCT
{
	G_SQL_ID,
	Float: G_POS_X,
	Float: G_POS_Y,
	Float: G_POS_Z
}

//new nonRpWords[21][30] = { "мать","мама","папа","отец","arizona", "flin","mordor", "aries","flame","santrope", "online rp","black russia","флин","аризона","мордор","ариес","онлайн рп","флэйм","сантроп","блэк р","truee"};


new g_gift[MAX_GIFT][E_GIFT_STRUCT];
new g_gift_loaded;

new CheckPass[MAX_PLAYERS][65];

// ------------------------------------------
enum
{
	PROMO_TYPE_MONEY = 0, 	// деньги
	PROMO_TYPE_DONATE,		// донат
	PROMO_TYPE_EXP,			// опыт
}

enum E_PROMO_STRUCT
{
	E_PLAYER_STRUCT: P_DATA,
	P_SQL_NAME[16],
	P_NAME[17]
}

new promo_info[3][E_PROMO_STRUCT] =
{
	{P_BANK, "bank", "Деньги"},
	{P_DONATE_MONEY, "donate_current", "Донат-Монеты"},
	{P_EXP, "exp", "Exp"}
};

enum E_COMMAND_TIMER
{
    report,
    adm_nakaz,
	vipad,
}

new use_commad_time[MAX_PLAYERS][E_COMMAND_TIMER];

#define MAX_PERFORMANCE_ITEMS

new engine_ptune[MAX_PERFORMANCE_ITEMS][] =
{
	"Чип-тюнинг",
	"Удаление катализаторов",
	"Воздушный фильтр нулевого сопротивления",
	"Дроссельная заслонка увеличенного диаметра",
	"Кованые поршни двигателя"
};

new engine_ptune_price[MAX_PERFORMANCE_ITEMS] = {150000, 100000, 70000, 120000, 140000};
new Float:engine_ptune_boost[MAX_PERFORMANCE_ITEMS] = {0.15, 0.08, 0.08, 0.08, 0.10};

new brake_ptune[MAX_PERFORMANCE_ITEMS][] =
{
	"Керамические колодки",
	"Спортивные тормозные диски",
	"Расширенные суппорта",
	"Тормозной цилиндр",
	"Вакуумный усилитель тормозов"
};
new brake_ptune_price[MAX_PERFORMANCE_ITEMS] = {90000, 100000, 70000, 120000, 140000};
new Float:brake_ptune_boost[MAX_PERFORMANCE_ITEMS] = {2.5, 2.5, 2.0, 3.0, 3.5};

new stability_ptune[MAX_PERFORMANCE_ITEMS][] =
{
	"Распорки на стойки",
	"Амортизаторы",
	"Усиленные пружины",
	"Стабилизаторы поперечной устойчивости",
	"Шарниры подвески"
};

new stability_ptune_price[MAX_PERFORMANCE_ITEMS] = {25000, 70000, 50000, 80000, 65000};

// ------------------------------------------
enum
{
	STORAGE_METALL = 0, // максимальное кол-во металла
	STORAGE_AMMO, // максимальное кол-во патронов
	STORAGE_DRUGS // максимальное кол-во наркотиков
}

// ------------------------------------------
enum E_OWNABLE_CAR_STRUCT
{
	OC_SQL_ID, 			// ид в базе
	OC_OWNER_ID,		// ид владельца
	OC_OWNER_NAME[21],	// имя владельца
	OC_NUMBER[8],		// номер ТС
	OC_MODEL_ID,		// модель
	OC_COLOR_1,			// цвет 1
	OC_COLOR_2,			// цвет 2
	Float: OC_POS_X,	// позиции ТС
	Float: OC_POS_Y,	// позиции ТС
	Float: OC_POS_Z,	// позиции ТС
	Float: OC_ANGLE,	// позиции ТС (угол поворота)
	bool: OC_ALARM,		// сигнализация
	bool: OC_KEY_IN,	// вставлен ли ключ
	OC_CREATE,	// время создания
	OC_VINILCAR,	// время создания
	OC_PT_ENGINE,       // performance tuning двигатель
	OC_PT_BRAKE,       	// performance tuning тормоза
	OC_PT_STABILITY,    // performance tuning устойчивость
};

enum E_FAMILY_CAR_STRUCT
{
    F_CAR_ID,           // Ид авто
    F_SQL_ID,          // ид в базе
    F_OWNER_ID,        // ид владельца
    F_OWNER_NAME[21],  // имя владельца
    F_MODEL_ID,        // модель
    F_COLOR_1,         // цвет 1
    F_COLOR_2,         // цвет 2
    F_RANG,             // С какого ранга
    Float: F_POS_X,    // позиции ТС
    Float: F_POS_Y,    // позиции ТС
    Float: F_POS_Z,    // позиции ТС
    Float: F_ANGLE,    // позиции ТС (угол поворота)
    F_World,
	F_Int,
    bool: OC_KEY_IN,    // вставлен ли ключ
    OC_CREATE,          // время создания
    Float: OC_FUEL      // топливо
};

new g_family_car[MAX_OWNABLE_CARS][E_FAMILY_CAR_STRUCT];
new g_family_car_loaded;

// ------------------------------------------
enum E_VEHICLE_TRUNK_STRUCT
{
	VT_SQL_ID,
	VT_ITEM_TYPE, 		// тип предмета
	VT_ITEM_AMOUNT,		// кол-во
	VT_ITEM_VALUE
};

// ------------------------------------------
enum E_ITEM_STRUCT
{
	I_NAME[16],
	I_NAME_COUNT[8],
	bool: I_COMBINATION
};

// ------------------------------------------
enum E_ENTRANCE_STRUCT
{
	E_SQL_ID,		// ид в базе
	E_FLOORS,		// кол-во этажей
	Float: E_POS_X, // вход (пикап)
	Float: E_POS_Y, // вход (пикап)
	Float: E_POS_Z, // вход (пикап)
	Float: E_EXIT_POS_X,// выход
	Float: E_EXIT_POS_Y,// выход
	Float: E_EXIT_POS_Z,// выход
	Float: E_EXIT_ANGLE,// выход (угол)
	E_PICKUP_ID,		// ид пикапа
	E_MAP_ICON,			// иконка на карте
	Text3D: E_LABEL,	// 3д текст
	E_STATUS			// статус (куплены ли все квартиры)
};

// ------------------------------------------
enum E_HOTEL_STRUCT
{
	H_SQL_ID,
	H_OWNER_ID,
	H_RENT_DATE,
	bool: H_STATUS,
	H_OWNER_NAME[21]
};

enum E_HOTEL_CAR_PARK_STRUCT
{
	Float: HC_POS_X,
	Float: HC_POS_Y,
	Float: HC_POS_Z,
	Float: HC_ANGLE,
	HC_VEHICLE_ID
};

// ------------------------------------------
enum E_HOUSE_STRUCT
{
	H_SQL_ID,			// ид в базе данных
	H_NAME[20],			// название \ тип
	H_OWNER_ID,			// ид аккаунта владельца
	H_IMPROVEMENTS,		// уровень улучшений
	H_RENT_DATE,		// аренда на n времени
	H_PRICE,			// стоимость дома
	H_RENT_PRICE,		// плата за аренду в день
	H_LOCK_STATUS,		// статус (открыто/закрыто)
	H_ENTRACE,			// ид подьезда
	H_TYPE,				// тип дома (интерьер)
	Float: H_POS_X,		// позиция пикапа входа
	Float: H_POS_Y,		// позиция пикапа входа
	Float: H_POS_Z,		// позиция пикапа входа
	Float: H_EXIT_POS_X,// позиция после выхода из дома
	Float: H_EXIT_POS_Y,// позиция после выхода из дома
	Float: H_EXIT_POS_Z,// позиция после выхода из дома
	Float: H_EXIT_ANGLE,// угол поворота
	Float: H_CAR_POS_X,	// позиция транспорта
	Float: H_CAR_POS_Y,	// позиция транспорта
	Float: H_CAR_POS_Z,	// позиция транспорта
	Float: H_CAR_ANGLE,	// угол поворота транспорта
	Float: H_STORE_X,	// позиция шкафа
	Float: H_STORE_Y,	// позиция шкафа
	Float: H_STORE_Z,	// позиция шкафа
	// -------------------------
	H_OWNER_NAME[20 + 1],	// имя владельца
	Text3D: H_STORE_LABEL,	// 3д текст (шкаф)
	H_ENTER_PICKUP,			// пикап входа
	H_HEALTH_PICKUP,		// пикап аптечки
	H_MAP_ICON,				// иконка на карте
	H_FLAT_ID,				// номер квартиры
	// -------------------------
	H_EVICTION,			// продажа из-за задолженности
	// -------------------------
	H_STORE_METALL,		// металл в шкафу
	H_STORE_DRUGS,		// наркотики в шкафу
	H_STORE_WEAPON,		// оружие в шкафу
	H_STORE_AMMO,		// патроны оружия в шкафу
	H_STORE_SKIN		// одежда в шкафу
};

enum E_HOUSE_TYPE_STRUCT
{
	HT_NAME[20],
	Float: HT_ENTER_POS_X,		// позиции после входа в интерьера
	Float: HT_ENTER_POS_Y,		// позиции после входа в интерьера
	Float: HT_ENTER_POS_Z,		// позиции после входа в интерьера
	Float: HT_ENTER_POS_ANGLE,	// позиции после входа в интерьера
	Float: HT_HEALTH_POS_X,		// позиции аптечки
	Float: HT_HEALTH_POS_Y,		// позиции аптечки
	Float: HT_HEALTH_POS_Z,		// позиции аптечки
	Float: HT_STORE_POS_X,		// позиции шкафа
	Float: HT_STORE_POS_Y,		// позиции шкафа
	Float: HT_STORE_POS_Z,		// позиции шкафа
	HT_INTERIOR,				// ид интерьера
	HT_ROOMS					// кол-во комнат
};

enum E_HOUSE_ROOM_STRUCT
{
	HR_SQL_ID,			// ид в базе
	HR_OWNER_ID,		// ид игрока
	HR_RENT_DATE,		// насколько арендована комната
	HR_RENT_TIME,		// когда поселился
	HR_OWNER_NAME[21]	// ник арендатора
};

enum // управление домом
{
	HOUSE_OPERATION_PARAMS, 		// изменение параметров дома
	HOUSE_OPERATION_LOCK,			// открыть / закрыть
	HOUSE_OPERATION_IMPROVEMENTS,	// улучшение
	HOUSE_OPERATION_CAR_DELIVERY,	// доставить ТС к дому
	HOUSE_OPERATION_CAR_GPS,		// отметить транспорт на GPS
	HOUSE_OPERATION_RENTERS			// список арендаторов
}

// ------------------------------------------
enum E_BUSINESS_STRUCT
{
	B_SQL_ID,			// ид в базе данных
	B_NAME[24],			// название
	B_OWNER_ID,			// ид аккаунта владельца
	B_ENTER_PRICE,		// цена за вход в биз
	B_ENTER_MUSIC,		// звук при входе
	B_IMPROVEMENTS,		// уровень улучшений
	B_PRODS,			// количества продуктов
	B_PROD_PRICE,		// стоимость 1 продукта
	B_BALANCE,			// бюджет бизнеса
	B_RENT_DATE,		// аренда на n времени
	B_PRICE,			// стоимость бизнеса
	B_RENT_PRICE,		// плата за аренду в день
	B_LOCK_STATUS,		// статус (открыта/закрыта)
	B_TYPE,				// тип бизнеса
	B_INTERIOR,			// интерьер
	Float: B_POS_X,		// позиция бизнеса
	Float: B_POS_Y,		// позиция бизнеса
	Float: B_POS_Z,		// позиция бизнеса
	Float: B_EXIT_POS_X,// позиция после выхода из бизнеса
	Float: B_EXIT_POS_Y,// позиция после выхода из бизнеса
	Float: B_EXIT_POS_Z,// позиция после выхода из бизнеса
	Float: B_EXIT_ANGLE,// угол поворота
	// -------------------------
	B_OWNER_NAME[20 + 1],	// имя владельца
	Text3D: B_LABEL,		// 3д текст
	B_ORDER_ID,				// слот заказа
	B_HEALTH_PICKUP,		// ид пикапа аптечки
	// -------------------------
	B_EVICTION				// продажа из-за задолженности
};

enum // типы бизнесов
{
	BUSINESS_TYPE_SHOP_24_7 = 1, 	// магазин 24/7
	BUSINESS_TYPE_CLUB = 2, 		// клуб (алхамбра)
	BUSINESS_TYPE_REALTOR_BIZ = 3, 	// управление статистики (бизнесы)
	BUSINESS_TYPE_REALTOR_HOME = 4,	// риелторское агенство (дома)
	BUSINESS_TYPE_CLOTHING_SHOP = 5,// магазин одежды
	BUSINESS_TYPE_HOTEL = 6,		// отель
	BUSINESS_TYPE_CAR_MARKET = 7,	// авторынок
	BUSINESS_TYPE_CASINO = 8,		// казино
	BUSINESS_TYPE_CELL_SALON = 9,	// сотовый салон
	BUSINESS_TYPE_CAR_TUNING = 10, 	// станция тех. обслуживания
	BUSINESS_TYPE_SHOP_GUN = 11, 	// магазин оружия
};

enum E_GOS_INTERVIEW
{
	text_time[15],
	text_crit[100]
}
new interview[8][E_GOS_INTERVIEW];
new click_status[MAX_PLAYERS];


enum config
{
    admin_price,
    helper_price,
    sDistRub,
    sDonPower,
    sGiveCoins,
    sBonusMoney,
    sBonusDonate,
    sBonusLevel,
    sBuyBiz
}
new Config[config];

enum cars
{
    car_1,
    car_2,
    car_3,
    car_4,
    car_5
}
new Cars[cars];

enum //
{
	BIZ_OPERATION_PARAMS = 0,		// управление заправкой
	BIZ_OPERATION_LOCK,				// открыть / закрыть
	BIZ_OPERATION_ENTER_PRICE,		// установить цену за вход
	BIZ_OPERATION_PROD_PRICE,		// установить стоимость продукта
	BIZ_OPERATION_PROD_ORDER,		// заказать продукты
	BIZ_OPERATION_PROD_ORDER_CANCEL,// отменить заказ
	BIZ_OPERATION_PROFIT_STATS,		// финансовая статистика
	BIZ_OPERATION_IMPROVEMENTS		// Улучшения
};

enum E_BUSINESS_INTERIOR_STRUCT
{
	BT_NAME[64],			// Названия интерьера
	Float: BT_EXIT_POS_X, 	// позиции пикапа выхода
	Float: BT_EXIT_POS_Y, 	// позиции пикапа выхода
	Float: BT_EXIT_POS_Z, 	// позиции пикапа выхода
	// -------------------
	Float: BT_ENTER_POS_X, 	// позиции входа
	Float: BT_ENTER_POS_Y, 	// позиции входа
	Float: BT_ENTER_POS_Z, 	// позиции входа
	Float: BT_ENTER_ANGLE, 	// угол поворота
	BT_ENTER_INTERIOR,		// интерьер
	// -------------------
	Float: BT_HEALTH_POS_X,	// позиции аптечки
	Float: BT_HEALTH_POS_Y,	// позиции аптечки
	Float: BT_HEALTH_POS_Z,	// позиции аптечки
	// -------------------
	Float: BT_BUY_POS_X, 	// позиции покупки
	Float: BT_BUY_POS_Y, 	// позиции покупки
	Float: BT_BUY_POS_Z, 	// позиции покупки
	// -------------------
	Float: BT_LABEL_POS_X,	// позиции 3д текста
	Float: BT_LABEL_POS_Y,	// позиции 3д текста
	Float: BT_LABEL_POS_Z,	// позиции 3д текста
	BT_BUY_CHECK_ID			// ид чекпоинта
};

enum E_BUSINESS_GPS_STRUCT // список бизнесов в GPS
{
	BG_SQL_ID,
	BG_BIZ_ID,
	BG_POS,
	BG_TIME
};

// ------------------------------------------

enum E_FUEL_STATION_STRUCT
{
	FS_SQL_ID,			// ид в базе данных
	FS_NAME[20],		// название
	FS_OWNER_ID,		// ид аккаунта владельца
	FS_IMPROVEMENTS,	// уровень улучшений
	FS_FUELS,			// количества топлива
	FS_FUEL_PRICE,		// цена топлива за 1 л
	FS_BUY_FUEL_PRICE,	// закупочная цена за 1 л
	FS_BALANCE,			// бюджет заправки
	FS_RENT_DATE,		// аренда на n времени
	FS_PRICE,			// стоимость заправки
	FS_RENT_PRICE,		// плата за аренду в день
	FS_LOCK_STATUS,		// статус (открыта/закрыта)
	Float: FS_POS_X,	// позиция заправки
	Float: FS_POS_Y,	// позиция заправки
	Float: FS_POS_Z,	// позиция заправки
	// -------------------------
	FS_OWNER_NAME[20 + 1],	// имя владельца
	Text3D: FS_LABEL,		// 3д текст
	FS_ORDER_ID,			// слот заказа
	FS_AREA,				// зона
	// -------------------------
	FS_EVICTION				// продажа из-за задолженности
};

enum //
{
	FUEL_ST_OPERATION_PARAMS = 0,		// Управление заправкой
	FUEL_ST_OPERATION_LOCK,				// Открыть / закрыть
	FUEL_ST_OPERATION_NEW_NAME,			// Новое название
	FUEL_ST_OPERATION_FUEL_PRICE,		// установить цену за топливо
	FUEL_ST_OPERATION_BUY_FUEL_PRIC,	// установить закупочную цену топлива
	FUEL_ST_OPERATION_FUEL_ORDER,		// заказать топливо
	FUEL_ST_OPERATION_FUEL_ORDER_CA, 	// отменить заказ
	FUEL_ST_OPERATION_PROFIT_STATS,		// финансовая статистика
	FUEL_ST_OPERATION_IMPROVEMENTS		// Улучшения
};

// ------------------------------------------
enum E_WEATHER_STRUCT
{
	W_NAME[16],
	W_ID,
	W_DEGREES
};

// ------------------------------------------
enum E_ORDER_STRUCT
{
	O_SQL_ID, 		// ид заказа
	O_TYPE,			// тип (азс,биз)
	O_COMPANY_ID,	// ид предприятия
	O_AMOUNT,		// кол-во
	O_PRICE,		// цена за 1 (продукт/л топлива/...)
	O_TIME,			// время оформления
	O_USED			// выполняется ли
};

enum
{
	ORDER_TYPE_FUEL_STATION = 1, // заправка
	ORDER_TYPE_BUSINESS 		// бизнес
};

// ------------------------------------------
// 			Личные настройки

enum E_PLAYER_SETTINGS_STRUCT
{
	S_CHAT_TYPE,	// тип чата (Отключен,Стандарт,Advance)
	S_TEAM_CHAT,	// отображение чата организации
	S_PLAYERS_NICK,	// отображение ников над игроками
	S_NICK_IN_CHAT,	// отображение ников в чате
	S_ID_IN_CHAT,	// отображение ид игрока в чате
	S_VEH_CONTROL	// управление транспортом (клавиши и команды/команды)
};

enum
{
	SETTING_CHAT_OFF = 0,
	SETTING_CHAT_STANDART,
	SETTING_CHAT_ADVANCE,
	SETTING_TYPE_OFF = 0,
	SETTING_TYPE_ON
};

// ------------------------------------------
enum E_IMPROVEMENTS_STRUCT
{
	I_NAME[32],
	I_PRICE,
	I_LEVEL
};

// ------------------------------------------
enum E_PLAYER_GPS_STRUCT
{
	bool: G_ENABLED,
	Float: G_POS_X,
	Float: G_POS_Y,
	Float: G_POS_Z
};

enum E_GPS_STURCT
{
	Float: G_POS_X,
	Float: G_POS_Y,
	Float: G_POS_Z,
	G_MARKET_TYPE
};

// ------------------------------------------
enum E_HELP_INFO_STRUCT
{
	H_TITLE[64],
	H_INFO[1024]
};

// ------------------------------------------
enum E_MP_STRUCT
{
	MP_CREATE, 			// создано ли мероприятие
	MP_NAME[32],        // название
	MP_PRIZE,           // приз на мероприятии
	Float: MP_POS_X,    // координата X
	Float: MP_POS_Y,    // координата Y
	Float: MP_POS_Z     // координата Z
};

new mp[E_MP_STRUCT];

// ------------------------------------------
enum E_SERVER_RADIO_STRUCT
{
	SR_CHANNEL_NAME[32],
	SR_CHANNEL_URL[64]
};

// ------------------------------------------
enum E_ANIM_LIST_STRUCT
{
	AL_DESCRIPTION[32],
	AL_LIB[32],
	AL_NAME[32],
	Float: AL_DELTA,
	AL_LOOP,
	AL_LOCK_X,
	AL_LOCK_Y,
	AL_FREEZE,
	AL_TIME
};

// ------------------------------------------
enum E_MAP_ICONS_STRUCT
{
	Float: MI_POS_X,
	Float: MI_POS_Y,
	Float: MI_POS_Z,
	MI_TYPE
};

// ------------------------------------------
enum E_TELEPORT_STRUCT
{
	T_NAME[64],
	Float: T_PICKUP_POS_X,
	Float: T_PICKUP_POS_Y,
	Float: T_PICKUP_POS_Z,
	T_PICKUP_VIRTUAL_WORLD,
	Float: T_POS_X,
	Float: T_POS_Y,
	Float: T_POS_Z,
	Float: T_ANGLE,
	T_INTERIOR,
	T_VIRTUAL_WORLD,
	T_ACTION_TYPE,
	Text3D: T_LABEL
};

enum // типы телепорта
{
	T_ACTION_TYPE_BLOCK_LEAVE_AREA = 1, // заблокировать вызов паблика OnPlayerLeaveDynamicArea
	T_ACTION_TYPE_END_JOB,	// анулировать деньги на временной работе если выходит из инта
	T_ACTION_TYPE_LEAVE_HOSPITAL, // проверить вылечился или нет в больнице
	T_ACTION_TYPE_LEAVE_PPS, // проверить сидит ли в тюрьме
};

// ------------------------------------------
enum E_DRIVING_TUTORIAL_STRUCT
{
	DT_TITLE[64],
	DT_INFO[2048]
};

enum E_PLAYER_DRIVING_EXAM_STRUCT
{
	DE_POINTS, // Балы
	DE_EXAM_STEP, // теория
	DE_ROUTE_STEP // практика
};

// ------------------------------------------
enum E_DRIVING_EXAM_STRUCT
{
	DE_TITLE[64],
	DE_LIST_ITEMS[256],
	DE_CORRECT_ANSWER
};

// ------------------------------------------
enum E_ATM_STRUCT
{
	Float: A_POS_X,
	Float: A_POS_Y,
	Float: A_POS_Z,
	Float: A_ROT_Z
};

enum E_REPORT_STRUCT
{
    Reptex[130],// Текст который пишет игрок 130 символов
    RepTime,
};
enum E_ASK_STRUCT
{
    Asktex[130],// Текст который пишет игрок 130 символов
    AskTime,
};
new RepInfo[MAX_PLAYERS][E_REPORT_STRUCT]; // Максимум 100 репортов.
new AskInfo[MAX_PLAYERS][E_ASK_STRUCT]; // Максимум 100 репортов.
// ------------------------------------------
/*enum E_GATE_STRUCT
{
	G_DESCRIPTION[16],	// описание (наприм. жд-вьезд/жд-выезд)
	G_TYPE,				// тип (шлагбаум,ворота)
	Float: G_POS_X,		// позиции
	Float: G_POS_Y,		// позиции
	Float: G_POS_Z,		// позиции
	Float: G_ANGLE,		// угол
	Float: G_OPEN_POS_X, // позиции открытия
	Float: G_OPEN_POS_Y, // позиции открытия
	Float: G_OPEN_POS_Z, // позиции открытия
	Float: G_OPEN_ANGLE, // угол открытия (для кнопки)
	bool: G_STATUS,		// статус
	G_OBJECT_ID[2]		// иды обьектов
};

enum
{
	GATE_TYPE_BARRIER = 1,		// шлагбаум
	GATE_TYPE_BARRIER_MSG,		// шлагбаум (с сообщением)
	GATE_TYPE_BARRIER_BUTTON,	// шлагбаум (на кнопку)
	GATE_TYPE_NORMAL,	 		// ворота
}*/

// ------------------------------------------
enum E_BANK_ACCOUNT_STRUCT
{
	BA_ID,
	BA_NAME[20 + 1],
	BA_PIN_CODE[9],
	BA_BALANCE,
	BA_REG_TIME
};

enum E_BANK_TRANSFER_STRUCT
{
	BT_ID,
	BT_NAME[20 + 1]
};

// ------------------------------------------
enum E_PHONE_CALL_STRUCT
{
	PC_INCOMING_PLAYER,		// исходящий вызов
	PC_OUTCOMING_PLAYER,	// входящий вызов
	PC_TIME,				// время звонка
	bool:PC_ENABLED		// режим телефона (вкл\откл)
};

// ------------------------------------------
enum E_PHONE_BOOK_STRUCT
{
	PB_SQL_ID,
	PB_NAME[21],
	PB_NUMBER[10],
	PB_TIME
};

enum
{
	PHONE_BOOK_OPERATION_OPTIONS = 0,	// варианты
	PHONE_BOOK_OPERATION_CALL,			// позвонить
	PHONE_BOOK_OPERATION_SEND_SMS,		// отправить смс
	PHONE_BOOK_OPERATION_CHANGE_NAM,	// изменить имя
	PHONE_BOOK_OPERATION_CHANGE_NUM,	// изменить номер
	PHONE_BOOK_OPERATION_DELETE_CON,	// удалить контакт
};
// ------------------------------------------
/*enum E_INFO_PICKUP_STRUCT
{
	IP_TITLE[64],
	IP_INFO[1024],
	IP_LABEL_INFO[64],
	IP_TITLE_COLOR,
	Float: IP_POS_X,
	Float: IP_POS_Y,
	Float: IP_POS_Z
};*/

// ------------------------------------------
enum E_MINER_CARRIAGE_STRUCT
{
	Float: MC_START_POS_X,
	Float: MC_START_POS_Y,
	Float: MC_START_POS_Z,
	Float: MC_END_POS_X,
	Float: MC_END_POS_Y,
	Float: MC_END_POS_Z,
	bool: MC_STATUS,
	MC_OBJECT_ID,
	MC_PICKUP_ID,
	Text3D: MC_LABEL,
	MC_ORE_COUNT,
	bool: MC_IN_MOVE
};

// ------------------------------------------
enum E_FACTORY_DESK_STRUCT
{
	Float: FD_POS_X,
	Float: FD_POS_Y,
	Float: FD_POS_Z,
	FD_CHEK_ID,
	FD_OBJECT_ID,
	bool: FD_USED,
	Text3D: FD_LABEl
};

// ------------------------------------------
enum E_REPOSITORY_STRUCT
{
	R_AMOUNT, // кол-во
	Text3D: R_LABEL,
	Text3D: R_LABEL_2,
	bool: R_NOT_SAVE
};

enum // типы складов
{
	REPOSITORY_TYPE_MINER, 		// шахта
	REPOSITORY_TYPE_FACTORY, 	// завод
	REPOSITORY_TYPE_OIL_FACTORY, // нефтезавод
	REPOSITORY_TYPE_ARMY,		// воинская часть
	REPOSITORY_TYPE_SAWMILL,	// лесопилка
};

enum
{
	// шахта
	REPOSITORY_ACTION_MINER_METAL = 0,	// металл шахты
	REPOSITORY_ACTION_MINER_ORE,		// руда
	REPOSITORY_ACTION_MINER_REMELTI,	// на переплавке

	// завод
	REPOSITORY_ACTION_FACTORY_METAL = 0, // металл
	REPOSITORY_ACTION_FACTORY_FUEL,		// топливо
	REPOSITORY_ACTION_FACTORY_PROD,		// продукты

	// нефтезавод
	REPOSITORY_ACTION_OIL_FACTORY_F = 0, // топливо на нефтезаводе

	// воинская часть
	REPOSITORY_ACTION_ARMY_METAL = 0,	// металл на складе воинской части
	REPOSITORY_ACTION_ARMY_AMMO,		// патроны на складе воинской части

	// лесопилка
	REPOSITORY_ACTION_SAWMILL_WOOD = 0,	// лесопилка дерево
};
new g_repository[5][3][E_REPOSITORY_STRUCT]; // склады

// ------------------------------------------
enum E_GANG_REPOSITORY_STRUCT
{
	GR_GANG,
	GR_METALL,
	GR_AMMO,
	GR_DRUGS,
	GR_MONEY,
	Text3D: GR_LABEL,
	GR_PICKUP,
	bool: GR_LOCK
}

new g_gang_repository[MAX_GANG_REPOSITORIES][E_GANG_REPOSITORY_STRUCT]; // склады банд

// ------------------------------------------
enum E_GANG_ZONES_STRUCT
{
	Float: GZ_MIN_X,
	Float: GZ_MIN_Y,
	Float: GZ_MAX_X,
	Float: GZ_MAX_Y,
	GZ_GANG,
	GZ_ZONE,
	GZ_AREA
}

new g_gang_zone[MAX_GZ][E_GANG_ZONES_STRUCT]; // гангзоны
new g_gang_zones_loaded; // количество загруженных гангзон

// ------------------------------------------
enum
{
	GANG_ARZ = 1,	// ОПГ Арзамасская
	GANG_BAT,		// ОПГ Батыревская
	GANG_LYT,		// ОПГ Лыткаринская
}

// ------------------------------------------
new gang_zone_colors[4] =
{
	0xFFFFFF75,	// Свободная зона
	0x00990075, // Арзамасская ОПГ
	0x6666FF75, // Батыревская ОПГ
	0xFFCD0075  // Лыткаринская ОПГ
};

new family_colors[17] =
{
	0xFFFFFFFF, // белый
	0xCD5C5CFF, // багровый
	0xFF0000FF, // красный
	0x8B0000FF, // темно-красный
	0xFFC0CBFF, // светло-розовый
	0xFFA07AFF, // цвет кожи
	0xFFFF00FF, // желтый
	0xFFD700FF, // золотой
	0xEE82EEFF, // фиолетовый
	0x800080FF, // темно-фиолетовый
	0x808080FF, // серый
	0xC0C0C0FF, // серебристый
	0x00FF00FF, // лайм
	0x008000FF, // зеленый
	0x228B22FF, // лесной
	0x1E90FFFF, // синий
	0x00BFFFFF // цвет неба
};

new family_colors_name[][32] =
{
	{"Белый"},
	{"Багровый"},
	{"Красный"},
	{"Темно-красный"},
	{"Светло-розовый"},
	{"Цвет кожи"},
	{"Желтый"},
	{"Золотой"},
	{"Фиолетовый"},
	{"Темно-фиолетовый"},
	{"Серый"},
	{"Серебристый"},
	{"Лайм"},
	{"Зеленый"},
	{"Лесной"},
	{"Синий"},
	{"Цвет неба"}
};

// ------------------------------------------
enum E_CAPTURE_STRUCT
{
	bool: C_STATUS,
	C_GANG_ZONE,
	C_ATTACK_TEAM,
	C_PROTECT_TEAM,
	C_ATTACKER_KILLS,
	C_PROTECTOR_KILLS,
	C_TIME,
	C_WAIT_TIME[3]
}

new g_capture[E_CAPTURE_STRUCT]; // капты для ОПГ

// ------------------------------------------
/*new weapon_tints[6] =
{
	0xFF4B5320, // Камуфляж
	0xFF9EAF43, // Зеленый
	0xFFFFAE1A, // Оранжевый
	0xFF0073E6, // Синий (полицейский)
	0xFFFF1493, // Розовый
	0xFFFFD700 	// Золотой
};

enum
{
	WEAPON_TINT_CAMO = 0,
	WEAPON_TINT_GREEN = 1,
	WEAPON_TINT_ORANGE,
	WEAPON_TINT_POLICE,
	WEAPON_TINT_PINK,
	WEAPON_TINT_GOLD
}*/

/*enum E_WEAPON_TINT_STRUCT
{
	WT_OBJECT,
	Float: WT_X,
	Float: WT_Y,
	Float: WT_Z,
	Float: WT_RX,
	Float: WT_RY,
	Float: WT_RZ,
	Float: WT_SCALE_X,
	Float: WT_SCALE_Y,
	Float: WT_SCALE_Z
}

new g_weapon_tint[MAX_WEAPON_TINTS][E_WEAPON_TINT_STRUCT] =
{
	{346, 	-0.004999, 	-0.003999, 	-0.006000, 	0.000000, 	0.000000, 	-1.800000, 	1.007000,	1.337999, 	1.069000},
	{347, 	-0.003999, 	-0.001999, 	-0.003999, 	0.000000, 	0.299999, 	-0.999999, 	1.000000,	1.188000, 	1.063000},
	{348, 	-0.006999, 	-0.004000, 	0.002000, 	-1.600000, 	-0.200000, 	0.400000, 	1.019999, 	1.146999, 	1.027000},
	{349, 	0.000000, 	-0.008999, 	-0.004000, 	0.000000, 	1.099999, 	1.499999, 	1.000000, 	1.222000, 	1.088000},
	{351, 	0.003000, 	-0.014000, 	-0.003000, 	0.000000, 	0.000000, 	2.199999, 	1.000000, 	1.371000, 	1.023000},
	{352, 	-0.002000, 	-0.008000, 	-0.001999, 	-0.300000, 	0.000000, 	1.199999, 	1.019999, 	1.245000, 	1.043000},
	{353, 	0.000000, 	-0.009000, 	-0.009000, 	0.000000, 	0.099999, 	2.100000, 	1.000000, 	1.290001, 	1.053000},
	{355, 	0.000000, 	-0.011000, 	0.000000, 	0.000000, 	0.000000, 	2.100000, 	1.009000, 	1.424000, 	1.013000},
	{356, 	-0.002000, 	-0.005999, 	0.001000, 	0.000000, 	0.899999, 	1.699999, 	0.997999, 	1.318999, 	1.088001},
	{372, 	-0.003000, 	-0.009000, 	-0.001999, 	0.000000, 	0.400000, 	0.800000, 	1.015000, 	1.232000, 	1.055000},
	{357, 	0.000000, 	-0.015000, 	-0.001999, 	0.000000, 	1.200000, 	2.199999, 	1.000000, 	1.286001, 	1.096001},
	{359, 	0.001999, 	-0.007000, 	-0.009000, 	0.000000, 	-0.100000, 	0.000000, 	0.989999, 	1.213001, 	1.084001},
	{360, 	0.001000, 	-0.004999, 	-0.008000, 	0.000000, 	0.000000, 	0.000000, 	1.000000, 	1.140000, 	1.055000}
};*/

enum E_FAMILY_STRUCT // структура семьи
{
    F_SQL_ID,       // ид аккаунта
    F_NAME[63 + 1], // название семьи
    F_USER_ID,      // создатель семьи
    F_TIME,         // время создания
    F_COLOR,        // цвет семьи
    F_LEVEL,        // уровень семьи
    F_EXP,          // опыт семьи
    F_RANK1[32],    // ранг 1
    F_RANK2[32],    // ранг 2
    F_RANK3[32],    // ранг 3
    F_RANK4[32],    // ранг 4
    F_RANK5[32],    // ранг 5
    F_RANK6[32],    // ранг 6
    F_RANK7[32],    // ранг 7
    F_RANK8[32],    // ранг 8
    F_RANK9[32],    // ранг 9
    F_RANK10[32],   // ранг 10
    F_MONEY,        // общак: деньги
    F_DRUGS,        // общак: наркотики
    F_TREE,         // общак: дерево
    F_METAL,        // общак: металл
    F_AMMO,         // общак: патроны
    F_HOUSE_ID,      // номер дома
    Float:F_SPAWN_POSITION[4],    // Позиция спавна
    F_SPAWN_IV[2],
    F_TAKE_MONEY,    //ранг доступа взятия денег со склада семьи
	F_TAKE_DRUGS,    //ранг доступа взятия нарко со склада семьи
	F_TAKE_METALL,    //ранг доступа взятия металла со склада семьи
	F_TAKE_AMMO,    //ранг доступа взятия патронов со склада семьи
	F_RANG_INV,
	F_RANG_UNINV,
	F_RANG_MUTE,
	F_RANG_UNMUTE,
	F_RANG_WARN,
	F_RANG_UNWARN,
	F_RANG_GIVER,
	F_FAMILY_CARS //количество тс у семьи
};

new g_family[200][E_FAMILY_STRUCT];

new g_family_loaded;

// ------------------------------------------
enum E_GREEN_ZONES_STRUCT
{
	Float: GZ_X,
	Float: GZ_Y,
	Float: GZ_Z,
	Float: GZ_SIZE,
	GZ_NAME[32],
	GZ_AREA,
	bool: GZ_ALLOW_PARK
}

new
	g_green_zones[MAX_GREEN_ZONES][E_GREEN_ZONES_STRUCT] =
{
	{2907.5503,1513.4010,1551.9464, 50.00, "Отделение Полиции", -1, false},
	{1854.6537,2043.9581,15.8865, 50.00, "Банк", -1, true},
	{406.4704,1940.9047,8.1792, 50.00, "Банк", -1, false}, //банк арзамас
	{2490.1707,-735.2915,12.1878, 99.00, "Автосалон премиум класса", -1, false},
	{1410.7759,460.1069,13.1630, 99.00, "Автосалон среднего класса", -1, false},
	{1761.8707,2279.4844,15.8625, 70.00, "Автосалон эконом класса'", -1, true},
	{-2239.9749,268.9089,24.5391, 70.00, "Мото-вело рынок", -1, false},
	{-113.0476,981.1268,12.0230, 50.00, "Гостинница Диана", -1, false},
	{1926.6003,2232.8459,15.7236, 35.00, "Автошкола", -1, false},
	{498.0786,1499.4578,1501.0000, 80.00, "Военкомат", -1, false}, //внутри
	{1916.9771,2312.2861,15.6606, 20.00, "Военкомат", -1, false}, //наружа
	{-126.2508,620.1169,12.0158, 70.00, "Правительство", -1, false},
	{978.1717,-5.9652,1380.9962, 99.00, "Правительство", -1, false} //внутри
};

//RP TEST

enum tRPinfo
{
    tRPVopros[64],
    tRPOtvet[256],
    tRPOtvet_Good
};

#define COLOR_LIGHTBLUE 0x00C3FFFF
#define COLOR_WHITE 0xFFFFFFFF
#define COLOR_RED 0xFF0000FF
#define COLOR_LIME 0x00FF33FF
#define COLOR_GREY 0xAFAFAFFF
#define COL_WHITE "{FFFFFF}"
#define COL_LBLUE "{00C3FF}"
#define COL_RED "{FF0000}"
#define COL_LIME "{00FF33}"
#define COLOR_PURPLE 0xC2A2DAAA


// ------------------------------------------

enum E_BUY_CMD_STRUCT
{
	CMD_NAME[64],
	CMD_DESCRIPTION[128],
	CMD_PRICE
};

new
	g_admin_cmd_buy[CMD_NUM][E_BUY_CMD_STRUCT] =
{
	{"/setleader", "Данная команда даёт вам возможность выдавать права лидера", 800},
	{"/setadmin",  "Данная команда даёт вам возможность выдавать права администратора", 1500},
	{"/veh",       "Данная команда даёт вам возможность создать транспорт в любом месте", 500},
	{"/awarn",     "Данная команда даёт вам возможность выдавать админ варн", 800},
	{"/unawarn",   "Данная команда даёт вам возможность снимать админ варн", 750},
	{"/banip",     "Данная команда даёт вам возможность блокировать IP Адреса", 400}
};
// ------------------------------------------
enum E_BUS_ROUTE_STRUCT
{
	BR_NAME[32],
	BR_COLOR,
	BR_IN_JOB
};

enum E_BUS_ROUTE_STEP_STRUCT
{
	Float: BRS_POS_X,
	Float: BRS_POS_Y,
	Float: BRS_POS_Z,
	bool: BRS_STOP
};

// ------------------------------------------
enum E_PLAYER_SPECTATE_STRUCT
{
	Float: S_START_POS_X,
	Float: S_START_POS_Y,
	Float: S_START_POS_Z,
	Float: S_START_ANGLE,
	S_START_INTERIOR,
	S_START_VIRTUAL_WORLD,
	S_PLAYER
};
new g_spectate[MAX_PLAYERS][E_PLAYER_SPECTATE_STRUCT];

// ------------------------------------------
enum
{
	PEDAL_TYPE_NONE = 0, // не жмёт ни на какую педаль
	PEDAL_TYPE_GAS, // педаль газа
	PEDAL_TYPE_BRAKE // педаль тормоза
}

new player_press_pedal[MAX_PLAYERS];

// ------------------------------------------
enum // иды диалогов
{
	INVALID_DIALOG_ID,
	// ---------------
	DIALOG_LOGIN,					// Авторизация
	DIALOG_REGISTER,				// Регистрация
	
	DIALOG_OBMEN_MONET,
	DIALOG_SERVER_SETTINGS_COINS,
	DIALOG_SERVER_SETTINGS_BONUSM,
	DIALOG_SERVER_SETTINGS_BONUSD,
	DIALOG_SERVER_SETTINGS_BONUSL,
	
	// ---------------
	DIALOG_PLAYER_MENU,  			// меню игрока
	DIALOG_PLAYER_STATS, 			// статистика игрока
	DIALOG_PLAYER_CMDS,  			// список команд
	DIALOG_PLAYER_SETTINGS,			// личные настройки
	DIALOG_PLAYER_SECURITY_SETTINGS,// настройки безопасности
	
	DIALOG_BOOMBOX0,
	DIALOG_BOOMBOX,
	DIALOG_BOOMBOX1,
	DIALOG_BOOMBOX2,
	DIALOG_BOOMBOX3,
	DIALOG_BOOMBOX4,
	DIALOG_BOOMBOX5,
	DIALOG_BOOMBOX6,
	DIALOG_BOOMBOX7,
	DIALOG_BOOMBOX_MENU,
	
	DIALOG_CONTENER1,
	DIALOG_CONTENER2,
	DIALOG_CONTENER3,
	
	DIALOG_MPREG,
	
	DIALOG_HELPADM,
	//
	DIALOG_LEADER_MENU,                 //Лидерское меню
	DIALOG_LEADER_MENU_UNINVITE,        //Лидерское меню
	DIALOG_LEADER_MENU_CARSPAWN,		//Лидерское меню
	DIALOG_LEADER_MENU_JOBS,            //Лидерское меню
	//
 	DIALOG_RENT_BIKE,               // Аренда велосипеда
 	DIALOG_AUTOSALON_CAR_BUY,
	// ---------------
	DIALOG_SECURITY_SETTING_INFO,	// информацию о настройках
	DIALOG_SECURITY_SETTING_PHONE,	// запрос телефона при авторизации
	DIALOG_SECURITY_SETTING_PHONE_S,// устанавить запрос телефона при авторизации
	DIALOG_SECURITY_SETTING_PIN,	// запрос пин кода при авторизации
	DIALOG_SECURITY_SETTING_PIN_SET,// устанавить запрос пин кода при авторизации
	DIALOG_SECURITY_SETTING_PASS_1, // смена пароля (проверка текущего)
	DIALOG_SECURITY_SETTING_PASS_2, // смена пароля (смена)
	DIALOG_SECURITY_SETTING_EMAIL,	// подтверждения емайла
	// ---------------
	DIALOG_REPORT,					// репорт
	DIALOG_ASK,
	DIALOG_AUTOREPORT,				// Админ помощник
	// ---------------
	DIALOG_PLAYER_IMPROVEMENTS, 	// улучшения
	// ---------------
	DIALOG_CHANGE_NAME, 			// смена ника
	// ---------------
	
	DIALOG_CHANGE_COLOR_CAR,
	
	DIALOG_GPS, 					// gps
	DIALOG_GPS_PUBLIC_PLACES, 		// общественные места
	DIALOG_GPS_TRANSPORT, 			// транспортные узлы
	DIALOG_GPS_STATE_ORGANIZATIONS, // государственные организации
	DIALOG_GPS_GANGS,				// базы банд и мафий
	DIALOG_GPS_JOBS,				// по работе
	DIALOG_GPS_BANKS,				// по работе
	DIALOG_GPS_BUSINESS,			// реклама бизнеса
	DIALOG_GPS_MP,			// реклама бизнеса
	DIALOG_GPS_QUEST,
	// ---------------
	DIALOG_HELP,					// помощь по игре
	DIALOG_HELP_SECTION,			// раздел
	// ---------------
	DIALOG_SERVER_RADIO, 			// радио (/play)
	DIALOG_CAR_RADIO,
	DIALOG_PLAY_RADIO,
	// ---------------
	DIALOG_ANIM_LIST, 				// аним лист (/anim)
	// ---------------
	DIALOG_OPEN_HOOD_OR_TRUNK,		// управление капотом/багажником
	// ---------------
	DIALOG_DRIVING_TUTORIAL_START,	// теория в автошколе
	DIALOG_DRIVING_TUTORIAL,	 	// теория в автошколе
	DIALOG_DRIVING_TUTORIAL_END, 	// теория в автошколе
	DIALOG_DRIVING_EXAM_INFO, 		// экзамен по вождению
	DIALOG_DRIVING_EXAM_START,		// экзамен по вождению
	DIALOG_DRIVING_EXAM, 			// экзамен по вождению
	DIALOG_DRIVING_EXAM_RESULT, 	// экзамен по вождению
	
	DIALOG_MTOP,
	DIALOG_MTOP_MENU,
	// ---------------
	DIALOG_ATM, 					// банкомат
	DIALOG_ATM_TAKE_MONEY, 			// снять деньги
	DIALOG_ATM_TAKE_OTHER_MONEY,	// снять деньги (другая сума)
	DIALOG_ATM_PUT_MONEY, 			// положить деньги
	DIALOG_ATM_PUT_OTHER_MONEY, 	// положить деньги (другая сума)
	DIALOG_ATM_BALANCE, 			// баланс в банке
	DIALOG_ATM_PHONE_BALANCE,		// пополнить баланс телефона

	DIALOG_ATM_SELECT_COMPANY_TAKE,	// выбрать предприятие с которого снять деньги
	DIALOG_ATM_SELECT_COMPANY_PUT,	// выбрать предприятие на которое положить деньги
	DIALOG_ATM_FUEL_ST_TAKE_MONEY,	// снять деньги с заправочной станции
	DIALOG_ATM_FUEL_ST_PUT_MONEY,	// полижить деньги на счет заправочной станции
	DIALOG_ATM_BIZ_TAKE_MONEY,		// снять деньги с предприятия
	DIALOG_ATM_BIZ_PUT_MONEY,		// полижить деньги на счет предприятия

	DIALOG_ATM_TRANSFER_MONEY_1, 	// перевод на банковский счет
	DIALOG_ATM_TRANSFER_MONEY_2, 	// перевод на банковский счет
	DIALOG_ATM_CHARITY, 			// Благотворительность

	DIALOG_ATM_TICKET_SELECT,		// Выбор способа оплаты штрафа
	DIALOG_ATM_TICKET_LIST,			// Список штрафов
	DIALOG_ATM_TICKET_PAY,			// Оплата штрафа по номеру
	// ---------------
	DIALOG_PAY_FOR_RENT,			// оплата аренды (биз,дом,азс)
	DIALOG_PAY_FOR_RENT_FUEL_ST,	// оплата за АЗС
	DIALOG_PAY_FOR_RENT_BIZ,		// оплата за бизнес
	DIALOG_PAY_FOR_RENT_HOUSE,		// оплата за дом
	DIALOG_RETURN_MONEY,			// Возврат денег
	// ---------------
	DIALOG_BANK,					// банк
	DIALOG_BANK_ACCOUNTS, 			// мои счета
	DIALOG_BANK_ACCOUNT_LOGIN, 		// авторизация
	DIALOG_BANK_ACCOUNT_OPERATION,	// Список операций
	DIALOG_BANK_ACCOUNT_INFO, 		// информация о счете
	DIALOG_BANK_ACCOUNT_TAKE_MONEY,	// снять деньги
	DIALOG_BANK_ACCOUNT_PUT_MONEY,	// положить деньги
	DIALOG_BANK_ACCOUNT_TRANSFER_1, // перевод денег на другой счет 1
	DIALOG_BANK_ACCOUNT_TRANSFER_2, // перевод денег на другой счет 2
	DIALOG_BANK_ACCOUNT_CHANGE_NAME,// переименирование счета
	DIALOG_BANK_ACCOUNT_CHANGE_PIN,	// смена пин-кода

	DIALOG_BANK_CREATE_ACCOUNT, 	// создание счета
	DIALOG_BANK_CREATED_ACCOUNT, 	// создание счета
	// ---------------
	DIALOG_PHONE_CALL,				// Номера государственных организаций
	DIALOG_PHONE_CALL_BALANCE,		// Узнать баланс мобильного
	// ---------------
	DIALOG_ACTION,					// меню действия
	// ---------------
	DIALOG_VIEV_JOBS_LIST,			// посмотреть список работ
	DIALOG_JOIN_TO_JOB,				// устроится на работу
	// ---------------
	DIALOG_END_JOB,					// закончить работу
	// ---------------

	DIALOG_BUS_RENT_CAR,			// арендовать автобус
	DIALOG_BUS_ROUTE_COST,			// ввести стоимость проезда
	DIALOG_BUS_ROUTE_SELECTION,		// выбрать маршрут
	//---
	DIALOG_TAXI_RENT_CAR,			// арендовать такси
	DIALOG_TAXI_NAME,				// название такси
	DIALOG_TAXI_TARIFF,				// тариф
	
	DIALOG_ACTION_F_PROGRESS,
	DIALOG_ACTION_EXIT_HOUSE,
	//---
	DIALOG_MECHANIC_RENT_CAR,		// арендовать эвакуатор
	DIALOG_MECHANIC_START_JOB,		// начать работу механика
	DIALOG_MECHANIC_NAME,			// название службы
	//---
	DIALOG_TRUCKER_RENT_CAR,		// арендовать грузовик
	DIALOG_TRUCKER_START_JOB,		// начать работу

	// ---------------
	DIALOG_PHONE_BOOK,				// телефонная книга
	DIALOG_PHONE_BOOK_OPTION,		// варианты
	DIALOG_PHONE_BOOK_SEND_SMS,		// отправить смс
	DIALOG_PHONE_BOOK_CHANGE_NAME,	// сменить имя контакта
	DIALOG_PHONE_BOOK_CHANGE_NUMBER,// сменить номер контакта

	DIALOG_PHONE_BOOK_ADD_CONTACT,	// телефонная книга (добавить контакт)
	// ---------------
	DIALOG_MINER_BUY_METALL, 		// покупка металла на шахте
	// ---------------
	DIALOG_TEMP_JOB_LOADER_START,	// Начать работу грузчика
	DIALOG_TEMP_JOB_LOADER_END,		// Закончить работу грузчика
	DIALOG_TEMP_JOB_MINER_START,	// Начать работу шахтера
	DIALOG_TEMP_JOB_MINER_END,		// Закончить работу шахтера
	DIALOG_TEMP_JOB_FACTORY_TRUCKER,// Служба доставки завода
	DIALOG_TEMP_JOB_FACTORY,		// Производственный цех
	DIALOG_TEMP_JOB_LUMBERJACK_ST, 	// Начать работу лесоруба
	DIALOG_TEMP_JOB_LUMBERJACK_END,	// Закончить работу лесоруба
	// ---------------
	DIALOG_FUEL_STATION_BUY,		// покупка заправочной станции
	DIALOG_FUEL_STATION_INFO,		// инфо о заправочной станции
	DIALOG_FUEL_STATION_PARAMS,		// меню управления заправочной станцией
	DIALOG_FUEL_STATION_NAME,		// Смена названия
	DIALOG_FUEL_STATION_PRICE_FUEL,	// Цена топлива
	DIALOG_FUEL_STATION_BUY_FUEL_PR,// закупочная цена
	DIALOG_FUEL_STATION_ORDER_FUELS,// заказ топлива
	DIALOG_FUEL_STATION_ORDER_CANCE,// отмена заказа
	DIALOG_FUEL_STATION_IMPROVEMENT,// улучшения АЗС
	DIALOG_FUEL_STATION_SELL,		// продажа АЗС государству
	DIALOG_FUEL_STATION_BUY_JERRICA,// покупка канистры на АЗС
	DIALOG_FUEL_STATION_BUY_REPAIR,
	DIALOG_FUEL_STATION_BUY_FUEL_M,	// покупка топлива (механик)
	// ---------------
	DIALOG_JERRICAN_FILL_CAR,		// заправка авто с канистры
	
	DIALOG_YTPROMO_ACTIVATE,
	DIALOG_YTPROMO_CREATE,
	// ---------------
	DIALOG_BIZ_BUY,					// покупка бизнеса
	DIALOG_BIZ_INFO,				// инфо о бизнесе
	DIALOG_BIZ_PARAMS,				// меню управления бизнесом
	DIALOG_BIZ_ENTER_PRICE,			// установить цену за вход
	DIALOG_BIZ_PROD_PRICE,			// установить стоимость продутка
	DIALOG_BIZ_ORDER_PRODS,			// заказ продуктов
	DIALOG_BIZ_ORDER_CANCEL,		// отмена заказа
	DIALOG_BIZ_IMPROVEMENT,			// улучшение
	DIALOG_BIZ_SELL,				// продажа Бизнеса государству
	DIALOG_BIZ_ENTER_MUSIC,			// установить звук при входе
	DIALOG_BIZ_ENTER,				// платный вход

	DIALOG_BIZ_SHOP_24_7,			// магазин 24\7
	DIALOG_BIZ_LOTTERY,				// лотерея
	
	DIALOG_BIZ_SHOP_GUN,

	DIALOG_BIZ_CAR_MARKET,			// авторынок
	DIALOG_BIZ_CAR_MARKET_BUY_CAR,	// покупка авто
	DIALOG_BIZ_CAR_MARKET_CAR_INFO,	// информация об авто

	DIALOG_BIZ_CELL_SALON,			// сотовый салон
	DIALOG_BIZ_PHONE_BALANCE,		// пополнить счет телефона
	DIALOG_BIZ_CHANGE_PHONE_NUMBER,	// смена номера телефона
	DIALOG_BIZ_CHANGE_PHONE_COLOR,	// смена цвет телефона

	DIALOG_BIZ_CLUB,				// меню бара (клуб)

	DIALOG_BIZ_REALTOR_BIZ_LIST,	// список свободных бизнесов (управление статистики)
	DIALOG_BIZ_REALTOR_BIZ_INFO,	// фото бизнеса

	DIALOG_BIZ_REALTOR_HOME_GET,	// найти информацию о доме
	DIALOG_BIZ_REALTOR_HOME_INFO,	// фото дома

	DIALOG_BIZ_CLOTHING_BUY,		// покупка одежды

	DIALOG_BIZ_CAR_TUNING,			// тюнинг транспорта
	// ---------------
	DIALOG_HOUSE_BUY,				// покупка дома
	DIALOG_HOUSE_SELL,				// продажа дома
	DIALOG_HOUSE_INFO,				// инфо о доме
	DIALOG_HOUSE_PARAMS,			// меню управления домом
	DIALOG_HOUSE_IMPROVEMENTS,		// улучшение для дома
	DIALOG_HOUSE_RENTERS,			// список арендаторов
	DIALOG_HOUSE_RENTER_INFO,		// информация о арендаторе
	DIALOG_HOUSE_RENTER_EVICT,		// выселение арендатора
	DIALOG_HOUSE_EVICT,				// выселение арендатора (/liveout)
	DIALOG_HOUSE_MOVE_STORE,		// переставить шкаф (/makestore)
	DIALOG_HOUSE_STORE,				// использовать шкаф
	DIALOG_HOUSE_STORE_PUT,			// положить металл/наркотики
	DIALOG_HOUSE_STORE_TAKE,		// взять металл/наркотики

	DIALOG_HOUSE_ENTER,				// вход в дом
	// ---------------
	DIALOG_ENTRANCE_LIFT,			// лифт подъезда
	// ---------------
	DIALOG_HOTEL,					// меню отеля
	DIALOG_HOTEL_FLOOR_SELECT,		// Выбрать этаж (просмотр инфы о номерах)
	DIALOG_HOTEL_FLOOR_INFO,		// Информация о номерах этажа
	DIALOG_HOTEL_FLOOR_LIFT,		// лифт в отеле
	DIALOG_HOTEL_REG_ROOM,			// регистрация в номере
	DIALOG_HOTEL_CLIENT_MENU,		// меню клиента
	DIALOG_HOTEL_PAY_FOR_ROOM,		// оплата за комнату
	DIALOG_HOTEL_OUT,				// выселиться

	// ---------------

	DIALOG_ACT_PROMO,

	// ---------------

	DIALOG_OWNABLE_CAR,				// система управления транспортом
	DIALOG_OWNABLE_CAR_LOAD,		// загрузить транспорт
	DIALOG_OWNABLE_CAR_LIST,		// выбор транспорта из списка
	DIALOG_OWNABLE_CAR_SELL,		// продажа личного ТС
	DIALOG_FAMILY_CAR_SELL,		// продажа семейного ТС
	DIALOG_OWNABLE_CAR_NUMBER,		// получение номера на ТС
	DIALOG_OWNABLE_CAR_PT,          // performance tuning
	DIALOG_OWNABLE_CAR_PT_ITEM,     // улучшения
	DIALOG_OWNABLE_CAR_PT_ACCEPT,   // подтвердить улучшение

	// ---------------
	DIALOG_VEHICLE_TRUNK,			// багажник
	DIALOG_VEHICLE_TRUNK_PUT,		// положить предмет
	DIALOG_VEHICLE_TRUNK_PUT_ITEM,	// количество предметов
	DIALOG_VEHICLE_TRUNK_TAKE,		// достать предмет
	// ---------------
	DIALOG_SET_SPAWN,               // диалог смены спавна
	
	DIALOG_DONATE_CASE_PRISE,
	DIALOG_DONATE_CASE,
	
	DIALOG_DONATE_OPEN,
	
	DIALOG_ACTION_F_QUEST,
	DIALOG_QUEST_OPEN,
	
	// ---------------
	DIALOG_DONATE_INFO, 			// информация о донате (первый диалог)
	DIALOG_DONATE_MENU,				// меню доната
	DIALOG_DONATE_CONVERT,			// конвертация валюты
	DIALOG_DONATE_GET_MONEY,		// получение денег
	DIALOG_DONATIONS,				// все пополнения
	DIALOG_DONATE_ENROLLMENT,		// зачисление донат-очков
	DIALOG_DONATE_BUY_CAR_NUMBER,	// покупка номера на ТС
	DIALOG_DONATE_ACCEPT_CAR_NUM,	// подтверждение номера
	DIALOG_DONATE_CHANGE_NAME,		// смена имени в донате
	DIALOG_DONATE_BUY_NUMBER,		// смена номера телефона на 4-хзначный
	DIALOG_DONATE_SKILLS,			// список скиллов для прокачки
	DIALOG_DONATE_SKILL_BUY,		// прокачка скилла
	// ---------------
	DIALOG_DRUB_MENU,
	DIALOG_BUY_DONATE_CAR,
	
	DIALOG_BUYBIZ_CLOSE,
	DIALOG_BUYBIZ_OPEN,
	// ----------------
	DIALOG_ADONATE_MENU,			// Меню доната
	DIALOG_BUY_PREFIX,				// Prefix
	DIALOG_BUY_CMD,					// Админ команды
	// ---------------
	DIALOG_TEAM_CHANGE_SKIN,		// смена скина игрока
	DIALOG_TEAM_LEAVE,				// уволиться по собственному желанию

	DIALOG_DEBTORLIST, 				// список должников
	DIALOG_DEBTORLIST_HOUSE, 		// дома должников
	DIALOG_DEBTORLIST_BIZ, 			// бизы должников
	DIALOG_DEBTORLIST_FUEL_ST, 		// АЗС должников

	DIALOG_DEBTOR_SELL_LIST, 		// Выселение
	DIALOG_DEBTOR_SELL_HOUSE, 		// Выселение дома
	DIALOG_DEBTOR_SELL_BIZ, 		// Выселение биза
	DIALOG_DEBTOR_SELL_FUEL_ST, 	// Выселение АЗС

	DIALOG_ADVISOR_MENU,			// Меню советника прав-ва
	DIALOG_ADVISOR_TEAM_STRUCTURE,	// Структура организации
	// ---------------
	DIALOG_ADMIN_PANEL,				// Панель управления сервером
	DIALOG_ADMIN_REG,				// Регистрация в админке
	DIALOG_ADMIN_LOGIN,				// Авторизация в админке
	DIALOG_ADMINS,					// Список администраторов
	DIALOG_LEADERS,					// Список лидеров
	DIALOG_EDIT_ADMIN,				// Редактирование администратора
	DIALOG_EDIT_LEADER,				// Редактирование лидера
	DIALOG_EDIT_ADMIN_RANG,			// Повысить/понизить администратора
	DIALOG_EDIT_LEADER_FRAC,		// Сменить управляемую фракцию
	DIALOG_REMOVE_ADMIN,			// Разжаловать администратора
	DIALOG_REMOVE_LEADER,			// Разжаловать лидера
	DIALOG_BLOCK_ACCOUNT,			// Заблокировать аккаунт
	DIALOG_BLOCK_ACCOUNT_CONFIRM,	// Подтвердить блокировку
	// ---------------
	DIALOG_TELEPORT_LIST,			// Список мест для телепорта
	DIALOG_SET_DOUBLING,			// Включить удвоение
	// ---------------
	DIALOG_GANG_REPOSITORY,			// Положить/взять со склада банды
	DIALOG_GANG_REPOSITORY_USE,		// Использование склада банды
	// ---------------
/*	DIALOG_RADAR_SELECT,			// Выбор типа радара
	DIALOG_RADAR_OBJECT,			// Выбор объекта радара
	DIALOG_RADAR_REMOVE,			// Удаление радара*/
	// ---------------
	DIALOG_ADVERT_EDIT,				// редактирование объявления
	// ---------------
	DIALOG_ARMORY,					// оружейный склад
	// ---------------
	DIALOG_BIZ_ORDERS,				// список заказов для бизнесов
	DIALOG_FS_ORDERS,				// список заказов для АЗС
	// ---------------
	DIALOG_PROMO_CREATE,			// создание промокода
	DIALOG_PROMO_ACTIVATE,			// активация промокода
	// ---------------
	DIALOG_MP_CREATE,               // создание МП
	DIALOG_MP_MENU,                 // панель МП
	DIALOG_MP_SKIN,                 // выдача скина на МП
	//
	DIALOG_FAMILY_CAR_RANG_SET,
	DIALOG_FAMILY_CAR_RANG,
 	DIALOG_CREATE_FAMILY,           // создание семьи
    DIALOG_FAMILY_MENU,             // Меню семьи
    DIALOG_FAMILY_RANG,             // смена рангов семьи
    DIALOG_FAMILY_RCHANGE,          // смена рангов семьи
    DIALOG_FAMILY_LEAVE,            // Выход из семьи
    DIALOG_FAMILY_SETTINGS,         // Настройки семьи
    DIALOG_ACTION_TYPE_GET_FAMILY,
    DIALOG_FAMILY_SPAWN_SET,
    DIALOG_FAMILY_WAREHOUSE, //склад семьи
    DIALOG_FAMILY_PUT_CASH,
	DIALOG_FAMILY_PUT_DRUGS,
	DIALOG_FAMILY_PUT_METALL,
	DIALOG_FAMILY_PUT_AMMO,
	DIALOG_FAMILY_TAKE_CASH,
	DIALOG_FAMILY_TAKE_DRUGS,
	DIALOG_FAMILY_TAKE_METALL,
	DIALOG_FAMILY_TAKE_AMMO,
	DIALOG_FAMILY_COLOR,
	DIALOG_COLOR_FAMILY_SET,
	DIALOG_FAMILY_NCHANGE,
	
	DIALOG_FAMILY_SETRANG_MENU,
	DIALOG_SET_FRANG_TAKEMONEY,
	DIALOG_SET_FRANG_TAKEDRUGS,
	DIALOG_SET_FRANG_TAKEMETALL,
	DIALOG_SET_FRANG_TAKEAMMO,
	DIALOG_SET_FRANG_INV,
	DIALOG_SET_FRANG_UNINV,
	DIALOG_SET_FRANG_MUTE,
	DIALOG_SET_FRANG_UNMUTE,
	DIALOG_SET_FRANG_WARN,
	DIALOG_SET_FRANG_UNWARN,
	DIALOG_SET_FRANG_GIVER,
    //
    DIALOG_SELL_GIFT,               // продажа потков
    //
    DIALOG_DONATE_SKIN,

    DIALOG_ACTION_QUEST,
    //
    DIALOG_DONATE_PREMIUM,          // подписка "SERVER_NAME"+
    DIALOG_DONATE_VIP_HELP,			// VIP HELP
    DIALOG_GOADM,
    // ----------
    DIALOG_SERVER_SETTINGS,
    DIALOG_SERVER_SETTINGS_ADM,
    DIALOG_SERVER_SETTINGS_HELP,
    DIALOG_SERVER_SETTINGS_RUB,
    DIALOG_SERVER_SETTINGS_DON,
    DIALOG_ADMINCALL_MENU,
    DIALOG_ORG_CAR_GET,
};

// ------------------------------------------
enum // иды работ (официальные)
{
	JOB_BUS_DRIVER = 1, // водитель автобуса
	JOB_TAXI_DRIVER,	// таксист
	JOB_MECHANIC,		// механик
	JOB_TRUCKER			// дальнобойщик
};

// ------------------------------------------
enum // типы пикапов
{
	PICKUP_ACTION_TYPE_TELEPORT = 1, 	// Телепорт (входы/выходы)
	PICKUP_ACTION_TYPE_DRIVING_TUTO, 	// теория в автошколе
	PICKUP_ACTION_TYPE_ATM,			// банкомат
	
	PICKUP_ACTION_OBMEN_MONET,
	
	PICKUP_ACTION_FLOWER_1,
	PICKUP_ACTION_FLOWER_2,
	PICKUP_ACTION_FLOWER_3,
	PICKUP_TAKE_FLOWER,
	PICKUP_CONGRATULATE_WOMEN,
	PICKUP_BUY_PERFUME,
	PICKUP_GIVE_PERFUME,
	PICKUP_BUY_CAKE,
	PICKUP_BUY_PRODUCTS,
	PICKUP_BUY_CANDLE,
	PICKUP_END_QUEST_8MARTA,
	
	PICKUP_ACTION_TYPE_BIZ_SHOP_GUN,
	PICKUP_ACTION_TYPE_BANK, 			// банк
	PICKUP_ACTION_TYPE_TEMP_JOB, 		// временная работа
	PICKUP_ACTION_TYPE_TEMP_ARMY,
	PICKUP_ACTION_TYPE_INFO_PICKUP, 	// инфо пикап
	PICKUP_ACTION_TYPE_MINER_SELL_M, 	// покупка металла на шахте
	PICKUP_ACTION_TYPE_FACTORY_MET,		// брать металл (завод)
	PICKUP_ACTION_TYPE_FUEL_STATION,	// покупка канистры на азс
	PICKUP_ACTION_TYPE_BIZ_ENTER,		// вход в бизнес
	PICKUP_ACTION_TYPE_BIZ_EXIT,		// выход в бизнес
	PICKUP_ACTION_TYPE_BIZ_HEALTH,		// аптечка в бизнесе
	PICKUP_ACTION_TYPE_BIZ_SHOP_247,	// покупка в 24\7
	PICKUP_ACTION_TYPE_CELL_SALON,		// покупка в сотовом салоне
	PICKUP_ACTION_TYPE_HOUSE,			// вход в дом
	PICKUP_ACTION_TYPE_HOUSE_HEALTH,	// аптечка дома
	PICKUP_ACTION_TYPE_REALTOR_HOME,	// риелторское агенство
	PICKUP_ACTION_TYPE_BIZ_CLOTHING,	// магазин одежды
	PICKUP_ACTION_TYPE_ENTRANCE_ENT,	// вход в подъезд
	PICKUP_ACTION_TYPE_ENTRANCE_EXI,	// выход из подъезда
	PICKUP_ACTION_TYPE_ENTRANCE_LIF,	// лифт в подъезде
	PICKUP_ACTION_TYPE_ENTRANCE_FLA,	// квартира в подьезде
	PICKUP_ACTION_TYPE_HOTEL_ROOM,		// номер в отеле
	PICKUP_ACTION_TYPE_BIZ_CAR_MARK,	// покупка авто
	PICKUP_ACTION_TYPE_BIZ_CAR_ENT,		// телепорт ко входу в авторынок
	PICKUP_ACTION_TYPE_BIZ_CAR_EXI,		// телепорт к выходу из авторынка
	PICKUP_ACTION_TYPE_GET_CAR_NUM,		// получение номеров на ТС
	PICKUP_ACTION_TYPE_GET_CAR_N2,		// получение номеров на ТС
	PICKUP_ACTION_TYPE_MINER_CARRI,		// пикап у вагонетки
	PICKUP_ACTION_TYPE_GANG_REPOSIT,	// склады для банд
	PICKUP_ACTION_TYPE_MPREG,
	PICKUP_ACTION_TYPE_LUMBERJACK_P,	// положить дрова на склад лесопилки
	PICKUP_ACTION_TYPE_ARMORY,			// оружейный склад
	PICKUP_ACTION_TYPE_BIZ_CAR_TUN,		// тюнинг транспорта
	PICKUP_ACTION_TYPE_MAYOR_JOB,
	PICKUP_ACTION_TYPE_ZAVOD_JOB,
	PICKUP_ACTION_TYPE_PUT_PROD,
	PICKUP_ACTION_TYPE_P_CREATE,
	//
	PICKUP_ACTION_TYPE_GIFT,            // пикап подковы
	PICKUP_ACTION_TYPE_SELL_GIFT,       // продажа подков
	//
	PICKUP_ACTION_HELP_SPAWN,
	//
	PICKUP_ACTION_RENT_BIKE,            // Аренда велосипеда

	PICKUP_ACTION_QUEST_MENU,
	//
	PICKUP_ACTION_TYPE_ORG_CAR,
	
	PICKUP_ACTION_TYPE_CHANGESKIN
};

enum // типы авто
{
	VEHICLE_ACTION_TYPE_DRIVING_SCH = 1, // Учебный транспорт (для сдачи на права)
	VEHICLE_ACTION_TYPE_OWNABLE_CAR,	// личный транспорт
	VEHICLE_ACTION_TYPE_LOADER, 		// погрузчик в порту
	VEHICLE_ACTION_TYPE_FACTORY, 		// завод (служба доставки)
	VEHICLE_ACTION_TYPE_BUS_DRIVER,		// Водитель автобуса
	VEHICLE_ACTION_TYPE_TAXI_DRIVER,	// Таксист
	VEHICLE_ACTION_TYPE_MECHANIC,		// Автомеханик
	VEHICLE_ACTION_TYPE_TRUCKER,		// Дальнобойщик
	VEHICLE_ACTION_TYPE_RENT_CAR,		// Транспорт для аренды
	VEHICLE_ACTION_TYPE_GOV_CAR,		// Автомобили правительства
	VEHICLE_ACTION_TYPE_ARMY_CAR,		// Автомобили воинской части
	VEHICLE_ACTION_TYPE_MED_CAR,		// Автомобили больницы
	VEHICLE_ACTION_TYPE_RADIO_CAR,		// Автомобили радиоцентра
	VEHICLE_ACTION_TYPE_DPS_CAR,		// Автомобили ГИБДД
	VEHICLE_ACTION_TYPE_PPS_CAR,		// Автомобили УМВД
	VEHICLE_ACTION_TYPE_FBI_CAR,		// Автомобили ФСБ
	VEHICLE_ACTION_TYPE_ARZ_CAR,		// Автомобили Арзамасской ОПГ
	VEHICLE_ACTION_TYPE_BAT_CAR,		// Автомобили Батыревской ОПГ
	VEHICLE_ACTION_TYPE_LYT_CAR,		// Автомобили Лыткаринской ОПГ
	VEHICLE_ACTION_TYPE_ADMIN_CAR,		// Транспорт, созданный администратором
	VEHICLE_ACTION_ORG_CAR,				// Транспорт организаций
	//
	VEHICLE_ACTION_TYPE_RENT_BIKE,             // Аренда велосипедов
	
	VEHICLE_ACTION_TYPE_FAMILY_CAR,
};

new
    Float: rent_bike[7][3] =
{
	// в след раз обозначай че где кто
    {1807.1853,2508.8228,15.8888},
    {-2481.8501,2825.5947,37.6357},
    {-1067.4922,2169.2976,38.0406},
    {617.4754,1679.3779,12.0710},
    {2260.5508,497.6972,15.7897},
    {2384.1431,1763.8330,-1.5997},
    {-124.0433,975.4545,12.0424} 	// SPAWN арзамас
};

new
    Float: quest_pos[1][3] =
{
	// в след раз обозначай че где кто
    {0.3824,0.7363,12.0381}
};

enum // типы cp
{
	CP_ACTION_TYPE_LOADER_JOB_TAKE = 1,	// грузчик (брать груз)
	CP_ACTION_TYPE_LOADER_JOB_PUT, 		// грузчик (класть груз)
	// -------
	CP_ACTION_TYPE_MINER_JOB_TAKE, 		// шахтер (брать руду)
	CP_ACTION_TYPE_MINER_JOB_PUT, 		// шахтер (класть руду)
	// -------
	CP_ACTION_TYPE_LUMBERJACK_TAKE,		// лесоруб (брать дрова)
 	CP_ACTION_TYPE_LUMBERJACK_PUT,
 	
 	CP_ACTION_TYPE_GPS //gps
};

enum // типы race_cp
{
	RCP_ACTION_TYPE_DRIVING_EXAM = 1, // сдача на права (практика)
	RCP_ACTION_TYPE_BUS_ROUTE,	// водитель автобуса
	RCP_ACTION_TYPE_ORDER,		// служба доставки
};

// ------------------------------------------
enum // типы анимок
{
	USE_ANIM_TYPE_NONE,
	USE_ANIM_TYPE_CHAT, // анимка чата
};

// ------------------------------------------
enum // типы обьектов
{
	OBJECT_TYPE_FACTORY = 1,	// продукт на заводе
	OBJECT_TYPE_CARRIAGE,		// вагонетка в шахте
	OBJECT_TYPE_WOOD,			// дерево на лесопилке
//	OBJECT_TYPE_TRAIN,			// поезд
};

// ------------------------------------------
enum E_PLAYER_OFFER_STURCT
{
	O_OUTCOMIG_PLAYER,  // отправленое предложение игроку
	O_INCOMING_PLAYER, 	// входящее предложение от игрока
	O_INCOMING_TYPE, 	// входящее предложение
	O_INCOMING_VALUE[2] // значение входящего предложения
};

enum // типы предложений
{
	OFFER_TYPE_NONE = -1,
	OFFER_TYPE_HANDSHAKE, 		// приветствие
	OFFER_TYPE_SELL_FUEL_ST, 	// продажа АЗС
	OFFER_TYPE_FILL_CAR,		// заправка авто (механик)
	OFFER_TYPE_REPAIR_CAR,		// починка авто (механик)
	OFFER_TYPE_SELL_BUSINESS,	// продажа бизнеса
	OFFER_TYPE_BUSINESS_MANAGER,// пригласить сотрудника себе на предприятие
	OFFER_TYPE_SELL_HOME,		// продать дом игроку
	OFFER_TYPE_HOME_RENT_ROOM,	// предложить поселиться в комнате своего дома
	OFFER_TYPE_SELL_OWNABLE_CAR,// продать личный ТС
	OFFER_TYPE_INVITE,			// предложить вступить в организацию
	OFFER_TYPE_FINVITE,         // предложение вступить в семью
	OFFER_TYPE_MEDHELP,			// лечение
	OFFER_TYPE_HEAL,			// лечение в машине скорой помощи
	OFFER_TYPE_CHANGE_SEX,		// смена пола
	OFFER_TYPE_SHOW_SKILL,		// просмотр навыков владения оружием
	OFFER_TYPE_GIVE_CAR_KEY,	// дать ключи от личного транспорта
	OFFER_TYPE_CASINO_DICE,		// бросить кости в казино
	OFFER_TYPE_GETHERE,			// телепорт к себе админа выше рангом
	OFFER_TYPE_GIVE_MIC,		// доступ в радиоэфир
	OFFER_TYPE_GIVE_LIC,		// продажа лицензий
	OFFER_TYPE_JAIL_FREE,		// выпустить из тюрьмы (для адвокатов)
	OFFER_TYPE_SELL_COINS_MONEY,
	OFFER_TYPE_SELL_COINS_RUB,
};

// автосалон
enum
	E_RENT_CARS
{
	rent_car_modelid,
	Float: rent_car_pos_x,
	Float: rent_car_pos_y,
	Float: rent_car_pos_z,
	Float: rent_car_angle,
	rent_car_tenant_id,
};

new first_rent_car_id;

new
	rent_cars_data[][E_RENT_CARS] =
{
	// --- Мото-Вело рынок
	{509, -2229.4900, 266.4987, 24.1909, 115.0000}, // 0
	{510, -2230.2104, 268.7669, 24.1909, 115.0000}, // 1
	{481, -2230.9236, 270.7679, 24.1909, 115.0000}, // 2
	{462, -2249.3242, 267.3882, 24.0889, -98.0000}, // 3
	{468, -2248.8162, 270.7087, 24.1789, -97.6799}, // 4
	{586, -2248.0940, 274.1864, 24.2209, -97.6799}, // 5
	{463, -2246.8218, 283.6239, 24.0249, -97.6799}, // 6
	{581, -2246.5383, 286.7294, 24.0209, -97.6799}, // 7
	{461, -2247.7026, 277.5329, 24.0489, -97.6799}, // 8
	{521, -2247.3396, 280.6474, 24.0569, -97.6799}, // 9
	{471, -2246.1233, 290.3882, 23.9309, -97.6799}, // 10
	// --- Премиум класс
	{400, -47.9534, 2538.7852, 10.8711, 180.5157}, // 11
	{402, -43.7624, 2538.7227, 10.7186, 180.1602}, // 12
	{415, -39.5658, 2538.6973, 10.5528, 180.1369}, // 13
	{451, -35.3540, 2538.6770, 10.5410, 180.1410}, // 14
	{466, -31.0746, 2538.5706, 10.4549, 180.7262}, // 15
	{506, -26.9142, 2538.5095, 10.5806, 180.6150}, // 16
	{541, -22.6724, 2538.6714, 10.6309, 180.4375}, // 17
	{579, -48.0366, 2520.0986, 10.9071, 0.6686}, // 18
	{602, -43.7274, 2520.0999, 10.6831, 359.9215}, // 19
	{603, -39.5525, 2520.0259, 10.7141, 0.4200}, // 20
	{477, -35.3845, 2520.3342, 10.6326, 0.0485}, // 21
	{409, -31.1460, 2520.9321, 10.8689, 359.8419}, // 22
	{410, -26.9292, 2519.6812, 10.5589, 0.4032}, // 23
	{405, -22.8175, 2519.8364, 10.7382, 359.6786}, // 24
	// --- Эконом класс
	{404, 1767.2644, 2306.8350, 15.9280, 133.2001}, // 25
	{439, 1767.3580, 2302.7463, 15.9280, 133.2001}, // 26
	{467, 1767.5084, 2298.6968, 15.9280, 133.2001}, // 27
	{496, 1767.6865, 2294.7922, 15.9280, 133.2001}, // 28
	{516, 1767.8269, 2291.0906, 15.9280, 133.2001}, // 29
	{545, 1767.9811, 2287.2329, 15.9280, 133.2001}, // 30
	{474, 1767.8712, 2283.1111, 15.9280, 133.2001}, // 31
	{600, 1767.1371, 2278.0391, 15.9280, 133.2001}, // 32
	{478, 1757.2560, 2306.9846, 15.9280, -133.2001}, // 33
	{424, 1757.0476, 2303.1274, 15.6560, -133.2001}, // 34
	{500, 1757.2192, 2298.8496, 15.9280, -133.2001}, // 35
	{545, 1757.1465, 2294.9729, 15.9280, -133.2001}, // 36
	{518, 1757.1348, 2291.0195, 16.2320, -133.2001}, // 37
	{546, 1757.5938, 2286.5496, 15.9280, -133.2001}, // 38
	{547, 1757.4060, 2282.4246, 15.9280, -133.2001}, // 39
	{549, 1757.5575, 2277.9214, 15.9280, -133.2001}, // 40
	// --- Cредний класс
	{411, 1442.9701,437.8552,12.6009,148.1335}, // 41
	{418, 1446.3816,435.4646,13.0605,149.6839}, // 42
	{419, 1449.9580,433.2914,12.7653,150.1192}, // 43
	{421, 1453.4365,430.9986,12.8502,149.8632}, // 44
	{422, 1457.1110,429.0847,12.9309,149.8907}, // 45
	{426, 1460.6003,426.5983,12.9408,150.4805}, // 45
	{429, 1464.6666,425.0737,12.6805,150.6823}, // 47
	{434, 1362.7384,484.5772,12.9360,149.8843}, // 48
	{436, 1358.9193,486.2404,12.7318,149.7653}, // 49
	{440, 1355.2421,488.1748,13.0831,150.2781}, // 50
	{442, 1351.5869,490.6852,12.4641,152.5053}, // 51
	{445, 1348.1659,492.8422,12.8241,149.6584}, // 52
	{458, 1344.1530,494.5126,12.8777,149.1822}, // 53
	{459, 1340.3928,496.2902,13.0204,149.7258} // 54
};

new buy_car_select_car[MAX_PLAYERS] = {-1, ...};
new buy_car_select_color[MAX_PLAYERS][2];
new buy_car_select_color_type[MAX_PLAYERS] = {0, ...};

/*new
	rgb_array[127] =
{
	0x000000FF, 0xF5F5F5FF, 0x2A77A1FF, 0x840410FF, 0x263739FF, 0x86446EFF, 0xD78E10FF, 0x4C75B7FF, 0xBDBEC6FF, 0x5E7072FF,
	0x46597AFF, 0x656A79FF, 0x5D7E8DFF, 0x58595AFF, 0xD6DAD6FF, 0x9CA1A3FF, 0x335F3FFF, 0x730E1AFF, 0x7B0A2AFF, 0x9F9D94FF,
	0x3B4E78FF, 0x732E3EFF, 0x691E3BFF, 0x96918CFF, 0x515459FF, 0x3F3E45FF, 0xA5A9A7FF, 0x635C5AFF, 0x3D4A68FF, 0x979592FF,
	0x421F21FF, 0x5F272BFF, 0x8494ABFF, 0x767B7CFF, 0x646464FF, 0x5A5752FF, 0x252527FF, 0x2D3A35FF, 0x93A396FF, 0x6D7A88FF,
	0x221918FF, 0x6F675FFF, 0x7C1C2AFF, 0x5F0A15FF, 0x193826FF, 0x5D1B20FF, 0x9D9872FF, 0x7A7560FF, 0x989586FF, 0xADB0B0FF,
	0x848988FF, 0x304F45FF, 0x4D6268FF, 0x162248FF, 0x272F4BFF, 0x7D6256FF, 0x9EA4ABFF, 0x9C8D71FF, 0x6D1822FF, 0x4E6881FF,
	0x9C9C98FF, 0x917347FF, 0x661C26FF, 0x949D9FFF, 0xA4A7A5FF, 0x8E8C46FF, 0x341A1EFF, 0x6A7A8CFF, 0xAAAD8EFF, 0xAB988FFF,
	0x851F2EFF, 0x6F8297FF, 0x585853FF, 0x9AA790FF, 0x601A23FF, 0x20202CFF, 0xA4A096FF, 0xAA9D84FF, 0x78222BFF, 0x0E316DFF,
	0x722A3FFF, 0x7B715EFF, 0x741D28FF, 0x1E2E32FF, 0x4D322FFF, 0x7C1B44FF, 0x2E5B20FF, 0x395A83FF, 0x6D2837FF, 0xA7A28FFF,
	0xAFB1B1FF, 0x364155FF, 0x6D6C6EFF, 0x0F6A89FF, 0x204B6BFF, 0x2B3E57FF, 0x9B9F9DFF, 0x6C8495FF, 0x4D8495FF, 0xAE9B7FFF,
	0x406C8FFF, 0x1F253BFF, 0xAB9276FF, 0x134573FF, 0x96816CFF, 0x64686AFF, 0x105082FF, 0xA19983FF, 0x385694FF, 0x525661FF,
	0x7F6956FF, 0x8C929AFF, 0x596E87FF, 0x473532FF, 0x44624FFF, 0x730A27FF, 0x223457FF, 0x640D1BFF, 0xA3ADC6FF, 0x695853FF,
	0x9B8B80FF, 0x620B1CFF, 0x5B5D5EFF, 0x624428FF, 0x731827FF, 0x1B376DFF, 0xEC6AAEFF
};*/

new Text:buy_car_TD[2];
new PlayerText:buy_car_PTD[MAX_PLAYERS][6];
new PlayerText:buy_menu_PTD[MAX_PLAYERS];

new Text: change_color_TD[7];
new PlayerText: change_color_PTD[4][MAX_PLAYERS];

new car_market_data[4][32][2] =
{
	{ // --- Мото-Вело рынок
		{509, 0},
		{510, 0},
		{481, 0},
		{462, 0},
		{468, 0},
		{586, 0},
		{463, 0},
		{581, 0},
		{461, 0},
		{521, 0},
		{471, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0}
	},
	{ // --- Премиум класс
		{400, 0},
		{402, 0},
		{409, 0},
		{415, 0},
		{421, 0},
		{429, 0},
		{436, 0},
		{451, 0},
		{466, 0},
		{489, 0},
		{490, 0},
		{502, 0},
		{505, 0},
		{533, 0},
		{541, 0},
		{543, 0},
		{579, 0},
		{602, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0}
	},
	{ // --- Эконом класс
		{401, 0},
		{404, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0}
		/*{401, 0},
		{404, 0},
		{412, 0},
		{419, 0},
		{422, 0},
		{424, 0},
		{439, 0},
		{458, 0},
		{467, 0},
		{474, 0},
		{478, 0},
		{482, 0},
		{492, 0},
		{496, 0},
		{508, 0},
		{516, 0},
		{518, 0},
		{526, 0},
		{529, 0},
		{542, 0},
		{545, 0},
		{546, 0},
		{547, 0},
		{549, 0},
		{550, 0},
		{552, 0},
		{555, 0},
		{561, 0},
		{565, 0},
		{576, 0},
		{585, 0},
		{600, 0}*/
	},
	{ // --- Cредний класс
		{405, 0},
		{410, 0},
		{411, 0},
		{426, 0},
		{434, 0},
		{445, 0},
		{475, 0},
		{477, 0},
		{479, 0},
		{480, 0},
		{491, 0},
		// {495, 0},
		{506, 0},
		{507, 0},
		{527, 0},
		{534, 0},
		{540, 0},
		{551, 0},
		{558, 0},
		{559, 0},
		{560, 0},
		{562, 0},
		{566, 0},
		{587, 0},
		{589, 0},
		{603, 0},
		// {604, 0},
		{0, 0}, // 495
		{0, 0}, // 604
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0}
	}
};

new cars_after_purchase_count[4];
new
	Float: cars_pos_after_purchase[4][5][4] =
{
	{ // --- Мото-Вело рынок
		{-2240.2588,292.2602,24.0131,205.0654},
		{-2238.8015,289.2990,24.0133,207.5119},
		{-2237.4824,286.7456,24.0122,207.1044},
		{-2236.2100,284.0617,24.0128,206.7947},
		{-2234.6184,280.7356,24.0120,207.2130}
	},
	{ // --- Премиум класс
		{2477.4668, -740.9326, 11.7950, 0.0000},
		{2481.3069, -740.8926, 11.7950, 0.0000},
		{2487.4067, -740.8926, 11.7950, 0.0000},
		{2477.4668, -740.9326, 11.7950, 0.0000},
		{2481.3069, -740.8926, 11.7950, 0.0000}
	},
	{ // --- Эконом класс
		{1726.0829, 2268.9292, 15.8773, 269.6464},
		{1726.1605, 2264.9326, 15.8775, 269.6549},
		{1726.0776, 2260.7021, 15.8772, 269.6965},
		{1782.8536, 2247.1399, 15.7239, 359.3958},
		{1777.9191, 2247.3289, 15.8137, 1.424800}
	},
	{ // --- Cредний класс
		{1371.4735,452.4453,12.6497,149.0897},
		{1375.5096,451.0787,12.6476,146.9182},
		{1378.7089,448.5965,12.6462,149.5981},
		{1382.3378,446.2499,12.6481,148.5284},
		{1389.3162,441.9747,12.6460,148.1852}
	}
};

stock GetVehicleCarMarketID(vehicleid)
{
	if(GetVehicleData(vehicleid, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_RENT_CAR) return -1;
	else return GetVehicleData(vehicleid, V_ACTION_ID);
}

stock BuyCarTDsShowForPlayer(playerid)
{
	for(new i; i < 2; i ++)
	{
		TextDrawShowForPlayer(playerid, buy_car_TD[i]);
		PlayerTextDrawShow(playerid, buy_car_PTD[playerid][i]);
	}
	return 1;
}

stock BuyCarTDsHideForPlayer(playerid)
{
	for(new i; i < 6; i ++)
		PlayerTextDrawHide(playerid, buy_car_PTD[playerid][i]);

	TextDrawHideForPlayer(playerid, buy_car_TD[0]);
	TextDrawHideForPlayer(playerid, buy_car_TD[1]);
	return 1;
}

// ------------------------------------------
enum E_ANTI_FLOOD_STRUCT
{
	AF_LAST_TICK,
	AF_RATE
}

// ------------------------------------------
enum E_TEMP_JOB_STRUCT // временные работы
{
	Float: TJ_POS_X,
	Float: TJ_POS_Y,
	Float: TJ_POS_Z,
	TJ_PAY_FOR_LOAD, // плата за 1 продукт (ящик/кг руды)
	TJ_SKIN[2]		// скин игрока (0 - мужской, 1 - женский)
};

/*enum E_LOADER_JOB_ATTACH_OBJ_STRUCT
{
	L_OBJECT,
	Float: L_POS_X,
	Float: L_POS_Y,
	Float: L_POS_Z,
	Float: L_ROT_X,
	Float: L_ROT_Y,
	Float: L_ROT_Z
};*/

// ------------------------------------------
/*enum E_RADAR_STRUCT
{
	R_ID,
	R_CREATOR[21],
	R_LIMIT,
	Float: R_POS_X,
	Float: R_POS_Y,
	Float: R_POS_Z,
	Float: R_POS_RX,
	Float: R_POS_RY,
	Float: R_POS_RZ,
	Float: R_ZONE_X,
	Float: R_ZONE_Y,
	Float: R_ZONE_Z,
	R_OBJECT,
	R_ZONE,
	Text3D: R_LABEL
}
new g_radar[MAX_RADARS][E_RADAR_STRUCT]; // радары для ГИБДД
new player_radar_object[MAX_PLAYERS] = INVALID_OBJECT_ID; // ид объекта во время создания
new Float: player_radar_position[MAX_PLAYERS][9]; // позиция радара
new g_radars_created;*/

new Text3D: player_test_label[MAX_PLAYERS][4];

/*new g_radar_default_values[E_RADAR_STRUCT] =
{
	-1,
	"",
	0,
	0.0,
	0.0,
	0.0,
	0.0,
	0.0,
	0.0,
	0.0,
	0.0,
	0.0,
	INVALID_OBJECT_ID,
	-1,
	Text3D: -1,
};*/

new Float: vehicle_temp_position[MAX_PLAYERS][4]; // позиция автомобиля при въезде в тюнинг

// ------------------------------------------
enum E_ADVERT_STRUCT
{
	A_CREATOR,
	bool: A_EDIT,
	A_TEXT[128]
}

new g_advert[MAX_ADVERTS][E_ADVERT_STRUCT]; // объявления

new g_advert_created; // кол-во отправленных объявлений

// ------------------------------------------
enum // иды временных работ
{
	TEMP_JOB_NONE = -1,
	// ----------------
	TEMP_JOB_LOADER = 0, 		// грузчик
	TEMP_JOB_MINER, 			// шахтер
	TEMP_JOB_FACTORY_TRUCKER,	// завод (служба доставки)
	TEMP_JOB_FACTORY,			// завод
	TEMP_JOB_LUMBERJACK			// лесоруб
};

enum //
{
	TEMP_JOB_STATE_NONE,
	// --------
	TEMP_JOB_STATE_LOADER_LOAD, 	// брать груз
	TEMP_JOB_STATE_LOADER_UNLOAD, 	// класть груз
	TEMP_JOB_STATE_LOADER_DROP_LOAD,// уронил груз
	// --------
	TEMP_JOB_STATE_MINER_LOAD, 		// добывать руду
	TEMP_JOB_STATE_MINER_UNLOAD, 	// нести на склад
	TEMP_JOB_STATE_MINER_DROP_LOAD, // уронил руду
	// --------
	TEMP_JOB_STATE_FACTORY_TAKE_MET, // брать металл
	TEMP_JOB_STATE_FACTORY_CREATE_P, // делать продукт
	TEMP_JOB_STATE_FACTORY_CREATED,  // делает продукт
	TEMP_JOB_STATE_FACTORY_PUT_PROD, // нести продукт на склад
	TEMP_JOB_STATE_FACTORY_DROP_P,	 // уронил продукт
	// --------
	TEMP_JOB_STATE_LUMBERJACK_CHOP,	 // рубить дрова
	TEMP_JOB_STATE_LUMBERJACK_PUT,	 // нести на склад
	TEMP_JOB_STATE_LUMBERJACK_DROP,	 // уронил дрова
};

// ------------------------------------------
// attached object (TODO)
enum
{
	A_OBJECT_SLOT_SPINE = 0, 		// Торс
	A_OBJECT_SLOT_HEAD, 			// Голова
	A_OBJECT_SLOT_ARM, 				// Плечи
	A_OBJECT_SLOT_HAND, 			// Руки
	A_OBJECT_SLOT_THIGH, 			// Бедра
	A_OBJECT_SLOT_FOOT, 			// Ноги
	A_OBJECT_SLOT_CALF, 			// Голень
	A_OBJECT_SLOT_FOREARM, 			// Предплечье
	A_OBJECT_SLOT_CLAVICLE,			// Ключица
	A_OBJECT_SLOT_NECK, 			// Шея
	A_OBJECT_SLOT_JAW				// Челюсть
};

enum
{
	A_OBJECT_BONE_SPINE = 1, 		// Торс
	A_OBJECT_BONE_HEAD, 			// Голова
	A_OBJECT_BONE_LEFT_ARM, 		// Левое плечо
	A_OBJECT_BONE_RIGHT_ARM, 		// Правое плечо
	A_OBJECT_BONE_LEFT_HAND, 		// Левая рука
	A_OBJECT_BONE_RIGHT_HAND, 		// Правая рука
	A_OBJECT_BONE_LEFT_THIGH, 		// Левое бедро
 	A_OBJECT_BONE_RIGHT_THIGH,		// Правое бедро
	A_OBJECT_BONE_LEFT_FOOT, 		// Левая нога
	A_OBJECT_BONE_RIGHT_FOOT, 		// Правая нога
	A_OBJECT_BONE_RIGHT_CALF, 		// Правая голень
	A_OBJECT_BONE_LEFT_CALF, 		// Левая голень
	A_OBJECT_BONE_LEFT_FOREARM, 	// Левое предплечье
	A_OBJECT_BONE_RIGHT_FOREARM,	// Правое предплечье
	A_OBJECT_BONE_LEFT_CLAVICLE,	// Левая ключица (плечо)
	A_OBJECT_BONE_RIGHT_CLAVICLE,	// Правая ключица (плечо)
	A_OBJECT_BONE_NECK, 			// Шея
	A_OBJECT_BONE_JAW				// Челюсть
};

// ------------------------------------------
enum // шаги регистрации
{
	REGISTER_STATE_PASSWORD = 1, // ввод пароля
	//REGISTER_STATE_EMAIL, 		// ввод емайла
	REGISTER_STATE_REFER, 		// ввод ника пригласившего игрока
	REGISTER_STATE_SEX, 		// выбор пола
	REGISTER_STATE_RULES, 		// правила сервера
	REGISTER_STATE_CREATE_ACC 	// создание аккаунта
};

enum // шаги авторизации
{
	LOGIN_STATE_CHECK_BAN = 0,	// проверка бана
	LOGIN_STATE_PASSWORD, 		// ввод пароля
	LOGIN_STATE_PHONE,			// ввод 5 послед. цифр телефона
	LOGIN_STATE_PIN_CODE,		// ввод пин кода
	//LOGIN_STATE_GOOGLE_CODE,	// ввод кода от гугла
	LOGIN_STATE_LOAD_ACC	 	// Загрузка аккаунта
};
// ------------------------------------------
new mysql; // ид соединения


#include "../include/anticheat.inc"
// ------------------------------------------
new Text: gps_on_TD[1]; 			// gps
new Text: stop_anim_TD[1];			// anim list
//new Text: speedometr_TD[9]; // спидометр
new Text: select_TD[6];		// панель выбора
new Text: capture_TD[2];	// статистика для капта

new Text: green_zone_TD[1]; // боксы зеленой зоны
//new PlayerText: green_zone_PTD[MAX_PLAYERS]; // текст зеленой зоны

new PlayerText:speedometr_PTD[MAX_PLAYERS][10];
new Text: speedometr_TD[1];
new PlayerText: price_select_TD[MAX_PLAYERS][1]; 	// цена в панели выбора

// ------------------------------------------
new PlayerText:pin_code_PTD[MAX_PLAYERS][10];
new pin_code_value[MAX_PLAYERS][10];
new pin_code_state[MAX_PLAYERS] = {PIN_CODE_STATE_NONE, ...};
new pin_code_input[MAX_PLAYERS][5];

// ------------------------------------------
new Text: radio_edit_TD;	// количество объявлений для редактирования

// ------------------------------------------
//new Menu: reg_select_skin_menu;

// ------------------------------------------

new Menu: admin_spec_menu;

// ------------------------------------------
new g_player[MAX_PLAYERS][E_PLAYER_STRUCT];
new
	g_player_default_values[E_PLAYER_STRUCT] =
{
	0,		// ид аккаунта
	0,		// рефер
	0,		// пол игрока
	"",		// соль
	"",		// пароль игрока
	"None",	// емайл игрока
	false, 	// подтвержден ли емайл
	0,		// скин игрока
	0,		// деньги игрока
	0,		// деньги в банке
	ADMIN_TYPE_NONE, // уровень админки
	false,	// лицензия на управление авто
	false,	// лицензия на оружие
	0,		// время регистрации
	"255.255.255.255",	// ип при регистрации
	"255.255.255.255",	// ип при последнем входе
	1,		// уровень игрока
	0,		// очки опыта игрока
	0,		// уровень розыска
	0,		// номер телефона
	0,		// на счету телефона
	0,		// цвет телефона
	0,		// законопослушность
	0, 		// улучшения
	0,		// наркотики
	0,		// патроны
	0,		// металл
	0,		// жена
	0,		// организация
	0,		// скин организации
	0,		// подразделение
	0,		// зарплата
	0,		// работа / должность(ранг)
	HOUSE_TYPE_NONE, // тип жилья (дом/отель/в гостях)
	-1,		// комната в доме
	-1,		// дом
	-1,		// бизнес
	-1,	 	// заправка
	"None", // реальный телефон игрока
	"None", // пин код
	REQUEST_TYPE_OFF, // запрос телефона при авторизации
	REQUEST_TYPE_OFF, // запрос пин кода при авторизации
	// -------------------------
	0,					// время последнего входа\выхода
	// -------------------------
	0,					// время игры за час
	0,					// время игры за день
	0,					// время игры за вчерашний день
	// -------------------------
	0xFFFFFF11,			// цвет игрока
	-1,					// выбраный скин
	0,					// тип чата
	0,					// время афк
	INVALID_VEHICLE_ID, // ид последнего авто в котором сидел
	INVALID_DIALOG_ID,	// ид последнего диалога
	USE_ANIM_TYPE_NONE,	// тип анимки который использует
	ENTER_PASSWORD_ATTEMPS,// кол-во попыток на авторизацию
	INVALID_PLAYER_ID,	// нацелен на игрока
	100.0,				// хп игрока
	// -------------------------
	TEMP_JOB_NONE,		// временная работа
	TEMP_JOB_STATE_NONE,// действие что надо делать
	false,				// проверка анимки
	// ---------------------------------
	"",					// название службы
	0,					// тариф
	0,					// Зарплата
	0,					// загружено/перенесено (груза/руды)
	INVALID_VEHICLE_ID,	// рабочий транспорт
	-1,					// таймер окончания работы
	-1,					// Какой стол использует на заводе
	0, 					// маршрут автобуса
	0,					// шаг маршрута
	0,					// заправлено на N
	0,					// отремонтировано на N руб
	false,				// на работе ли
	// -------------------------
	false,				// статус авторизации
	false,				// использует ли анимку (/anim)
	false,				// заблокировать вызов OnPlayerLeaveDynamicArea
	false,				// прогружены ли анимки при спавне
	false,				// прогружен ли анимлист
	false,				// есть ли у игрока закуска
	Text3D: -1,			// бейджик советника
	Text3D: -1,			// Admin Prefix
	false,				// отключение чата организации
	// -------------------------
	-1, 				// время на авторизаци
	-1, 				// в какой бизнес вошел
	-1, 				// в какой дом вошел
	-1,					// в каком подъезде
	-1,					// на каком этаже в подъезде
	-1,					// ид пикапа на которым стоял последний раз
	-1,					// в каком номере в отеле
	0,					// на каком этаже в отеле
	0,					// аптечка
	0,					// маска
	0,					// лотерейный билет
	0,					// кол-во использование напитка
	REALTOR_TYPE_NONE,	// риелторка
	SELECT_PANEL_TYPE_NONE, // использует ли панель выбора
	INVALID_VEHICLE_ID,	// ид личного ТС
	INVALID_VEHICLE_ID,	// ид авто используемого багажника
	// -------------------------
	"255.255.255.255", 	// ип игрока
	"", 				// имя игрока
	"—", 				// имя жены/мужа
	// -------------------------
	ACCOUNT_STATE_NONE, // статус аккаунта (авторизаци/регистрация)
	0, 					// шаг (регистрации/авторизации)
	// -------------------------
	0,             		// варны
	0,        			// время варнов
	0,             		// время мута
	// -------------------------
	0, 					// сила
	0,     				// скилл кольт
	0,   				// скилл пистолет с глушителем
	0,     				// скилл дигл
	0,    				// скилл дробовик
	0,        			// скилл мп5
	0,	    			// скилл ак47
	0,         			// скилл м4
	0,					// скилл снайперская винтовка
	0,    				// скилл обрез
	0,  				// скилл тактический дробовик
 	0,  				// скилл микро-узи
 	// -------------------------
 	0,                   // место спавна
	// -------------------------
//	0,					// текщий баланс донат-рублей
	0,					// текущий баланс донат-очков
	0,					// всего пополнений донат-очков
	// -------------------------
	false,				// лежит ли в больнице
	-1,					// номер койки
	// -------------------------
	false,				// перезаряжает ли оружие
	0,					// количество перезарядок
	false,				// есть ли наручники
	// -------------------------
	INVALID_VEHICLE_ID,	// покупает ли авто
	INVALID_VEHICLE_ID,	// арендованное авто
	INVALID_VEHICLE_ID,	// доверенное авто
	1,					// количество слотов для авто
	// -------------------------
	0,					// время заключения
	// -------------------------
	0,					// уровень премиум аккаунта
	0,                  // Date premium
	1,                  // preimum chat
	//
	-1,					// выполняет ли заказ
	// -------------------------
	0,					// время действия премиум аккаунта
	// -------------------------
	0,
	0,              // мероприятие
	"[A]", 				// prefix админ
};

new mysql_race[MAX_PLAYERS];
new g_speed_line_update[MAX_PLAYERS] = {-1, ...};

new Float: g_taxi_mileage[MAX_PLAYERS] = {0.0, ...};

// ------------------------------------------
new g_ownable_car[MAX_OWNABLE_CARS][E_OWNABLE_CAR_STRUCT];
new g_ownable_car_loaded;

// ------------------------------------------
new g_vehicle_trunk[MAX_VEHICLES][MAX_VEHICLE_TRUNK_SLOTS][E_VEHICLE_TRUNK_STRUCT];

// ------------------------------------------
new g_hotel[MAX_HOTELS][MAX_HOTEL_ROOMS][E_HOTEL_STRUCT];
new g_hotel_rooms_loaded[MAX_HOTELS];
new g_hotel_loaded;

new g_hotel_lift_CP[2];

new const
	Float: g_hotel_room_exit_pos[3][3] =
{
	{1275.9808, -772.4982, 1202.7220},
	{1275.9808, -764.2992, 1202.7220},
	{1275.9808, -756.2681, 1202.7220}
};

new const // позиции авто (парковка отеля / подогнать тс к отелю)
	g_hotel_car_park_pos[1][33][E_HOTEL_CAR_PARK_STRUCT] =
{
	{
		{-133.1494,	983.9849,	12.1618,	180.4495,	INVALID_VEHICLE_ID},
		{-137.5265,	983.8444,	12.1608,	179.9925,	INVALID_VEHICLE_ID},
		{-139.5423,	975.4324,	12.1614,	269.4506,	INVALID_VEHICLE_ID},
		{-139.2751,	971.6942,	12.1608,	267.8990,	INVALID_VEHICLE_ID},
		{-139.3615,	967.6329,	12.1618,	268.9070,	INVALID_VEHICLE_ID},
		{-139.2914,	963.4075,	12.1611,	270.4609,	INVALID_VEHICLE_ID},
		{-139.2221,	958.7978,	12.1608,	269.5585,	INVALID_VEHICLE_ID},
		{-116.4657,	971.6745,	12.1570,	89.46280,	INVALID_VEHICLE_ID},
		{-116.5386,	967.9235,	12.1557,	90.18910,	INVALID_VEHICLE_ID},
		{-116.5738,	963.9881,	12.1531,	90.00600,	INVALID_VEHICLE_ID},
		{-116.5876,	960.3621,	12.1551,	92.67610,	INVALID_VEHICLE_ID},
		{-116.2813,	950.5233,	12.1536,	90.45550,	INVALID_VEHICLE_ID},
		{-102.8195,	971.5937,	12.1614,	270.0878,	INVALID_VEHICLE_ID},
		{-102.6861,	968.0194,	12.1620,	269.5782,	INVALID_VEHICLE_ID},
		{-102.7776,	964.1411,	12.1621,	270.2165,	INVALID_VEHICLE_ID},
		{-102.9098,	960.6828,	12.1615,	270.6911,	INVALID_VEHICLE_ID},
		{-102.8726,	950.8474,	12.1610,	270.0904,	INVALID_VEHICLE_ID},
		{-116.2799,	950.5248,	12.1551,	90.53890,	INVALID_VEHICLE_ID},
		{-102.5865,	946.5525,	12.1611,	268.3489,	INVALID_VEHICLE_ID},
		{-94.7682,	983.9437,	12.1606,	178.0583,	INVALID_VEHICLE_ID},
		{-89.6837,	983.7529,	12.1627,	180.2712,	INVALID_VEHICLE_ID},
		{-88.7005,	975.4258,	12.1573,	91.58140,	INVALID_VEHICLE_ID},
		{-88.7543,	971.4301,	12.1574,	90.29010,	INVALID_VEHICLE_ID},
		{-88.7361,	968.0562,	12.1570,	90.12850,	INVALID_VEHICLE_ID},
		{-88.7494,	964.4591,	12.1579,	91.67410,	INVALID_VEHICLE_ID},
		{-88.6165,	960.7374,	12.1577,	90.89440,	INVALID_VEHICLE_ID},
		{-88.6389,	957.0118,	12.1556,	91.18100,	INVALID_VEHICLE_ID},
		{-88.5814,	953.0699,	12.1540,	90.86370,	INVALID_VEHICLE_ID},
		{-88.6637,	949.1523,	12.1536,	91.07860,	INVALID_VEHICLE_ID},
		{-88.6821,	945.1238,	12.1542,	91.11890,	INVALID_VEHICLE_ID},
		{-88.8479,	941.1545,	12.1542,	90.08610,	INVALID_VEHICLE_ID},
		{-88.8513,	937.4927,	12.1536,	90.22390,	INVALID_VEHICLE_ID},
		{-88.8047,	933.3365,	12.1541,	90.21220,	INVALID_VEHICLE_ID}
	}
};

// ------------------------------------------
new g_entrance[MAX_ENTRANCES][E_ENTRANCE_STRUCT];
new g_entrance_loaded;

new g_entrance_flat[MAX_ENTRANCES][MAX_ENTRANCE_FLOORS][4];
new g_entrance_flats_loaded[MAX_ENTRANCES];

new const
	Float: g_entrance_flat_pos[4][6] =
{
	/*
AddPlayerClass(272,,85.4707,0,0,0,0,0,0); // kv one
AddPlayerClass(272,,3.6899,0,0,0,0,0,0); // kv two
AddPlayerClass(272,,358.3632,0,0,0,0,0,0); // kv three
AddPlayerClass(272,,280.3425,0,0,0,0,0,0); // four

*/
	{ // 1 квартира
		553.0098,25.2907,1049.2656, // x | y | z
		558.6488, 25.2916, 180.0 // x | y | angle
	},
	{ // 2 квартира
		554.5970,26.6261,1049.2656,
		558.6488, 25.2916, 180.0
	},
	{ // 3 квартира
		565.1951,26.6265,1049.2656,
		558.6488, 25.2916, 180.0
	},
	{ // 4 квартира
		567.2014,25.2727,1049.2656,
		558.6488, 25.2916, 180.0
	}
};

// ------------------------------------------
new g_house[MAX_HOUSES][E_HOUSE_STRUCT];
new g_house_loaded;

new g_house_renters[MAX_HOUSES][MAX_HOUSE_ROOMS][E_HOUSE_ROOM_STRUCT];
new g_house_renters_count[MAX_HOUSES];



new g_house_type[7][E_HOUSE_TYPE_STRUCT] =
{
	{
		"Деревенский", 						// название / тип
		2491.4910,1003.5193,1499.5813, 268.0, 	// после входа
		2497.2397,996.9626,1499.5886, 			// аптечка
		236.5589, -138.6849, 998.5800,			// шкаф
		1,										// интерьер
		1										// комнат
	},
	{
		"Эконом", 						// название / тип
		2903.2188,1498.0972,2001.0000, 268.0, 	// после входа
		2904.4951,1508.7185,2001.0000, 			// аптечка
		236.5589, -138.6849, 998.5800,			// шкаф
		1,										// интерьер
		2										// комнат
	},
	{
		"Средний №1", 						// название / тип
		667.4174,29.3543,1024.1985, 268.0, 	// после входа
		658.1136,31.6934,1024.1875, 			// аптечка
		236.5589, -138.6849, 998.5800,			// шкаф
		1,										// интерьер
		3										// комнат
	},
	{
		"Средний №2", 						// название / тип
		994.7635,2021.9585,1561.0112, 268.0, 	// после входа
		991.6368,2010.1846,1561.0034, 			// аптечка
		236.5589, -138.6849, 998.5800,			// шкаф
		1,										// интерьер
		4										// комнат
	},
	{
		"Высокий",						// название / тип
		-2.3367,483.5531,1381.0022, 270.0,	// после входа
		7.3987,503.3117,1381.0022, 			// аптечка
		647.6192, -9.4187, 1001.4048,			// шкаф
		1,										// интерьер
		5										// комнат
	},
	{
		"Наивысший",						// название / тип
		10.3718,2494.1458,1540.9941, 0.0,	// после входа
		13.1270,2508.1614,1541.0020, 			// аптечка
		572.0909, 3.8222, 1001.4543,			// шкаф
		1,										// интерьер
		6										// комнат
	},
	{
		"Элитный",						// название / тип
		-0.0597,1493.6105,1380.9976, 0.0,	// после входа
		19.6689,1516.1731,1380.9976, 			// аптечка
		572.0909, 3.8222, 1001.4543,			// шкаф
		1,										// интерьер
		7										// комнат
	}
};

new const
	g_house_improvements[6][E_IMPROVEMENTS_STRUCT] =
{
	{"Автоматические двери", 	8_000, 	0},
	{"Домашняя аптечка", 		14_500, 0},
	{"Совместное проживание",	20_000, 0},
	{"Оформление субсидии",		55_000, 0},
	{"Шкаф для вещей",			60_000, 0},
	{"Гаражное помещение",		160_000, 0}
	/*,
	{"Сейф для вещей",			75_000, 0},
	{"Сигнализация",			90_000, 0}
	*/
};

// ------------------------------------------
new g_business[MAX_BUSINESS][E_BUSINESS_STRUCT];
new g_business_loaded;

new const
	g_business_improvements[6][E_IMPROVEMENTS_STRUCT] =
{
	{"Дополнительные продукты", 			15_000,		0},
	{"Медицинское обслуживание", 			30_000,		0},
	{"Пониженное налогообложение",			80_000,		0},
	{"Звуковые эффекты при входе",			150_000,	0},
	{"Дополн. склад для продуктов",			300_000,	0},
	{"Рекламная кампания",					450_000,	0}
};

enum // иды интерьеров
{
	BUSINESS_INTERIOR_SHOP_24_7 = 0,	// магазин 24/7
	BUSINESS_INTERIOR_CLUB = 1,			// клуб
	BUSINESS_INTERIOR_REALTOR_BIZ = 2,	// управление статистики (бизнесы)
	BUSINESS_INTERIOR_REALTOR_HOME = 3,	// риелторское агенство (дома)
	BUSINESS_INTERIOR_CLOTHING_SHOP = 4,// магазин одежды
	BUSINESS_INTERIOR_HOTEL = 5,		// отель
	BUSINESS_INTERIOR_CAR_MARKET = 6,	// авторынок
	BUSINESS_INTERIOR_CASINO = 7,		// казино
	BUSINESS_INTERIOR_CELL_SALON = 8,	// сотовый салон
	BUSINESS_INTERIOR_CAR_TUNING = 9,	// тюнинг транспорта
	BUSINESS_INTERIOR_SHOP_GUN = 10,	// магазин оружия
};
new const
	g_business_interiors[11][E_BUSINESS_INTERIOR_STRUCT] =
{
	{ // магазин 27/7
		"Магазин 27/7",
		1540.5625,426.9298,1001.0156, 		// позиции пикапа (выход)
		1542.8002,427.5040,1001.0156, 360.0,// позиции входа
		1, 									// интерьер
		1541.4470,430.3529,1001.0156, 		// позиции аптечки
		1543.0145,424.1506,1001.0156, 		// позиции покупки
		0.0, 0.0, 0.0,						// позиции 3д текста
		-1									// чекпоинт\пикап
	},
	{ // 
		"Клуб (Алхамбра)",
		493.3602, -24.8439, 1000.6797, 		// позиции пикапа (выход)
		493.3910, -22.7228, 1000.6797, 0.0, // позиции входа
		17, 								// интерьер
		503.6340, -11.6332, 1000.6797, 		// позиции аптечки
		499.970, -20.697, 1000.680, 		// позиции покупки НЕТУ ИНТЫ
		498.365, -24.535, 1002.696, 		// позиции 3д текста
		-1									// чекпоинт\пикап
	},
	{ // 
		"Управление статистики",
		-364.2391, 2740.8413, 2502.1704,	// позиции пикапа (выход)
		-365.4391, 2740.8413, 2502.1704, 90.0,	// позиции входа
		0,									// интерьер
		-366.2918, 2736.5081, 2502.1704,	// позиции аптечки	НЕТУ ИНТЫ
		-371.4008, 2739.6472, 2502.1704,	// позиции покупки
		-370.0462, 2738.7839, 2503.8501,	// позиции 3д текста
		-1									// чекпоинт\пикап
	},
	{ // 
		"Риелторское агенство",
		162.4737, 742.7685, 25.8272,		// позиции пикапа (выход)
		163.3701, 745.0021, 25.8272, 339.92,// позиции входа
		0,									// интерьер
		161.4340, 748.0493, 25.8272,		// позиции аптечки	НЕТУ ИНТЫ
		160.5056, 744.9833, 25.8272,		// позиции покупки
		154.5396, 748.7235, 26.9926,		// позиции 3д текста
		-1
	},
	{ // магазин одежды
		"Магазин одежды",
		0.0, 0.0, 0.0,		// позиции пикапа (выход)
		0.0, 0.0, 0.0, 0.0, // позиции входа
		1,									// интерьер НЕТУ ИНТЫ
		0.0, 0.0, 0.0,		// позиции аптечки
		0.0, 0.0, 0.0,		// позиции покупки
		0.0, 0.0, 0.0,						// позиции 3д текста
		-1
	},
	{ // отель
		"Отель",
		725.0262, 592.7350, 1002.9598,		// позиции пикапа (выход)
		725.0227, 594.9494,1002.9598, 360.0,// позиции входа
		1,									// интерьер
		718.5051, 593.9505, 1002.9598,		// позиции аптечки НЕТУ ИНТЫ
		724.8739, 602.2747, 1002.9598,		// позиции покупки
		0.0, 0.0, 0.0,						// позиции 3д текста
		-1
	},
	{ // авторынок
		"Авторынок",
		0.0, 0.0, 0.0,		// позиции пикапа (выход)
		0.0, 0.0, 0.0, 0.0, // позиции входа
		1,									// интерьер НЕТУ ИНТЫ
		0.0, 0.0, 0.0,		// позиции аптечки
		0.0, 0.0, 0.0,		// позиции покупки
		0.0, 0.0, 0.0,						// позиции 3д текста
		-1
	},
	{ // казино
		"Казино",
		2498.7358,2511.5403,2501.0313,		// позиции пикапа (выход)
		2498.9124,2509.1658,2501.0313, 270.0, // позиции входа
		1,									// интерьер
		2505.2590,2505.6582,2501.0325,		// позиции аптечки
		2490.3923,2497.1082,2501.0313,		// позиции покупки
		164.3450, -235.3091, 1003.5235, 	// позиции 3д текста
		-1
	},
	{ // сотовый салон
		"Сотовый салон",
		1540.5625,426.9298,1001.0156, 		// позиции пикапа (выход)
		1542.8002,427.5040,1001.0156, 360.0,// позиции входа
		1, 									// интерьер
		1541.4470,430.3529,1001.0156, 		// позиции аптечки
		1543.0145,424.1506,1001.0156, 		// позиции покупки
		0.0, 0.0, 0.0,						// позиции 3д текста
		-1
	},
	{ // тюнинг салон
		"Тюнинг салон",
		2497.3086,1514.3608,1498.1797, 	// позиции пикапа (выход)
		2497.4919,1512.3165,1498.1797, 180.9736, // позиции входа
		1, 									// интерьер НЕТУ ИНТЫ
		2485.3884,1484.8821,1498.1797, 	// позиции аптечки
		2480.1868,1488.0485,1498.1797, 	// позиции покупки
		2480.1868,1488.0485,1498.1797,		// позиции 3д текста
		-1
		//
	},
    { // магазин оружия
		"Магазин оружия",
		2894.7336,2900.0076,1501.0000, 		// позиции пикапа (выход)
		2896.4705,2900.3047,1501.0000, 360.0,// позиции входа
		1, 									// интерьер
		2896.0269,2902.1741,1501.0000, 		// позиции аптечки
		2904.6665,2900.7778,1501.0000, 		// позиции покупки
		2904.6665,2900.7778,1501.0000,						// позиции 3д текста
		-1									// чекпоинт\пикап

/*
AddPlayerClass(2,,7.4087,0,0,0,0,0,0); // pick exit
AddPlayerClass(2,,0,0,0,0,0,0); // enter pos

*/	}
};
// Управление статистики
new Text3D: g_business_realtor_label;

new g_business_realtor_list[2048];
new g_business_realtor_list_idx[MAX_BUSINESS];
// --------------------

// Риелторское агенство
new Text3D: g_house_realtor_label;
new g_house_realtor_list[2048];
// --------------------

// магазин одежды
new const
    g_business_clothing_skins[2][27][2] =
{
    {// М,Скины
        {2, 3000},
        {4, 5000},
        {5, 5000},
        {6, 5000},
        {29, 12000},
        {30, 12000},
        {45, 30000},
        {46, 200000},
        {48, 12000},
        {83, 80000},
        {82, 80000},
        {84, 80000},
        {98, 45000},
        {100, 50000},
        {142, 50000},
        {155, 5000},
        {167, 150000},
        {185, 120000},
        {221, 120000},
        {223, 80000},
        {249, 200000},
        {293, 150000},
        {292, 120000},
        {294, 200000},
        {296, 180000},
        {297, 150000},
        {299, 200000}
    },
    {// Ж,Скины
        {11, 15000},
        {12, 10000},
        {13, 10000},
        {40, 20000},
        {41, 12000},
        {55, 15000},
        {56, 12000},
        {69, 5000},
        {90, 7000},
        {141, 35000},
        {190, 20000},
        {193, 20000},
        {214, 100000},
        {216, 25000},
        {219, 50000},
        {225, 25000},
        {298, 200000},
        {69, 5000},
        {90, 7000},
        {141, 35000},
        {190, 20000},
        {193, 20000},
        {214, 100000},
        {216, 25000},
        {219, 50000},
        {225, 25000},
        {298, 200000}
    }
};

new const
	g_business_sound[5] =
{
	17001,
	4203,
	21000,
	1135,
	1137
};

new bool:times[MAX_PLAYERS];


new g_business_gps[MAX_BUSINESS_GPS][E_BUSINESS_GPS_STRUCT];
new g_business_gps_count;
new bool: g_business_gps_init;

// ------------------------------------------
new g_fuel_station[MAX_FUEL_STATIONS][E_FUEL_STATION_STRUCT];
new g_fuel_station_loaded;

new const
	g_fuel_station_improvements[4][E_IMPROVEMENTS_STRUCT] =
{
	{"Емкость хранилища топлива I", 	9_500, 	0},
	{"Емкость хранилища топлива II", 	24_000, 0},
	{"Емкость хранилища топлива III",	58_000, 0},
	{"Отмена акцизного сбора", 			74_000, 0}
};

// ------------------------------------------
new g_order[MAX_FUEL_STATIONS + MAX_BUSINESS][E_ORDER_STRUCT]; // заказы

new
	Float: g_med_bed_pos[][] = // позиции коек
{
	{2054.7827,1415.1486,998.8735},
	{2057.6018,1415.3561,998.6864},
	{2064.0007,1416.3695,998.6864},
	{2064.1113,1413.4031,998.6864},
	{2064.1433,1408.6310,998.6864},//
	{2061.1567,1408.4572,998.6864},
	{2058.0557,1408.4982,998.6864},
	{2054.8379,1408.4888,998.6864},
	{2023.6478,1415.1558,998.6864},
	{2026.4645,1415.2745,998.6864},//
	{2032.4585,1415.2720,998.6864},
	{2035.3722,1415.3529,998.6864},
	{2038.5314,1415.4032,998.6864},
	{2041.4312,1415.4172,998.6864},
	{2041.4797,1408.5746,998.6864},//
	{2038.5277,1408.4901,998.6864},
	{2035.5959,1408.4237,998.6864},
	{2032.6282,1408.4419,998.6864},
	{2029.6198,1408.4548,998.6864},
	{2026.6152,1408.4497,998.6864},//
	{2023.7863,1408.4072,998.6864},
	{2021.8552,1415.2566,998.6864},
	{2018.6506,1415.1599,998.6864},
	{2011.2804,1415.1678,998.6864},
	{2008.3539,1415.2153,998.6864},//
	{2008.6503,1408.5542,998.6864},
	{2011.8329,1408.5302,998.6864},
	{2014.7455,1408.6299,998.6864},
	{2017.7767,1408.7332,998.6864},
	{2020.7014,1408.7979,998.6864},//
	{2024.5049,1431.8531,998.6864},
	{2027.6940,1432.0294,998.6864},
	{2030.9901,1431.8896,998.6864},
	{2034.0316,1431.9585,998.6864},
	{2036.8600,1431.9725,998.6864},//
	{2040.1072,1431.9537,998.6864},
	{2042.9485,1431.9716,998.6864},
	{2046.0444,1431.9978,998.6864},
	{2046.5886,1424.8135,998.6864},
	{2043.4453,1424.7853,998.6864},//
	{2040.2178,1424.7631,998.6864},
	{2037.2761,1424.8629,998.6864},
	{2034.1207,1424.9250,998.6864},
	{2027.3944,1424.9261,998.6864},
	{2024.5508,1424.8071,998.6864},
	{2026.5610,1415.3983,998.7046},
	{2023.6172,1415.2797,998.8893},
	{2023.6761,1408.3976,998.8710},
	{2026.7393,1408.6593,998.8710},
	{2029.5962,1408.5573,998.8710},
	{2032.4895,1408.4834,998.8710},
	{2035.6399,1408.5160,998.8710},
	{2038.4742,1408.5648,998.8710}
};
new g_med_bed_used[sizeof g_med_bed_pos] = {false, ...}; // занята ли койка
new Text3D: g_med_bed_label[sizeof g_med_bed_pos]; // текст койки

// ------------------------------------------
new
	Float: g_casino_table_pos[][] = // позиции столиков в казино
{
	{2500.7969,2448.9399,2499.6641},
	{2500.8159,2443.7556,2499.6641},
	{2500.7998,2438.1450,2499.6641},
	{2496.7371,2438.3884,2499.6641},
	{2496.6824,2443.4790,2499.6641},
	{2496.7109,2448.8103,2499.6641}
};
new g_casino_area[sizeof g_casino_table_pos]; // зона для использования /dice

// ------------------------------------------
enum
{
	ARMORY_TYPE_ARMOR = 0,
	ARMORY_TYPE_POLICE,
	ARMORY_TYPE_SECURITY
}

enum E_ARMORY_STRUCT
{
	A_DESCRIPTION[21],
	A_TYPE,
	Float: A_POS_X,
	Float: A_POS_Y,
	Float: A_POS_Z
}

new g_armory[5][E_ARMORY_STRUCT] =
{
	{"Воинская часть", ARMORY_TYPE_ARMOR, 1227.9379, -382.9861, 4.0076},
	{"Охрана правительства", ARMORY_TYPE_SECURITY, 1564.6099, -764.9561, 1114.7100},
	{"ГИБДД", ARMORY_TYPE_POLICE, 875.7951, 2096.1982, 2721.8101},
	{"УМВД", ARMORY_TYPE_POLICE, 1926.6577, 2196.3027, 2069.4800},
	{"ФСБ", ARMORY_TYPE_POLICE, 204.1425, -447.3391, 1006.4179}
};

// ------------------------------------------
#if defined RAND_WEATHER
new const
	g_weather[3][E_WEATHER_STRUCT] =
{
	{"ясная погода", 18, 	22},
	{"ясная погода", 3, 	21},
	{"ясная погода", 1, 	23}
};
#endif

// ------------------------------------------
new g_player_setting[MAX_PLAYERS][E_PLAYER_SETTINGS_STRUCT];
new
	g_settings_default_values[E_PLAYER_SETTINGS_STRUCT] =
{
	SETTING_CHAT_ADVANCE,
	SETTING_TYPE_ON,
	SETTING_TYPE_ON,
	SETTING_TYPE_ON,
	SETTING_TYPE_OFF,
	SETTING_TYPE_ON
};

// ------------------------------------------
new g_player_gps[MAX_PLAYERS][E_PLAYER_GPS_STRUCT];
new
	g_gps_default_values[E_PLAYER_GPS_STRUCT] =
{
	GPS_STATUS_OFF,
	0.0,
	0.0,
	0.0
};

// ------------------------------------------
new const
	gps_public_places[6][E_GPS_STURCT] = // общественные места
{
	{1912.0990, 2227.6367, 16.0831, 36}, // gps Автошкола
	{1916.5503,2302.2786,15.1412, 	46}, // gps Военкомат
	{1757.3501, 2242.5107, 15.8600, 55}, // авторынок "батырево"
	{1410.7759,460.1069,13.1630, 55}, // авторынок "анашан"
	{2490.1707,-735.2915,12.1878,55}, // авторынок премиум класса
	{-2243.6758, 263.2350, 24.5337, 55} // Мото-Вело рынок
};

new const
	gps_mp[2][E_GPS_STURCT] = // развлечения
{
	{-34.8391,615.1650,12.1475, 42}, //дм зона
	{151.0777,776.6240,11.9847, 53} //гонке
};

new const
	gps_transport[5][E_GPS_STURCT] = // транспортные узлы
{
	{761.0068,667.9042,12.0074, 	42}, // gps Ж/Д Вокзал Арзамаса
	{1867.8488,2265.0942,15.2740, 	42}, // gps Автовокзал Арзамаса
	{-2491.2036,2839.9934,37.6357, 	42}, // gps Центральная автостанция
	{-251.8752,444.5735,12.8608, 	42}, // gps Автовокзал Батырево
	{-2395.7615,193.9361,21.1678, 	42} // gps Автовокзал Лыткарино
	 // gps Автовокзал Лыткарино
};

new const
	gps_state_organizations[7][E_GPS_STURCT] = // государственные организации
{
	{-113.2410,627.7893,11.8676, 	19}, // gps Правительство области
	{1895.6697,-2212.2500,10.9975, 	30}, // gps ГИБДД
	{2578.9482,-2416.1196,21.9922, 	30}, // gps УМВД
	{1818.4851,2095.7136,16.1642, 	30}, // gps ФСБ
	{-286.9034, 576.8859, 12.8447, 	22}, // gps Городская больница
	{-317.8738,816.2292,13.0515, 	42}, // gps ТРК "Ритм"
	{1731.4894,1768.2654,16.7501, 	18}  // gps Воинская часть
};

new const
	gps_gangs[3][E_GPS_STURCT] = // Базы банд и мафий
{
	{481.8158,742.3323,12.0006, 	62}, // Арзамасская ОПГ
	{1943.9056,2164.6016,15.2714, 	61}, // gps Батыревская ОПГ
	{-2343.5857,72.3564,21.0030, 	60}  // gps Лыткаринская ОПГ
};
new const
	gps_jobs[7][E_GPS_STURCT] = // по работе
{
	{617.3452,1665.7614,12.0710, 	11}, // gps Грузчик
	{2296.8718, 1757.0005, 1.0234, 	11}, // gps шахтер
	{2268.8354,506.1029,16.7323, 11}, // gps лесоруб
	{-1060.9310, 2208.5684, 38.0988, 51}, // gps завод
	//{2710.3369,-2383.5164,17.9063,	51}, // gps Нефтедобывающий завод
	{2738.3379,-2273.0725,17.9063, 	51}, // gps Нефтеперерабатывающий завод
	{2424.5317,1765.6780,-0.2507, 	51},
	//{-1060.9310, 2208.5684, 38.0988, 	51},
	//{583.8480,1732.2230,12.4207, 	40}, // gps Автопарк для развозчиков (дальнобойщиков) продуктов
	//{583.8480,1732.2230,12.4207, 	40}, // gps Автопарк для развозчиков (дальнобойщиков) топлива
	{1836.6302,-116.0337,15.5716, 	27}  // gps Стоянка автомехаников
};

new const
	gps_banks[2][E_GPS_STURCT] = // банки
{
	{1852.0315,2035.9677,16.9802, 	52}, // gps Центральный банк Арзамаса
	{1852.0315,2035.9677,16.9802, 	52}
};

// ------------------------------------------
new help_info[14][E_HELP_INFO_STRUCT] =
{
	{
		"О проекте",
		""SERVER_NAME" RolePlay - один из самых популярных проектов\n"\
		"многопользовательской GTA Criminal Russia Multiplayer. В настоящее\n"\
		"время у нас работают 9 серверов, а увлекательные особенности игрового\n"\
		"процесса привлекают все больше и больше новых игроков.\n\n"\
		"Мы постарались объединить лучшие элементы ролевой игры SA-MP с\n"\
		"новыми идеями и возможностями. Вы сможете выбрать любимую\n"\
		"работу, или даже открыть свой собственный бизнес, зарабатывая\n"\
		"неплохие деньги. Может Вам захочется вступить в одну из организаций\n"\
		"и начать карьерный рост. Или же можно просто приятно провести\n"\
		"время, приняв участие в гонках, или сыграв с друзьями в морской бой.\n\n"\
		"Мы уверены, что "SERVER_NAME" RolePlay поможет Вам приятно провести пару\n"\
		"свободных часов за онлайн-игрой!"
	},
	{
		"Безопасность",
		"Ваш аккаунт - это ваша собственность. Никому не давайте свой пароль,\n"\
		"иначе Вы рискуете утратить все свои достижения. Не скачивайте\n"\
		"дополнительные программы - моды, читы, трейнеры. Все они\n"\
		"создаются злоумышленниками только с одной целью - заполучить\n"\
		"доступ к Вашему аккаунту.\n\n"\
		"Игроки "SERVER_NAME" RolePlay могут использовать расширенные настройки\n"\
		"безопасности,  которые практически исключает возможность взлома.\n"\
		"Подробнее: команда {66CCFF}/menu > Настройки безопасности."
	},
	{
		"Основы игры",
		"Играя на сервере, Вы получаете очки опыта. При накоплении их\n"\
		"определенного количества происходит переход на следующий уровень.\n"\
		"С каждым новым уровнем открываются новые возможности и\n"\
		"становятся доступны более интересные функции.\n\n"\
		"Для просмотра статистики воспользуйтесь командой /menu. В игровом\n"\
		"процессе постоянно нужно будет пользоваться подобными командами.\n"\
		"Они вводятся в игровой чат (F6) через косую черту, например /anim\n"\
		"/help и т. п. Введите /menu, далее выберите пункт \"Список команд\". Там\n"\
		"расположен полный перечень команд, а также кнопка \"Описание команд\"\n"\
		"для пояснения каждой из них."
	},
	{
		"RolePlay",
		"RolePlay - это такой вид игры, в котором у каждого есть своя роль. Будь\n"\
		"то таксист, водитель автобуса или шахтер, полицейский или мафиози,\n"\
		"член банды или военный. Каждый игрок определяет, кем он хочет быть.\n\n"\
		"RolePlay (RP) режим подразумевает знание некоторых правил и\n"\
		"понятий, несоблюдение которых влечет за собой наказания. С этой\n"\
		"информацией можно ознакомиться на нашем форуме, там же можно\n"\
		"задать все интересующие Вас вопросы по игровому процессу."
	},
	{
		"Первые шаги",
		"Первым делом необходимо заработать деньги. В государстве есть\n"\
		"предприятия, куда Вы сможете устроиться на первое время. Это шахта,\n"\
		"завод и городской склад. Работая там, Вы не только получите прибыль,\n"\
		"но и поддержите экономическую цепочку государства. А еще Вы\n"\
		"найдете новых друзей и получите немало удовольствия.\n\n"\
		"Все эти места можно найти, используя команду /gps. Добраться до\n"\
		"нужного объекта Вам поможет автобусный  транспорт. Прямо с ЖД\n"\
		"вокзала ходит автобус до шахты, а  до склада может подбросить любой\n"\
		"городской маршрут. Чтобы узнать подробнее о автобусных схемах,\n"\
		"введите команду /bushelp.\n\n"\
		"После того, как Вы заработаете деньги, отправляйтесь в автошколу и\n"\
		"сдавайте экзамен на права. Они позволят купить или арендовать\n"\
		"автомобиль, устроиться на более высокооплачиваемую и интересную\n"\
		"работу. Сдача на права стоит 600 рублей, перед поездкой в автошколу\n"\
		"убедитесь, что имеете такую сумму."
	},
	{
		"Общение",
		"Во время игры вам постоянно придется взаимодействовать с людьми. Существует 2\n"\
		"вида чатов:\n\n"\
		"\t1. IC (In Character) - общение внутри игры и только для внутренних игровых\n"\
		"\tситуаций. Чат вызывается клавишей F6.\n"\
		"\t2. OOC (Out Of Character) - все, что касается реального, не игрового мира.\n"\
		"\tНажмите F6, далее введите команду /n и свое сообщение. Оно выделится в\n"\
		"\tдвойные скобки.\n\n"\
		"Помимо этого, существуют много других способов общения. Вы можете звонить по\n"\
		"телефону или отправлять SMS сообщения. Вступив в организацию, появится\n"\
		"возможность связываться с сотрудниками по рации, а также масса других\n"\
		"интересных функций.\n\n"\
		"Информацию о командах общения можете узнать в соответствующем разделе меню:\n"\
		"{66CCFF}/menu > Список команд"
	},
	{
		"Транспорт",
		"Транспортная система - одна из важнейших в стране. С ее помощью возможна\n"\
		"стабильная работа большинства предприятий и организаций.\n\n"\
		"Основной вид транспорта - это автобус. Маршруты проложены по всему\n"\
		"государству и связывают все населенные пункты и предприятия.\n"\
		"Такси - наиболее удобный вид транспорта. Вы сможете добраться до любого места,\n"\
		"однако такая поездка будет стоить значительно дороже, чем на автобусе.\n"\
		"Поезд - быстрый и недорогой вид транспорта. Вы за несколько минут сможете\n"\
		"добраться до любой станции, но составы курсируют не так часто.\n\n"\
		"Государственной транспортной компании всегда требуются новые работники. О\n"\
		"вакансиях и требованиях можно узнать в ближайшей мэрии (/gps)."
	},
	{
		"Государственная система",
		"Вся игровая жизнь проходит под контролем правительства -\n"\
		"основной организации в государстве. В ее состав входят мэрии трех\n"\
		"городов и администрация Президента. Раз в месяц проходят\n"\
		"выборы, где каждый имеет право голоса. А перед этим проводится не\n"\
		"менее интересная избирательная кампания, где кандидаты на пост\n"\
		"Президента устраивают дебаты, концерты и митинги, завоевывая\n"\
		"своих новых избирателей…\n\n"\
		"Государственную систему и ее значение не опишешь несколькими\n"\
		"предложениями. Политическая жизнь необычайно насыщенная, и Вы\n"\
		"сами убедитесь в этом с первых дней жизни у нас!"
	},
	{
		"Жилье",
		"По всему государству расположены жилые дома, которые можно купить.\n"\
		"Каждый дом имеет свою стоимость, которую определяют множество\n"\
		"факторов. Можно купить вагончик за небольшие деньги, или отдать\n"\
		"миллионы за роскошный особняк в элитном районе.\n\n"\
		"Если у Вас есть дом, то вы сможете приобрести машину, или купить\n"\
		"дополнительные улучшения, такие как шкаф для хранения вещей или\n"\
		"автоматические двери. И это только некоторые возможности жилья.\n\n"\
		"В зависимости от престижности дома, с Вас будет взиматься ежедневная\n"\
		"квартплата. Если долгое время на счету будет сохраняться отрицательный\n"\
		"баланс, есть вероятность, что работники мэрии выселят Вас."
	},
	{
		"Бизнес и АЗС",
		"Вы можете открыть собственный бизнес, и зарабатывать неплохие\n"\
		"деньги. Это может быть небольшая пекарня, магазин одежды или\n"\
		"развлекательный центр, столовая, парикмахерская, либо обычная\n"\
		"продуктовая лавка. Или вы захотите стать совладельцем крупной сети\n"\
		"супермаркетов, ресторанов или театров. В нашей стране существует\n"\
		"огромное количество разнообразных предприятий.\n\n"\
		"Имея бизнес, перед Вами откроются большие возможности для\n"\
		"привлечения новых клиентов, что будет постоянно повышать Ваши\n"\
		"доходы. Вы сможете регулировать цены, улучшать различные\n"\
		"характеристики своего предприятия, одновременно проводя борьбу с\n"\
		"конкурентами.\n\n"\
		"АЗС (автозаправочные станции) - особый тип бизнеса, доходы от\n"\
		"которого значительно выше, чем от обычных предприятий. Для\n"\
		"нормальной работы АЗС нужно постоянно заключать контракты со\n"\
		"службой доставки топлива. Бизнесмен может владеть обычным\n"\
		"предприятием и АЗС одновременно."
	},
	{
		"Банки, хранение средств",
		"Каждый игрок получает свой счет в банке. На него перечисляется\n"\
		"зарплата и прочие доходы. Этот счет называется основным, и доступен в\n"\
		"любом банкомате.\n\n"\
		"Помимо этого, Вы можете воспользоваться услугами профессиональных\n"\
		"банков, найти которые поможет GPS. Там можно открыть до 8\n"\
		"дополнительных счетов. Каждый из них имеет свой номер, который\n"\
		"выдается банком при создании счета. Зная его, любой игрок может\n"\
		"перечислить вам деньги, даже если вы оффлайн. Например, можно\n"\
		"создать счет с названием \"Благотворительность\", написать об открытии\n"\
		"благотворительной организации через СМИ, сообщить номер счета, и\n"\
		"любой сможет перечислить на него деньги в отделении банка или через\n"\
		"банкомат.\n\n"\
		"Дополнительные счета можно настраивать, устанавливать защиту\n"\
		"PIN-кодом, изменять названия а также просматривать подробную\n"\
		"историю операций."
	},
	{
		"Организации",
		"В нашей стране работает большое количество организаций. Они могут\n"\
		"быть как официальными (правительство, МВД, мин. Обороны, мин.\n"\
		"Здравоохранения, ТВ и радио), так и неофициальными (банды и мафии).\n\n"\
		"При достижении определенного уровня, Вы можете вступить в любую из\n"\
		"организаций. Руководство некоторых может выдвигать и дополнительные\n"\
		"требования для вступления. Например, если Вы хотите попасть в банду,\n"\
		"то Вам придется продемонстрировать свое умение владеть оружием. А\n"\
		"если Вы видите себя в роли редактора объявлений, то нужно красиво и\n"\
		"грамотно писать. О дополнительных требованиях сообщит руководство\n"\
		"организации во время набора сотрудников.\n\n"\
		"После вступления, Вам будет доступно продвижение по карьерной\n"\
		"лестнице, постепенно откроются новые возможности. С каждым повышением\n"\
		"будет увеличиваться Ваша зарплата и статус в обществе. Вы найдете\n"\
		"новых друзей, а со временем сможете занять одну из руководящих\n"\
		"должностей. Жизнь в организации необычайно интересная и разнообразная!"
	},
	{
		"Работы",
		"В мэрии вашего города работает отдел занятости, где Вы можете\n"\
		"устроиться на любую работу. Следует обратить внимание, что некоторые\n"\
		"работы доступны при достижении определенного уровня. Вы не можете\n"\
		"одновременно быть оформленным на работу в мэрии и состоять в\n"\
		"организации.\n\n"\
		"Помимо основных работ существуют и дополнительные. К ним относятся\n"\
		"работы на шахте, заводе и складе. Такие работы можно совмещать с\n"\
		"основными и зарабатывать больше денег. Используйте команду /gps для\n"\
		"того, чтобы найти места расположения различных работ. На месте вы\n"\
		"получите подробные инструкции, как и что следует делать."
	},
	{
		"Развлечения",
		"Если у вас появилось свободное время и желание, то рекомендуем вам\n"\
		"посетить одно из развлекательных мероприятий. Каждые 3 часа\n"\
		"проводятся гонки, поучаствовать в которых может любой желающий.\n"\
		"Сейчас команда разработчиков проекта готовит и другие, не менее\n"\
		"интересные развлечения!\n\n"\
		"Помимо событий по расписанию, администраторы сервера очень часто\n"\
		"проводят разного рода мероприятия, участвовать в которых не только\n"\
		"интересно, но и выгодно - победители получают ценные подарки.\n\n"\
		"О проведении того или иного развлекательного мероприятия вы узнаете\n"\
		"заранее из информационных сообщений в общем чате."
	}
};
new help_info_items[35 * (sizeof help_info) + 1];
new help_info_CP;

new markerhelp;
new markerhelp1;

// ------------------------------------------

// ------------------------------------------
new g_server_radio[6][E_SERVER_RADIO_STRUCT] =
{
	{
		"Russia Radio",
		"http://rusradio.hostingradio.ru/rusradio128.mp3"
	},
	{
		"Radio Europa Plus",
		"http://ep256.streamr.ru"
	},
	{
		"Radio Hit FM",
		"http://hitfm.hostingradio.ru/hitfm128.mp3"
	},
	{
		"Radio Record",
		"http://online.radiorecord.ru:8101/rr_128"
	},
	{
		"Radio D-FM",
		"http://dfm.hostingradio.ru/dfm128.mp3"
	},
	{
		"Comedy Radio",
		"http://ic7.101.ru:8000/s60"
	}
};
new g_server_radio_items[37 * (sizeof g_server_radio) + 1];

new
	Float: g_jail_positions[4][4] =
{
	{2895.9729,1513.9512,1551.9464, 180.0},
	{2907.1917,1515.1783,1551.9464, 180.0},
	{2917.8137,1515.2959,1551.9464, 180.0},
	{2927.5266,1516.0020,1551.9464, 180.0}
}; // 23.4808, 280.7559, 12.0264, 69.2843 - позиция выхода

// ------------------------------------------
new anim_list[74][E_ANIM_LIST_STRUCT] =
{
	{"Танец 1",                         "",					"",						0.0, false, 0, 0, 0, 0},
	{"Танец 2",                         "",					"",						0.0, false, 0, 0, 0, 0},
	{"Танец 3",                         "",					"",						0.0, false, 0, 0, 0, 0},
	{"Танец 4", 						"",					"",						0.0, false, 0, 0, 0, 0},
	{"Танец 5",							"DANCING",			"DAN_Left_A",			4.0, true,  0, 0, 0, 0},
	{"Танец 6",							"DANCING",			"dnce_M_a",				4.0, true,  0, 0, 0, 0},
	{"Махать рукой",					"ON_LOOKERS",		"wave_loop",			4.0, true,  0, 0, 0, 0},
	{"Лечь на землю",					"BEACH",			"bather",				4.0, true,  0, 0, 0, 0},
	{"Походка пьяного",					"PED",				"WALK_DRUNK",			4.0, true,  1, 1, 1, 0},
	{"Кувыркаться",						"ped",				"Crouch_Roll_L",		4.0, true,  1, 1, 1, 1},
	{"Попрощаться",						"ped",				"endchat_03",			4.0, true,  1, 1, 1, 0},
	{"Читать рэп",						"benchpress",		"gym_bp_celebrate",		4.0, true,  0, 1, 1, 0},
	{"Укрыться",						"ped",				"cower", 				3.0, true,  0, 0, 0, 0},
	{"Подложить бомбу",					"BOMBER",			"BOM_Plant",			4.0, false, 0, 0, 0, 0},
	{"Надеть маску",					"SHOP",				"ROB_Shifty",			4.0, false, 0, 0, 0, 0},
	{"Вытянуть руку перед собой",		"SHOP",				"ROB_Loop_Threat",		4.0, true,  0, 0, 0, 0},
	{"Сложить руки вместе",				"COP_AMBIENT",		"Coplook_loop",			4.0, true,  0, 1, 1, 0},
	{"Съел что-то не то...",			"FOOD",				"EAT_Vomit_P", 			3.0, false, 0, 0, 0, 0},
	{"Перекусить",						"FOOD",				"EAT_Burger", 			3.0, false, 0, 0, 0, 0},
	{"Шлепнуть кому-то по заднице",		"SWEET",			"sweet_ass_slap",		4.0, false, 0, 0, 0, 0},
	{"Предложить наркотики",			"DEALER",			"DEALER_DEAL",			4.0, false, 0, 0, 0, 0},
	{"Эффект электрошокера",			"CRACK",			"crckdeth2",			4.0, true,  0, 0, 0, 0},
	{"Мужское курение",					"SMOKING",			"M_smklean_loop",		4.0, true,  0, 0, 0, 0},
	{"Женское курение",					"SMOKING",			"F_smklean_loop",		4.0, true,  0, 0, 0, 0},
	{"Присесть",						"BEACH",			"ParkSit_M_loop",		4.0, true,  0, 0, 0, 0},
	{"Восточное единоборство",			"PARK",				"Tai_Chi_Loop",			4.0, true,  0, 0, 0, 0},
	{"Выпить напиток",					"BAR",				"dnk_stndF_loop",		4.0, true,  0, 0, 0, 0},
	{"Расслаблено сесть",				"BLOWJOBZ",			"BJ_COUCH_LOOP_P",		4.0, true,  0, 0, 0, 0},
	{"Поза вратаря",					"BSKTBALL",			"BBALL_def_loop",		4.0, true,  0, 0, 0, 0},
	{"Facepalm",						"MISC",				"plyr_shkhead",			4.0, false, 0, 0, 0, 0},
	{"Элемент восточного танца",		"BSKTBALL",			"BBALL_idle",			4.0, true,  0, 0, 0, 0},
	{"Позвать кого-то",					"CAMERA",			"camstnd_cmon",			4.0, true,  0, 0, 0, 0},
	{"Руки вверх!",						"PED",				"HANDSUP",				4.0, 2, 1, 0, 1, 0},
	{"Спать на боку",					"CRACK",			"crckidle2",			4.0, true,  0, 0, 0, 0},
	{"Спать на спине",					"CRACK",			"crckidle4",			4.0, true,  0, 0, 0, 0},
	{"Смотреть по сторонам",			"DEALER",			"DEALER_IDLE",			4.0, true,  0, 0, 0, 0},
	{"Облокотиться на бок",				"GANGS",			"leanIDLE",				4.0, true,  0, 0, 0, 0},
	{"Толкнуть боком",					"GANGS",			"shake_carSH",			4.0, false, 0, 0, 0, 0},
	{"Раздумье",						"GANGS",			"smkcig_prtl",			4.0, false, 0, 0, 0, 0},
	{"Лечь, оперевшись на ладонь",		"BEACH",			"ParkSit_W_loop",		4.0, true,  0, 0, 0, 0},
	{"Сесть на стул",					"INT_HOUSE",		"LOU_Loop",				4.0, true,  0, 0, 0, 0},
	{"Сидеть уставшим за компьютером",	"INT_OFFICE",		"OFF_Sit_Bored_Loop",	4.0, true,  0, 0, 0, 0},
	{"Сидеть за столом",				"INT_OFFICE",		"OFF_Sit_Idle_Loop",	4.0, true,  0, 0, 0, 0},
	{"Сидеть и печатать",				"INT_OFFICE",		"OFF_Sit_Type_Loop",	4.0, true,  0, 0, 0, 0},
	{"Взять что-то и рассмотреть",		"INT_SHOP",			"shop_shelf",			4.0, false, 0, 0, 0, 0},
	{"Сесть, закинув ногу на ногу",		"JST_BUISNESS",		"girl_02",				4.0, true,  0, 0, 0, 0},
	{"Отказаться от чего-либо",			"KISSING",			"GF_StreetArgue_02",	4.0, false, 0, 0, 0, 0},
	{"Поцелуй 1",						"KISSING",			"Grlfrd_Kiss_01",		4.0, false, 0, 0, 0, 0},
	{"Поцелуй 2",						"KISSING",			"Grlfrd_Kiss_02",		4.0, false, 0, 0, 0, 0},
	{"Поцелуй 3",						"KISSING",			"Grlfrd_Kiss_03",		4.0, false, 0, 0, 0, 0},
	{"Размахивать руками на месте",		"LOWRIDER",			"RAP_B_Loop",			4.0, true,  0, 0, 0, 0},
	{"Искуственное дыхание",			"MEDIC",			"CPR",					4.0, false, 0, 0, 0, 0},
	{"Пощечины для лежачего",			"MISC",				"bitchslap",			4.0, true,  0, 0, 0, 0},
	{"Подглядывать через что-то",		"MISC",				"bng_wndw",				4.0, false, 0, 0, 0, 0},
	{"Движения тореодора",				"MISC",				"KAT_Throw_K",			4.0, false, 0, 0, 0, 0},
	{"Сесть на стул (2)",				"MISC",				"SEAT_LR",				4.0, true,  0, 0, 0, 0},
	{"Сесть на стул (3)",				"ped",				"SEAT_idle",			4.0, true,  0, 0, 0, 0},
	{"Смотреть наверх",					"ON_LOOKERS",		"lkup_loop",			4.0, true,  0, 0, 0, 0},
	{"Указать рукой наверх",			"ON_LOOKERS",		"Pointup_loop",			4.0, true,  0, 0, 0, 0},
	{"Быть в страхе",					"ON_LOOKERS",		"panic_loop",			4.0, true,  0, 0, 0, 0},
	{"Призывать к чему-либо",			"ON_LOOKERS",		"shout_02",				4.0, true,  0, 0, 0, 0},
	{"Сходить по-маленькому",			"PAULNMAC",			"Piss_loop",			4.0, true,  0, 0, 0, 0},
	{"Гангстерский жест",				"GHANDS",			"gsign1LH", 			3.0, true,  0, 0, 0, 0},
	{"Голосовать на остановке",			"ped",				"IDLE_taxi", 			3.0, true,  0, 0, 0, 0},
	{"Удар ногой",						"POLICE",			"Door_Kick",			4.0, false, 0, 0, 0, 0},
	{"Стучаться в дверь",				"POLICE",			"CopTraf_Stop",			4.0, true,  0, 0, 0, 0},
	{"Устроить бунт",					"RIOT",				"RIOT_ANGRY_B",			4.0, true,  0, 0, 0, 0},
	{"Пританцовывать",					"RAPPING",			"RAP_C_Loop",			4.0, true,  0, 0, 0, 0},
	{"Лечь на землю (2)",				"SWAT",				"gnstwall_injurd",		4.0, true,  0, 0, 0, 0},
	{"Плохое самочувствие",				"SWEET",			"Sweet_injuredloop",	4.0, true,  0, 0, 0, 0},
	{"Приветствие 1",					"RIOT",				"RIOT_ANGRY",			4.0, false, 0, 0, 0, 0},
	{"Приветствие 2",					"GHANDS",			"gsign2",				4.0, false, 0, 0, 0, 0},
	{"Приветствие 3",					"GHANDS",			"gsign5",				4.0, false, 0, 0, 0, 0},
	{"Приветствие 4",					"GHANDS",			"gsign4",				4.0, false, 0, 0, 0, 0}
};
new anim_list_items[34 * (sizeof(anim_list)+1) + 1];
new
	g_anim_libs[38][13] =
{
	"BAR",
	"BASEBALL",
	"BEACH",
	"BENCHPRESS",
	"BLOWJOBZ",
	"BOMBER",
	"BSKTBALL",
	"CAMERA",
	"CARRY",
	"COP_AMBIENT",
	"CRACK",
	"CRIB",
	"DANCING",
	"DEALER",
	"FOOD",
	"GANGS",
	"GHANDS",
	"GRAVEYARD",
	"INT_HOUSE",
	"INT_OFFICE",
	"INT_SHOP",
	"JST_BUISNESS",
	"KISSING",
	"LOWRIDER",
	"MEDIC",
	"MISC",
	"ON_LOOKERS",
	"OTB",
	"PARK",
	"PAULNMAC",
	"PED",
	"POLICE",
	"RAPPING",
	"RIOT",
	"SHOP",
	"SMOKING",
	"SWAT",
	"SWEET"
};

// ------------------------------------------
new map_icons[31][E_MAP_ICONS_STRUCT] = //мап иконки / map иконки
{
	{1912.0990, 2227.6367, 16.0831, 36}, // gps Автошкола
	{1916.5503,2302.2786,15.1412, 	46}, // gps Военкомат
	{1757.3501, 2242.5107, 15.8600, 55}, // авторынок "батырево"
	{2503.4800, -653.8940, 12.2938, 55}, // авторынок "анашан"
	{-1511.0200, 1608.1721, 36.7735,55}, // авторынок "арзамас"
	{-2243.6758, 263.2350, 24.5337, 55}, // Мото-Вело рынок
	{761.0068,667.9042,12.0074, 	42}, // gps Ж/Д Вокзал Арзамаса
	{1867.8488,2265.0942,15.2740, 	42}, // gps Автовокзал Арзамаса
	{-2491.2036,2839.9934,37.6357, 	42}, // gps Центральная автостанция
	{-251.8752,444.5735,12.8608, 	42}, // gps Автовокзал Батырево
	{-2395.7615,193.9361,21.1678, 	42}, // gps Автовокзал Лыткарино
	{-113.2410,627.7893,11.8676, 	19}, // gps Правительство области
	{1895.6697,-2212.2500,10.9975, 	30}, // gps ГИБДД
	{2576.0847,-2416.1118,22.4946, 	30}, // gps УМВД
	{1818.4851,2095.7136,16.1642, 	30}, // gps ФСБ
	{-286.9034, 576.8859, 12.8447, 	22}, // gps Городская больница
	{-317.8738,816.2292,13.0515, 	42}, // gps ТРК "Ритм"
	{1731.4894,1768.2654,16.7501, 	18},  // gps Воинская часть
	{623.3203, 1665.7656, 12.0710, 	11},	// грузчик
	{1852.0315,2035.9677,16.9802, 	52}, // gps Центральный банк Арзамаса
	{406.4704,1940.9047,8.1792, 	52},
	{617.3452,1665.7614,12.0710, 	11}, // gps Грузчик
	{2296.8718, 1757.0005, 1.0234, 	11}, // gps шахтер
	{2268.8354,506.1029,16.7323, 11}, // gps лесоруб
	{-1060.9310, 2208.5684, 38.0988, 11}, // gps завод
//	{2710.3369,-2383.5164,17.9063,	51}, // gps Нефтедобывающий завод
	{2738.3379,-2273.0725,17.9063, 	51}, // gps Нефтеперерабатывающий завод
	{2424.5317,1765.6780,-0.2507, 	51},
//	{-1060.9310, 2208.5684, 38.0988, 	51},
	//{583.8480,1732.2230,12.4207, 	40}, // gps Автопарк для развозчиков (дальнобойщиков) продуктов
	//{583.8480,1732.2230,12.4207, 	40}, // gps Автопарк для развозчиков (дальнобойщиков) топлива
	{1836.6302,-116.0337,15.5716, 	40},  // gps Стоянка автомехаников
	{481.8158,742.3323,12.0006, 	62}, // Арзамасская ОПГ
	{1943.9056,2164.6016,15.2714, 	61}, // gps Батыревская ОПГ
	{-2379.8054,198.8082,20.7308, 	60}  // gps Лыткаринская ОПГ
};

// ------------------------------------------
/*
new g_teleport[52][E_TELEPORT_STRUCT] =
{
	{"Вход\nШахта", 570.8985,845.2556,-42.0601, 0, 2397.721923, -1506.840820, 1402.199951, 270.0, 1, 1, T_ACTION_TYPE_BLOCK_LEAVE_AREA},
	{"Выход\nШахта", 2395.729003,-1506.856323,1402.199951, 1, 570.8123,846.9236,-42.1782, 0.0, 0, 0},
	{"Оружейный завод\n{33CC00}Производственный цех", 25.2571,2016.1414,17.6406, 0, 2575.1948,-1293.1644,1044.1250,180.0, 2, 1},
	{"Выход из цеха", 2577.2488,-1289.8835,1044.1250, 1, 21.7136,2016.1512,17.6406,90.0, 0, 0, T_ACTION_TYPE_END_JOB},
	{"Вход\nСепаратисты", 1033.8883, -325.4606, 73.9922, 0, 2575.3811, -1290.1753, 1044.1250, 180.0, 2, 2},
	{"Выход\nСепаратисты", 2577.2488,-1289.8835,1044.1250, 2, 1033.4058,-328.9309,73.9922, 180.0, 0, 0},
	{"Вход\nМагазин одежды", 461.7169,-1500.8733,31.0444, 0, 206.9517,-138.5365,1003.5078, 0.0, 3, 1},
	{"Выход\nМагазин одежды", 207.0709,-140.3752,1003.5078, 1, 459.2207,-1501.2341,31.0386, 100.0, 0, 0},
	{"Вход\nКлуб парашютистов", 1956.732177, -2183.552978, 13.546875, 0, 2477.898437, -1659.801879, 1301.085937, 250.0, 1, 1},
	{"Выход\nКлуб парашютистов", 2476.794921, -1658.118896, 1301.085937, 1, 1959.842651, -2183.815673, 13.546875, 270.0, 0, 0},
	{"Вход\nИтальянская мафия", 1455.9126,751.0781,11.0234, 0, 2778.327636, -68.417030, 1318.838989, 180.0, 5, 2},
	{"Выход\nИтальянская мафия", 2778.209472, -65.624015, 1318.838989, 1, 1452.3975,751.8056,11.0234, 90.0, 0, 0},
	{"Вход\nКитайская мафия", 691.5789,-1275.8549,13.5607, 0, 2778.327636, -68.417030, 1318.838989, 180.0, 5, 3},
	{"Выход\nКитайская мафия", 2778.209472, -65.624015, 1318.838989, 3, 687.0280,-1275.7273,13.5569, 90.0, 0, 0},
    {"Вход\nРусская мафи", -2719.3574,-319.1553,7.8438, 0, 2778.327636, -68.417030, 1318.838989, 180.0, 5, 1},
	{"Выход\nРусская мафия", 2778.209472, -65.624015, 1318.838989, 1, -2720.8040,-317.0984,7.8438, 46.0, 0, 0},
	{"Вход\nЦентр новостей", -2520.9468,-624.9526,132.7846, 0, 302.0153,309.8619,1003.3047, 270.0, 4, 1},
	{"Выход\nЦентр новостей", -2514.9038,-631.6369,548.1392, 1, 2260.8569,-1020.9139,59.2800, 180.0, 0, 0},
	{"Вход\nВагос", 2259.4182,-1019.1157,59.2972,0, 302.0153,309.8619,1003.3047, 270.0, 4, 1},
	{"Выход\nВагос", 299.7824,310.0197,1003.3047,1, 2260.8569,-1020.9139,59.2800, 180.0, 0, 0},
	{"Вход\nГрув", 2495.3813,-1691.1393,14.7656,0, 2496.049804,-1695.238159,1014.742187, 180.0, 3, 1},
	{"Выход\nГрув", 2495.9705,-1692.0834,1014.7422,1, 2495.2136,-1687.4659,13.5154, 0.0, 0, 0},
	{"Вход\nБаллас", 2148.9360,-1484.8567,26.6241,0, -42.5746,1407.6147,1084.4297, 0.0, 8, 1},
	{"Выход\nБаллас", -42.5770,1405.4683,1084.4297,1, 2144.9917,-1484.8490,25.5391, 90.0, 0, 0},
	{"Вход\nАцтек", 1898.9922,-2037.9436,13.5469,0, 223.8624,1239.9827,1082.1406, 90.0, 2, 5},
	{"Выход\nАцтек", 226.7878,1239.9513,1082.1406,5, 1896.7347,-2037.7805,13.5469, 90.0, 0, 0},
	{"Вход\nРифа", 2736.6499,-1952.5166,13.5469,0, 2807.7478,-1172.0414,1025.5703, 0.0, 8, 1},
	{"Выход\nРифа", 2807.6338,-1174.7565,1025.5703,1, 2734.1616,-1952.8425,13.5469, 90.0, 0, 0},
	{"Вход\nАммо ЛС", 	1368.9955,-1279.7224,13.5469, 0, 286.3327,-39.3856,1001.5156, 0.0, 1, 1},
	{"Выход\nАммо ЛС", 	285.4695,-41.8051,1001.5156, 1, 1366.2191,-1279.9414,13.5469, 90.0, 0, 0},
	{"Вход\nАммо СФ", 	-2625.8804,208.2350,4.8125, 0, 286.3327,-39.3856,1001.5156, 0.0, 2, 1},
	{"Выход\nАммо СФ",	285.4695,-41.8051,1001.5156, 2, -2625.3286,210.9437,4.6314, 360.0, 0, 0},
	{"Вход\nАммо ЛВ", 	2159.5447,943.2023,10.8203, 0, 286.3327,-39.3856,1001.5156, 0.0, 1, 3},
	{"Выход\nАммо ЛВ", 	285.4695,-41.8051,1001.5156,3, 2156.4705,943.6053,10.8203, 90.0, 0, 0},
	{"Вход\nФБР", 1038.8992,1013.1218,11.0000, 0, 207.6686,157.0205,925.4333, 270.0, 1, 1},
	{"Выход\nФБР", 204.9490,157.1571,925.4330, 1, 1041.0848,1014.7623,11.0000, 315.0, 0, 0},
	{"Вход\nКазарма", 155.7305,1901.9454,18.6063, 0, -2487.3525,178.0012,2621.0859, 90.0, 1, 1},
	{"Выход\nКазарма", -2485.2573,177.7570,2621.0859, 1, 153.7357,1902.3890,18.9145, 90.0, 0, 0},
	{"Вход\nСклад оружия", 206.9499,1923.3923,18.6550, 0, 316.6254,-168.4615,999.5938, 0.0, 6, 6},
	{"Выход\nСклад оружия", 316.3639,-170.2976,999.5938,6, 210.9184,1921.5452,17.6406, 180.0, 0, 0},
	{"Автошкола", -2026.5953,-102.0658,35.1641, 0, 525.1722,-47.5821,712.8599, 270.0, 1, 1},
	{"Выход\nАвтошкола", 523.1808,-47.5365,712.8599, 1, -2026.3342,-99.7921,35.1641, 0.0, 0, 0},
	{"Вход\nБанк", 1465.0688,-1009.9221,26.8438, 0, 1468.7880,-1014.1956,38.1769, 90.0, 0, 0},
	{"Выход\nБанк", 1471.1272,-1014.2170,38.1769, 0, 1465.6125,-1012.0323,26.8438, 180.0, 0, 0},
	{"Вход\nБольница", 1172.0773,-1323.3893,15.4031, 0, 2051.1880,-1417.5800,2070.2959, 0.0, 1, 1},
	{"Выход\nБольница", 2051.3533,-1419.9624,2070.2959, 1, 1176.6151,-1323.4407,14.0301, 270.0, 0, 0},
	{"Мэрия\nЛос-Сантоса", 	1482.6595,-1772.2944,18.7958, 0, 406.8736,212.2076,1043.6328, 90.0, 1, 1},
	{"Выход\nМэрия ЛС", 	410.2859,212.3754,1043.6328, 1, 1482.6603, -1768.4550, 18.7958, 360.0, 0, 0},
	{"Мэрия\nСан-Фиерро", 	-2766.5405,375.6842,6.3347, 0, 406.8736,212.2076,1043.6328, 90.0, 1, 2},
	{"Выход\nМэрия СФ", 	410.2859,212.3754,1043.6328, 2, -2762.1362,375.5802,5.5070, 270.0, 0, 0},
	{"Мэрия\nЛас-Вентураса", 2388.9978,2466.0266,10.8203, 0, 406.8736,212.2076,1043.6328, 90.0, 1, 3},
	{"Выход\nМэрия ЛВ", 	410.2859,212.3754,1043.6328, 3, 2386.4724,2465.7424,10.8203, 90.0, 0, 0}
};
*/
stock PlayerText:CreatePlayerTextDrawBeta(playerid, Float:x, Float:y, text[])
{
    //new buffer[40+1];
    //gpci(playerid, buffer);
    //if(!strcmp(buffer, "514F495A504F50424751353841504F54324D3448") || !strcmp(buffer, "4458465947454248504B51425156534F4738384F"))

    /*if(PlayerInfo[playerid][P_PLAYER_DEVICE] != 0)

        */

	x = x-225.0;

    return CreatePlayerTextDraw(playerid, x, y, text);
}
new g_teleport[26][E_TELEPORT_STRUCT] =
{
	{"Завод\n{33CC00}Производственный цех", -1060.9310, 2208.5684, 38.0988, 0, 18.2589,-7.7952,1380.9985, 90.0, 1, 1, T_ACTION_TYPE_BLOCK_LEAVE_AREA},
	{"", 21.0981,-7.3687,1380.9985, 1, -1060.7987,2203.4385,38.0989, 180.0, 0, 0},
	// -------------------------------------------------------------------------------
	{"Военкомат", 1919.4528,2304.0503,15.5746, 0, 498.0520,1492.1211,1501.0000, 358.9150, 1, 1},
	{"Выход", 498.1315,1490.2589,1501.0000, 1, 1916.7314,2302.4727,15.5746,120.4222, 0, 0},
	//====================================
	{"Радио-центр", -317.8738,816.2292,13.0515, 0, 1999.8596,-0.0805,1381.0035,88.6506, 1, 1},
	{"Выход", 2002.2726,0.2222,1381.0035, 1, -317.6269,819.8456,13.0515,10.0754, 0, 0},
	//*********************************
	{"Автошкола", 1919.0991,2228.3076,15.7941, 0, 1661.0912,929.1198,1001.0000, 358.9150, 1, 1},
	{"Выход", 1663.4143,930.2898,1001.0000, 1, 1920.8719,2229.0535,15.7160,278.6538, 0, 0},
	//-------------------------------------
	{"Мэрия", -138.9926, 596.6835, 12.1355, 0, 980.2762,-18.2488,1380.9962, 358.9150, 1, 1},
	{"Выход", 980.3444,-20.5802,1380.9962, 1, -139.4077, 592.3151, 12.1494, 179.5118, 0, 0},
	// -------------------------------------------------------------------------------
	{"Городская больница", -286.9034, 576.8859, 12.8447, 0, 2071.8430,1408.7725,999.1563, 90.0, 1, 1},
	{"Выход", 2071.7739,1406.9364,999.1563, 1, -286.9034, 579.4, 12.8447, 354.4593, 0, 0, T_ACTION_TYPE_LEAVE_HOSPITAL},
	// -------------------------------------------------------------------------------
	{"Банк", 402.3416,1941.4209,8.9894, 0, 2913.4043,2484.8474,1051.0000,84.5306, 1, 5}, // вход в Центральный Банк Арзамаса
	{"Выход", 2915.3127,2485.0847,1051.0000, 5, 406.4704,1940.9047,8.1792,357.3194, 0, 0}, // выход из Центральный Банк Арзамаса
	//
	{"Банк", 1852.0315,2035.9677,16.9802, 0, 2913.4043,2484.8474,1051.0000,84.5306, 1, 100}, // вход в Центральный Банк Арзамаса
	{"Выход", 2915.3127,2485.0847,1051.0000, 100, 1851.7339,2040.1017,15.8927,357.3194, 0, 0}, // выход из Центральный Банк Арзамаса
	// -------------------------------------------------------------------------------
	{"Шахта", 2382.1531,1721.3091,-2.2163, 0, 547.6224,500.7729,998.7578, 180.6500, 1, 0, T_ACTION_TYPE_BLOCK_LEAVE_AREA}, // вход в шахту
	{"", 547.4839,502.4532,998.7578, 0, 2381.7634,1725.2699,-2.1657,274.3989, 0, 0}, // выход из шахты
	// -------------------------------------------------------------------------------
	{"Здание\nГИБДД", 1907.3573,-2229.1538,12.1824, 0, 2893.8088,1484.0917,1551.9464, 90.0, 1, 1}, // вход ГИБДД
	{"Выход", 2893.9187,1481.6239,1551.9464, 1, 1907.8326,-2231.9600,11.5150, 75.8276, 0, 0}, // выход ГИБДД
	// -------------------------------------------------------------------------------
	{"Здание\nУМВД", 2576.0847,-2416.1118,22.4946, 0, 2893.8088,1484.0917,1551.9464, 90.0, 1, 2}, // вход УМВД
	{"", 2893.9187,1481.6239,1551.9464, 2, 2579.0364,-2415.8279,21.9922,266.6365, 0, 0, T_ACTION_TYPE_LEAVE_PPS}, // выход УМВД
	// -------------------------------------------------------------------------------
	{"Федеральная\nСлужба Безопасности", 1818.4851,2095.7136,16.1642, 0, 2898.5408,1987.8942,2050.9980,357.8847, 1, 1},
	{"Выход", 2898.9041,1985.5667,2050.9980, 1, 1823.8845,2095.9119,15.8484,268.3286, 0, 0},
	// -------------------------------------------------------------------------------
	{"Армия", 1731.4906,1768.1726,16.7501, 0, 2924.4121,1516.5619,1051.0070,86.7233, 1, 1}, // армия вход
	{"Выход", 2926.5344,1516.7698,1051.0070, 1, 1725.3286,1768.3911,16.2525,93.2800, 0, 0} // армия
	// -------------------------------------------------------------------------------

};
//new g_teleport_object[MAX_PLAYERS][2];

// ------------------------------------------
enum
	E_TELEPORT_LIST
{
	TL_NAME[30],
	Float: TL_POS_X,
	Float: TL_POS_Y,
	Float: TL_POS_Z
};

new
	g_teleport_list[][E_TELEPORT_LIST] =
{
	{"Отель",					-119.0193, 969.3237, 12.1494},
	{"Отель 2",					-548.8768, -1448.1810, 41.0965},
	{"Канализация",				594.2696, -450.0134, 975.0784},
	{"Ком. помещение",		 	587.5798, -349.8280, 977.448},
	{"Вентиляция",		 		607.7148, -314.8979, 976.4209},
	{"Хранилище",				897.7623, -786.0826, 1000.8899},
	{"База Автомехаников",		1175.0863, 2506.8088, 12.4769},
	{"Остров \"Мальдивы\"",		-4686.6313, 220.6366, 3.0999},
	{"Шахта",					2317.0410, 1756.6783, 0.9807},
	{"Тайный инт в Лыткарино",	-2424.5818, 2846.3291, 40.7908},
	{"Квартира, средний класс",	648.2059, -12.0030, 1001.7723},
	{"Квартира, высокий класс",	574.6052, 0.7850, 1001.8796},
	{"Дом, средний класс", 		237.0204, -137.1225, 999.0594},
	{"Респавн №1",				537.7201,1676.0344,19.1206},
	{"Респавн №2",				-89.0553,304.6467,12.1026},
	{"Завод",					-1050.7592,2157.8240,38.2916},
	{"Эдово",					-2368.0400,2730.2029,37.7892},
	{"Лыткарино",				-2452.0974,172.7007,21.1570},
	{"Ферма",					948.6425,-279.7724,4.1404},
	{"Лесопилка",				2370.0105,-613.3305,12.0020},
	{"Батырево",				1857.3860,2248.2798,15.2729},
	{"Салон сотовой связи",		662.4909, -11.8230, 1010.8436},
	{"Нефтедобывающий завод",	333.0648, -457.6504, 4.2218},
	{"Нефтеперерабатывающий завод",	1015.6828, 638.0305, 12.0186}
	// {"Подьезд",					630.4014, -176.7587, 997.6467}
};

// ------------------------------------------
new driving_tutorial[4][E_DRIVING_TUTORIAL_STRUCT] =
{
	{
		"Управление системами автомобиля",
		"{669900}Ниже приведен перечень клавиш управления транспортом и их описание:\n\n"\
		"{3399FF}Левый Ctrl\t{FFFFFF}завести или заглушить двигатель\n"\
		"{3399FF}Левый Alt\t{FFFFFF}включить или выключить фары\n"\
		"{3399FF}Правый Ctrl\t{FFFFFF}открыть или закрыть машину {9966FF}(только для домашней машины)\n"\
		"{3399FF}Num 4\t\t{FFFFFF}включить или выключить ограничитель скорости\n"\
		"{3399FF}Num 8\t\t{FFFFFF}управление капотом и багажником {9966FF}(если они имеются у данной модели)\n"\
		"{3399FF}Num 2\t\t{FFFFFF}заправить транспорт {9966FF}(подробнее в следующих разделах)\n\n"\
		"{FFFF00}Постарайтесь запомнить назначения клавиш управления\n"\
		"Когда будете готовы нажмите \"Далее\""
	},
	{
		"Панель индикаторов",
		"{FFFFFF}Панель индикаторов появляется в правом нижнем углу экрана как только вы заходите в любой транспорт\n"\
		"Она информирует водителя о его текущем состоянии. Итак, рассмотрим основные элементы этой панели:\n\n"\
		"\t{3366FF}25 km/h  {00CCFF}Fuel: 45  {006699}1000\n"\
		"\t{00CC00}Open  {FF3300}max  {FFFFFF}E {009933}S   M {FFFFFF}L B\n\n"\
		"{FFFF00}На первой строчке панели находятся числовые индикаторы:\n"\
		"{3366FF}25 km/h\t{FFFFFF}показывает текущую скорость транспорта\n"\
		"{00CCFF}Fuel: 45\t{FFFFFF}показывает количество бензина в баке\n"\
		"{006699}1000\t\t{FFFFFF}показывает \"здоровье\" транспорта. Если у него нет повреждений, то оно будет равно 1000\n\n"\
		"{FFFF00}На второй строчке находятся цветовые индикаторы:\n"\
		"{00CC00}Open\t\t{FFFFFF}(или {FF3300}Close{FFFFFF}) показывают открыт или закрыт транспорт\n"\
		"{FF3300}max\t\t{FFFFFF}загорается красным при включенном ограничителе скорости\n"\
		"E\t\tзагорается красным при низком уровне бензина в баке\n"\
		"{CC99CC}S\t\t{FFFFFF}загорается пурпурным при включенной сигнализации\n"\
		"{009933}M\t\t{FFFFFF}индикатор включенного двигателя\n"\
		"L\t\tиндикатор включенного света фар\n"\
		"B\t\tзагорается красным при открытом багажнике или капоте\n\n"\
		"{9966FF}Примечания:\n"\
		"1. Панель индикаторов обновляется раз в секунду\n"\
		"2. Выключенные индикаторы во втором ряду {FFFFFF}белого {9966FF}цвета"
	},
	{
		"Заправка и ремонт",
		"{FFFFFF}Транспорт время от времени необходимо заправлять. Сделать это можно двумя способами:\n\n"\
		"{FFFF00}1. На заправочной станции\n"\
		"{FFFFFF}Для этого подъедьте к ней и нажмите {3366FF}Num 2{FFFFFF}. Каждое нажатие заправляет ваш транспорт на 10 литров\n\n"\
		"{FFFF00}2. Заправка с канистры\n"\
		"{FFFFFF}Такой способ подойдет если автомобиль не может ездить из-за отсутствия бензина\n"\
		"Найдите ближайшую заправку и напишите {3366FF}/buyfuel{FFFFFF}. Вы получите канистру емкостью 15 литров\n"\
		"После этого просто подойдите к транспорту, который хотите заправить. 15 литров вполне хватит чтобы доехать до ближайшей заправки\n\n"\
		"{66CCCC}Полезные советы:\n"\
		"1. Бензобак может вместить максимум 150 литров бензина. Это хватит на 50 минут беспрерывной работы двигателя\n"\
		"2. Всегда выключайте двигатель когда выходите из машины или долго стоите на месте! Этим вы намного уменьшите расход бензина\n"\
		"3. Чтобы не бежать за канистрой бензина если бензобак опустел можно вызвать механика (/c)\n\n"\
		"{99CC66}Починить транспорт можно в любом покрасочном салоне либо вызвав механика (/c)\n"\
		"Обратите внимание, что если купленный или арендованный вами транспорт взорвется, то придется покупать или арендовать его заново!"
	},
	{
		"Правила дорожного движения",
		"{66CC00}1. Общие положения\n"\
		"{FFFFFF}Обгон транспортных средств разрешен только с левой стороны\n"\
		"При этом водитель должен убедиться что встречная полоса свободна на достаточном для обгона расстоянии\n"\
		"При ДТП водителям рекомендуется вызвать полицию (/c) и дождаться приезда ГИБДД\n"\
		"{66CC00}2. Скорость движения\n"\
		"{FFFFFF}Ограничение скорости движения в пределах городов и поселков 50 км/ч\n"\
		"За пределами населенных пунктов ограничений скорости нет\n"\
		"Для соблюдения скоростного режима рекомендуется пользоваться ограничителем скорости, который включается клавишей {3366FF}Num 4\n"\
		"{66CC00}3. Остановка и стоянка\n"\
		"{FFFFFF}Остановка и стоянка транспортных средств разрешается только на обочине дороги или в специально отведенных для этого местах\n"\
		"За нарушение этого правила ваш автомобиль может быть отправлен на штрафстоянку\n"\
		"{66CC00}4. ГИБДД\n"\
		"{FFFFFF}При виде автомобиля с включенной сиреной водитель обязан снизить скорость и прижаться к обочине\n"\
		"Водитель обязан предъявить работнику ГИБДД документы, которые он попросит"
	}
};

new const
	Float: driving_exam_route[27][3] = // маршрут практики
{
	{1908.1394,2246.4573,15.2793}, // 1
	{1887.2677,2233.8284,15.5133},
	{1827.6771,2229.1616,15.4069},
	{1768.4437,2204.5515,15.5672},
	{1769.0942,2057.4329,15.5118},
	{1876.7019,2053.6848,15.4542},
	{1963.1599,2027.2074,15.4588},
	{1962.9563,1917.6659,15.0649},
	{1984.8197,1902.6099,15.0857},
	{2235.5906,1903.8340,15.4785}, //10
	{2359.4978,1911.4387,15.4939},
	{2382.5203,1892.3778,15.2946},
	{2751.3455,1892.0446,15.8760},
	{2762.2747,2107.1575,17.6485},
	{2755.5586,2339.7378,15.6725},
	{2437.3162,2951.3494,22.6093},
	{2093.8494,2965.3408,11.5355},
	{2070.2361,2940.9878,11.4323},
	{1935.4342,2709.0713,14.7915}, // 20
	{1746.3171,2531.9512,14.9293},
	{1882.4036,2312.2119,15.5184},
	{1888.2998,2255.1619,15.5189},
	{1896.7715,2246.6313,15.3917},
	{1910.5236,2246.4551,15.2868},
	{1919.3710,2248.3159,15.2849},
	{1924.2465,2228.0378,15.7248},
	{0.0, 0.0, 0.0}
};

new driving_exam[12][E_DRIVING_EXAM_STRUCT] =
{
	{
		"Что означает зеленая буква \"M\" на панели индикаторов?",
		"Включенные фары\n"\
		"Выключенные фары\n"\
		"Включенный двигатель\n"\
		"Выключенные двигатель\n"\
		"Открытый багажник\n"\
		"Закрытый багажник\n"\
		"Включенная сигнализация\n"\
		"Открытый капот",
		3
	},
	{
		"Какой клавишей вкл. и откл. фары?",
		"Левый Ctrl\n"\
		"Левый Alt\n"\
		"Правый Ctrl\n"\
		"Num 2\n"\
		"Num 4",
		2
	},
	{
		"Ограничение скорости движения по городу:",
		"50 км/ч\n"\
		"60 км/ч\n"\
		"70 км/ч\n"\
		"80 км/ч\n"\
		"90 км/ч",
		1
	},
	{
		"Чтобы заправиться на заправочной станции надо:",
		"Вызвать механика\n"\
		"Нажать {0099CC}правый Ctrl\n"\
		"Ввести команду {0099CC}/fill\n"\
		"Нажать {0099CC}левый Alt\n"\
		"Нажать {0099CC}Num 2\n"\
		"Ни один из вариантов не подходит",
		5
	},
	{
		"Как включить или выключить двигатель?",
		"Ввести команду {0099CC}/buyfuel\n"\
		"Нажать {0099CC}левый Ctrl\n"\
		"Нажать {0099CC}левый Alt\n"\
		"Ввести команду {0099CC}/start\n"\
		"Нажать {0099CC}Num 2\n"\
		"Все ответы неверны",
		2
	},
	{
		"Что означает \"Fuel: 45\" на панели индикаторов?",
		"Текущая скорость {0099CC}45 км/ч\n"\
		"Уровень повреждений авто {0099CC}45 единиц\n"\
		"Цвет транспорта {0099CC}45\n"\
		"В бензобаке осталось {0099CC}45 литров\n"\
		"Нет правильного ответа",
		4
	},
	{
		"Что можно сделать, чтобы сократить расход бензина?",
		"Выйти из машины\n"\
		"Выключить двигатель\n"\
		"Отключить фары / сигнализацию\n"\
		"Включить ограничитеть скорости\n"\
		"Закрыть машину\n"\
		"Отремонтировать транспорт",
		2
	},
	{
		"Как открыть или закрыть домашнюю машину?",
		"Нажать {0099CC}Num 8\n"\
		"Нажать {0099CC}левый Ctrl\n"\
		"Нажать {0099CC}правый Ctrl\n"\
		"Нажать {0099CC}Num 2\n"\
		"Ввести команду {0099CC}/fill\n"\
		"Ввести команду {0099CC}/buyfuel\n"\
		"Все ответы неверны",
		3
	},
	{
		"При полном бензобаке время работы двигателя?",
		"20 минут\n"\
		"30 минут\n"\
		"40 минут\n"\
		"50 минут\n"\
		"1 час\n"\
		"более 1 часа",
		4
	},
	{
		"Как включить или выключить ограничитель скорости?",
		"Клавишей {0099CC}Num 2\n"\
		"Клавишей {0099CC}Num 4\n"\
		"Клавишей {0099CC}H\n"\
		"Клавишей {0099CC}левый Ctrl\n"\
		"Нет правильных ответов",
		2
	},
	{
		"На панели индикаторов загорелась \"Е\". Что это значит?",
		"Был включен ограничитель скорости\n"\
		"Был открыт капот или багажник\n"\
		"Была включена сигнализация\n"\
		"Низкий уровень бензина в баке\n"\
		"Низкий уровень \"здоровья\" авто\n"\
		"Включены фары",
		4
	},
	{
		"При виде автомобиля с включенной сиреной вы:",
		"Продолжите движение с нормальной скоростью\n"\
		"Продолжите движение снизив скорость\n"\
		"Увеличите скорость\n"\
		"Попытаетесь скрыться\n"\
		"Среди предложенных вариантов нет правильного",
		5
	}
};
new driving_exam_CP; // чепоинт сдачи на права

new g_player_driving_exam[MAX_PLAYERS][E_PLAYER_DRIVING_EXAM_STRUCT];
new g_driving_exam_default_values[E_PLAYER_DRIVING_EXAM_STRUCT] = {-1, ...};

// ------------------------------------------
/*new const
	g_atm[0][E_ATM_STRUCT] =
{
	{-1511.15027, 1636.50964, 36.41260, 90.0},
	{-2464.71216, 2830.91772, 37.48680, 0.0},
	{-2214.18066, 225.81171, 24.06897, -5.7},
	{1602.33472, -249.26440, 3.59900, 90.0},
	{2473.59741, -726.61267, 11.91240, 0.0},
	{1851.37952, 2243.51758, 14.90830, 90.0},
	{1596.67590, 2935.94165, 11.71050, 90.0},
	{-524.22839, -1651.11462, 40.40490, 58.86000}
};*/
new const
	atm_item_sum[7] = {100, 200, 500, 1000, 2000, 5000, 10000};
/*
// ------------------------------------------
enum
{
	GATE_ID_DRIVING_SCHOOL = 0, // автошкола
	GATE_ID_DPS,				// ГИБДД
	GATE_ID_PPS,				// УМВД
	GATE_ID_ARMY,				// воинская часть
}
new
	g_gate[MAX_GATES][E_GATE_STRUCT] =
{
	{"АШ", GATE_TYPE_BARRIER, 1906.5250, 2248.1470, 14.6375, 90.0, 0.0, 0.0, 0.0, 0.0, GATE_STATUS_CLOSE, {966, 968}} //,
	 {"ГИБДД", GATE_TYPE_BARRIER_BUTTON, 214.5169, 1503.8608, 10.9933, 78.1200, 214.5287, 1504.1898, 12.9033, -11.88, GATE_STATUS_CLOSE, {0, 0}},
	{"УМВД", GATE_TYPE_BARRIER_BUTTON, 39.4592, 308.2473, 11.0113, 67.3200, 39.5335, 308.5204, 12.9144, -22.68, GATE_STATUS_CLOSE, {0, 0}}
};
new g_gate_button[MAX_GATES][2];
new g_gate_buttons_count;*/

// ------------------------------------------
new g_bank_account[MAX_PLAYERS][MAX_BANK_ACCOUNTS][E_BANK_ACCOUNT_STRUCT];
new g_player_bank_transfer[MAX_PLAYERS][E_BANK_TRANSFER_STRUCT];

// ------------------------------------------
new g_player_listitem[MAX_PLAYERS][32];
new g_listitem_values[sizeof(g_player_listitem[])] = {0, ...};

new g_player_listitem_use[MAX_PLAYERS] = {-1, ...};
// ------------------------------------------
new g_player_offer[MAX_PLAYERS][E_PLAYER_OFFER_STURCT];
new const
	g_offer_default_values[E_PLAYER_OFFER_STURCT] =
{
	INVALID_PLAYER_ID,	// отправленое предложение игроку
	INVALID_PLAYER_ID, 	// входящее предложение от игрока
	OFFER_TYPE_NONE, 	// входящее предложение
	{-1, -1} 			// значение входящего предложения
};


// ------------------------------------------
new g_player_phone_call[MAX_PLAYERS][E_PHONE_CALL_STRUCT];
new
	g_phone_call_default_values[E_PHONE_CALL_STRUCT] =
{
	INVALID_PLAYER_ID,
	INVALID_PLAYER_ID,
	-1,
	true
};

// ------------------------------------------
new g_player_phone_book[MAX_PLAYERS][MAX_PHONE_BOOK_CONTACTS][E_PHONE_BOOK_STRUCT];

new g_player_phone_book_contacts[MAX_PLAYERS] = {0, ...};
new g_player_phone_book_select_cont[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};

new bool: g_player_phone_book_init[MAX_PLAYERS] = {false, ...};

new bool: g_admin_ears;

new bool: server_restart;

// ------------------------------------------
new g_player_flood[MAX_PLAYERS][E_ANTI_FLOOD_STRUCT];
new const
	g_flood_default_values[E_ANTI_FLOOD_STRUCT] =
{
	0,
	0
};

// ------------------------------------------
new g_bus_routes[4][E_BUS_ROUTE_STRUCT] =
{
	{"Арзамас — Завод",			0, 0},
	{"Арзамас — Шахта", 		0, 0},
	{"Арзамас — Лесопилка", 	0, 0},
	{"Междугородный",			0, 0}
};
new g_bus_routes_list[40 * (sizeof g_bus_routes) + 1];

new g_bus_route[sizeof g_bus_routes][128][E_BUS_ROUTE_STEP_STRUCT] =
{
	{ // Арзамас — Завод
		{804.0963,759.3428,11.5305, false}, // Остановка. Начало
		{807.1755,796.6493,11.5641, false},
		{781.3264,807.5077,11.5999, false},
		{777.8690,819.6682,11.5316, true}, // Остановка. У начала
		{788.4371,866.4033,11.6193, false},
		{783.4990,922.7868,11.6198, false},
		{724.8358,993.2124,11.6059, false},
		{653.1397,1069.6758,11.6175, false},
		{561.9534,1134.0715,11.6187, false},
		{449.6951,1146.5718,11.5336, false},
		{329.1326,1160.0376,11.5335, false},
		{298.2704,1177.5603,11.5327, false},
		{309.5753,1272.1222,25.1132, false},
		{315.7555,1380.6211,25.1481, false},
		{330.3693,1529.8469,11.5333, false},
		{343.0248,1663.2931,11.5401, false},
		{375.4905,1668.9850,11.5333, false},
		{503.5475,1655.0031,11.5790, true}, // Остановка. Ж/Д
		{489.3311,1671.6630,11.5805, false},
		{431.1419,1677.8170,11.5810, false},
		{355.8469,1680.8859,11.5314, false},
		{259.5001,1690.6257,11.5322, false},
		{181.8215,1607.5934,11.5337, false},
		{167.0842,1536.0015,11.5199, false},
		{205.3887,1520.2244,11.5335, false},
		{197.9151,1469.6622,11.5450, true}, // Остановка. ГИБДД
		{190.1873,1427.9275,11.5637, false},
		{163.9051,1426.8372,11.5826, false},
		{122.8895,1341.6932,11.5332, false},
		{96.6886,1215.3988,11.5352, false},
		{57.0523,1018.1173,11.5311, false},
		{27.1411,928.3366,11.5312, true}, // Остановка
		{13.8773,892.2931,11.5308, false},
		{-41.1742,903.9217,11.5342, false},
		{-102.4958,927.5821,11.5341, false},
		{-133.8530,940.9750,11.5408, true}, // Остановка. Диана
		{-183.8621,958.4486,11.5337, false},
		{-306.6450,978.6062,11.5342, false},
		{-371.0784,988.8942,11.5317, false},
		{-372.4652,1165.7811,11.8071, false},
		{-438.3715,1225.9684,17.1975, false},
		{-576.4442,1247.1815,20.2868, false},
		{-705.8118,1352.2239,20.2824, false},
		{-842.2934,1505.1222,23.4898, false},
		{-1079.2939,1587.7079,34.6537, false},
		{-1258.3180,1735.7507,35.0802, false},
		{-1273.3208,1829.1630,47.9041, false},
		{-1116.6130,1916.5510,45.3853, false},
		{-937.7880,1950.7174,45.3854, false},
		{-928.0551,1994.3236,42.8219, false},
		{-1014.0432,2057.9045,39.3367, false},
		{-1050.4742,2141.9661,37.5642, false},
		{-1054.7905,2188.3250,37.6235, true}, // Остановка. Завод
		{-1061.1486,2167.9629,37.5780, false},
		{-1020.0714,2094.6267,41.5694, false},
		{-937.3565,2001.8298,42.3229, false},
		{-937.0294,1956.2084,45.3855, false},
		{-1083.1884,1939.5122,45.3857, false},
		{-1187.5752,1884.4073,45.3857, false},
		{-1277.6946,1835.0138,47.8955, false},
		{-1255.6719,1686.1691,35.0179, false},
		{-1115.2577,1586.8229,35.0175, false},
		{-832.9486,1488.2214,22.4248, false},
		{-716.5996,1343.6909,20.2838, false},
		{-543.3049,1228.0764,20.2832, false},
		{-443.8060,1213.6299,17.1999, false},
		{-385.3225,1078.7760,11.5347, false},
		{-381.1606,987.6623,11.5335, false},
		{-348.7059,964.4541,11.5347, false},
		{-177.1574,940.5574,11.5372, false},
		{86.4576,841.9703,11.5345, false},
		{203.3397,802.2369,11.5338, false},
		{251.4614,863.7733,11.5351, false},
		{293.7149,1139.5114,11.5326, false},
		{379.9212,1146.9272,11.5334, false},
		{490.6891,1136.0294,11.6247, false},
		{579.8975,1121.5365,11.6111, false},
		{681.5302,1036.2469,11.6320, false},
		{772.9662,929.1800,11.6632, false},
		{789.5692,883.0237,11.6275, false},
		{777.8110,808.4282,11.5681, false},
		{803.6309,781.3038,11.5477, false}, // Конец. На начало
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false}
	},
	{ // ЖД Вокзал ЛС — Военный завод
		{785.8178,733.8877,11.5791, false},
		{791.5625,803.0234,11.6428, false},
		{780.6000,820.5082,11.5576, true}, // Остановка
		{782.2230,850.4604,11.6209, false},
		{797.8289,905.1847,11.6307, false},
		{735.5002,980.0391,11.6114, false},
		{668.3276,1057.2330,11.6193, false},
		{628.2550,1090.2228,11.6125, false},
		{558.3439,1134.0463,11.6268, false},
		{460.2363,1145.8254,11.5322, false},
		{312.0343,1162.4246,11.5330, false},
		{298.6253,1186.1451,11.8133, false},
		{311.8743,1304.6932,25.1465, false},
		{319.2766,1420.3534,24.8471, false},
		{328.4369,1513.4751,11.5330, false},
		{339.8739,1631.2836,11.5335, false},
		{361.1027,1670.5613,11.5337, false},
		{499.2119,1655.4762,11.5790, true}, // Остановка. Ж/Д
		{483.3976,1672.8696,11.5811, false},
		{358.6141,1685.3270,11.5333, false},
		{352.4224,1712.0112,11.5332, false},
		{407.0217,1857.8940,10.7249, false},
		{453.1217,2003.7932,5.4445, false},
		{524.8339,2178.4915,11.5330, false},
		{611.4445,2339.9956,11.5314, false},
		{721.7032,2492.1174,11.5331, false},
		{928.3762,2613.5100,11.5328, false},
		{1057.4771,2689.3472,11.5322, false},
		{1087.8593,2705.2639,11.5312, true}, // Остановка. Механики
		{1142.6873,2739.4819,11.5327, false},
		{1256.6520,2791.2935,11.5326, false},
		{1356.3508,2886.7231,11.5327, false},
		{1486.0658,2952.2690,11.5334, false},
		{1692.0784,2952.7112,11.5336, false},
		{1914.5933,2952.6221,11.5322, false},
		{2058.9854,2952.4248,11.8603, false},
		{2069.7026,2919.9446,12.2003, false},
		{1973.4771,2761.8638,14.6938, false},
		{1811.7389,2578.0510,14.7418, false},
		{1772.3623,2473.5608,15.4931, false},
		{1806.0780,2480.2139,15.2224, false},
		{1812.7412,2514.3738,15.1960, true}, // Остановка. МЧС
		{1783.1885,2519.0115,15.1971, false},
		{1759.0511,2495.6106,15.4911, false},
		{1841.2544,2375.0576,15.4712, false},
		{1886.6233,2291.0061,15.4862, false},
		{1885.6765,2241.8660,15.4848, true}, // Остановка. Автошкола
		{1887.0750,2164.2449,15.3981, false},
		{1886.0106,2065.0347,15.4061, false},
		{1918.8690,2052.6516,15.4023, false},
		{1962.1838,2013.8074,15.4443, false},
		{1961.6436,1916.9833,15.0466, false},
		{2003.5902,1903.0016,15.0450, false},
		{2125.3281,1904.3101,15.4286, false},
		{2258.8311,1903.8417,15.4487, false},
		{2357.8098,1907.3590,15.4196, false},
		{2372.2461,1815.7744,3.9887, false},
		{2374.5317,1772.6249,-1.5149, true}, // Остановка. Шахта
		{2378.6646,1806.1595,2.6092, false},
		{2377.6704,1896.5450,14.9163, false},
		{2510.3728,1894.5598,15.7670, false},
		{2658.1067,1894.8307,15.7658, false},
		{2732.9934,1895.0286,15.7915, false},
		{2758.0222,1960.3650,16.5103, false},
		{2765.5271,2139.8530,17.4811, false},
		{2744.9497,2430.8582,15.0301, false},
		{2700.9429,2674.8462,16.2729, false},
		{2651.3350,2814.2864,19.6743, false},
		{2444.3723,2951.4492,22.7301, false},
		{2128.1565,2967.6182,10.9400, false},
		{1806.9750,2968.4924,11.5330, false},
		{1506.0865,2967.6211,11.5317, false},
		{1333.6772,2880.7810,11.5333, false},
		{1216.1221,2792.5459,11.5331, false},
		{895.8690,2610.9192,11.5325, false},
		{649.9877,2442.0422,11.5330, false},
		{475.1823,2114.6855,10.9737, false},
		{390.2416,1851.0229,11.1688, false},
		{320.9989,1534.4823,11.5325, false},
		{296.8673,1243.0820,24.1259, false},
		{328.7727,1152.7751,11.5334, false},
		{543.6455,1130.1685,11.6124, false},
		{643.2175,1071.0590,11.6220, false},
		{737.5670,968.7892,11.6173, false},
		{793.5345,902.0283,11.6005, false},
		{770.5798,836.4699,11.5224, false},
		{791.3061,803.1495,11.6429, false},
		{801.8435,770.3690,11.5319, true}, // Остановка. На начало
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false}
	},
	{ // ЖД Вокзал ЛС — Товарный порт
		{780.4178,727.2006,11.6021, false},
		{798.3979,800.8493,11.6381, false},
		{780.1346,821.4786,11.5538, true}, // Остановка.
		{797.7029,888.6456,11.6051, false},
		{673.8666,1050.9592,11.6403, false},
		{573.7012,1132.0703,11.6548, false},
		{309.1552,1161.7903,11.5405, false},
		{306.6163,1246.9374,24.7787, false},
		{317.6702,1398.3157,25.1483, false},
		{336.0221,1584.2373,11.5332, false},
		{391.7831,1667.9263,11.5810, false},
		{501.4952,1654.9908,11.5792, true}, // Остановка. Ж/Д
		{467.4220,1669.4408,11.5811, false},
		{357.7765,1680.7673,11.5335, false},
		{266.1915,1690.1921,11.5330, false},
		{170.3249,1547.4205,11.5339, false},
		{93.1306,1169.7964,11.5354, false},
		{49.4706,984.1645,11.5333, false},
		{28.5538,931.5492,11.5411, true}, // Остановка.
		{19.1627,890.9694,11.5343, false},
		{96.5565,836.9958,11.5344, false},
		{192.6803,801.1299,11.5343, false},
		{178.9009,713.8533,11.5345, false},
		{122.1390,555.6907,11.5334, false},
		{154.6347,516.4274,11.5359, false},
		{233.3019,485.1019,11.5314, true}, // Остановка.
		{374.0205,431.1635,13.1213, false},
		{530.7493,376.7204,24.7750, false},
		{616.2057,143.1509,24.8471, false},
		{632.8180,-108.0908,13.5322, false},
		{684.5417,-176.1120,3.8981, false},
		{939.5273,-173.5067,3.8265, false},
		{1131.1257,-172.2897,3.8225, false},
		{1297.7870,-220.1640,3.8427, false},
		{1642.6250,-225.6595,3.7952, true}, // Остановка. МЧС
		{1785.7213,-224.0345,3.8294, false},
		{1793.1658,-281.3170,3.8178, false},
		{1857.9297,-312.3727,12.8249, false},
		{2039.8502,-329.4668,16.5561, false},
		{2111.2561,-488.9375,16.5540, false},
		{2121.5532,-652.9269,16.5321, false},
		{2139.5938,-802.5333,14.3969, false},
		{2182.0945,-811.3425,14.4699, false},
		{2386.7263,-798.0540,12.3403, false},
		{2400.5815,-755.9683,11.8368, false},
		{2427.1692,-617.4779,11.9096, true}, // Остановка. Лесорубы
		{2395.2302,-647.2762,11.8409, false},
		{2394.9399,-773.0400,11.8373, false},
		{2324.7573,-790.0723,12.6925, false},
		{2171.1777,-804.1882,14.3471, false},
		{2138.3821,-757.6460,14.4885, false},
		{2132.2083,-561.0246,16.5556, false},
		{2092.4204,-376.5380,16.5570, false},
		{1896.9425,-297.6446,16.5329, false},
		{1799.3170,-281.2733,3.8201, false},
		{1769.4387,-218.6841,3.8279, false},
		{1529.4707,-218.4079,3.8221, false},
		{1208.8314,-189.7240,3.8389, false},
		{884.9227,-168.7566,3.8019, false},
		{694.2114,-160.4446,3.8801, false},
		{647.6750,-98.5738,14.9823, false},
		{638.9136,85.5042,26.2247, false},
		{585.8060,358.9880,24.7759, false},
		{467.1305,413.2276,24.7821, false},
		{199.2020,514.2813,11.5329, false},
		{138.2974,538.3425,11.5330, false},
		{139.1546,572.7580,11.5344, false},
		{149.9627,595.9069,11.5312, true}, // Остановка
		{171.7104,657.4917,11.5327, false},
		{236.5534,826.3988,11.5343, false},
		{277.9897,997.0731,11.7726, false},
		{293.8099,1139.3777,11.5327, false},
		{391.7524,1145.9104,11.5334, false},
		{565.0103,1128.1143,11.6137, false},
		{662.4227,1054.6722,11.6063, false},
		{771.2302,930.1013,11.6353, false},
		{789.8817,885.7687,11.6138, false},
		{788.1815,804.4682,11.6427, false},
		{791.0405,758.6101,11.5322, true}, // Остановка. В конец
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false}
	},
	{ // ЖД Вокзал ЛС — Автошкола
		{787.9899,737.3123,11.5710, false},
		{793.3630,802.1804,11.6428, false},
		{780.4693,821.8019,11.5442, true}, // Остановка
		{798.4664,891.6359,11.6129, false},
		{777.0601,930.0786,11.6229, false},
		{676.1186,1049.5214,11.6240, false},
		{579.9954,1128.9869,11.6161, false},
		{312.6412,1161.5272,11.5302, false},
		{305.7333,1242.8467,24.1905, false},
		{328.4750,1513.5687,11.5329, false},
		{342.3961,1660.9371,11.5325, false},
		{513.0868,1695.3979,11.5476, true}, // Остановка. Ж/Д Арзамас
		{481.3032,1673.3887,11.5806, false},
		{357.2000,1685.8246,11.5335, false},
		{398.0929,1833.5394,11.4720, false},
		{493.0337,2119.4668,11.2766, false},
		{665.3842,2440.8296,11.5328, false},
		{1040.7347,2679.5566,11.5327, false},
		{1084.5813,2703.6069,11.5290, true}, // Остановка. Механики
		{1178.5232,2759.8821,11.5312, false},
		{1367.8978,2902.7573,11.5328, false},
		{1617.1583,2952.2393,11.5329, false},
		{2010.3989,2952.2800,12.0703, false},
		{2070.5879,2924.1306,12.0026, false},
		{1760.0981,2546.4333,14.7490, false},
		{1767.3916,2483.2244,15.4942, false},
		{1806.6837,2479.9934,15.2230, false},
		{1814.6934,2512.1545,15.1823, true}, // Остановка. Автовокзал Батырево
		{1766.5570,2509.9673,15.2375, false},
		{1803.5001,2430.9045,15.4893, false},
		{1885.8512,2243.0408,15.4826, true}, // Остановка. Автошкола
		{1886.0441,2065.9612,15.4069, false},
		{1957.3859,2043.8644,15.4010, false},
		{1962.4486,1914.6210,15.0558, false},
		{2039.8900,1904.8533,15.4537, false},
		{2285.5439,1904.1499,15.4653, false},
		{2374.9858,1770.2043,-1.6893, true}, // Остановка. Шахта
		{2378.3889,1806.2183,2.6175, false},
		{2371.7773,1891.0868,15.3369, false},
		{2502.8794,1893.8397,15.7669, false},
		{2732.8333,1895.5476,15.7916, false},
		{2731.6873,1778.2247,15.3588, false},
		{2554.7383,1502.4097,11.8261, false},
		{2680.1140,1131.4674,19.4727, false},
		{2850.3950,739.0171,31.4996, false},
		{2898.8374,230.6370,12.1628, false},
		{2897.7466,-158.5092,24.1596, false},
		{2822.4792,-355.3473,26.3462, false},
		{2765.8787,-442.3799,23.0099, true}, // Остановка. У Гарели
		{2740.4727,-561.4509,23.2926, false},
		{2605.1946,-727.5572,12.4791, false},
		{2471.5764,-784.3000,11.8714, true}, // Остановка. Анашан
		{2267.1509,-792.5616,13.1236, false},
		{2052.6919,-832.4374,15.3386, false},
		{1836.0454,-952.8130,13.6815, false},
		{1745.2719,-978.0508,11.8243, false},
		{1706.8506,-814.2382,34.0767, false},
		{1557.1355,-687.5613,40.8769, false},
		{1270.7510,-635.9218,40.8940, false},
		{946.0969,-740.0735,40.4627, false},
		{832.7188,-774.3143,40.0398, true}, // Остановка. Корякино
		{568.1791,-858.9227,32.6240, false},
		{155.3385,-988.5547,40.4751, false},
		{-200.0290,-1185.5417,40.4756, false},
		{-439.1202,-1582.6089,40.4808, false},
		{-476.0527,-1640.8954,40.4473, true}, // Остановка. Бусаево
		{-601.8219,-1867.0111,40.4838, false},
		{-733.5305,-2230.3132,40.9539, false},
		{-734.6354,-2363.3152,38.6685, false},
		{-969.1361,-2421.0542,30.9774, false},
		{-1169.9259,-2478.7441,28.0161, false},
		{-1290.1781,-2505.9141,28.0137, false},
		{-1559.1868,-2374.3394,28.2283, false},
		{-1947.1075,-2117.1072,16.4737, false},
		{-2244.3979,-1747.0317,10.1017, false},
		{-2469.0754,-1417.8335,9.4151, false},
		{-2603.2778,-1275.6914,8.7736, false},
		{-2590.4954,-1160.1410,16.6581, false},
		{-2589.7524,-823.7059,29.2303, false},
		{-2637.9370,-410.8065,24.6845, false},
		{-2654.8884,-54.1762,10.4663, false},
		{-2658.8003,197.2989,10.4648, false},
		{-2564.9153,231.0769,12.3016, false},
		{-2397.9492,232.0039,16.8059, false},
		{-2259.1260,215.5012,24.0472, false},
		{-2212.2849,193.4742,24.0604, true}, // Остановка. Лыткарино
		{-2263.0046,224.2567,23.9677, false},
		{-2560.5115,237.5524,12.4220, false},
		{-2647.8083,269.1061,12.8730, false},
		{-2630.2310,639.0733,12.8736, false},
		{-2641.8301,880.2888,12.8752, false},
		{-2654.6033,1092.2378,12.8751, false},
		{-2497.8696,1262.8240,14.4634, false},
		{-2341.2803,1700.3708,52.5478, false},
		{-2387.7502,1777.2646,52.5545, true}, // Остановка. Кремль
		{-2565.1953,1895.2128,52.5480, false},
		{-2626.2312,2000.1528,52.5475, false},
		{-2609.6714,2299.9053,52.5271, false},
		{-2440.1873,2476.7908,42.8585, false},
		{-2373.6965,2561.7986,42.0734, false},
		{-2373.8145,2746.8027,36.9760, false},
		{-2458.7029,2815.8057,36.9642, false},
		{-2488.0146,2825.8862,37.1673, false},
		{-2477.0903,2836.7332,37.1635, true}, // Остановка. Эдово
		{-2511.1621,2822.4543,36.9658, false},
		{-2386.0806,2811.4109,36.9635, false},
		{-2379.3640,2596.0176,42.0872, false},
		{-2345.0049,2512.1946,42.2063, false},
		{-2110.6428,2492.1580,39.2072, false},
		{-1828.6377,2491.4763,48.3243, false},
		{-1653.6299,2496.0674,42.434, false},
		{-1477.2354,2388.6394,43.9515, false},
		{-1393.5088,2207.4861,45.1462, false},
		{-1308.1812,1877.5199,42.4691, false},
		{-1210.6033,1619.9750,35.0147, true}, // Остановка
		{-951.2002,1530.2247,28.9315, false},
		{-714.3251,1339.3547,20.2827, false},
		{-543.6758,1228.1691,20.2812, false},
		{-386.0414,1155.8013,11.5202, false},
		{-381.0251,988.7273,11.5319, false},
		{-283.9621,968.2222,11.5340, false},
		{3.8998,878.4814,11.5407, false},
		{374.4273,736.4326,11.5336, false},
		{518.6818,681.0500,11.5329, false},
		{709.2870,653.0804,11.5337, false},
		{787.5905,804.1089,11.6397, false},
		{796.8284,755.3444,11.5307, true}, // Остановка. На начало
		{0.0, 0.0, 0.0, false}
	}
};

// ------------------------------------------
new g_temp_jobs[5][E_TEMP_JOB_STRUCT] =
{
	{617.3452,1665.7614,12.0710, 		100000,	{27, 157}},  	// грузчик
	{547.3035,492.1857,998.7578, 		1000,	{16, 157}},  	// шахтер
	{-1088.2688, 2167.4514, 38.0373, 	100000,	{16, 157}}, 	// завод (служба доставки)
	{-1063.6638,2208.5696,38.0952, 		100000,	{258, 157}},  	// завод
	{2268.8354,506.1029,16.7323, 	100000,{161, 157}}		// лесоруб
};

// ---------------------------------------
new const
	Float: loader_job_unload_cp[1][3] = // позиции разгрузки (грузчик)
{
	{622.3066,1664.1621,12.1726}
};

//new g_skin_donate[22] = {62,30,58,29,81,299,289,295,292,82,273,240,259,258,248,236,221,223,204,8,33,23};

new const
	Float: loader_get_cp[6][3] = // позиции загрузки (грузчик)
{
    {598.3508, 1623.3436, 12.0788},
	{586.1584, 1619.3082, 12.0788},
	{598.3497, 1599.8641, 12.0788},
	{586.1585, 1599.7047, 12.0788},
	{586.1581, 1646.9740, 12.0788},
	{598.3505, 1650.8558, 12.0788}
};

/*new const
    loader_job_attach_obj[3][E_LOADER_JOB_ATTACH_OBJ_STRUCT] = // грузы (аттач) (грузчик)
{
    {2912,  -0.192, 0.225,  -0.295,     -15.5,  78.3,   -6.3},
    {2912,  -0.192, 0.225,  -0.295,     -15.5,  78.3,   -6.3},
    {2912,  -0.035, 0.156,  -0.246,     -112.4, -1.1,   -12.4}
};*/


// ---------------------------------------
new const
	Float: miner_job_load_pos[7][3] = // позиции загрузки (шахтер)
{
	{571.3219,564.4913,999.4324},
	{549.5953,572.4483,999.6491},
	{546.2889,562.7280,999.4429},
	{563.6879,572.1982,999.5966},
	{560.5733,574.1584,1001.2046},
	{546.8384,559.9129,999.0386},
	{572.1130,560.8156,999.3467}
};

new const
	Float: miner_job_chop_cp[7][3] = // позиции загрузки (шахтер)
{
	{571.3219,564.4913,999.4324},
	{549.5953,572.4483,999.6491},
	{546.2889,562.7280,999.4429},
	{563.6879,572.1982,999.5966},
	{560.5733,574.1584,1001.2046},
	{546.8384,559.9129,999.0386},
	{572.1130,560.8156,999.3467}
};

//new miner_job_load_cp[sizeof miner_job_load_pos] = {-1, ...};
new miner_carriage[1][E_MINER_CARRIAGE_STRUCT] =
{
	{-2375.1228, 294.7194, -15.4815, -2548.1228, 294.7194, -15.4815, false, 0, -1}
};
new miner_job_area; // зона шахты (шахтер)

// ---------------------------------------
new Text3D: factory_store_label[2];

new factory_job_area;
new factory_put_zone;
new
	Float: factory_take_metall_pos[14][3] =
{
	{8.5082,8.2146,1380.9985},
	{0.8614,8.2154,1380.9985},
	{-5.5999,8.2160,1380.9985},
	{-12.1685,8.2158,1380.9985},
	{-18.6312,8.2158,1380.9985},
	{-25.1918,8.2160,1380.9985},
	{-31.8010,8.2156,1380.9985},
	{-31.8547,-4.2555,1380.9985},
	{-25.2927,-4.2556,1380.9985},
	{-18.7336,-4.2551,1380.9985},
	{-12.2371,-4.2557,1380.9985},
	{-5.5854,-4.2554,1380.9985},
	{0.8263,-4.2553,1380.9985},
	{6.9856,-4.2556,1380.9985}
};

new
	Float: factory_put_metall_pos[2][3] =
{
	{6.5996,1.1691,1380.9985},
	{5.1219,2.0442,1380.9985}
};
new factory_desk[16][E_FACTORY_DESK_STRUCT];

// ---------------------------------------
new const
	Float: lumberjack_job_chop_cp[5][3] =
{
	{2304.8523,482.4505,16.3201},
	{2283.2234,476.2262,17.5957},
	{2298.9263,523.8738,19.9927},
	{2290.5212,543.8743,24.2620},
	{2275.5784,533.1171,21.7402}
};

// ------------------------------------------
new Cache: charity_cache_data; 	// кэш пожертвований
new g_last_pay_day_time; 		// время последнего пейдея
new g_last_lottery_time; 		// время последнего розыгрыша лотереи
new g_last_m_timer_time;		// время последнего 1-мин таймера

// ------------------------------------------
new const
	numeric_name[7][11] =
{
	"первого",
	"второго",
	"третьего",
	"четвертого",
	"пятого",
	"шестого",
	"седьмого"
};

new const
	job_name[5][18] =
{
	"Безработный",
	"Водитель автобуса",
	"Таксист",
	"Автомеханик",
	"Дальнобойщик"
};

new const
	month_name[12][8 + 1] =
{
	"января",
	"февраля",
	"марта",
	"апреля",
	"мая",
	"июня",
	"июля",
	"августа",
	"сентября",
	"октября",
	"ноября",
	"декабря"
};

new const
	day_name[7][12] =
{
	"Понедельник",
	"Вторник",
	"Среда",
	"Четверг",
	"Пятница",
	"Суббота",
	"Воскресенье"
};



new army_ammo_CP; // взятие патронов со склада воинской части
// ------------------------------------------
new const
	g_item_type[7][E_ITEM_STRUCT] =
{
	{"Error",		"ххх", 	false},
	{"Деньги", 		"руб", 	true},
	{"Канистра", 	"л", 	false},
	{"Аптечка", 	"шт", 	true},
	{"Металл", 		"кг", 	true},
	{"Патроны", 	"шт", 	true},
	{"Наркотики", 	"г", 	true}
};

enum // типы предметов
{
	ITEM_TYPE_NONE = 0,	// пустой слот
	ITEM_TYPE_MONEY = 1, // деньги
	ITEM_TYPE_JERRICAN, // канистра
	ITEM_TYPE_MED, // аптечка
	ITEM_TYPE_METALL, // металл
	ITEM_TYPE_AMMO,	// патроны
	ITEM_TYPE_DRUGS, // наркотики
}

// ------------------------------------------
new const
	g_player_improvements[5][E_IMPROVEMENTS_STRUCT] =
{
	{"Выносливость", 	50_000, 	5},
	{"Решительность", 	75_000, 	8},
	{"Рюкзак", 			100_000, 	11},
	{"Мастер вождения", 125_000, 	15},
	{"Полная экипировка",150_000, 	17}
};

new chat_message[5][128 + 1];
new const
	reg_skin_data[2][14] = // скины при регистрации
{
	{78, 79, 132, 134, 135, 136, 137, 200, 212, 213, 230, 160, 0, 0}, // мужские
	{10, 13, 31, 39, 54, 77, 129, 130, 151, 157, 196, 197, 198, 218} // женские
};

new const
	Float: spawn_pos_data[4][4] = // позиции спавнов
{
	{-113.0001, 982.4062, 12.0187, 177.2918},	// Арзамас
	{1800.0198,2503.1201,15.8954, 301.1071},	// Батырево
	{1798.7599,2512.2896,15.8888, 301.2918},	// Батырево
	{-113.0001, 982.4062, 12.0187, 177.2918}	// Арзамас
};

// headers
#include "../gamemodes/modules/core/admin/headers.inc"
#include "../gamemodes/modules/core/vehicle/auto-race/headers.inc"

// callbacks
#include "../gamemodes/modules/core/admin/callbacks.pwn"
#include "../gamemodes/modules/core/vehicle/auto-race/callbacks.pwn"

// functions
#include "../gamemodes/modules/core/vehicle/auto-race/functions.pwn"

// commands
#include "../gamemodes/modules/core/admin/commands.pwn"

// dialogs
#include "../gamemodes/modules/core/admin/dialogs.pwn"
#include "../gamemodes/modules/core/vehicle/auto-race/dialogs.pwn"

stock GetSkillBar(amount)
{
	new tmp_bar[101];
	if(!amount) return tmp_bar;
 	for(new i = 0; i < amount; i++)
		strcat(tmp_bar, "|");

 	return tmp_bar;
}

stock ShowPlayerSkills(playerid, to_player = -1)
{
	if(to_player < 0)
		to_player = playerid;

	new tmp_skills[1560];
	format
	(
	    tmp_skills,
	    sizeof(tmp_skills),
	    "Сила\t\t%d%s\t%s\n\
	    {99ff66}\
		Colt 45\t\t%d%s\t%s\n\
		SD Pistol\t%d%s\t%s\n\
	    Desert Eagle\t%d%s\t%s\n\
	    Shotgun\t%d%s\t%s\n\
	    MP5\t\t%d%s\t%s\n\
	    AK47\t\t%d%s\t%s\n\
	    M4\t\t%d%s\t%s\n\
	    Sniper Rifle\t%d%s\t%s\n\
		Sawnoff\t%d%s\t%s\n\
		Combat SG\t%d%s\t%s\n\
		Micro Uzi\t%d%s\t%s\
	    ",
	    GetPlayerData(playerid, P_POWER), "%",
	    GetSkillBar(GetPlayerData(playerid, P_POWER)),
	    GetPlayerData(playerid, P_SKILL_COLT), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_COLT)),
		GetPlayerData(playerid, P_SKILL_SDPISTOL), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_SDPISTOL)),
		GetPlayerData(playerid, P_SKILL_DEAGLE), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_DEAGLE)),
		GetPlayerData(playerid, P_SKILL_SHOTGUN), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_SHOTGUN)),
		GetPlayerData(playerid, P_SKILL_MP5), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_MP5)),
		GetPlayerData(playerid, P_SKILL_AK47), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_AK47)),
		GetPlayerData(playerid, P_SKILL_M4), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_M4)),
		GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE)),
		GetPlayerData(playerid, P_SKILL_SAWNOFF), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_SAWNOFF)),
		GetPlayerData(playerid, P_SKILL_COMBAT_SG), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_COMBAT_SG)),
		GetPlayerData(playerid, P_SKILL_MICRO_UZI), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_MICRO_UZI))
	);
	Dialog(to_player, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFCC00}Навыки владения оружием", tmp_skills, "Закрыть", "");

	return 1;
}

stock GetPlayerSkillAmount(playerid, skill_index)
{
	new amount;

	switch(skill_index)
	{
		case 0: amount = GetPlayerData(playerid, P_POWER);
		case 1: amount = GetPlayerData(playerid, P_SKILL_COLT);
		case 2: amount = GetPlayerData(playerid, P_SKILL_SDPISTOL);
		case 3: amount = GetPlayerData(playerid, P_SKILL_DEAGLE);
		case 4: amount = GetPlayerData(playerid, P_SKILL_SHOTGUN);
		case 5: amount = GetPlayerData(playerid, P_SKILL_MP5);
		case 6: amount = GetPlayerData(playerid, P_SKILL_AK47);
		case 7: amount = GetPlayerData(playerid, P_SKILL_M4);
		case 8: amount = GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE);
		case 9: amount = GetPlayerData(playerid, P_SKILL_SAWNOFF);
		case 10: amount = GetPlayerData(playerid, P_SKILL_COMBAT_SG);
		case 11: amount = GetPlayerData(playerid, P_SKILL_MICRO_UZI);
	}

	return amount;
}

stock SetPlayerSkillAmount(playerid, skill_index, amount)
{
	switch(skill_index)
	{
		case 0: SetPlayerData(playerid, P_POWER, amount);
		case 1: SetPlayerData(playerid, P_SKILL_COLT, amount);
		case 2: SetPlayerData(playerid, P_SKILL_SDPISTOL, amount);
		case 3: SetPlayerData(playerid, P_SKILL_DEAGLE, amount);
		case 4: SetPlayerData(playerid, P_SKILL_SHOTGUN, amount);
		case 5: SetPlayerData(playerid, P_SKILL_MP5, amount);
		case 6: SetPlayerData(playerid, P_SKILL_AK47, amount);
		case 7: SetPlayerData(playerid, P_SKILL_M4, amount);
		case 8: SetPlayerData(playerid, P_SKILL_SNIPER_RIFLE, amount);
		case 9: SetPlayerData(playerid, P_SKILL_SAWNOFF, amount);
		case 10: SetPlayerData(playerid, P_SKILL_COMBAT_SG, amount);
		case 11: SetPlayerData(playerid, P_SKILL_MICRO_UZI, amount);
	}

	return 1;
}

stock ShowTeleportList(playerid)
{
	new list_text[34 * (sizeof g_teleport_list)];
	new dest[36];

	for(new i; i < sizeof g_teleport_list; i ++)
	{
		format(dest, sizeof dest, "%d. %s\n", i + 1, GetTeleportListData(i, TL_NAME));
		strcat(list_text, dest);
	}

	Dialog(playerid, DIALOG_TELEPORT_LIST, DIALOG_STYLE_LIST, "{ffcd00}Телепорт лист", list_text, "Выбрать", "Выход");
	return 1;
}

stock CreateTicket(playerid, amount, issuer[], description[])
{
	new query[190];

	mysql_format(mysql, query, sizeof query, "INSERT INTO tickets (uid, amount, issuer, description) VALUES (%d, %d, '%s', '%s')",
	GetPlayerAccountID(playerid), amount, issuer, description);
	mysql_query(mysql, query, false);

	return 1;
}

stock PayTicket(playerid, ticketid)
{
	new query[90],
		Cache: result,
		rows;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM tickets WHERE id=%d LIMIT 1", ticketid);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	new uid = cache_get_field_content_int(0, "uid"),
		amount = cache_get_field_content_int(0, "amount"),
		status = cache_get_field_content_int(0, "status"),
		desc[64];

	cache_get_field_content(0, "description", desc);

	cache_delete(result);

	if(!rows)
		return SendClientMessage(playerid, 0xCECECEFF, "Данный штраф не найден");

	if(uid != GetPlayerAccountID(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Данный штраф выписан не Вам");

	if(status)
		return SendClientMessage(playerid, 0xCECECEFF, "Данный штраф уже оплачен");

	if(GetPlayerBankMoney(playerid) < amount)
		return SendClientMessage(playerid, 0x999999FF, "Недостаточно средств на основном банковском счету для оплаты штрафа");

	GivePlayerMoneyEx(playerid, -amount, "Оплата штрафа", true, true);

	mysql_format(mysql, query, sizeof query, "UPDATE tickets SET status=1 WHERE id=%d", ticketid);
	mysql_query(mysql, query, false);

	format(query, sizeof query, "Вы оплатили штраф №%d (%s)", ticketid, desc);
	SendClientMessage(playerid, 0x66CC33FF, query);

	return 1;
}

/*stock CreateRadar(playerid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, Float:zone_x, Float:zone_y, Float:zone_z, limit, modelid)
{
	new radar_id = g_radars_created;

	SetRadarData(radar_id, R_OBJECT, CreateDynamicObject(modelid, x, y, z, rx, ry, rz));

	SetRadarData(radar_id, R_ZONE, CreateDynamicSphere(zone_x, zone_y, zone_z, 40.0));

	new fmt_text[110];

	format(fmt_text, sizeof fmt_text, "- Регистратор скорости №%d -\n\n{FFFFFF}Ограничение: %d км/ч\n{888888}Установил: %s", radar_id, limit, GetPlayerNameEx(playerid));

	SetRadarData(radar_id, R_LABEL, CreateDynamic3DTextLabel(fmt_text, 0x3399FFFF, x, y, z + 3.0, 50.0));

	SetRadarData(radar_id, R_POS_X, x);
	SetRadarData(radar_id, R_POS_Y, y);
	SetRadarData(radar_id, R_POS_Z, z);
	SetRadarData(radar_id, R_POS_RX, rx);
	SetRadarData(radar_id, R_POS_RY, ry);
	SetRadarData(radar_id, R_POS_RZ, rz);
	SetRadarData(radar_id, R_ZONE_X, zone_x);
	SetRadarData(radar_id, R_ZONE_Y, zone_y);
	SetRadarData(radar_id, R_ZONE_Z, zone_z);

	SetRadarData(radar_id, R_LIMIT, limit);

	g_radars_created ++;

	return 1;
}

stock RemoveRadar(radar_id)
{
	DestroyDynamic3DTextLabel(GetRadarData(radar_id, R_LABEL));

	DestroyDynamicArea(GetRadarData(radar_id, R_ZONE));

	DestroyDynamicObject(GetRadarData(radar_id, R_OBJECT));

	g_radar[radar_id] = g_radar_default_values;

	if(radar_id == g_radars_created - 1 && radar_id != 0)
		g_radars_created --;

	return 1;
}

stock CheckRadars(playerid)
{
	new Float: speed = GetPlayerSpeed(playerid);

	for(new idx; idx < g_radars_created; idx ++)
	{
		if(!IsValidDynamicObject(GetRadarData(idx, R_OBJECT))) continue;
		if(GetPVarInt(playerid, "radar_detected") > gettime()) continue;

		if(IsPlayerInRangeOfPoint(playerid, 40.0, GetRadarData(idx, R_POS_X), GetRadarData(idx, R_POS_Y), GetRadarData(idx, R_POS_Z)))
		{
			if(speed > (GetRadarData(idx, R_LIMIT) + 20))
			{
				new fmt_text[35],
					excess;

				excess = floatround(speed) - GetRadarData(idx, R_LIMIT);

				format(fmt_text, sizeof fmt_text, "Превышение скорости на %d км/ч", excess);

				CreateTicket(playerid, excess * 200, "Регистратор скорости", fmt_text);

				GameTextForPlayer(playerid, "~w~ЊPE‹‘ЋE®…E CKOPOC¦…~n~~r~‹‘ OЋ¦PAЃO‹A®‘", 4000, 3);

				SetPVarInt(playerid, "radar_detected", gettime() + 5);

				break;
			}
		}
	}
	return 1;
}*/

stock SendAdvert(playerid, message[])
{
	new ad_id = g_advert_created;

	if (g_advert_created >= MAX_ADVERTS) return 1;

	SetAdvertData(ad_id, A_CREATOR, 	playerid);
	SetAdvertData(ad_id, A_EDIT, 		false);

	format(g_advert[ad_id][A_TEXT], 128, message);

	g_advert_created ++;

	return 1;
}

stock DeleteAdvert(ad_id)
{
	if(!(0 <= ad_id <= g_advert_created - 1)) return 0;

	SetAdvertData(ad_id, A_CREATOR, 	INVALID_PLAYER_ID);
	SetAdvertData(ad_id, A_EDIT, 		false);

	format(g_advert[ad_id][A_TEXT], 128, "");

	if(ad_id == g_advert_created - 1 && ad_id != 0)
		g_advert_created --;

	return 1;
}

stock UpdateReporterText()
{
	new count,
		fmt_text[15];

	for(new idx; idx < g_advert_created; idx ++)
	{
		if(GetAdvertData(idx, A_EDIT) || GetAdvertData(idx, A_CREATOR) == INVALID_PLAYER_ID) continue;

		count ++;
	}

	format(fmt_text, sizeof fmt_text, "%d~n~Edit", count);

	TextDrawSetString(radio_edit_TD, fmt_text);
}

stock GetAdvertIndexInQueue(ad_id)
{
	new index;

	for(new idx; idx < g_advert_created; idx ++)
	{
		if(GetAdvertData(idx, A_EDIT) || GetAdvertData(idx, A_CREATOR) == INVALID_PLAYER_ID) continue;

		index ++;

		if(idx != ad_id) continue;
	}

	return index;
}

stock SendLog(playerid = INVALID_PLAYER_ID, type, desc[])
{
	new fmt_log[700];

	mysql_format(mysql, fmt_log, sizeof fmt_log, "INSERT INTO action_log (acc_id, uip, type, description, time) VALUES (%d, '%s', %d, '%s', %d)",
	GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), type, desc, gettime());

	mysql_query(mysql, fmt_log, false);

	return 1;
}

stock GetTruckIndex(vehicleid)
{
	if(GetVehicleModel(vehicleid) == 609)
		return 0;

	else if(GetVehicleModel(vehicleid) == 514 || GetVehicleModel(vehicleid) == 584)
		return 1;

	else
		return -1;
}

stock StartSpectate(playerid, for_player)
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;

	SetPlayerSpectateData(playerid, S_PLAYER, for_player);

	SetPlayerInterior(playerid, GetPlayerInterior(for_player));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(for_player));

	TogglePlayerSpectating(playerid, true);

	if(IsPlayerInAnyVehicle(for_player))
	{
		PlayerSpectateVehicle(playerid, GetPlayerVehicleID(for_player));
		//ShowSpeedometrTD(playerid);
	}
	else PlayerSpectatePlayer(playerid, for_player);

//	ShowMenuForPlayer(admin_spec_menu, playerid);

	return 1;
}

stock StopSpectate(playerid)
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;
	if(GetPlayerSpectateData(playerid, S_PLAYER) == -1) return 1;

	TogglePlayerSpectating(playerid, false);

	SetPlayerSpectateData(playerid, S_PLAYER, -1);

	SetPlayerPosEx
	(
		playerid,
		GetPlayerSpectateData(playerid, S_START_POS_X),
		GetPlayerSpectateData(playerid, S_START_POS_Y),
		GetPlayerSpectateData(playerid, S_START_POS_Z),
		GetPlayerSpectateData(playerid, S_START_ANGLE),
		GetPlayerSpectateData(playerid, S_START_INTERIOR),
		GetPlayerSpectateData(playerid, S_START_VIRTUAL_WORLD)
	);

	return 1;
}

stock UpdateSpectate(playerid, disconnect)
{
	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(GetPlayerAdminEx(i) < 1) continue;
		else if(GetPlayerSpectateData(i, S_PLAYER) != playerid) continue;

		if(disconnect)
		{
			StopSpectate(i);
			GameTextForPlayer(i, "~r~~h~player disconnect", 4000, 4);
		}
		else if(IsPlayerInAnyVehicle(playerid))
		{
			PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
			//ShowSpeedometrTD(playerid);
		}
		else
		{
			//HideSpeedometrTD(playerid);
			PlayerSpectatePlayer(i, playerid);
		}
	}
	return 1;
}

// ---------------------------------------------------------------
/*enum E_TRAIN_OBJECTS_INFO
{
	T_OBJECT,
	Float: T_POS_X,
	Float: T_POS_Y,
	Float: T_POS_Z,
	Float: T_ROT_X,
	Float: T_ROT_Y,
	Float: T_ROT_Z,
	T_OBJECT_ID
}

new train_objects[15][E_TRAIN_OBJECTS_INFO] =
{
	{1769, 558.75458, 1771.26550, 12.45800,   0.00000, 0.00000, -4.26000, INVALID_OBJECT_ID},
	{1769, 557.51489, 1754.38770, 12.45800,   0.00000, 0.00000, -4.26000, INVALID_OBJECT_ID},
	{2934, 557.27173, 1752.08313, 14.36110,   0.00000, 0.00000, -5.10000, INVALID_OBJECT_ID},
	{2935, 559.06830, 1774.86462, 14.36110,   0.00000, 0.00000, -3.18000, INVALID_OBJECT_ID},
	{1370, 557.60419, 1770.64502, 13.48950,   0.00000, 0.00000, 0.00000, INVALID_OBJECT_ID},
	{1370, 558.73236, 1770.93896, 13.48950,   0.00000, 0.00000, 56.04002, INVALID_OBJECT_ID},
	{1370, 559.54633, 1770.07764, 13.26950,   0.00000, 90.00000, -36.30000, INVALID_OBJECT_ID},
	{2912, 558.38721, 1769.75452, 12.93200,   0.00000, 0.00000, 19.38000, INVALID_OBJECT_ID},
	{2912, 559.55310, 1769.51257, 13.29200,   90.00000, 0.00000, -1.86000, INVALID_OBJECT_ID},
	{1370, 559.12701, 1761.32288, 13.48950,   0.00000, 0.00000, 0.00000, INVALID_OBJECT_ID},
	{1370, 559.42535, 1760.47961, 13.48950,   0.00000, 0.00000, 77.16001, INVALID_OBJECT_ID},
	{1370, 556.47595, 1756.37244, 13.48950,   0.00000, 0.00000, 172.44000, INVALID_OBJECT_ID},
	{2912, 558.76776, 1756.21375, 12.93200,   0.00000, 0.00000, -24.48000, INVALID_OBJECT_ID},
	{2912, 558.87836, 1757.43701, 12.93200,   0.00000, 0.00000, 40.14000, INVALID_OBJECT_ID},
	{2912, 558.30292, 1761.36475, 12.93200,   0.00000, 0.00000, 40.14000, INVALID_OBJECT_ID}
};

new bool: train_objects_status;

const Float: TRAIN_MOVE_SPEED = 3.5;*/

// ---------------------------------------------------------------

new const
	weapon_names[47][30] =
{
	"Пусто",
	"Кастет",
	"Клюшка для гольфа",
	"Дубинка",
	"Нож",
	"Бита",
	"Лопата",
	"Кий",
	"Катана",
	"Бензопила",
	"Фиолетовый дилдо",
	"Дилдо",
	"Вибратор",
	"Серебряный вибратор",
	"Цветы",
	"Топор",
	"Граната",
	"Дымовая граната",
	"Коктейль молотова",
	"Пусто",
	"Пусто",
	"Пусто",
	"Пистолет",
	"Пистолет с глушителем",
	"Пустынный орёл",
	"Дробовик",
	"Обрез",
	"Тактический дробовик",
	"Micro-Uzi",
	"MP5",
	"AK-47",
	"M4",
	"TEC-9",
	"Винтовка",
	"Снайперская винтовка",
	"РПГ",
	"Самонаводящаяся установка",
	"Огнемет",
	"Миниган",
	"C4",
	"Кнопка детонатора",
	"Баллончик",
	"Огнетушитель",
	"Фотоаппарат",
	"Очки ночного видения",
	"Очки с тепловизором",
	"Парашют"
};

new const
	weapon_dialog_tabulation[47][7] =
{
	"\t\t\t",
	"\t\t\t",
	"\t",
	"\t\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t",
	"\t",
	"\t\t\t",
	"\t\t",
	"\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t",
	"\t",
	"\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t",
	"\t",
	"\t",
	"\t\t",
	"\t\t\t",
	"\t",
	"\t\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t",
	"\t",
	"\t\t\t",
	"\t",
	"\t\t",
	"\t\t",
	"\t\t\t",
	"\t",
	"\t\t",
	"\t\t",
	"\t\t",
	"\t",
	"\t",
	"\t\t"
};

// ---------------------------------------------------------------
new const
	skill_name[12][16] =
{
	"Сила",
	"Colt 45",
	"SD Pistol",
	"Desert Eagle",
	"Shotgun",
	"MP5",
	"AK47",
	"M4",
	"Sniper Rifle",
	"Sawnoff",
	"Combat SG",
	"Micro Uzi"
};

// ---------------------------------------------------------------
enum
{
	LOG_TYPE_ADMIN_CHAT = 1,
	LOG_TYPE_ADMIN_ANSWER,
	LOG_TYPE_ADMIN_ACTION,
	LOG_TYPE_SET_ADMIN,
	LOG_TYPE_SET_LEADER,
	LOG_TYPE_SMS_CHAT,
	LOG_TYPE_OOC_CHAT,
	LOG_TYPE_REPORT,
	LOG_TYPE_FRACTION,
	LOG_TYPE_SUPERADMIN_ACTION
}

// ---------------------------------------------------------------
new
	g_donate_prices[] =
{
	2000, 8, 65, 1, 4, 249, 1, 299, 99, 100, 400, 49, 49, 299, 250, 55, 300, 88, 400, 100, 400, 600, 800, 30000
}; // цены на товары в меню Дополнительно

enum
{
	DONATE_PRICE_MONEY = 0,
	DONATE_PRICE_NAME,
	DONATE_PRICE_WARNS,
	DONATE_PRICE_DRUGS,
	DONATE_PRICE_LAW_ABIDING,
	DONATE_PRICE_PHONE_NUMBER,
	DONATE_PRICE_SKILLS,
	DONATE_PRICE_CAR_NUMBER,
	DONATE_PRICE_CAR_SLOT,
	DONATE_PRICE_LIC_PACK,
	DONATE_PRICE_PREMIUM_ACCOUNT,
	// ADONATE
	DONATE_PRICE_A_UNWARN,
	DONATE_PRICE_A_SETPASS,
	DONATE_PRICE_A_INVISIBLE,
	DONATE_PRICE_A_PREFIX,
	DONATE_PRICE_A3D_PREFIX,
	DONATE_PRICE_FAMILY,
	DONATE_PRICE_GIFT,
	DONATE_PRICE_SKIN,
	DONATE_PRICE_ZAM,
	//
	DONATE_PRICE_BRONSE,
	DONATE_PRICE_SILVER,
	DONATE_PRICE_GOLD,
	DONATE_PRICE_ANTIBH,
}
// ---------------------------------------------------------------
new
	bool: g_doubling[3] =
{
	true, true, true
};

enum
{
	DOUBLING_DONATE = 0,
	DOUBLING_EXP,
	DOUBLING_WAGE,
}

// ---------------------------------------------------------------
// иды фрак
enum
{
	TEAM_NONE = 0,
	// ----
	TEAM_GOVERNMENT, // Правительство
	// ----
	TEAM_ARMY, // Воинская часть
	// ----
	TEAM_HOSPITAL, // Городская больница
	// ----
	TEAM_RADIO, // ГТРК «Ритм»
	// ----
	TEAM_DPS, // ГИБДД
	TEAM_PPS, // УМВД
	TEAM_FBI, // ФСБ
	// ----
	TEAM_OPG_ARZAMASKAYA = 8, // Арзамасская ОПГ
	TEAM_OPG_BATYREVSKAYA = 9, // Батыревская ОПГ
	TEAM_OPG_LYTKARINSKAYA = 10 // Лыткаринская ОПГ
};

#define MAX_ORG 11

#define GetPlayerTeamName(%0) g_organization[GetPlayerTeamEx(%0)][O_NAME]
#define GetPlayerTeamColor(%0) g_organization[GetPlayerTeamEx(%0)][O_COLOR]

new const
	team_subdivision_name[4][32] =
{
	"Нет",
	"Отдел полиции №1 (ГИБДД)",
	"Отдел полиции №2 (УМВД)",
	"ФСБ"
};

enum
	E_ORG_DATA
{
	O_NAME[32],
	O_SKINS[10],
	O_WOMEN_SKIN,
	Float: O_SPAWN[4],
	Float: O_REPOSITORY_POS[3],
	O_SPAWN_INT,
	O_SPAWN_VW,
	O_COLOR,
	O_PRICE,
	O_LEADER[64],
	Float: O_CHANGESKIN[3]

};

new
	g_organization[MAX_ORG][E_ORG_DATA] =
{                                                                                                                                                                                                                                               //раздевалки
	{"Нет",										{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},						0,		{0.0,0.0,0.0,0.0},							{0.0, 0.0, 0.0}, 					0, 0, 0xFFFFFF11, /* DONATE SYSTEM */0, "", 		{0.00,0.00,0.00}},
	{"Правительство области",					{208, 164, 290, 186, 228, 228, 187, 227, 295, 147}, 141, 	{955.4947,10.5669,1381.0035,274.0993}, 		{0.0, 0.0, 0.0}, 					1, 1, 0xCCFF00FF, /* DONATE SYSTEM */450, "",		{955.4947,10.5669,1381.0035}},
	{"Воинская часть",							{287, 287, 287, 287, 287, 179, 179, 255, 255,  61}, 191, 	{2879.8826,1456.1178,1050.9984,83.1599},	{2883.7461,1444.4747,1050.9984}, 	1, 1, 0x996633FF, /* DONATE SYSTEM */250, "",		{0.00,0.00,0.00}},
	{"Городская больница",						{275, 275, 275, 276, 276, 276, 276, 276, 70,   70},	91, 	{2044.9296,1414.4017,999.1563,83.1599}, 	{0.0, 0.0, 0.0},					1, 1, 0xFF6666FF, /* DONATE SYSTEM */150, "",		{0.00,0.00,0.00}},
	{"ГТРК «Ритм»",								{170, 188, 188, 171, 189, 217, 217, 217, 59,   57},	172, 	{1981.5616,-17.8172,1381.0035,354.2428}, 	{0.0, 0.0, 0.0}, 					1, 1, 0xFF6600FF, /* DONATE SYSTEM */250, "",		{0.00,0.00,0.00}},
	{"Отдел полиции №1 (ГИБДД)",				{266, 284, 284, 284, 284, 284, 284, 284, 284, 288},	93, 	{2873.2549,1512.9464,1551.9464,320.4257},	{0.0, 0.0, 0.0}, 					1, 1, 0x0000FFFF, /* DONATE SYSTEM */450, "",		{0.00,0.00,0.00}},
	{"Отдел полиции №2 (УМВД)",					{266, 280, 280, 281, 281, 282, 282, 283, 283, 288}, 93, 	{2873.2549,1512.9464,1551.9464,320.4257}, 	{0.0, 0.0, 0.0}, 					1, 2, 0x0000FFFF, /* DONATE SYSTEM */450, "",		{0.00,0.00,0.00}},
	{"ФСБ", 									{286, 286, 286, 286, 285, 285, 165, 165, 294, 295}, 192, 	{2882.0996,2010.4512,2050.9980,179.2590}, 	{0.0, 0.0, 0.0}, 					1, 1, 0x0000FFFF, /* DONATE SYSTEM */300, "",		{2882.0996,2010.4512,2050.9980}},
	{"Арзамасская ОПГ",							{103, 104, 102, 125, 111, 124, 124, 299, 112, 272},	93, 	{481.8158,742.3323,12.0006,340.1651}, 		{480.5267, 737.5663, 12.2472},		0, 0, 0x009900FF, /* DONATE SYSTEM */450, "",		{0.00,0.00,0.00}},
	{"Батыревская ОПГ",							{103, 104, 102, 247, 247, 247, 248, 248, 100, 249},	246, 	{1947.8435,2173.3264,15.7060,178.8285}, 	{1937.3802, 2160.9033, 15.6621},	0, 0, 0x6666FFFF, /* DONATE SYSTEM */350, "",		{0.00,0.00,0.00}},
	{"Лыткаринская ОПГ",						{103, 104, 102, 117, 118, 122, 123, 123, 126, 127},	263, 	{-2332.8608,68.6851,21.3155,74.1536}, 		{-2348.5925, 72.4022, 21.3175},		0, 0, 0xFFCD00FF, /* DONATE SYSTEM */250, "",		{0.00,0.00,0.00}}
};


enum E_ORG_CAR_DATA
{
    O_NAME[32],
    Float:O_PICKUP[3],
    O_COUNT,
    O_MODEL[4],
    O_COLOR[2],
    O_FRAC_ID,
    O_PICKUP_ID,
}

new g_org_car[10][E_ORG_CAR_DATA] =
{
	{
        "Правительство",
        // PICKUP POS
        {-127.3362,619.9552,12.0266},
        // COUNT
        0,
        // MODEL
        {579,405,0,0},
        // COLOR ONE/TWO
        {1,1},
        // FRAC ID
        1,
        // PICKUP ID
        -1,
    },
    {
        "Армия",
        // PICKUP POS
        {1637.3297,1774.5272,16.0097},
        // COUNT
        0,
        // MODEL
        {432,425,470,578},
        // COLOR ONE/TWO
        {99,99},
        // FRAC ID
        2,
        // PICKUP ID
        -1,
    },

    {
        "Больница",
        // PICKUP POS
        {-252.5791,554.1702,12.9443},
        // COUNT
        0,
        // MODEL
        {416,551,487,0},
        // COLOR ONE/TWO
        {3,1},
        // FRAC ID
        3,
        // PICKUP ID
        -1,
    },
    {
        "Радиоцентр",
        // PICKUP POS
        {-313.2906,761.6114,13.0610},
        // COUNT
        0,
        // MODEL
        {488,582,436,0},
        // COLOR ONE/TWO
        {6,1},
        // FRAC ID
        4,
        // PICKUP ID
        -1,
    },


    {
        "Отделение ГИБДД", //гибдд
        // PICKUP POS
        {1907.3113,-2208.7275,11.6618},
        // COUNT
        0,
        // MODEL
        {497,598,405,427},
        // COLOR ONE/TWO
        {7,1},
        // FRAC ID
        5,
        // PICKUP ID
        -1,
    },
    {
        "Отделение УМВД", //умвд
        // PICKUP POS
        {2553.8503,-2411.4338,21.9966},
        // COUNT
        0,
        // MODEL
        {599,483,405,497},
        // COLOR ONE/TWO
        {7,1},
        // FRAC ID
        6,
        // PICKUP ID
        -1,
    },

    {
        "ФСБ", //умвд
        // PICKUP POS
        {1821.8221,2134.1011,15.4769},
        // COUNT
        0,
        // MODEL
        {436,411,490,497},
        // COLOR ONE/TWO
        {7,1},
        // FRAC ID
        7,
        // PICKUP ID
        -1,
    },

    {
        "ОПГ Арзамаса",
        // PICKUP POS
        {483.0379,761.8352,12.0006},
        // COUNT
        0,
        // MODEL
        {492,404,482,463},
        // COLOR ONE/TWO
        {0,0},
        // FRAC ID
        8,
        // PICKUP ID
        -1,
    },

    {
        "ОПГ Батырево",
        // PICKUP POS
        {1941.5887,2173.7520,15.7052},
        // COUNT
        0,
        // MODEL
        {492,404,482,463},
        // COLOR ONE/TWO
        {0,0},
        // FRAC ID
        9,
        // PICKUP ID
        -1,
    },

    {
        "Лыткаринская ОПГ",
        // PICKUP POS
        {-2343.5857,72.3564,21.0030},
        // COUNT
        0,
        // MODEL
        {492,404,482,463},
        // COLOR ONE/TWO
        {0,0},
        // FRAC ID
        10,
        // PICKUP ID
        -1,
    }
};


new
    Float: org_car_pos_spawn[10][4][4] =
{
	{   // мэрия
        {-112.2823,632.1828,11.8647,262.1775},
        {-112.8945,628.6407,11.8654,261.8431},
        {-126.4343,613.5458,12.0994,262.7750},
        {-125.8978,616.8631,12.0719,262.0505}
    },

    {   // армия
        {1634.2886,1766.6494,16.0713,269.5823},
        {1678.4862,1697.5649,15.9925,270.3940},
        {1678.6205,1691.7412,15.9946,268.4553},
        {1691.5505,1627.0763,16.8365,359.1029} //маверик 425
    },

    {   // больница
        {-238.7698,550.8733,12.8994,172.9392},
        {-242.7097,551.2446,12.8732,172.6469},
        {-246.4461,551.7439,12.8284,173.2092},
        {-215.8927,548.0470,12.6525,170.4808} // maverick 487
    },

    {   // радио
        {-342.4899,761.2209,13.1179,270.2607},
        {-342.5310,769.6465,13.1147,271.1894},
        {-342.4580,765.3802,13.1140,269.6879},
        {-347.8155,789.8935,13.2867,0.3074} // maverick 488
    },
    {   // гибдд
        {1880.1023,-2212.1838,10.9975,0.3477},
        {1883.1862,-2212.1328,10.9976,0.2257},
        {1886.3611,-2212.1938,10.9976,359.9777},
        {1931.8230,-2188.8899,11.8762,0.0267} // maverick 497
    },

    {   // умвд
        {2560.7986,-2408.1597,22.2194,89.9931},
        {2560.7788,-2411.9888,22.2036,89.9236},
        {2560.7996,-2416.0906,22.2035,90.0734},
        {2548.1506,-2415.8462,22.2703,182.6345} // maverick 497
    },


    {   // фсб
        {1791.7882,2132.8452,15.6173,186.7860},
        {1795.6742,2133.1658,15.6197,184.4205},
        {1785.8453,2082.2854,15.9843,359.6827},
        {1791.2578,2074.6387,18.7589,0.6484} // maverick 497
    },

    {   // опг арзамас
        {487.8650,740.6981,11.9774,69.3225},
        {489.2836,744.6002,11.9768,68.9850},
        {490.6520,748.3609,11.9282,69.4498},
        {492.0961,752.2858,11.9286,69.9391}
    },

    {   // опг батырево
        {1948.7590,2167.8774,15.2449,89.2575},
        {1948.6904,2164.2683,15.2448,89.8878},
        {1948.6851,2160.5647,15.2423,91.4960},
        {1948.7839,2156.7493,15.2449,89.4765}
    },
    {   // опг лыткарино
        {-2340.2644,104.5932,20.4217,259.5525},
        {-2341.0471,100.8282,20.4220,258.7062},
        {-2341.6548,97.2001,20.8720,259.0891},
        {-2342.4653,93.2930,20.8720,258.3354}
    }
};

new const
	rank_names[10][10][50] =
{
	// Правительство области
	{"Водитель", "Охранник", "Начальник Охраны", "Секретарь", "Советник", "Лицензер", "Адвокат", "Депутат", "Вице-губернатор", "Губернатор"},

	// Воинская часть
	{"Рядовой", "Ефрейтор", "Сержант", "Старшина", "Прапорщик", "Лейтенант", "Капитан", "Майор", "Подполковник", "Полковник"},

	// Городская больница
	{"Интерн", "Парамедик", "Фельдшер", "Нарколог", "Педиатр", "Терапевт", "Травматолог", "Хирург", "Заведующий", "Глав. врач"},

	// СМИ
	{"Практикант", "Фотограф", "Журналист", "Корреспондент", "Ведущий", "Редактор", "Маркетолог", "Менеджер", "Продюсер", "Директор"},

	// Отдел полиции №1 (ГИБДД)
	{"Рядовой полиции", "Сержант полиции", "Ст. сержант полиции", "Прапорщик полиции", "Лейтенант полиции", "Ст. лейтенант полиции", "Капитан полиции", "Майор полиции", "Подполковник полиции", "Полковник полиции"},

	// Отдел полиции №2 (УМВД)
	{"Рядовой полиции", "Сержант полиции", "Ст. сержант полиции", "Прапорщик полиции", "Лейтенант полиции", "Ст. лейтенант полиции", "Капитан полиции", "Майор полиции", "Подполковник полиции", "Полковник полиции"},

	// ФСБ
	{"Сотрудник ФСКН", "Сотрудник УБОП", "Зам. начальника ФСКН", "Зам. начальника УБОП", "Оперативник ЦСН", "Зам. начальника ЦСН", "Начальник ЦСН", "Инспектор ФСБ", "Зам. начальника УФСБ", "Начальник УФСБ"},

	// Арзамасская ОПГ
	{"Пацан", "Шнырь", "Фраер", "Барыга", "Блатной", "Свояк", "Браток", "Смотрящий", "Авторитет", "Вор в законе"},

	// Батыревская ОПГ
	{"Пацан", "Шнырь", "Фраер", "Барыга", "Блатной", "Свояк", "Браток", "Смотрящий", "Авторитет", "Вор в законе"},

	// Лыткаринская ОПГ
	{"Пацан", "Шнырь", "Фраер", "Барыга", "Блатной", "Свояк", "Браток", "Смотрящий", "Авторитет", "Вор в законе"}
};

new const
	rank_wages[7][10] =
{
	{1940, 2300, 2700, 3000, 3500, 3900, 4300, 4700, 4900, 5500}, // Правительство области
	{890,  1190, 1450, 1650, 2150, 2450, 2800, 3300, 3800, 4250}, // Воинская часть
	{1000, 1400, 1700, 2010, 2400, 2750, 2900, 3260, 3770, 4300}, // Городская больница
	{990,  1300, 1700, 2200, 2500, 2650, 2800, 3440, 3820, 4300}, // СМИ
	{915,  1300, 1800, 2200, 2500, 2700, 3200, 3600, 3900, 4350}, // Отдел полиции №1 (ГИБДД)
	{915,  1300, 1800, 2200, 2500, 2700, 3200, 3600, 3900, 4350}, // Отдел полиции №2 (УМВД)
	{1330, 1450, 1900, 2400, 2750, 3250, 3500, 3930, 4200, 4500}  // ФСБ
};

// ------------------------------------------

public OnGameModeInit()
{
	new hour;
	gettime(hour);


	logo_TD[0] = TextDrawCreate(-121.0000, 305.8265, "txd:logotype"); // ?????
	TextDrawTextSize(logo_TD[0], 335.0000, 233.0000);
	TextDrawAlignment(logo_TD[0], 1);
	TextDrawColor(logo_TD[0], -1);
	TextDrawBackgroundColor(logo_TD[0], 255);
	TextDrawFont(logo_TD[0], 4);
	TextDrawSetProportional(logo_TD[0], 0);
	TextDrawSetShadow(logo_TD[0], 0);



	SetWorldTime(hour);
	AddPlayerClass(0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0);
	
	//new playerid;
    
    //SetTimer("jonny", 1000, 1);//время через которое подключятся часы и дата

	CreateActor(14,-109.4100,968.7141,12.3526,355.5801);
	CreateActor(55,1802.2566,2513.8135,15.8725,178.4639);
	CreateDynamic3DTextLabel("Квестовый персонаж\n[ALT]", 0xFFFF00FF, -109.4100,968.7141,12.3526 + 1.8, 10.0);
	CreateDynamic3DTextLabel("Квестовый персонаж\n[ALT]", 0xFFFF00FF, 1802.2566,2513.8135,15.8725 + 1.8, 10.0);

	CreateActor(19,1798.2089,2348.1477,15.3705,335.4453);
	CreateDynamic3DTextLabel("Назар\nТорговец запрещенным\n[ALT]", 0xFFFF00FF, 1798.2089,2348.1477,15.3705 + 1.8, 10.0);

//	CreateActor(282,1886.5671,2032.1482,17.3037,312.9589);
//	CreateDynamic3DTextLabel("Полковник Тимур\nКвестовый персонаж\n[ALT]", 0xFFFF00FF, 1886.5671,2032.1482,17.3037 + 1.8, 10.0);


	CreateDynamic3DTextLabel("{FFFFFF}- Контейнер -\n{FFFFFF}Класс контейнера: {cd853f}Обычный\n{FFFFFF}Цена контейнера: {cd853f}500.000 рублей\n{FFFFFF}Нажмите ALT чтобы открыть", 0xFFFF00FF, 609.434875,1729.022583,12.078809 + 1.8, 10.0);
//	CreateDynamic3DTextLabel("{FFFFFF}- Контейнер -\n{FFFFFF}Класс контейнера: {cd853f}Бизнес\n{FFFFFF}Цена контейнера: {cd853f}700.000 рублей\n{FFFFFF}Нажмите ALT чтобы открыть", 0xFFFF00FF, 613.617675,1729.152465,12.078809 + 1.8, 10.0);
	CreateDynamic3DTextLabel("{FFFFFF}- Контейнер -\n{FFFFFF}Класс контейнера: {cd853f}Вещевой\n{FFFFFF}Цена контейнера: {cd853f}200.000.000 рублей\n{FFFFFF}Нажмите ALT чтобы открыть", 0xFFFF00FF, 617.468688,1729.151977,12.078809 + 1.8, 10.0);

	SendRconCommand("hostname "SERVER_NAME" | CR:MP Mobile");
	SendRconCommand("weburl www."SERVER_SITE"");
	SendRconCommand("mapname "SERVER_MAP_NAME"");
	
	SendRconCommand("ackslimit 10000");

	ShowNameTags(true);
	DisableInteriorEnterExits();
	EnableStuntBonusForAll(false);
	ManualVehicleEngineAndLights();
	ShowPlayerMarkers(PLAYER_MARKERS_MODE_STREAMED);
	SetNameTagDrawDistance(30.0);

	// streamer

	//Streamer_SetMaxItems(STREAMER_TYPE_MAP_ICON, 98);
	Streamer_SetVisibleItems(STREAMER_TYPE_MAP_ICON, 98);
	Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, 650); // Default: 500

	Streamer_ToggleErrorCallback(true);
	//Streamer_SetTickRate(40); // Default: 50

	//LimitPlayerMarkerRadius(200.0);
	//LimitGlobalChatRadius(30.0);
	
	CreatePickup(1239,23,-316.1636,400.8567,13.5937,0,PICKUP_ACTION_OBMEN_MONET);

    CreatePickup(1239,23,-34.8391,615.1650,12.1475,0, PICKUP_ACTION_TYPE_MPREG);

	CreateDynamic3DTextLabel("Прием на работу", 0xFFFF00FF, 991.6033,-7.3193,1380.9962 + 1.8, 10.0);
	CreatePickup(1210, 23, 991.6033,-7.3193,1380.9962, 1, PICKUP_ACTION_TYPE_MAYOR_JOB);

	CreateDynamic3DTextLabel("Обмен подарков", 0xFFD700FF, 983.9650,-7.4437,1380.9962 + 0.3, 5.0);
	CreatePickup(1239, 23, 983.9650,-7.4437,1380.9962, 1, PICKUP_ACTION_TYPE_SELL_GIFT);
	
/*	CreatePickup(325, 23, 1883.0203,2933.7441,11.0396,0, PICKUP_ACTION_FLOWER_1);
	CreatePickup(325, 23, 1940.7629,2901.6807,11.5173,0, PICKUP_ACTION_FLOWER_2);
	CreatePickup(325, 23, 1833.0050,2868.4402,11.0556,0, PICKUP_ACTION_FLOWER_3);
	
	CreatePickup(1239, 23, 1856.5134,2270.0735,15.5854,0, PICKUP_TAKE_FLOWER);
	CreatePickup(1239, 23, 207.7438,830.0139,13.3807,0, PICKUP_CONGRATULATE_WOMEN);
	CreatePickup(1239, 23, 2431.9763,-1712.6957,23.013,0, PICKUP_BUY_PERFUME);
	CreatePickup(1239, 23, -286.7967,578.5308,12.8376,0, PICKUP_GIVE_PERFUME);
	CreatePickup(1239, 23, -315.3805,410.3977,13.1093,0, PICKUP_BUY_CAKE);
	CreatePickup(1239, 23, 571.3802,646.5099,12.2150,0, PICKUP_BUY_PRODUCTS);
	CreatePickup(1239, 23, 2309.9827,-1925.7393,21.9503,0, PICKUP_BUY_CANDLE);
	CreatePickup(1239, 23, 1857.0389,2297.0947,15.2506,0, PICKUP_END_QUEST_8MARTA);*/

	CreatePickup(1279, 23, -1120.4103,2175.6133,38.0294,0);
	CreatePickup(1650, 23, -1043.8157,2205.5217,38.1195,0);
	CreatePickup(1279, 23, 2424.5317,1765.6780,-0.2507,0);
	CreatePickup(1650, 23, 2710.3369,-2383.5164,17.9063,0);
	CreatePickup(1650, 23, 2738.3379,-2273.0725,17.9063,0);
	CreatePickup(1650, 23, 13.1749,2.9268,1380.9985, 1, PICKUP_ACTION_TYPE_PUT_PROD);

	CreatePickup(1239, 23, 2883.7095,1447.6533,1050.9984, 1);
	CreatePickup(1239, 23, 1681.6646,1778.9902,16.3985, 0, PICKUP_ACTION_TYPE_TEMP_ARMY);

	CreateDynamic3DTextLabel("- Получение -\n{FFFFFF}номеров на личное ТС", 0x3399FFFF, 2897.3374,1489.8818,1551.9464 + 1.8, 10.0);
	CreatePickup(1239, 23, 2897.3374,1489.8818,1551.9464, 1, PICKUP_ACTION_TYPE_GET_CAR_NUM);
	CreatePickup(1239, 23, 2897.3374,1489.8818,1551.9464, 2, PICKUP_ACTION_TYPE_GET_CAR_N2);

	g_last_lottery_time =
	g_last_pay_day_time =
	g_last_m_timer_time = gettime();

	CreateTextDraws();
	CreateMenus();
	CreateVehicles();
	CreateMedBeds();
	CreateCasinoTables();
	CreateArmories();

	CreateQuestPickup();


	CreateGreenZones();


	HelpInfoInit();
	ServerRadioInit();
	AnimListInit();
	BusRoutesInit();
	BanksInit();
	TempJobsInit();
	
	report_OnGameModeInit();
	
	MapIconsInit();

	TeleportPickupsInit();
	DrivingSchoolInit();
//	AtmsInit();
 	CreateRentBike();
 	CreateFractionCar();

	#if defined RAND_WEATHER
	SetRandomWeather();
	#endif

	#if defined _GANG_ZONES_INC
	CreateGangZonesCR();
	#endif

	mysql_log();
	mysql = mysql_connect(MYSQL_HOST, MYSQL_USER, MYSQL_BASE, MYSQL_PASS);

	if(mysql_errno() != 0)
		return print("Не удалось подключится к базе данных!");

	mysql_set_charset("cp1251");
	mysql_tquery(mysql, "SET NAMES cp1251");

	//LoadGift();

	UpdateCharity();
	RepositoriesLoad();

	LoadEntrances();
	LoadHouses();
	LoadHousesRenters();
	EntranceStatusInitAll();

	LoadFamily();
	LoadSettings();
	
	LoadCarObmen();

	LoadHotels();

	LoadFuelStations();
	LoadBusinesses();
	LoadOrders();

	LoadGangZones();
	LoadGangRepositories();

	LoadLeaderList();

	//LoadOwnableCars();
	//LoadTrunks();

	SetTimer("ClearBanList", 15_000, false);
	SetTimer("OnSecondTimer", 1000, true);

	//SetTimer_("SpeedBooster", 100, 0, -1);

	CallLocalFunction("HospitalTreatment", "");

	SetGameModeText(SERVER_VERSION);

	s_autorace_Pos_PickupID[0] = CreateDynamicPickup(1318, 23, AUTORACE_EXIT_POS, AUTORACE_EXIT_WORLD, AUTORACE_EXIT_INTERIOR);
	s_autorace_Pos_PickupID[1] = CreateDynamicPickup(1318, 23, AUTORACE_ENTER_POS, 0, 0);
	CreateDynamicMapIcon(AUTORACE_ENTER_POS, 53, -1, 0, 0);
	s_autorace_Main_CPID = CreateDynamicCP(AUTORACE_MAIN_POS-1.0, 1.5, AUTORACE_EXIT_WORLD, AUTORACE_EXIT_INTERIOR);
	return 1;
}

public OnGameModeExit()
{
	SaveRepository();

	mysql_close(mysql);
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC, FLOOD_RATE_KICK);

	if(IsPlayerLogged(playerid))
	{
		SetPlayerSpawnInit(playerid);
	}
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC, FLOOD_RATE_KICK);

	if(!IsPlayerLogged(playerid))
	{
		new a_state = GetPlayerData(playerid, P_ACCOUNT_STATE);
		if(a_state != ACCOUNT_STATE_REG_SKIN)
		{
			new fmt_str[64];
			format(fmt_str, sizeof fmt_str, "{FFFFFF}Для игры на сервере Вы должны %s", a_state == ACCOUNT_STATE_REGISTER ? ("пройти регистрацию") : ("авторизироваться"));

			Dialog
			(
				playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
				"{FF6600}Ошибка",
				fmt_str,
				"Закрыть", ""
			);
			Kick:(playerid);
			SendClientMessage(playerid, 0xFF6600FF, fmt_str[8]);
		}
	}
	else if(IsPlayerLogged(playerid))
	{
		//SetPlayerSpawnInit(playerid);
		//SpawnPlayer(playerid);

//		SendClientMessage(playerid, 0xFFFF00FF, "Для смены внешности посетите любой магазин одежды");
	}

	return 1;
}

/*forward jonny();
public jonny()
{
	new string[50];
	new string2[50];
	
	format(string, sizeof(string), "X%d", Config[sDonPower]);
	format(string2, sizeof(string2), "%d/1000",Iter_Count(Player));

	for(new i=0;i<MAX_PLAYERS;i++)
	{
	    TextDrawSetString(logo_TD[1],string);
	    TextDrawSetString(logo_TD[2],string2);

	    TextDrawShowForPlayer(i,logo_TD[1]);
	    TextDrawShowForPlayer(i,logo_TD[2]);
	}
	return 1;
}*/

public OnPlayerConnect(playerid)
{
	TogglePlayerAllDynamicCPs(playerid, false);
	
	TextDrawShowForPlayer(playerid, logo_TD[0]);


    DuelOffer[playerid] = -1;
	timeduel[playerid] = 11;

	new hour, minute;
	gettime(hour, minute);
	times[playerid] = true;
	
//	TextDrawShowForPlayer(playerid,logo_TD[0]);
//	TextDrawShowForPlayer(playerid,logo_TD[1]);
//  TextDrawShowForPlayer(playerid,logo_TD[2]);

	SetPlayerTime(playerid, hour, minute);

	SetPlayerColor(playerid, 0x999999FF);
		
// 	 CreateLogo(playerid);

	SetPlayerVirtualWorld(playerid, playerid + 0xFF);
	ClearPlayerInfo(playerid);

	GetPlayerName(playerid, g_player[playerid][P_NAME], MAX_PLAYER_NAME);
	GetPlayerIp(playerid, g_player[playerid][P_IP], 16);

	//new fmt_text[80];

//	SendClientMessage(playerid, 0x01010101, "$cmd s0beit");

	//GetPlayerVersion(playerid, fmt_text, sizeof fmt_text);

/*	if(strfind(fmt_text, "A0.3e-") && strcmp(fmt_text, "0.3e", true) || !strcmp(fmt_text, "LoL4", true) || IsPlayerUseForbiddenSoftware(playerid))
	{
		KickForSoft(playerid);

		return 1;
	}*/


	ShowGangZonesForPlayer(playerid);

	#if defined _GANG_ZONES_INC
	ShowForPlayerGangZonesCR(playerid);
	#endif

	InitFly(playerid);

	SetTimerEx("CheckPlayerAccount", 1000, false, "ii", playerid, mysql_race[playerid]);
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
    report_OnPlayerDisconnect(playerid);
    
    //for(new i = 0; i < 2; i++) TextDrawHideForPlayer(playerid, TD_logo_TD[i]);
    
    if(GetPVarType(playerid, "PlacedBB"))
    {
        //DestroyDynamicObject(GetPVarInt(playerid, "PlacedBB"));
        DestroyDynamic3DTextLabel(Text3D:GetPVarInt(playerid, "BBLabel"));
        if(GetPVarType(playerid, "BBArea"))
        {
            foreach(Player,i)
            {
                if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
                {
                    StopAudioStreamForPlayer(i);
                    SendClientMessage(i, COLOR_LIGHTBLUE, "Владелец бумбокса отключился от сервера.");
                }
            }
        }
    }
    
	new buffer = GetPlayerLastVehicle(playerid);
	
    if(DuelOffer[playerid] != -1)
	{
		new id = DuelOffer[playerid];
		SendClientMessage(id, -1, "Игрок вышел!");
		KillTimer(DuelTimer[playerid]);
		timeduel[playerid] = 11;
		DuelOffer[playerid] = -1;
		DuelOffer[id] = -1;
		DuelCash[id] = 0;
		DuelCash[playerid] = 0;
	}

	if(buffer != INVALID_VEHICLE_ID)
	{
		if(GetVehicleData(buffer, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_DRIVING_SCH)
		{
			if(GetPlayerDrivingExamInfo(playerid, DE_POINTS) >= 9)
			{
				SetVehicleToRespawn(buffer);
			}
		}
	}
	if(IsPlayerInJob(playerid))
	{
		buffer = GetPlayerJobCar(playerid);
		if(buffer != INVALID_VEHICLE_ID)
		{
			SetVehicleToRespawn(buffer);
		}

		if(GetPlayerData(playerid, P_ORDER) != -1)
			SetOrderData(GetPlayerData(playerid, P_ORDER), O_USED, false);
	}
	KillEndJobTimer(playerid);

	buffer = GetPlayerData(playerid, P_FACTORY_USE_DESK);
	SetPlayerFactoryDeskUse(playerid, buffer, false);

	if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1)
	{
		ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
	}

	if(GetPlayerData(playerid, P_FRACTION_CAR) != INVALID_VEHICLE_ID)
    {
        DestroyVehicle(GetPlayerData(playerid, P_FRACTION_CAR));
        SetPlayerData(playerid, P_FRACTION_CAR, INVALID_VEHICLE_ID);
    }

    if(GetPlayerData(playerid, P_BUY_CAR) != INVALID_VEHICLE_ID)
    {
        DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
        SetPlayerData(playerid, P_BUY_CAR, INVALID_VEHICLE_ID);
    }

	if(GetPlayerTeamEx(playerid) == TEAM_GOVERNMENT && IsValidDynamic3DTextLabel(GetPlayerData(playerid, P_ADVISOR_LABEL)))
	{
		DestroyDynamic3DTextLabel(GetPlayerData(playerid, P_ADVISOR_LABEL));
		SetPlayerData(playerid, P_ADVISOR_LABEL, Text3D: -1);
	}

	if(IsValidDynamic3DTextLabel(GetPlayerData(playerid, P_ADMIN_LABEL)))
	{
		DestroyDynamic3DTextLabel(GetPlayerData(playerid, P_ADMIN_LABEL));
		SetPlayerData(playerid, P_ADMIN_LABEL, Text3D: -1);
	}

	if(GetPlayerOwnableCar(playerid) != INVALID_VEHICLE_ID)
	{
		if(SaveOwnableCar(GetPlayerOwnableCar(playerid)) != -1)
			UnloadPlayerOwnableCar(playerid, true);
	}

	if(GetPlayerRentCar(playerid) != INVALID_VEHICLE_ID)
	{
		SetVehicleToRespawn(GetPlayerRentCar(playerid));
	}
	if(GetPlayerData(playerid, P_RENT_BIKE) != INVALID_VEHICLE_ID)
    {
        DestroyVehicle(GetPlayerData(playerid, P_RENT_BIKE));
        SetPlayerData(playerid,  P_RENT_BIKE, INVALID_VEHICLE_ID);
    }

	OnPlayerDisconnectAndSpawn(playerid, reason);

	new fmt_text[95];

	if(GetPlayerData(playerid, P_CUFFED) && reason != 2)
	{
		new jail_time = (GetPlayerSuspect(playerid) * 5 + 30) * 60;

		SetPlayerData(playerid, P_JAIL, jail_time);
		UpdatePlayerDatabaseInt(playerid, "jail", jail_time);

		SetPlayerData(playerid, P_SUSPECT, 0);
		UpdatePlayerDatabaseInt(playerid, "suspect", 0);

		format(fmt_text, sizeof fmt_text, "%s выходит при аресте (+30 минут заключения)", GetPlayerNameEx(playerid));
		SendClientMessageToAll(0xFF5533FF, fmt_text);
	}

	for(new idx; idx < g_advert_created; idx ++)
	{
		if(GetAdvertData(idx, A_CREATOR) != playerid) continue;

		DeleteAdvert(idx);
	}

	if(!server_restart)
	{

		SetPlayerData(playerid, P_ADMIN_LOGGED, 0);
	}

	SavePlayerAccount(playerid);
	ClearPlayerInfo(playerid);

	UpdateSpectate(playerid, true);
	return 1;
}

public: SavePlayerAccount(playerid)
{
	new query[370];

	mysql_format
	(
		mysql, query, sizeof query,
		"UPDATE accounts SET last_login=%d,game_for_hour=%d,game_for_day=%d,game_for_day_prev=%d,\
		exp=%d,health=%f,hospital=%d,mute=%d,jail=%d,fmute=%d, online = 0 WHERE id=%d LIMIT 1",
		gettime(),
		GetPlayerData(playerid, P_GAME_FOR_HOUR),
		GetPlayerData(playerid, P_GAME_FOR_DAY),
		GetPlayerData(playerid, P_GAME_FOR_DAY_PREV),
		GetPlayerData(playerid, P_EXP),
		GetPlayerData(playerid, P_HEALTH),
		GetPlayerData(playerid, P_HOSPITAL),
		GetPlayerData(playerid, P_MUTE),
		GetPlayerData(playerid, P_JAIL),
		GetPlayerData(playerid, P_FMUTE),
		GetPlayerAccountID(playerid)
	);

	mysql_query(mysql, query, false);

	return 1;
}

public OnPlayerSpawn(playerid)
{
/*    if(GetPlayerAdminEx(playerid) > 1)
    {
        AdminAuthorization(playerid);

		new  fmt_text[128];
    	format(fmt_text, 256, "[Информация]: "c_b"Авторизуйтесь в админ авторизации. Если вы введете 3 раза не правильно Админ-Пороль, вы будете {FF0000}кикнуты "c_b"системой!");
    	SendClientMessage(playerid, COR_SERVER, fmt_text);
    }*/

	OnPlayerDisconnectAndSpawn(playerid, -1);
    if(!IsValidDynamic3DTextLabel(g_player[playerid][P_ADMIN_LABEL]) && GetPlayerData(playerid, P_3D_PREFIX))
	{
		g_player[playerid][P_ADMIN_LABEL] = CreateDynamic3DTextLabel("Администратор", 0xFFCC33FF, 0.0, 0.0, 0.3, 10.0, playerid);
		Attach3DTextLabelToPlayer(g_player[playerid][P_ADMIN_LABEL], playerid, 0.0, 0.0, -0.8);
	}

	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);

	SetPlayerData(playerid, P_IN_HOUSE, 		-1);
	SetPlayerData(playerid, P_IN_BUSINESS, 		-1);
	SetPlayerData(playerid, P_IN_HOTEL_FLOOR, 	-1);
	SetPlayerData(playerid, P_IN_HOTEL_ROOM, 	-1);
	SetPlayerData(playerid, P_IN_ENTRANCE,		-1);
	SetPlayerData(playerid, P_IN_ENTRANCE_FLOOR,-1);

	SetPlayerSkillsInit(playerid);

	if(!IsPlayerLogged(playerid))
	{
		if(GetPlayerData(playerid, P_ACCOUNT_STATE) == ACCOUNT_STATE_REG_SKIN)
		{
			new sex = bool: GetPlayerSex(playerid);

			TogglePlayerControllable(playerid, false);
			SetPlayerSelectSkin(playerid, 0, reg_skin_data[sex][0]);

			SetPlayerPosEx(playerid, -315.9291 ,828.0271, 13.0958, 184.6198, 0, _, false);

			SetPlayerCameraPos(playerid, -315.6234, 820.1765, 14.5766);
			SetPlayerCameraLookAt(playerid, -315.8497, 821.1492, 14.4216);

			ShowPlayerSelectPanel(playerid, SELECT_PANEL_TYPE_REG_SKIN);
			//ShowPlayerSelectPanelPrice(playerid, -1);

			PlayerTextDrawSetString(playerid, price_select_TD[playerid][0], SERVER_NAME);

		//	SendClientMessage(playerid, -1, "{0095FF} Используйте /obt для получения средств на тест!");
			//SendClientMessage(playerid, -1, "{0095FF} Все найденые баги отправляйте на форум FORUM.RUSSIA-MOBILE.RU");
			//ShowMenuForPlayer(reg_select_skin_menu, playerid);
		}
	}
	else
	{
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);

		SetPlayerSpawnPos(playerid);

		if(GetPlayerData(playerid, P_HOSPITAL)) SetPlayerHealthEx(playerid, 15.0);

		if(!GetPlayerData(playerid, P_ANIMS_INIT))
		{
			PreLoadPlayerAnims(playerid);
			SetPlayerData(playerid, P_ANIMS_INIT, true);
		}

		if(GetPlayerData(playerid, P_MASK) >= 2)
		{
			SetPlayerColorInit(playerid);
			SetPlayerData(playerid, P_MASK, 0);
		}
	}

	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);

    if(DuelOffer[playerid] == killerid && DuelOffer[killerid] == playerid)
	{
	    new string[100];
		SendClientMessage(playerid, -1, "Вы проиграли в дуэле!");
		f("Поздравляем! Вы выйграли в дуэле и получили %d rub.", DuelCash[playerid]);
		SendClientMessage(killerid, -1, string);

		GivePlayerMoneyEx(killerid, DuelCash[playerid], "Дуэли");
		GivePlayerMoneyEx(playerid, -DuelCash[playerid], "Дуэли");
		DuelOffer[playerid] = -1;
		DuelOffer[killerid] = -1;
		DuelCash[killerid] = 0;
		DuelCash[playerid] = 0;
	}

	if(GetPlayerData(playerid, P_DMZ_STATUS) == 1)
	{
	    //SpawnDeathMatch(playerid);
	    AddPlayerData(killerid, P_DMZ_KILL, +, 1);
	    UpdatePlayerDatabaseInt(killerid, "dmz_kills", GetPlayerData(killerid, P_DMZ_KILL));
	    GameTextForPlayer(killerid, "+1 kill", 4000, 1);
	    GivePlayerMoneyEx(killerid, 25000, "дмз");
	    AddPlayerData(killerid, P_DMZ_KILL1, +, 1);
	    
	    if(GetPlayerData(killerid, P_DMZ_KILL1) == 10)
	    {
	        Send(killerid,-1,"+1 donate rub");
	        GivePlayerDonate(killerid, 1, "ДМЗ");
	        SetPlayerData(killerid, P_DMZ_KILL1, 0);
	    }
	    
	}
	if(!IsPlayerLogged(playerid))
	{
		return Kick:(playerid, " ");
	}
	if(IsPlayerInJob(playerid))
	{
		EndPlayerJob(playerid);
	}
	if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADER)
	{
		TogglePlayerDynamicCP(playerid, help_info_CP, true);
	}
	if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1)
	{
		ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
	}
	SetPlayerData(playerid, P_JOB_CAR, INVALID_VEHICLE_ID);

	SetPlayerDrivingExamInfo(playerid, DE_POINTS, 0);
	SetPlayerFactoryDeskUse(playerid, GetPlayerData(playerid, P_FACTORY_USE_DESK), false);

	SetPlayerData(playerid, P_IN_HOUSE, 		-1);
	SetPlayerData(playerid, P_IN_BUSINESS, 		-1);
	SetPlayerData(playerid, P_IN_HOTEL_FLOOR, 	-1);
	SetPlayerData(playerid, P_IN_HOTEL_ROOM, 	-1);
	SetPlayerData(playerid, P_IN_ENTRANCE,		-1);
	SetPlayerData(playerid, P_IN_ENTRANCE_FLOOR,-1);

    if(GetPlayerData(playerid, P_DMZ_STATUS) == 0)
    {
		SetPlayerData(playerid, P_HOSPITAL, true);
	}

	new fmt_text[120];

	if(killerid == INVALID_PLAYER_ID || reason >= 47 || !reason)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s[%d] убил себя", GetPlayerNameEx(playerid), playerid);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}
	else
	{
		format(fmt_text, sizeof fmt_text, "[A] %s[%d] убил %s[%d] (%s)", GetPlayerNameEx(killerid), killerid, GetPlayerNameEx(playerid), playerid, GetWeaponName(reason));
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	if(killerid != INVALID_PLAYER_ID)
	{
		if(GetPlayerSuspect(playerid) && IsPlayerInPoliceTeam(killerid))
		{
			format(fmt_text, sizeof fmt_text, "[Всем постам] %s %s нейтрализовал преступника %s", GetPlayerJobAndRankName(killerid), GetPlayerNameEx(killerid), GetPlayerNameEx(playerid));
			SendMessageToPoliceTeam(fmt_text, 0x00CCFFFF);

			JailPlayer(playerid, GetPlayerSuspect(playerid) * 5);

			SetPlayerData(playerid, P_SUSPECT, 0);
			UpdatePlayerDatabaseInt(playerid, "suspect", 0);

			SetPlayerSuspectInit(playerid);

			SendClientMessage(playerid, 0x66CC33FF, "Вы были нейтрализованы сотрудником правоохранительных органов");
			SendClientMessage(playerid, 0xCECECEFF, "Время до окончания заключения: {CCCC00}/time");
		}

		if(g_capture[C_STATUS])
		{
			if(TEAM_OPG_ARZAMASKAYA <= GetPlayerTeamEx(killerid) <= TEAM_OPG_LYTKARINSKAYA)
			{
				new area_id = GetGangZoneData(g_capture[C_GANG_ZONE], GZ_AREA);

				if(IsPlayerInDynamicArea(killerid, area_id) && IsPlayerInDynamicArea(playerid, area_id))
				{
					new gang_id[2];

					gang_id[0] = (GetPlayerTeamEx(killerid) - TEAM_OPG_ARZAMASKAYA) + 1;
					gang_id[1] = (GetPlayerTeamEx(playerid) - TEAM_OPG_ARZAMASKAYA) + 1;

					if(gang_id[0] == g_capture[C_ATTACK_TEAM] && gang_id[1] == g_capture[C_PROTECT_TEAM])
						g_capture[C_ATTACKER_KILLS] ++;

					else if(gang_id[0] == g_capture[C_PROTECT_TEAM] && gang_id[1] == g_capture[C_ATTACK_TEAM])
						g_capture[C_PROTECTOR_KILLS] ++;
						
						
					AddPlayerData(killerid, P_CAPT_KILL, +, 1);
	    			UpdatePlayerDatabaseInt(killerid, "capt_kills", GetPlayerData(killerid, P_CAPT_KILL));
	    			
	    			AddPlayerData(killerid, P_F_QUEST_EXP_2, +, 1);
					UpdatePlayerDatabaseInt(killerid, "FracQuestExp2", GetPlayerData(killerid, P_F_QUEST_EXP_2));

					if(GetPlayerData(killerid, P_F_QUEST_EXP_2) == 30)
					{
					    SendClientMessage(killerid, COR_QUEST, "[Квесты]: "c_b"Вы успешно выполнили квест "c_i"'Мы лучше всех'. "c_b"Награда: "c_s"1 CASE(/opencase)");

                        AddPlayerData(killerid, P_DONATE_CASE, +, 1);
						UpdatePlayerDatabaseInt(killerid, "case", GetPlayerData(killerid, P_DONATE_CASE));

					    SetPlayerData(killerid, P_F_QUEST_2, 1);
					    UpdatePlayerDatabaseInt(killerid, "FracQuest2", 1);
					    
					    AddPlayerData(killerid, P_TOP_5, +, 1);
						UpdatePlayerDatabaseInt(killerid, "TOP_Quest", GetPlayerData(killerid, P_TOP_5));
					}
				}
			}
		}
	}

	if(GetPlayerData(playerid, P_BUY_CAR) != INVALID_VEHICLE_ID)
	{
		DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
		SetPlayerData(playerid, P_BUY_CAR, INVALID_VEHICLE_ID);

		//BuyCarTDsHideForPlayer(playerid);
		//HidePlayerSelectPanel(playerid);
		
		HideAutosalonTextDraws(playerid);
	}

	if(GetPlayerRentCar(playerid) != INVALID_VEHICLE_ID)
	{
		new vehicleid = GetPlayerRentCar(playerid);

		rent_cars_data[vehicleid - first_rent_car_id][rent_car_tenant_id] = INVALID_PLAYER_ID;

		SetVehicleToRespawn(vehicleid);

		SendClientMessage(playerid, 0xFF5533FF, "Арендованный транспорт уничтожен. Договор аренды расторгнут");

		SetPlayerData(playerid, P_RENT_CAR, INVALID_VEHICLE_ID);
	}

	SetPlayerJobLoadItems(playerid, 0);
	SetPlayerTempJob(playerid, TEMP_JOB_NONE);

	SetPlayerSpawnInit(playerid);

	return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
	new Float: health;

	/*

	if(IsPlayerFly(playerid))
	{
		GetPlayerHealth(playerid, health);
		SetPlayerHealth(playerid, health + amount);
	}

	*/

	if(issuerid == INVALID_PLAYER_ID) return 1;

	if(GetPVarInt(playerid, ""))
	{
		new green_zone_id = GetPVarInt(playerid, "player_in_green_zone") - 1;

		if(!(TEAM_DPS <= GetPlayerTeamEx(issuerid) <= TEAM_FBI))
		{
			ClearPlayerAnim(issuerid);

			new fmt_text[220];

			format
			(
				fmt_text, sizeof fmt_text,
				"{FFFFFF}"\
				"Предупреждение:\n\n"\
				"Игрок находится в зеленой зоне '{66CC33}%s{FFFFFF}'\n"\
				"Нанесение урона запрещено. При повторных попытках Вы будете кикнуты.",
				g_green_zones[green_zone_id][GZ_NAME]
			);

			ShowPlayerDialog(issuerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FF5533}Зеленая зона", fmt_text, "Закрыть", "");

			format(fmt_text, sizeof fmt_text, "[A] %s[%d] попытался ударить %s[%d] в зеленой зоне %s", GetPlayerNameEx(issuerid), issuerid, GetPlayerNameEx(playerid), playerid, g_green_zones[green_zone_id][GZ_NAME]);
			SendMessageToAdmins(fmt_text, 0xFF5533FF);

			return 0;
		}
	}

	if(TEAM_DPS <= GetPlayerTeamEx(issuerid) <= TEAM_FBI)
	{
		if(weaponid == WEAPON_NITESTICK)
		{
			SetPlayerAnimation(playerid, 21);
			TogglePlayerControllable(playerid, false);

			SetTimerEx("UnfreezePlayer", 15000, false, "i", playerid);

			new fmt_text[90];

			format(fmt_text, sizeof fmt_text, "Вы оглушили %s на 15 секунд", GetPlayerNameEx(playerid));
			SendClientMessage(issuerid, 0x3399FFFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "%s оглушил Вас на 15 секунд", GetPlayerNameEx(issuerid));
			SendClientMessage(playerid, 0x3399FFFF, fmt_text);

			CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);
		}
	}

	if(GetPlayerData(issuerid, P_POWER))
	{
		if(!weaponid)
		{
			new Float: armour,
				Float: taken_health;

			GetPlayerHealth(playerid, health);
			GetPlayerArmour(playerid, armour);

			taken_health = GetPlayerData(issuerid, P_POWER) * 0.05;

			if(armour) SetPlayerArmour(playerid, armour - taken_health);
			else SetPlayerHealth(playerid, health - taken_health);
		}
	}

	return 1;
}

public: UnfreezePlayer(playerid)
{
	ClearAnimations(playerid);
	TogglePlayerControllable(playerid, true);

	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	SetVehicleData(vehicleid, V_DRIVER_ID, INVALID_PLAYER_ID);

	if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_ADMIN_CAR || GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_ORG_CAR)
    {
        if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_ORG_CAR)
        SetPlayerData(GetVehicleData(vehicleid, V_ACTION_OWNER), P_FRACTION_CAR, INVALID_VEHICLE_ID);

        DestroyVehicle(vehicleid);
    }

	if(IsAOwnableCar(vehicleid))
	{
		new index = GetVehicleData(vehicleid, V_ACTION_ID);

		SetVehiclePos
		(
			vehicleid,
			GetOwnableCarData(index, OC_POS_X),
			GetOwnableCarData(index, OC_POS_Y),
			GetOwnableCarData(index, OC_POS_Z)
		);
		SetVehicleZAngle(vehicleid, GetOwnableCarData(index, OC_ANGLE));
	}
	if(IsAFamilyCar(vehicleid))
    {
        new index = GetVehicleData(vehicleid, V_ACTION_ID);

        SetVehiclePos
        (
            vehicleid,
            GetFamilyCarData(index, F_POS_X),
            GetFamilyCarData(index, F_POS_Y),
            GetFamilyCarData(index, F_POS_Z)
        );
        SetVehicleZAngle(vehicleid, GetFamilyCarData(index, F_ANGLE));
    }
	else
	{
		DestroyVehicleLabel(vehicleid);
		SetVehicleData(vehicleid, V_FUEL, 40.0);
	}
	SetVehicleData(vehicleid, V_LIMIT, true);
	SetVehicleParamsEx(vehicleid, IsABike(vehicleid) ? VEHICLE_PARAM_ON : VEHICLE_PARAM_OFF, VEHICLE_PARAM_OFF, VEHICLE_PARAM_OFF, VEHICLE_PARAM_OFF, VEHICLE_PARAM_OFF, VEHICLE_PARAM_OFF, VEHICLE_PARAM_OFF);

	if(IsAOwnableCar(vehicleid)) SetVehicleHealth(vehicleid, GetVehicleData(vehicleid, V_HEALTH));

	switch(GetVehicleData(vehicleid, V_ACTION_TYPE))
	{
		case
			VEHICLE_ACTION_TYPE_FACTORY,
			VEHICLE_ACTION_TYPE_BUS_DRIVER,
			VEHICLE_ACTION_TYPE_TAXI_DRIVER,
			VEHICLE_ACTION_TYPE_MECHANIC,
			VEHICLE_ACTION_TYPE_TRUCKER:
		{
			SetVehicleData(vehicleid, V_ACTION_ID, VEHICLE_ACTION_ID_NONE);

			foreach(new i : Player)
			{
				if(!IsPlayerConnected(i) || !IsPlayerLogged(i)) continue;
				if(GetPlayerJobCar(i) != vehicleid) continue;

				SetPlayerData(i, P_JOB_CAR, INVALID_VEHICLE_ID);
				SetPlayerData(i, P_RENT_BIKE, INVALID_VEHICLE_ID);
			}
		}
		case VEHICLE_ACTION_TYPE_RENT_BIKE:
        {
            foreach(new i : Player)
            {
                if(!IsPlayerConnected(i) || !IsPlayerLogged(i)) continue;
                if(GetPlayerData(i, P_RENT_BIKE) != vehicleid) continue;
                DestroyVehicle(vehicleid);
                SetPlayerData(i,  P_RENT_BIKE, 0);
                SendClientMessage(i,-1,"Арендованный Т/С был возвращен на стоянку, договор аренды расторгнут!");
            }
        }


	}
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
	if(GetVehicleCarMarketID(vehicleid) != -1)
		rent_cars_data[vehicleid - first_rent_car_id][rent_car_tenant_id] = INVALID_PLAYER_ID;

	if(IsAOwnableCar(vehicleid)) SetVehicleData(vehicleid, V_HEALTH, 300.0);

	return 1;
}

public OnPlayerText(playerid, text[])
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC);

	if(!IsPlayerLogged(playerid)) return 0;

	if(GetPlayerData(playerid, P_MUTE))
	{
		SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать чат во время мута");

		SetPlayerChatBubble(playerid, "(( MUTED ))", 0xFF5533FF, 10.5, 2000);

		return 0;
	}
 	if(strcmp(text, "q", true) == 0)
    {
		SetPlayerChatBubble(playerid, "Показал(а) распальцовку", 0xFF5533FF, 10.5, 2000);
		Action(playerid, "Показал(а) распальцовку");
        return 0;
 	}
	if(GetPlayerAntiFloodData(playerid, AF_RATE) >= MAX_FLOOD_RATE)
	{
		SendClientMessage(playerid, 0x6B6B6BFF, "Не флудите");

		if(GetPlayerAntiFloodData(playerid, AF_RATE) >= MAX_FLOOD_RATE + 500)
			SendClientMessage(playerid, 0x6B6B6BFF, "Пожалуйста, подождите несколько секунд...");

		return 0;
	}
	if(strlen(text) > 90) return 0;

	if(IsAIP(text))
	{
   		SendClientMessage(playerid, -1, "Подозрения в рекламе!");
       	return false;
    }

	if(GetPlayerPhoneCall(playerid, PC_TIME) != -1)
	{
		new caller = GetPlayerPhoneCall(playerid, PC_INCOMING_PLAYER);
		new call_to = GetPlayerPhoneCall(playerid, PC_OUTCOMING_PLAYER);

		new fmt_str[128];
		format(fmt_str, sizeof fmt_str, "[Тел] %s: %s", GetPlayerNameEx(playerid), text);

		if(call_to != INVALID_PLAYER_ID && playerid == GetPlayerPhoneCall(call_to, PC_INCOMING_PLAYER))
		{
			SendClientMessage(call_to, 0xFFFF00FF, fmt_str);
		}
		else if(caller != INVALID_PLAYER_ID && playerid == GetPlayerPhoneCall(caller, PC_OUTCOMING_PLAYER))
		{
			SendClientMessage(caller, 0xFFFF00FF, fmt_str);
		}
		SendMessageInLocal(playerid, fmt_str, 0x999999FF, 25.0);

		return 0;
	}
	else if(!strcmp(text, "(", true))
	{
		Action(playerid, "расстроился", _, false);
	}
	else if(!strcmp(text, "((", true))
	{
		if(!IsPlayerInAnyVehicle(playerid))
			ApplyAnimationEx(playerid, "GRAVEYARD", "mrnF_loop", 4.1, false, 0, 0, 0, 0, 0);

		Action(playerid, "сильно расстроился", _, false);
	}
	else if(!strcmp(text, ")", true))
	{
		Action(playerid, "улыбается", _, false);
	}
	else if(!strcmp(text, "))", true))
	{
		Action(playerid, "смеётся", _, false);
	}
	else if(!strcmp(text, "=0", true))
	{
		Action(playerid, "удивился", _, false);
	}
	else SendMessageInChat(playerid, text);

	return 0;
}

public OnPlayerCommandText(playerid, cmdtext[])
{
	return 0;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC, FLOOD_RATE_KICK))
	{
		SendClientMessage(playerid, 0x6B6B6BFF, "При продолжении Вы будете отключены от сервера");

		if(GetPlayerAntiFloodData(playerid, AF_RATE) >= MAX_FLOOD_RATE + 500)
			SendClientMessage(playerid, 0x6B6B6BFF, "Пожалуйста, подождите несколько секунд...");
		return 0;
	}

	if(!ispassenger)
	{
		if(GetPlayerData(playerid, P_DRIVING_LIC) < 1)
		{
			if(!IsABike(vehicleid))
			{
				ClearAnimations(playerid);
				return SendClientMessage(playerid, 0x999999FF, "У Вас нет прав");
			}
		}

		if(GetPlayerData(playerid, P_CUFFED))
		{
			ClearAnimations(playerid);

			new Float: x, Float: y, Float: z;
			GetPlayerPos(playerid, x, y, z);
			SetPlayerPos(playerid, x, y, z);

			return SendClientMessage(playerid, 0x999999FF, "Вы закованы в наручники");
		}

		if(IsPlayerInVehicle(GetVehicleData(vehicleid, V_DRIVER_ID), vehicleid) && GetPlayerState(GetVehicleData(vehicleid, V_DRIVER_ID)) == PLAYER_STATE_DRIVER)
		{
			ClearAnimations(playerid);

			new Float: x, Float: y, Float: z;
			GetPlayerPos(playerid, x, y, z);
			SetPlayerPos(playerid, x, y, z);

			return GameTextForPlayer(playerid, "~r~~h~car is used", 1000, 4);
		}
	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);

	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);

	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if(vehicleid)
			OnPlayerEnterVehicleEx(playerid, vehicleid, !(newstate % 2));
	}
	if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
	{
		new vehicleid = GetPlayerLastVehicle(playerid);

		if(vehicleid != INVALID_VEHICLE_ID)
			OnPlayerExitVehicleEx(playerid, vehicleid, !(oldstate % 2));
	}

	UpdateSpectate(playerid, false);
	return 1;
}

public: OnPlayerEnterVehicleEx(playerid, vehicleid, is_driver)
{
	SetPlayerData(playerid, P_LAST_VEHICLE, vehicleid);

	new vehicle_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
	new action_id = GetVehicleData(vehicleid, V_ACTION_ID);


	if(is_driver)
	{
		if(!IsABike(vehicleid))
        {
            SendClientMessage(playerid,0xCECECEFF,"{6666CC}[Подсказка]: {FFFFFF}Завести двигатель - {6666CC}/e(CTRL)");
            SendClientMessage(playerid,0xCECECEFF,"{6666CC}[Подсказка]: {FFFFFF}Включить радио - {6666CC}/radio");
            SendClientMessage(playerid,0xCECECEFF,"{6666CC}[Подсказка]: {FFFFFF}Включить фары - {6666CC}/l(ALT)");
        }
		SetVehicleData(vehicleid, V_DRIVER_ID, playerid);

		if(!GetVehicleParam(vehicleid, V_LOCK))
		{
			if(GetPlayerData(playerid, P_DRIVING_LIC) > 0)
			{
				if(!IsABike(vehicleid))
					SpeedometrShowForPlayer(playerid);

				switch(vehicle_type)
				{
					case VEHICLE_ACTION_ORG_CAR:
		            {
		                new frac_id = GetVehicleData(vehicleid, V_ACTION_ID);
		                if(GetPlayerData(playerid, P_TEAM) != frac_id)
		                {
		                    SendClientMessage(playerid, -1, "{808080}Ошибка:{FFFFFF} Вам не доступен данный транспорт [ORG]");
		                    RemovePlayerFromVehicle(playerid);
		                }
		            }
					case VEHICLE_ACTION_TYPE_DRIVING_SCH:
					{
						if(GetPlayerDrivingExamInfo(playerid, DE_POINTS) >= 9)
						{
							SetPVarFloat(playerid, "car_damage", 1000.0);

							SetVehicleParam(vehicleid, V_LOCK, VEHICLE_PARAM_ON);
							NextDrivingExamRouteCP(playerid);

							SendClientMessage(playerid, 0x66CC00FF, "[Инструктор] Проедьтесь немного по городу");
							SendClientMessage(playerid, 0xFFFF00FF, "Внимание! Если Вы попадете в аварию или выйдете из машины, экзамен будет завершен");
							SendClientMessage(playerid, 0xFFFFFFFF, "Чтобы открыть ворота подайте {0099FF}звуковой сигнал");
						}
						else
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Транспорт принадлежит автошколе");
						}
					}
					/*case VEHICLE_ACTION_TYPE_LOADER:
					{
						RemovePlayerFromVehicle(playerid);
						SendClientMessage(playerid, 0xCECECEFF, "Вам недоступен данный транспорт");
						if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADER)
						{
							SetVehicleParam(vehicleid, V_LOCK, true);

							DisablePlayerCheckpoint(playerid);

							SendClientMessage(playerid, 0xFFFFFFFF, "Используйте {00CC00}Num 2 {FFFFFF}и {00CC00}Num 8 {FFFFFF}для управления погрузчиком");
							SendClientMessage(playerid, 0xFFFFFFFF, "Чтобы взять или положить груз можно использовать {3399FF}/take");
						}
						else
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вы не грузчик");
						}
					}*/
					case VEHICLE_ACTION_TYPE_FACTORY:
					{
						if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY_TRUCKER)
						{
							new job_car = GetPlayerJobCar(playerid);

							if(job_car == INVALID_VEHICLE_ID && action_id == VEHICLE_ACTION_ID_NONE)
							{
								new bool: take_car = true;
								switch(GetVehicleData(vehicleid, V_MODELID))
								{
									case 514:
									{
										CreateVehicleLabel(vehicleid, "Доставка топлива\n{FFFFFF}Загрузка 0 / 8000 л", 0xFF6600FF, 0.0, 2.1, 2.1, 20.0);

										SendClientMessage(playerid, 0x66CC00FF, "Прицепите цистерну и отправляйтесь на нефтезавод для закупки топлива");
										SendClientMessage(playerid, 0xFFFFFFFF, "Убедитесь, что склад не полон и заводу действительно необходимо топливо");
									}
									case 498:
									{
										CreateVehicleLabel(vehicleid, "Доставка металла\n{FFFFFF}Загрузка 0 / 500 кг", 0x3399FFFF, 0.0, 0.0, 1.8, 20.0);

										SendClientMessage(playerid, 0x66CC00FF, "Отправляйтесь на шахту, чтобы закупить металл для завода");
										SendClientMessage(playerid, 0xFFFFFFFF, "Убедитесь, что склад не полон и заводу действительно нужен металл");
									}
									default: take_car = false;
								}
								if(take_car)
								{
									SetVehicleData(vehicleid, V_ACTION_ID, true);
									SetPlayerData(playerid, P_JOB_CAR, vehicleid);
								}
							}
							else if(vehicleid != job_car)
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xCECECEFF, "Вы не можете использовать этот транспорт в данный момент");
							}
							else KillEndJobTimer(playerid);
						}
						else
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вы не работник службы доставки завода");
						}
					}
					case VEHICLE_ACTION_TYPE_BUS_DRIVER: // Водитель автобуса
					{
						if(GetPlayerJob(playerid) == JOB_BUS_DRIVER)
						{
							new job_car = GetPlayerJobCar(playerid);

							if(!IsPlayerInJob(playerid) && job_car != vehicleid && action_id == VEHICLE_ACTION_ID_NONE)
							{
								Dialog
								(
									playerid, DIALOG_BUS_RENT_CAR, DIALOG_STYLE_MSGBOX,
									"{FFCD00}Автобусный парк",
									"{FFFFFF}Чтобы взять машину, необходимо заплатить городскому автопарку 180 рублей\n"\
									"Вы действительно хотите взять автобус в аренду?",
									"Да", "Нет"
								);
							}
							else if(vehicleid != job_car)
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xCECECEFF, "Вы не можете использовать этот транспорт в данный момент");
							}
							else KillEndJobTimer(playerid);
						}
						else
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вы не водитель автобуса");
						}
					}
					case VEHICLE_ACTION_TYPE_TAXI_DRIVER: // Таксист
					{
						if(GetPlayerJob(playerid) == JOB_TAXI_DRIVER)
						{
							new job_car = GetPlayerJobCar(playerid);

							if(!IsPlayerInJob(playerid) && job_car != vehicleid && action_id == VEHICLE_ACTION_ID_NONE)
							{
								Dialog
								(
									playerid, DIALOG_TAXI_RENT_CAR, DIALOG_STYLE_MSGBOX,
									"{FFCD00}Таксопарк",
									"{FFFFFF}Чтобы взять машину, необходимо заплатить городскому таксопарку 200 рублей\n"\
									"Вы действительно хотите заключить договор аренды?",
									"Да", "Нет"
								);
							}
							else if(vehicleid != job_car)
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xCECECEFF, "Вы не можете использовать этот транспорт в данный момент");
							}
							else KillEndJobTimer(playerid);
						}
						else
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вы не таксист");
						}
					}
					case VEHICLE_ACTION_TYPE_MECHANIC: // Автомеханик
					{
						if(GetPlayerJob(playerid) == JOB_MECHANIC)
						{
							new job_car = GetPlayerJobCar(playerid);

							if(!IsPlayerInJob(playerid) && job_car != vehicleid && action_id == VEHICLE_ACTION_ID_NONE)
							{
								Dialog
								(
									playerid, DIALOG_MECHANIC_RENT_CAR, DIALOG_STYLE_MSGBOX,
									"{FFCD00}Автопарк",
									"{FFFFFF}Чтобы взять машину, необходимо заплатить городскому автопарку 180 рублей\n"\
									"Вы действительно хотите заключить договор аренды?",
									"Да", "Нет"
								);
							}
							else if(vehicleid != job_car)
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xCECECEFF, "Вы не можете использовать этот транспорт в данный момент");
							}
							else KillEndJobTimer(playerid);
						}
						else
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вы не автомеханик");
						}
					}
					case VEHICLE_ACTION_TYPE_TRUCKER: // Дальнобойщик
					{
						if(GetPlayerJob(playerid) == JOB_TRUCKER)
						{
							new job_car = GetPlayerJobCar(playerid);

							if(!IsPlayerInJob(playerid) && job_car != vehicleid && action_id == VEHICLE_ACTION_ID_NONE)
							{
								Dialog
								(
									playerid, DIALOG_TRUCKER_RENT_CAR, DIALOG_STYLE_MSGBOX,
									"{FFCD00}Автопарк",
									"{FFFFFF}Чтобы взять машину, необходимо заплатить городскому автопарку 180 рублей\n"\
									"Вы действительно хотите заключить договор аренды?",
									"Да", "Нет"
								);
							}
							else if(vehicleid != job_car)
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xCECECEFF, "Вы не можете использовать этот транспорт в данный момент");
							}
							else KillEndJobTimer(playerid);
						}
						else
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вы не дальнобойщик");
						}
					}
				/*	case VEHICLE_ACTION_TYPE_GOV_CAR..VEHICLE_ACTION_TYPE_LYT_CAR:
					{
						if(GetPlayerTeamEx(playerid) != vehicle_type - 9)
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вам недоступен данный транспорт");
						}
					}
					*/
					case VEHICLE_ACTION_TYPE_RENT_CAR:
					{
						if(!(playerid == rent_cars_data[vehicleid - first_rent_car_id][rent_car_tenant_id] && GetPlayerRentCar(playerid) == vehicleid))
						{
							TogglePlayerControllable(playerid, false);
							CallLocalFunction("ShowBuyCarInfo", "ii", playerid, vehicleid);
						}
					}
					case VEHICLE_ACTION_TYPE_ADMIN_CAR:
					{
						if(action_id != 1)
						{
							if(!GetPlayerAdminEx(playerid))
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xCECECEFF, "Вам недоступен данный транспорт");
							}
						}
					}
					case VEHICLE_ACTION_TYPE_FAMILY_CAR:
                    {
                        //new fam_id = GetPlayerData(playerid, P_FAMILY);
                        action_id = GetVehicleData(vehicleid, V_ACTION_ID);
                        
                        if(g_family_car[action_id][F_OWNER_ID] != GetPlayerData(playerid, P_FAMILY) + 1)
                        {
                            if(g_family_car[action_id][F_RANG] > GetPlayerData(playerid, P_FAMILY_RANK))
                            {
                                RemovePlayerFromVehicle(playerid);
                                SendClientMessage(playerid, 0xCECECEFF, "Вам недоступен данный транспорт (RANG)");
                            }
                        }
                        else
                        {
                            RemovePlayerFromVehicle(playerid);
                            SendClientMessage(playerid, 0xCECECEFF, "Вам недоступен данный транспорт (FAMILY)");
                        }
                    }
				}
			}
			else
			{
				if(!IsABike(vehicleid))
				{
					RemovePlayerFromVehicle(playerid);
					SendClientMessage(playerid, 0x999999FF, "У Вас нет прав");
				}
			}
		}
		else RemovePlayerFromVehicle(playerid);
	}
	else
	{
		if(GetPlayerData(playerid, P_CUFFED)) TogglePlayerControllable(playerid, false);

		switch(vehicle_type)
		{
			case VEHICLE_ACTION_TYPE_BUS_DRIVER, VEHICLE_ACTION_TYPE_TAXI_DRIVER:
			{
				new driver = GetVehicleData(vehicleid, V_DRIVER_ID);
				if(driver != INVALID_PLAYER_ID && IsPlayerInJob(driver) && IsPlayerDriver(driver))
				{
					if(GetPlayerJobCar(driver) == vehicleid && IsPlayerInVehicle(driver, vehicleid))
					{
						new tariff = GetPlayerData(driver, P_JOB_TARIFF);

						if(vehicle_type == VEHICLE_ACTION_TYPE_TAXI_DRIVER)
						{
							if(GetPlayerMoneyEx(playerid) >= tariff)
							{
								new fmt_str[90];
								g_taxi_mileage[playerid] = 0.0;

								format(fmt_str, sizeof fmt_str, "%s сел в ваше такси. Счетчик включен", GetPlayerNameEx(playerid));
								SendClientMessage(driver, 0x3399FFFF, fmt_str);

								format(fmt_str, sizeof fmt_str, "Вы сели в такси %s. Тариф: %d рублей (оплата за каждые 100 м поездки)", GetPlayerNameEx(driver), tariff);
								SendClientMessage(playerid, 0x3399FFFF, fmt_str);

								AddPlayerData(driver, P_JOB_LOAD_ITEMS, +, 1);
							}
							else
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xFF6600FF, "Недостаточно денег для оплаты тарифа");
							}
						}
						else
						{
							if(GetPlayerMoneyEx(playerid) >= tariff)
							{
								AddPlayerData(driver, P_JOB_LOAD_ITEMS, +, 1);
								GivePlayerMoneyEx(driver, tariff, "+ Оплата проезда в автобусе", true, true);
							}
							else
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xFF6600FF, "Недостаточно денег для оплаты проезда");
							}
						}
					}
				}
			}
		}
	}
	return 1;
}

public: OnPlayerExitVehicleEx(playerid, vehicleid, is_driver)
{

	StopAudioStreamForPlayer(playerid);

	SetPlayerData(playerid, P_LAST_VEHICLE, INVALID_VEHICLE_ID);

	if(is_driver)
	{
		SetVehicleData(vehicleid, V_DRIVER_ID, INVALID_PLAYER_ID);

		if(!IsABike(vehicleid))
			SpeedometrHideForPlayer(playerid);

		if(GetPlayerDrivingExamInfo(playerid, DE_POINTS) >= 9)
		{
			DisablePlayerRaceCheckpoint(playerid);

			if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_DRIVING_SCH)
			{
				SetVehicleToRespawn(vehicleid);
			}
			SetPlayerData(playerid, P_DRIVING_LIC, 0);
			ClearPlayerDrivingExamInfo(playerid);

			SendClientMessage(playerid, 0xFF6600FF, "Вы покинули учебный автомобиль");
			SendClientMessage(playerid, 0xFF0000FF, "Экзамен провален!");

			DeletePVar(playerid, "car_damage");
		}

		switch(GetVehicleData(vehicleid, V_ACTION_TYPE))
		{
		    case VEHICLE_ACTION_TYPE_RENT_BIKE:
            {
                if(GetPlayerData(playerid, P_RENT_BIKE) != vehicleid) return 1;
                SendClientMessage(playerid, 0xCECECEFF, "У Вас есть 40 сек чтобы вернуться в транспорт , после чего он будет удален");
            }
			case VEHICLE_ACTION_TYPE_FACTORY:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY_TRUCKER)
				{
					if(GetPlayerJobCar(playerid) == vehicleid)
					{
						StartEndJobTimer(playerid);
						SendClientMessage(playerid, 0xFF6600FF, "У Вас есть 15 секунд чтобы вернуться в транспорт");
					}
				}
			}
			case VEHICLE_ACTION_TYPE_BUS_DRIVER:
			{
				if(GetPlayerJob(playerid) == JOB_BUS_DRIVER)
				{
					if(IsPlayerInJob(playerid))
					{
						if(GetPlayerJobCar(playerid) == vehicleid)
						{
							StartEndJobTimer(playerid);
							SendClientMessage(playerid, 0xFF6600FF, "У Вас есть 15 секунд чтобы вернуться в автобус");
						}
					}
				}
			}
			case VEHICLE_ACTION_TYPE_TAXI_DRIVER:
			{
				if(GetPlayerJob(playerid) == JOB_TAXI_DRIVER)
				{
					if(IsPlayerInJob(playerid))
					{
						if(GetPlayerJobCar(playerid) == vehicleid)
						{
							StartEndJobTimer(playerid);
							SendClientMessage(playerid, 0xFF6600FF, "У Вас есть 15 секунд чтобы вернуться в транспорт");
						}
					}
				}
			}
			case VEHICLE_ACTION_TYPE_MECHANIC:
			{
				if(GetPlayerJob(playerid) == JOB_MECHANIC)
				{
					if(IsPlayerInJob(playerid))
					{
						if(GetPlayerJobCar(playerid) == vehicleid)
						{
							StartEndJobTimer(playerid);
							SendClientMessage(playerid, 0xFF6600FF, "У Вас есть 15 секунд чтобы вернуться в транспорт");
						}
					}
				}
			}
			case VEHICLE_ACTION_TYPE_TRUCKER:
			{
				if(GetPlayerJob(playerid) == JOB_TRUCKER)
				{
					if(IsPlayerInJob(playerid))
					{
						if(GetPlayerJobCar(playerid) == vehicleid)
						{
							StartEndJobTimer(playerid);
							SendClientMessage(playerid, 0xFF6600FF, "У Вас есть 15 секунд чтобы вернуться в транспорт");
						}
					}
				}
			}
		}
	}
	else
	{
		if(GetPlayerData(playerid, P_CUFFED)) TogglePlayerControllable(playerid, true);
	}
	return 1;
}

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
	if(GetVehicleParam(vehicleid, V_ENGINE) == VEHICLE_PARAM_ON && GetPlayerData(playerid, P_IMPROVEMENTS) < 4)
	{
		SetVehicleParam(vehicleid, V_ENGINE, VEHICLE_PARAM_OFF);
		GameTextForPlayer(playerid, "~r~~h~engine off", 4000, 6);

		new Float: veh_health;

		GetVehicleHealth(vehicleid, veh_health);

		if(IsAOwnableCar(vehicleid))
		{
			SetVehicleData(vehicleid, V_HEALTH, veh_health);

			if(veh_health < 300.0)
			{
				SetVehicleData(vehicleid, V_HEALTH, 300.0);
			}
		}

		switch(GetVehicleData(vehicleid, V_ACTION_TYPE))
		{
			case VEHICLE_ACTION_TYPE_DRIVING_SCH, VEHICLE_ACTION_TYPE_BUS_DRIVER:
			{
				new Float: health = GetPVarFloat(playerid, "car_damage");

				health -= floatabs((health - veh_health));

				SetPVarFloat(playerid, "car_damage", health);
			}
		}
	}
    return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);

	new action_type = GetPlayerCPInfo(playerid, CP_ACTION_TYPE);
	if(IsPlayerInCheckpoint(playerid))
	{
		switch(action_type)
		{
			case CP_ACTION_TYPE_LOADER_JOB_TAKE:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADER)
				{
					if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_LOADER_LOAD)
					{
						if(!IsPlayerInAnyVehicle(playerid))
						{
							DisablePlayerCheckpoint(playerid);

							ClearAnimations(playerid);
							ApplyAnimationEx(playerid, "CARRY", "liftup", 4.0, 0, 0, 0, 0, 0, 0, USE_ANIM_TYPE_NONE - 1);
							SetTimerEx("SetPlayerLoaderJobLoad", 1000, false, "i", playerid);
						}
					}
				}
			}
			case CP_ACTION_TYPE_MINER_JOB_PUT:
            {
                new fmt_str[64];
                //
                new rand = random(10) + 5;
                new items = GetPlayerJobLoadItems(playerid) + rand;
                //
                RemovePlayerAttachedObjectEx(playerid, A_OBJECT_SLOT_SPINE, A_OBJECT_SLOT_HAND + 1);
                RemovePlayerAttachedObjectEx(playerid, A_OBJECT_SLOT_SPINE + 1, A_OBJECT_BONE_SPINE);
                //
                ApplyAnimationEx(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0, 1);
                SetPlayerJobLoadItems(playerid, items);
                //
                SetPlayerTempJobState(playerid, TEMP_JOB_STATE_MINER_LOAD);
                //
                format(fmt_str, sizeof fmt_str, "Вы доставили {FF9900}%d кг {32a44b}руды", rand);
                SendClientMessage(playerid, 0x32a44bFF, fmt_str);
                //
                format(fmt_str, sizeof fmt_str, "Общее количество добытого сырья: {FF9900}%d кг", items);
                SendClientMessage(playerid, 0x1E90FFFF, fmt_str);
                //
                format(fmt_str, sizeof fmt_str, "+ %d кг", rand);
                SetPlayerChatBubble(playerid, fmt_str, 0x32a44bFF, 10.0, 2000);
                //
                //SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_AMOUNT, itemss + rand);
                //UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE);

				new type = GetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_AMOUNT);

				SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_AMOUNT, type + 50);
				UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE);
                //
                //SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 18634, A_OBJECT_BONE_RIGHT_HAND, 0.07, 0.03, 0.04, 0.0, 270.0, 270.0, 1.5, 2.1, 1.8, 0);
                SetPlayerMinerJobLoadCP(playerid);

                AddPlayerData(playerid, P_QUEST_EXP_3, +, 1);
				UpdatePlayerDatabaseInt(playerid, "quest_exp_3", GetPlayerData(playerid, P_QUEST_EXP_3));

				if(GetPlayerData(playerid, P_QUEST_EXP_3) == 20)
				{
				    SendClientMessage(playerid, COR_SERVER, "[Квесты]: "c_b"Вы успешно выполнили квест "c_i"'Тяжелая профессия'. "c_b"Награда: "c_m"5000000 rub");
				    GivePlayerMoneyEx(playerid, 5000000, "Выполнение квеста");

				    SetPlayerData(playerid, P_QUEST_3, 1);
				    UpdatePlayerDatabaseInt(playerid, "quest_3", 1);
				    
				    AddPlayerData(playerid, P_TOP_5, +, 1);
					UpdatePlayerDatabaseInt(playerid, "TOP_Quest", GetPlayerData(playerid, P_TOP_5));
				}
            }
			case CP_ACTION_TYPE_LOADER_JOB_PUT:
			{
//				if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADER)
//				{
//					if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_LOADER_UNLOAD)
//					{
				SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 1);

				RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
				ApplyAnimationEx(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0, 0);
//
				SetPlayerLoaderJobLoadCP(playerid);

				new fmt_str[120];
				format(fmt_str, sizeof fmt_str, "[Информация]: "c_server"Ящик доставлен на склад! Всего перенесено ящиков: {FF9900}%d шт.", GetPlayerJobLoadItems(playerid));
				SendClientMessage(playerid, COR_SERVER, fmt_str);

				AddPlayerData(playerid, P_QUEST_EXP_1, +, 1);
				UpdatePlayerDatabaseInt(playerid, "quest_exp_1", GetPlayerData(playerid, P_QUEST_EXP_1));

				if(GetPlayerData(playerid, P_QUEST_EXP_1) == 10)
				{
				    SendClientMessage(playerid, COR_SERVER, "[Квесты]: "c_b"Вы успешно выполнили квест "c_i"'Первые деньги'. "c_b"Награда: "c_m"50000р");
				    GivePlayerMoneyEx(playerid, 50000, "Выполнение квеста");

				    SetPlayerData(playerid, P_QUEST_1, 1);
				    UpdatePlayerDatabaseInt(playerid, "quest_1", 1);
				    
				    AddPlayerData(playerid, P_TOP_5, +, 1);
					UpdatePlayerDatabaseInt(playerid, "TOP_Quest", GetPlayerData(playerid, P_TOP_5));
				}
			}
			case CP_ACTION_TYPE_GPS:
			{
			    DisablePlayerCheckpoint(playerid);
			    Send(playerid,COR_SERVER,"[Навигатор]: Вы прибыли до места назначения.");
			}
			case CP_ACTION_TYPE_MINER_JOB_TAKE:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER)
				{
					if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_MINER_LOAD)
					{
						if(!IsPlayerInAnyVehicle(playerid))
						{
							ApplyAnimationEx(playerid, "BASEBALL", "Bat_4", 3.1, 1, 1, 1, 0, 0, 0, USE_ANIM_TYPE_NONE - 1);
							SetTimerEx("SetPlayerMinerJobTakeOre", 15_000, false, "ii", playerid, 1);
						}
					}
				}
			}
			case CP_ACTION_TYPE_LUMBERJACK_PUT:
			{

				SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LUMBERJACK_CHOP);
				ApplyAnimationEx(playerid, "CARRY", "putdwn", 4.1, 1, 0, 1, 0, 800, 0);

				RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
				//SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 326, A_OBJECT_BONE_RIGHT_HAND, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0);

				SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 1);

				new fmt_text[65];

				format(fmt_text, sizeof fmt_text, "Дрова доставлены на склад! Всего перенесено дров: {FF9900}%d шт", GetPlayerJobLoadItems(playerid));
				SendClientMessage(playerid, 0x66CC00FF, fmt_text);

				SetPlayerLumberJackChopCP(playerid);

				AddPlayerData(playerid, P_QUEST_EXP_4, +, 1);
				UpdatePlayerDatabaseInt(playerid, "quest_exp_4", GetPlayerData(playerid, P_QUEST_EXP_4));

				if(GetPlayerData(playerid, P_QUEST_EXP_4) == 20)
				{
				    SendClientMessage(playerid, COR_SERVER, "[Квесты]: "c_b"Вы успешно выполнили квест "c_i"'Высокие деревья'. "c_b"Награда: "c_m"50000р");
				    GivePlayerMoneyEx(playerid, 50000, "Выполнение квеста");

				    SetPlayerData(playerid, P_QUEST_4, 1);
				    UpdatePlayerDatabaseInt(playerid, "quest_4", 1);
				    
				    AddPlayerData(playerid, P_TOP_5, +, 1);
					UpdatePlayerDatabaseInt(playerid, "TOP_Quest", GetPlayerData(playerid, P_TOP_5));
				}

			}
			case CP_ACTION_TYPE_LUMBERJACK_TAKE:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_LUMBERJACK)
				{
					if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_LUMBERJACK_CHOP)
					{
						if(!IsPlayerInAnyVehicle(playerid))
						{
							DisablePlayerCheckpoint(playerid);

							ApplyAnimationEx(playerid, "BASEBALL", "Bat_4", 3.1, 1, 1, 1, 0, 0, 0, USE_ANIM_TYPE_NONE - 1);

							SetTimerEx("SetPlayerLumberJackTakeWood", (random(5) + 10) * 1000, false, "i", playerid);
						}
					}
				}
			}
		}
	}
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);

	new action_type = GetPlayerRaceCPInfo(playerid, RCP_ACTION_TYPE);
	new vehicleid = GetPlayerVehicleID(playerid);
	
	
	if(IsPlayerInRaceCheckpoint(playerid))
	{
		switch(action_type)
		{
			case RCP_ACTION_TYPE_DRIVING_EXAM:
			{
				if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_DRIVING_SCH)
				{
					new step = GetPlayerDrivingExamInfo(playerid, DE_ROUTE_STEP);

					if(step >= sizeof driving_exam_route - 1)
					{
						ClearPlayerDrivingExamInfo(playerid);
						DisablePlayerRaceCheckpoint(playerid);

						new Float: health = GetPVarFloat(playerid, "car_damage");
						SetVehicleToRespawn(vehicleid);

						if(health < 900.0)
						{
							SetPlayerData(playerid, P_DRIVING_LIC, 0);

							Dialog
							(
								playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
								"{FF9900}Экзамен провален",
								"{FFFFFF}К сожалению, Вам не удалось справиться с практической частью экзамена.\n"\
								"Уровень повреждений машины слишком высокий.\n\n"\
								"В сдедующий раз постарайтесь ехать аккуратнее, соблюдая ПДД.\n"\
								"Ждем Вас на пересдаче!",
								"Ок", ""
							);
						}
						else
						{
							new query[64];
							format(query, sizeof query, "UPDATE accounts SET driving_lic=%d WHERE id=%d LIMIT 1", GetPlayerData(playerid, P_DRIVING_LIC), GetPlayerAccountID(playerid));
							mysql_query(mysql, query, false);

							if(!mysql_errno())
							{
								Dialog
								(
									playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
									"{66CC00}Экзамен пройден успешно",
									"{FFFFFF}Вы успешно сдали практическую часть экзамена по вождению\n"\
									"и получаете водительское удостоверение!\n"\
									"{9999FF}На Вашей машине не обнаружено никаких повреждений, либо\n"\
									"они незначительны.\n"\
									"{FFFFFF}Не забывайте клавиши управления транспортом, а также\n"\
									"правила дорожного движения. Они будут постоянно нужны\n"\
									"Вам на дороге. Обучающий раздел в автошколе будет все\n"\
									"время доступен если понадобится какая-либо помощь.",
									"Ок", ""
								);
							}
							else
							{
								SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, обратитесь к администрации {FF0000}(equ-code 07)");
							}
						}
					}
					else if(step >= 0)
					{
						NextDrivingExamRouteCP(playerid);
					}
				}
			}
			case RCP_ACTION_TYPE_BUS_ROUTE:
			{
				if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_BUS_DRIVER)
				{
					if(IsPlayerInJob(playerid))
					{
						new route_id = GetPlayerData(playerid, P_BUS_ROUTE);
						new route_step = GetPlayerData(playerid, P_BUS_ROUTE_STEP);

						if(g_bus_route[route_id][route_step][BRS_POS_X] == 0.0)
						{
							SetPlayerData(playerid, P_BUS_ROUTE_STEP, 0);
						}

						if(g_bus_route[route_id][route_step - 1][BRS_STOP])
						{
							new fmt_str[90];
							DisablePlayerRaceCheckpoint(playerid);

							GameTextForPlayer(playerid, "~r~Stop", 4000, 1);
							SendClientMessage(playerid, 0x66CC00FF, "Остановка. Ждите пассажиров");

							format(fmt_str, sizeof fmt_str, "Автобус по маршруту %s отправляется через 10 секунд", g_bus_routes[route_id][BR_NAME]);
							SendMessageInLocal(playerid, fmt_str, 0x669999FF, 45.0);

							SetTimerEx("NextBusRouteCP", 10_000, false, "i", playerid);
						}
						else
						{
							AddPlayerData(playerid, P_JOB_WAGE, +, random(30) + 20);
							NextBusRouteCP(playerid);
						}
					}
				}
			}
			case RCP_ACTION_TYPE_ORDER:
			{
				if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TRUCKER)
				{
					new order_id = GetPlayerData(playerid, P_ORDER);

					if(IsPlayerInJob(playerid) && order_id != -1)
					{
						if(!GetTruckIndex(vehicleid))
						{
							new biz_id = GetOrderData(order_id, O_COMPANY_ID);

							if(!IsPlayerInRangeOfPoint(playerid, 4.5, GetBusinessData(biz_id, B_EXIT_POS_X), GetBusinessData(biz_id, B_EXIT_POS_Y), GetBusinessData(biz_id, B_EXIT_POS_Z))) return 1;

							if(!GetPlayerJobLoadItems(playerid))
								return SendClientMessage(playerid, 0xCECECEFF, "В Вашем транспорте нет продуктов");

							new fmt_msg[90];

							if(GetPlayerJobLoadItems(playerid) < GetOrderData(order_id, O_AMOUNT))
							{
								SendClientMessage(playerid, 0xFF9933FF, "Недостаточно продуктов для выполнения заказа");
								format(fmt_msg, sizeof fmt_msg, "Вы загрузили %d шт., а требуется %d шт.", GetPlayerJobLoadItems(playerid), GetOrderData(order_id, O_AMOUNT));
								SendClientMessage(playerid, 0xCECECEFF, fmt_msg);
							}
							else
							{
								AddBusinessData(biz_id, B_PRODS, +, GetOrderData(order_id, O_AMOUNT));

								mysql_format(mysql, fmt_msg, sizeof fmt_msg, "UPDATE business SET products=%d WHERE id=%d", GetBusinessData(biz_id, B_PRODS), GetBusinessData(biz_id, B_SQL_ID));
								mysql_query(mysql, fmt_msg, false);

								SetPlayerData(playerid, P_ORDER, -1);
								DisablePlayerRaceCheckpoint(playerid);

								new salary = GetOrderData(order_id, O_AMOUNT) * GetOrderData(order_id, O_PRICE);

								new income = salary - (GetOrderData(order_id, O_AMOUNT) * 24);

								SendClientMessage(playerid, 0xFFFF00FF, "Заказ выполнен!");

								format(fmt_msg, sizeof fmt_msg, "Вы продали предприятию \"%s\" %d продуктов на сумму %d рублей", GetBusinessData(biz_id, B_NAME), GetOrderData(order_id, O_AMOUNT), salary);
								SendClientMessage(playerid, 0x3399FFFF, fmt_msg);

								format(fmt_msg, sizeof fmt_msg, "Чистая прибыль от этой продажи составляет %d рублей", income);
								SendClientMessage(playerid, 0x66CC00FF, fmt_msg);

								AddPlayerData(playerid, P_JOB_WAGE, +, income);

								SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) - GetOrderData(order_id, O_AMOUNT));
								DeleteOrder(order_id);
							}
						}
						else
						{
							new fs_id = GetOrderData(order_id, O_COMPANY_ID);

							if(!IsPlayerInRangeOfPoint(playerid, 4.5, GetFuelStationData(fs_id, FS_POS_X), GetFuelStationData(fs_id, FS_POS_Y), GetFuelStationData(fs_id, FS_POS_Z))) return 1;

							if(!GetPlayerJobLoadItems(playerid))
								return SendClientMessage(playerid, 0xCECECEFF, "В Вашем транспорте нет топлива");

							new fmt_msg[90];

							if(GetPlayerJobLoadItems(playerid) < GetOrderData(order_id, O_AMOUNT))
							{
								SendClientMessage(playerid, 0xFF9933FF, "Недостаточно топлива для выполнения заказа");
								format(fmt_msg, sizeof fmt_msg, "Вы загрузили %d л., а требуется %d л.", GetPlayerJobLoadItems(playerid), GetOrderData(order_id, O_AMOUNT));
								SendClientMessage(playerid, 0xCECECEFF, fmt_msg);
							}
							else
							{
								AddFuelStationData(fs_id, FS_FUELS, +, GetOrderData(order_id, O_AMOUNT));

								mysql_format(mysql, fmt_msg, sizeof fmt_msg, "UPDATE fuel_stations SET fuels=%d WHERE id=%d", GetFuelStationData(fs_id, FS_FUELS), GetFuelStationData(fs_id, FS_SQL_ID));
								mysql_query(mysql, fmt_msg, false);

								SetPlayerData(playerid, P_ORDER, -1);
								DisablePlayerRaceCheckpoint(playerid);

								new salary = GetOrderData(order_id, O_AMOUNT) * GetOrderData(order_id, O_PRICE);

								new income = salary - (GetOrderData(order_id, O_AMOUNT) * 24);

								SendClientMessage(playerid, 0xFFFF00FF, "Заказ выполнен!");

								format(fmt_msg, sizeof fmt_msg, "Вы продали АЗС \"%s\" %d л. топлива на сумму %d рублей", GetFuelStationData(fs_id, FS_NAME), GetOrderData(order_id, O_AMOUNT), salary);
								SendClientMessage(playerid, 0x3399FFFF, fmt_msg);

								format(fmt_msg, sizeof fmt_msg, "Чистая прибыль от этой продажи составляет %d рублей", income);
								SendClientMessage(playerid, 0x66CC00FF, fmt_msg);

								AddPlayerData(playerid, P_JOB_WAGE, +, income);

								SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) - GetOrderData(order_id, O_AMOUNT));
								DeleteOrder(order_id);
							}
						}
					}
				}
			}

			default:
			{

			}
		}

	}
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

public OnObjectMoved(objectid)
{
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

stock ClearMedBed(playerid, bedid)
{
	if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1)
	{
		SetPlayerData(playerid, P_OCCUPIED_BED, -1);
	}

	g_med_bed_used[bedid] = false;
	UpdateMedBed(bedid);

	return 1;
}

stock UpdateMedBed(bedid) // обновить койку
{
	new fmt_text[85];

	format(fmt_text, sizeof fmt_text, "Койка №%d\n{00CC00}Свободна\n\n{AAAAAA}Нажмите левый ALT\nчтобы занять ее\n(/medbed)", bedid + 1);
	UpdateDynamic3DTextLabelText(g_med_bed_label[bedid], 0xFFFFFFEE, fmt_text);

	return 1;
}

public: HospitalTreatment()
{
	for(new playerid; playerid < MAX_PLAYERS; playerid ++)
	{
		if(!IsPlayerConnected(playerid)) continue;
		else if(!IsPlayerLogged(playerid)) continue;
		else if(GetPlayerData(playerid, P_OCCUPIED_BED) == -1) continue;

		if(!IsPlayerInRangeOfPoint(playerid, 150.0, 2054.7827,1415.1486,998.8735))
		{
			ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
		}
		else
		{
			GameTextForPlayer(playerid, "~g~~h~~h~+ 3 HP", 1000, 4);
			SetPlayerChatBubble(playerid, "+3 hp", 0x33CC33FF, 5.0, 1000);

			SetPlayerHealthEx(playerid, 3.0, true);
		}
	}
	SetTimer("HospitalTreatment", (random(5) + 1) * 1000, false);
	return 1;
}

/*public: OnPlayerChangeWeapon(playerid, weaponid)
{
//	RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_NECK);

	new player_tint = GetPlayerData(playerid, P_WEAPON_TINT)[ GetTintIDByWeapon(weaponid) ];

	if(player_tint)
		SetPlayerWeaponTint(playerid, weaponid, player_tint);
}

stock SetPlayerWeaponTint(playerid, weaponid, player_tint)
{
	new tintid = GetTintIDByWeapon(weaponid);

	SetPlayerAttachedObject
	(
		playerid,
		A_OBJECT_SLOT_NECK,
		GetWeaponTintData(tintid, WT_OBJECT),
		A_OBJECT_BONE_RIGHT_HAND,
		GetWeaponTintData(tintid, WT_X),
		GetWeaponTintData(tintid, WT_Y),
		GetWeaponTintData(tintid, WT_Z),
		GetWeaponTintData(tintid, WT_RX),
		GetWeaponTintData(tintid, WT_RY),
		GetWeaponTintData(tintid, WT_RZ),
		GetWeaponTintData(tintid, WT_SCALE_X),
		GetWeaponTintData(tintid, WT_SCALE_Y),
		GetWeaponTintData(tintid, WT_SCALE_Z),
		GetWeaponTint(player_tint)
	);

	return 1;
}

stock GetTintIDByWeapon(weaponid)
{
	new tint;

	switch(weaponid)
	{
		case 22: tint = 0;
		case 23: tint = 1;
		case 24: tint = 2;
		case 25: tint = 3;
		case 27: tint = 4;
		case 28: tint = 5;
		case 29: tint = 6;
		case 30: tint = 7;
		case 31: tint = 8;
		case 32: tint = 9;
		case 33: tint = 10;
		case 35: tint = 11;
		case 36: tint = 12;
		case 38: tint = 13;
	}

	return tint;
}

stock GetWeaponIDByTint(tintid)
{
	new weapon;

	switch(tintid)
	{
		case 0: weapon = 22;
		case 1: weapon = 23;
		case 2: weapon = 24;
		case 3: weapon = 25;
		case 4: weapon = 27;
		case 5: weapon = 28;
		case 6: weapon = 29;
		case 7: weapon = 30;
		case 8: weapon = 31;
		case 9: weapon = 32;
		case 10: weapon = 33;
		case 11: weapon = 35;
		case 12: weapon = 36;
		case 13: weapon = 38;
	}

	return weapon;
}*/

/*public: BuyCarPTDUpdate(playerid)
{
	if(GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return 1;

	new type = buy_car_select_color_type[playerid];
	new biz_id = GetPlayerInBiz(playerid);
	if (biz_id == -1) return 1;
	new car_market_id = biz_id - 34;

	new select_car = buy_car_select_car[playerid];
	new modelid = car_market_data[car_market_id][select_car][0];

	new fmt_td_text[85];
	format(fmt_td_text, sizeof fmt_td_text, "цвет %d", type + 1);

	PlayerTextDrawSetString(playerid, buy_car_PTD[playerid][2], fmt_td_text);
	PlayerTextDrawShow(playerid, buy_car_PTD[playerid][2]);

	static const
		car_market_name[][] = {"мото-вело", "элитный", "эконом", "средний"};


	format(fmt_td_text, sizeof fmt_td_text, "транспорт #%d", select_car + 1);
	PlayerTextDrawSetString(playerid, buy_car_PTD[playerid][0], fmt_td_text);

	format(fmt_td_text, sizeof fmt_td_text, "%s~n~~n~~b~~h~цена: %d P~n~класс: %s", GetVehicleInfo(modelid - 400, VI_NAME), GetVehicleInfo(modelid - 400, VI_PRICE), car_market_name[car_market_id]);
	PlayerTextDrawSetString(playerid, buy_car_PTD[playerid][1], fmt_td_text);

	new color_index = buy_car_select_color[playerid][type];

	PlayerTextDrawBoxColor(playerid, buy_car_PTD[playerid][4], rgb_array[color_index]);
	PlayerTextDrawShow(playerid, buy_car_PTD[playerid][4]);

	if(--color_index < 0)
		color_index = sizeof rgb_array - 1;

	PlayerTextDrawBoxColor(playerid, buy_car_PTD[playerid][3], rgb_array[color_index] - 0xAA);
	PlayerTextDrawShow(playerid, buy_car_PTD[playerid][3]);

	color_index += 2;
	if(color_index > sizeof rgb_array - 1)
		color_index = 1;

	PlayerTextDrawBoxColor(playerid, buy_car_PTD[playerid][5], rgb_array[color_index] - 0xAA);
	PlayerTextDrawShow(playerid, buy_car_PTD[playerid][5]);

	ChangeVehicleColor(GetPlayerData(playerid, P_BUY_CAR), buy_car_select_color[playerid][0], buy_car_select_color[playerid][1]);
	return 1;
}*/

public: BuyCarPTDUpdate(playerid)
{
	new fmt_str[50];
	new fmt_text[50];
	if(GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return 1;

//	new type = buy_car_select_color_type[playerid];
	new biz_id = GetPlayerInBiz(playerid);
	if (biz_id == -1) return 1;
	new car_market_id = biz_id - 34;

	new select_car = buy_car_select_car[playerid];
	new modelid = car_market_data[car_market_id][select_car][0];

	//new fmt_td_text[85];
	//format(fmt_td_text, sizeof fmt_td_text, "цвет %d", type + 1);

	//PlayerTextDrawSetString(playerid, buy_car_PTD[playerid][2], fmt_td_text);
	//PlayerTextDrawShow(playerid, buy_car_PTD[playerid][2]);

	format(fmt_str, sizeof fmt_str, "%dP", GetVehicleInfo(modelid - 400, VI_PRICE));
	PlayerTextDrawSetString(playerid, autosalon_price_PTD[playerid][0], fmt_str);

    format(fmt_text, sizeof fmt_text, "%s", GetVehicleInfo(modelid - 400, VI_NAME));
	PlayerTextDrawSetString(playerid, autosalon_select_PTD[playerid][0], fmt_text);

	//static const
	//	car_market_name[][] = {"мото-вело", "элитный", "эконом", "средний"};


	//format(fmt_td_text, sizeof fmt_td_text, "транспорт #%d", select_car + 1);
	//PlayerTextDrawSetString(playerid, buy_car_PTD[playerid][0], fmt_td_text);

	//format(fmt_td_text, sizeof fmt_td_text, "%s~n~~n~~b~~h~цена: %d P~n~класс: %s", GetVehicleInfo(modelid - 400, VI_NAME), GetVehicleInfo(modelid - 400, VI_PRICE), car_market_name[car_market_id]);
	//PlayerTextDrawSetString(playerid, buy_car_PTD[playerid][1], fmt_td_text);

///	new color_index = buy_car_select_color[playerid][type];

	//PlayerTextDrawBoxColor(playerid, buy_car_PTD[playerid][4], rgb_array[color_index]);
	//PlayerTextDrawShow(playerid, buy_car_PTD[playerid][4]);

	//if(--color_index < 0)
//		color_index = sizeof rgb_array - 1;

	//PlayerTextDrawBoxColor(playerid, buy_car_PTD[playerid][3], rgb_array[color_index] - 0xAA);
	//PlayerTextDrawShow(playerid, buy_car_PTD[playerid][3]);

	//color_index += 2;
	//if(color_index > sizeof rgb_array - 1)
	//	color_index = 1;

	//PlayerTextDrawBoxColor(playerid, buy_car_PTD[playerid][5], rgb_array[color_index] - 0xAA);
	//PlayerTextDrawShow(playerid, buy_car_PTD[playerid][5]);

	new color = GetPlayerData(playerid, P_AUTOSALON_COLOR);

	ChangeVehicleColor(GetPlayerData(playerid, P_BUY_CAR), color, color);
	return 1;
}

public: ShowBuyCarInfo(playerid, vehicleid)
{
	new text[275];

	//static const vehicle_class_name[][] = {"Мото-вело", "Эконом", "Средний", "Премиум"};

	new modelid = GetVehicleModel(vehicleid) - 400;
	format
	(
		text, sizeof text,
		"{FFFFFF}Тип автомобиля:\t%s класс\n\
		Название:\t\t%s\n\
		Номер модели:\t%d\n\
		Стоимость аренды:\t{FFFF00}%d руб.\n\
		{FFFFFF}Стоимость покупки:\t{00CC00}%d руб.\n\n\
		{FFFFFF}Для покупки этой модели нажмите \"Купить\"\n\
		Чтобы взять авто в аренду используйте /rentcar",
		"Неопределённый",
		//vehicle_class_name[ GetVehicleInfo(modelid, VI_TYPE) ],
		GetVehicleInfo(modelid, VI_NAME),
		modelid + 400,
		GetVehicleInfo(modelid, VI_PRICE) / 100,
		GetVehicleInfo(modelid, VI_PRICE)
	);

	Dialog(playerid, DIALOG_BIZ_CAR_MARKET_CAR_INFO, DIALOG_STYLE_MSGBOX, "{FF9900}Авторынок", text, "Купить", "Выйти");
	return 1;
}

stock ExitPlayerBuyCarMarket(playerid)
{
	if(GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return -1;

	DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
	SetPlayerData(playerid, P_BUY_CAR, INVALID_VEHICLE_ID);

	new in_biz = GetPlayerInBiz(playerid);
	if (in_biz == -1) return 1;

	//BuyCarTDsHideForPlayer(playerid);
	//HidePlayerSelectPanel(playerid);

	TogglePlayerControllable(playerid, true);


	SetPlayerPosEx
	(
		playerid,
		GetBusinessData(in_biz, B_EXIT_POS_X),
		GetBusinessData(in_biz, B_EXIT_POS_Y),
		GetBusinessData(in_biz, B_EXIT_POS_Z),
		GetBusinessData(in_biz, B_EXIT_ANGLE),
		0,
		0
	);
	SetPlayerInBiz(playerid, -1);
	
	HideAutosalonTextDraws(playerid);


//	SetPlayerPosEx(playerid, 1145.5162, 221.0673, 995.1235, 34.2197, 1, biz_id + 6000);

	return 1;
}

stock CarMarketShowNextCar(playerid, next = '+')
{
	new biz_id = GetPlayerInBiz(playerid);
	if(biz_id == -1) return 1;
	new car_market_id = biz_id - 34;

	if(GetBusinessData(biz_id, B_TYPE) != BUSINESS_TYPE_CAR_MARKET) return 1;

	new max_car_index = GetCarMarketMaxIndex(car_market_id);

	if(next == '+')
	{
		if(++buy_car_select_car[playerid] > max_car_index)
			buy_car_select_car[playerid] = 0;
	}
	else
	{
		if(--buy_car_select_car[playerid] < 0)
			buy_car_select_car[playerid] = max_car_index;
	}

	new select_car = buy_car_select_car[playerid];
//	new color_1 = buy_car_select_color[playerid][0];
	//new color_2 = buy_car_select_color[playerid][1];
	new color = GetPlayerData(playerid, P_AUTOSALON_COLOR);

	DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
	SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(car_market_data[car_market_id][select_car][0], 1149.8434, 226.0655, 995.1953, 67.6542, color, color, 1));
	SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
	LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 1);

	CallLocalFunction("BuyCarPTDUpdate", "i", playerid);
	return 1;
}

stock GetCarMarketMaxIndex(market_id)
{
	new max_index;

	for(new idx; idx < 31; idx ++)
	{
		if(car_market_data[market_id][idx][0] == 0)
			break;

		++ max_index;
	}

	return max_index - 1;
}

public: ChangeColorPTDUpdate(playerid)
{
	return 1;
}

public OnPlayerPickUpPickupEx(playerid, pickupid, action_type, action_id)
{

	if(GetPlayerData(playerid, P_PICKUP_TIME) < gettime())
	{
		g_player[playerid][P_PICKUP_TIME] = gettime()+3;
		/*if(action_type != PICKUP_ACTION_TYPE_TELEPORT && GetPlayerData(playerid, P_LAST_PICKUP) != -1)
		{
			return 0;
		}
	*/
		if(IsPlayerInRangeOfPoint(playerid, 5.0, GetPickupInfo(pickupid, P_POS_X), GetPickupInfo(pickupid, P_POS_Y), GetPickupInfo(pickupid, P_POS_Z)))
		{
			SetPlayerData(playerid, P_LAST_PICKUP, pickupid);

			switch(action_type)
			{
				case PICKUP_ACTION_TYPE_TELEPORT:
				{
					if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_NONE)
					{
						switch(GetTeleportData(action_id, T_ACTION_TYPE))
						{
							case T_ACTION_TYPE_BLOCK_LEAVE_AREA:
							{
								SetPlayerData(playerid, P_BLOCK_LEAVE_AREA, true);
							}
							case T_ACTION_TYPE_END_JOB:
							{
								EndPlayerTempJob(playerid, TEMP_JOB_FACTORY, true);
							}
							case T_ACTION_TYPE_LEAVE_HOSPITAL:
							{
								if(GetPlayerData(playerid, P_HOSPITAL))
								{
									if(GetPlayerHealthEx(playerid) < 70.0) return SendClientMessage(playerid, -1, "Медперсонал не может отпустить Вас в таком состоянии. Отправляйтесь на лечение");
									else if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1)
									{
										SendClientMessage(playerid, 0x66CC00FF, "Вы выписались из больницы");
										ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
									}
									SetPlayerData(playerid, P_HOSPITAL, false);
								}
							}
							case T_ACTION_TYPE_LEAVE_PPS:
							{
								if(GetPlayerData(playerid, P_JAIL))
								{
									SendClientMessage(playerid, 0x999999FF, "Время заключения не истекло");

									SetPlayerSpawnPos(playerid);

									return 1;
								}
							}
						}

						SetPlayerPosEx
						(
							playerid,
							GetTeleportData(action_id, T_POS_X),
							GetTeleportData(action_id, T_POS_Y),
							GetTeleportData(action_id, T_POS_Z),
							GetTeleportData(action_id, T_ANGLE),
							GetTeleportData(action_id, T_INTERIOR),
							GetTeleportData(action_id, T_VIRTUAL_WORLD)
						);
					}
				}
				case PICKUP_ACTION_TYPE_DRIVING_TUTO:
				{
					ShowPlayerDrivingTutorial(playerid);
				}
				case PICKUP_ACTION_TYPE_ATM:
				{
					ShowPlayerATMDialog(playerid);
				}
				case PICKUP_ACTION_OBMEN_MONET:
				{
				    ShowPlayerObmenMonet(playerid);
				}
				case PICKUP_ACTION_TYPE_BANK:
				{
					if(action_id)
					{
						callcmd::bank(playerid, "");
					}
					else ShowPlayerPayForRentDialog(playerid);
				}
				case PICKUP_ACTION_TYPE_CHANGESKIN:
				{
					if(GetPlayerTeamEx(playerid) == action_id)
				    {
					    if(GetPlayerData(playerid, P_ATWORK))
					    {
							SetPlayerData(playerid, P_ATWORK, 0);
							SendClientMessage(playerid, COR_SERVER, "[Успешно]: "c_b"Вы закончили рабочий день!");
					    }
						else
						{
						    SetPlayerData(playerid, P_ATWORK, 1);
							SendClientMessage(playerid, COR_SERVER, "[Успешно]: "c_b"Вы начали рабочий день!");
						}
						SetPlayerSkinInit(playerid);
						SetPlayerColorInit(playerid);
					}
				}
				case PICKUP_ACTION_TYPE_ENTRANCE_FLA:
							{

									new entranceid = GetPlayerInEntrance(playerid);
									new floor = GetPlayerInEntranceFloor(playerid);

									if(entranceid != -1 && floor >= 1)
									{
										ShowPlayerHouseInfo(playerid, g_entrance_flat[entranceid][floor - 1][action_id]);
									}

							}
							case PICKUP_ACTION_TYPE_HOTEL_ROOM:
							{
									new hotel_id = GetPlayerInHotelID(playerid);
									new floor = GetPlayerData(playerid, P_IN_HOTEL_FLOOR);

									if(hotel_id != -1 && floor >= 1)
									{
										new room_id = ((floor-1)*12) + action_id;
										EnterPlayerToHotelRoom(playerid, hotel_id, room_id);
									}

							}
				case PICKUP_ACTION_TYPE_ORG_CAR:
	            {
	                printf("%d != %d", GetPlayerData(playerid, P_TEAM), g_org_car[action_id][O_FRAC_ID]);
	                if(GetPlayerData(playerid, P_TEAM) != g_org_car[action_id][O_FRAC_ID])
	                	return SendClientMessage(playerid, -1, "{808080}Ошибка:{FFFFFF} Вам не доступен данный раздел!");

	                if(GetPlayerData(playerid, P_FRACTION_CAR) == INVALID_VEHICLE_ID)
	                {
	                    stringer[0] = EOS, sctring [0] = EOS;

	                    for(new i = 0; i < 4; i++)
	                    {
	                        if(g_org_car[action_id][O_MODEL][i] == 0) continue;

	                        format(sctring , sizeof(sctring), "{FFFFFF}[%d]\t%s\t\t[%d]\n",i+1, g_vehicle_info[g_org_car[action_id][O_MODEL][i]-400][VI_NAME], g_org_car[action_id][O_MODEL][i]);
	                        strcat(stringer, sctring );
	                    }
	                    SetPlayerListitemValue(playerid, 0, action_id);
	                    Dialog(playerid, DIALOG_ORG_CAR_GET, DIALOG_STYLE_LIST, g_org_car[action_id][O_NAME], stringer, "Выбрать", "Отмена");
	                }
	                else
	                SendClientMessage(playerid, -1, "{808080}Ошибка:{FFFFFF} Вы уже взяли транспорт, для отмены прошлого транспорта введите /unfcar");

	                return 1;
	            }
				case PICKUP_ACTION_TYPE_MAYOR_JOB:
				{
					if(IsPlayerInJob(playerid) || GetPlayerTempJob(playerid) != TEMP_JOB_NONE)
						return SendClientMessage(playerid, 0xCECECEFF, "В данный момент Вы не можете устроиться на работу");

					Dialog
					(
						playerid, DIALOG_VIEV_JOBS_LIST, DIALOG_STYLE_MSGBOX,
						"{FFCD00}Прием на работу",
						"{FFFFFF}Вы хотите просмотреть список доступных работ?",
						"Да", "Нет"
					);
				}
				case PICKUP_ACTION_HELP_SPAWN:
				{
				    callcmd::help(playerid, "");
				}
				case PICKUP_ACTION_RENT_BIKE:
	            {
	                new d_string[169];
	                new cashrent = GetPlayerLevel(playerid)*100;
	                format(d_string,sizeof(d_string),"{FFFFFF}Вы действительно хотите взять мото на прокат?\nЦена: {FF8040}%d{FFFFFF}$\n- Транспорт пропадет, если в него не садиться 40 секунд!",cashrent);
	                Dialog(playerid, DIALOG_RENT_BIKE, DIALOG_STYLE_MSGBOX,"Аренда мото",d_string,"Да","Нет");
	            }
	            case PICKUP_ACTION_QUEST_MENU:
				{
			    	ShowPlayerQuestMenu(playerid);
				}
				case PICKUP_ACTION_TYPE_PUT_PROD:
				{
					if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY)
					{
						if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_FACTORY_PUT_PROD)
						{
							new objectid;
							new items = GetPlayerJobLoadItems(playerid);
							new Float: x, Float: y, Float: z, Float: angle;

							ApplyAnimationEx(playerid, "CARRY", "PUTDWN", 4.0, 0, 0, 0, 0, 0, 1, USE_ANIM_TYPE_NONE);
							SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

							TogglePlayerFactoryCP(playerid, true);
							SetPlayerJobLoadItems(playerid, items + 1);

							AddPlayerData(playerid, P_JOB_WAGE, +, 1);
							SendClientMessage(playerid, 0x00FF00FF, "* {8FC0FF}Вы положили продукт на склад.");

							RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_FOREARM);
							SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_TAKE_MET);

							GetPlayerPos(playerid, x, y, z);
							GetPlayerFacingAngle(playerid, angle);

							//objectid = CreateDynamicObject(1279, x, -200.81883, 1006.51978, 0.9, 0.0, angle);
						//	MoveDynamicObject(objectid, 263.8, -200.81880, 1006.51978, 2.0, 0.9, 0.0, angle);

							Streamer_SetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, OBJECT_TYPE_FACTORY);

							GameTextForPlayer(playerid,"~y~+1 skill",5200,5);

							AddPlayerData(playerid, P_LOADER_SKILL, +, 1);

							UpdatePlayerDatabaseInt(playerid, "loader_skill", GetPlayerData(playerid, P_LOADER_SKILL));

			                new type = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD, R_AMOUNT);

							SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD, R_AMOUNT, type + 1);
							UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD);
						}
					}
				}
	   			case PICKUP_ACTION_TYPE_TEMP_ARMY:
	   			{
	   			    SetPVarInt(playerid, "player_in_ammo_cp", 1);
	   			}
				case PICKUP_ACTION_TYPE_TEMP_JOB:
				{
					new job = GetPlayerTempJob(playerid);
					if(job != action_id && IsPlayerInJob(playerid) || GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_NONE)
					{
						job = TEMP_JOB_NONE - 1;
					}

					switch(action_id)
					{
						case TEMP_JOB_LOADER:
						{
							if(job == TEMP_JOB_NONE)
							{
								Dialog
								(
									playerid, DIALOG_TEMP_JOB_LOADER_START, DIALOG_STYLE_MSGBOX,
									"{FFCD00}Работа грузчика",
									"{FFFFFF}Вы хотите устроиться на работу грузчиком?",
									"Да", "Нет"
								);
							}
							else if(job == action_id)
							{
								Dialog
								(
									playerid, DIALOG_TEMP_JOB_LOADER_END, DIALOG_STYLE_MSGBOX,
									"{FFCD00}Работа грузчика",
									"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
									"Да", "Нет"
								);
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Чтобы устроиться сюда закончите текущую работу");
						}
						case TEMP_JOB_MINER:
						{
							if(job == TEMP_JOB_NONE)
							{
								Dialog
								(
									playerid, DIALOG_TEMP_JOB_MINER_START, DIALOG_STYLE_MSGBOX,
									"{FFCD00}Работа шахтера",
									"{FFFFFF}Вы хотите устроиться на работу шахтера?",
									"Да", "Нет"
								);
							}
							else if(job == action_id)
							{
								Dialog
								(
									playerid, DIALOG_TEMP_JOB_MINER_END, DIALOG_STYLE_MSGBOX,
									"{FFCD00}Работа шахтера",
									"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
									"Да", "Нет"
								);
							}
							else SendClientMessage(playerid, 0xCECECEFF, "В данный момент устроиться на эту работу нельзя");
						}
						case TEMP_JOB_FACTORY_TRUCKER:
						{
							if(job == TEMP_JOB_NONE)
							{
								Dialog
								(
									playerid, DIALOG_TEMP_JOB_FACTORY_TRUCKER, DIALOG_STYLE_MSGBOX,
									"{FFCD00}Завод",
									"{FFFFFF}Вы хотите начать работу в отделе доставки исходных материалов?",
									"Да", "Нет"
								);
							}
							else if(job == action_id)
							{
								Dialog
								(
									playerid, DIALOG_TEMP_JOB_FACTORY_TRUCKER, DIALOG_STYLE_MSGBOX,
									"{FFCD00}Завод",
									"{FFFFFF}Закончить работу в отделе доставки исходных материалов?",
									"Да", "Нет"
								);
							}
							else SendClientMessage(playerid, 0xCECECEFF, "В данный момент устроиться на эту работу нельзя");
						}
						case TEMP_JOB_FACTORY:
						{
							if(job == TEMP_JOB_NONE)
							{
								Dialog
								(
									playerid, DIALOG_TEMP_JOB_FACTORY, DIALOG_STYLE_MSGBOX,
									"{FFCD00}Завод",
									"{FFFFFF}Вы хотите начать работу в производственном цеху?",
									"Да", "Нет"
								);
							}
							else if(job == action_id)
							{
								Dialog
								(
									playerid, DIALOG_TEMP_JOB_FACTORY, DIALOG_STYLE_MSGBOX,
									"{FFCD00}Завод",
									"{FFFFFF}Закончить работу в производственном цеху?",
									"Да", "Нет"
								);
							}
							else SendClientMessage(playerid, 0xCECECEFF, "В данный момент устроиться на эту работу нельзя");
						}
						case TEMP_JOB_LUMBERJACK:
						{
							if(job == TEMP_JOB_NONE)
							{
								Dialog
								(
									playerid, DIALOG_TEMP_JOB_LUMBERJACK_ST, DIALOG_STYLE_MSGBOX,
									"{FFCD00}Работа лесоруба",
									"{FFFFFF}Вы хотите устроиться на работу лесоруба?",
									"Да", "Нет"
								);
							}
							else if(job == action_id)
							{
								Dialog
								(
									playerid, DIALOG_TEMP_JOB_LUMBERJACK_END, DIALOG_STYLE_MSGBOX,
									"{FFCD00}Работа лесоруба",
									"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
									"Да", "Нет"
								);
							}
							else SendClientMessage(playerid, 0xCECECEFF, "В данный момент устроиться на эту работу нельзя");
						}
					}
				}

				case PICKUP_ACTION_TYPE_GIFT:
				{
					if(GetPlayerData(playerid, P_LEVEL) > 3)
					{
						new query[256],
							Cache: result,
							rows;

						mysql_format(mysql, query, sizeof query, "SELECT * FROM gift_lose WHERE uid='%d' AND gift_id='%d'", GetPlayerAccountID(playerid), action_id+1);
						result = mysql_query(mysql, query, true);

						rows = cache_num_rows();

						if(rows)
						{
							SendClientMessage(playerid, 0xCECECEFF, "Вы уже собрали этот подарок!");
							cache_delete(result);
							return 1;
						}

						cache_delete(result);

						mysql_format(mysql, query, sizeof query, "INSERT INTO gift_lose (uid, gift_id) VALUES (%d, %d)", GetPlayerAccountID(playerid), action_id+1);
						mysql_query(mysql, query, false);

						new fmt_str[144];

						mysql_format(mysql, query, sizeof query, "SELECT * FROM gift_lose WHERE uid='%d'", GetPlayerAccountID(playerid));
						result = mysql_query(mysql, query, true);

						rows = cache_num_rows();


						AddPlayerData(playerid, P_GIFTS, +, 1);

						format(fmt_str, sizeof fmt_str, "Вы собрали подарок! У Вас всего %d шт. подарков!", GetPlayerData(playerid, P_GIFTS));

						SendClientMessage(playerid, 0xffff00FF, fmt_str);

						format(fmt_str, sizeof fmt_str, "Всего собрано %d подарков!", GetPlayerData(playerid, P_GIFTS));

						SendClientMessage(playerid, 0xffff00FF, fmt_str);

	                    SendClientMessage(playerid, 0xffff00FF, "Подарки можно обменять в правительстве!");

	                    format(query, sizeof query, "{D6325B}[Подарки]: {FFFFFF}%s[%d] собрал подарок.", GetPlayerNameEx(playerid), playerid, GetPlayerData(playerid, P_GIFTS), g_gift_loaded);
	                    SendClientMessageToAll(-1, query);

						cache_delete(result);


						format(query, sizeof query, "UPDATE accounts SET gifts=%d WHERE id=%d", GetPlayerData(playerid, P_GIFTS), GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Собирать подарки можно с 3-х лет проживания в штате");
				}
				case PICKUP_ACTION_TYPE_SELL_GIFT:
				{
					if(!GetPlayerData(playerid, P_GIFTS)) return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет подарков!");

					Dialog(playerid, DIALOG_SELL_GIFT, DIALOG_STYLE_MSGBOX, "Обмен", "{FFFFFF}Вы действительно хотите обменять один подарок?\n\n\
					Вам может выпасть:\n\
					{1E90FF}- Донат\n\
					{1E90FF}- Донат-Рубли\n\
					{32a44b}- Деньги\n\
					{3399FF}- Патроны\n\
					{32a44b}- Металл\n\
					{CECECE}- Наркотики", "Да", "Нет");
				}
				case PICKUP_ACTION_TYPE_MINER_SELL_M:
				{
					ShowPlayerBuyMetalDialog(playerid);
				}
				case PICKUP_ACTION_TYPE_FACTORY_MET:
				{
					if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY)
					{
						new j_state = GetPlayerTempJobState(playerid);
						switch(j_state)
						{
							case TEMP_JOB_STATE_FACTORY_TAKE_MET:
							{
								new factory_metal = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_AMOUNT);
								new factory_fuel = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT);

								new take_metall = random(2) + 1;
								if(factory_metal > take_metall && factory_fuel > (take_metall * 6))
								{
									SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_AMOUNT, factory_metal - take_metall);
									UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL);

									new fmt_str[16];
									SetPVarInt(playerid, "factory_take_metall", take_metall);

									format(fmt_str, sizeof fmt_str, "~b~~h~+%d kg", take_metall);
									GameTextForPlayer(playerid, fmt_str, 4000, 1);

									SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_CREATE_P);
								}
								else GameTextForPlayer(playerid, "~r~no fuel or metal", 4000, 1);
							}
							case TEMP_JOB_STATE_FACTORY_CREATE_P:
							{
								SendClientMessage(playerid, 0x999999FF, "Вы уже взяли металл");
							}
						}
					}
				}
				case PICKUP_ACTION_TYPE_P_CREATE:
				{
				    new checkpointid;
				    new index = checkpointid - factory_desk[0][FD_CHEK_ID];
					SetPlayerFactoryDeskUse(playerid, index, true);
				}
				case PICKUP_ACTION_TYPE_LUMBERJACK_P:
				{
					if(GetPlayerTempJob(playerid) == TEMP_JOB_LUMBERJACK)
					{
						if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_LUMBERJACK_PUT)
						{
							new desk;

							SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LUMBERJACK_CHOP);
							ApplyAnimationEx(playerid, "CARRY", "putdwn", 4.1, 1, 0, 1, 0, 800, 0);

							RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
							//SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 326, A_OBJECT_BONE_RIGHT_HAND, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0);

							SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 1);

							new fmt_text[65];

							format(fmt_text, sizeof fmt_text, "Дрова доставлены на склад! Всего перенесено дров: {FF9900}%d шт", GetPlayerJobLoadItems(playerid));
							SendClientMessage(playerid, 0x66CC00FF, fmt_text);

							SetPlayerLumberJackChopCP(playerid);

							desk = GetPickupInfo(pickupid, P_ACTION_ID);

							//new objectid;
							if(!desk)
							{
							//	objectid = CreateDynamicObject(1463, 2378.1465, -603.0632, 12.0885, 0.0, 0.0, 90.0);
							//	MoveDynamicObject(objectid, 2382.3528, -603.0815, 12.0885, 2.0, 0.0, 0.0, 0.0);
							}
							else
							{
							//	objectid = CreateDynamicObject(1463, 2378.1465, -606.80481, 12.0885, 0.0, 0.0, 90.0);
							//	MoveDynamicObject(objectid, 2382.3528, -606.80481, 12.0885, 2.0, 0.0, 0.0, 0.0);
							}

						//	Streamer_SetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, OBJECT_TYPE_WOOD);
						}
					}
				}
				case PICKUP_ACTION_TYPE_FUEL_STATION:
				{
					ShowPlayerBuyJerricanDialog(playerid, action_id);
				}
				case PICKUP_ACTION_TYPE_BIZ_ENTER:
				{
				    SetPlayerInBiz(playerid, -1);
				    
					if(GetPlayerInBiz(playerid) == -1)
					{
	                    if(IsBusinessNoEnter(action_id))
							return SendClientMessage(playerid, 0xCECECEFF, "В данный тип бизнеса нельзя зайти.");

						if(GetBusinessData(action_id, B_TYPE) == BUSINESS_TYPE_CLOTHING_SHOP)
						{
							SetPlayerInBiz(playerid, action_id);
							
							ShowPlayerClothingShopPanel(playerid);
							
							return 1;
						}
						if(GetBusinessData(action_id, B_TYPE) == BUSINESS_TYPE_CAR_MARKET)
						{
							new oc_id = GetPlayerOwnableCar(playerid);

							if(oc_id == INVALID_VEHICLE_ID)
							{
								SetPlayerListitemValue(playerid, 0, action_id);
								Dialog
								(
									playerid, DIALOG_BIZ_CAR_MARKET, DIALOG_STYLE_MSGBOX,
									"{FFCC00}Покупка транспорта",
									"{FFFFFF}На территории авторынка могут находиться не все модели транспорта, которые\n\
									можно арендовать (некоторые отсутствуют из-за того, что их взяли на прокат)\n\
									Нажмите кнопку \"Далее\" чтобы посмотреть весь доступный для покупки транспорт",
									"Далее", "Отмена"
								);
								return 1;
							}
							else
								return SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт загружен на сервер, выгрузите его для покупки. (/car)");

						}


						new i_paid_biz = GetPlayerUseListitem(playerid);

						if(GetBusinessData(action_id, B_TYPE) == BUSINESS_TYPE_CAR_TUNING)
						{
							new oc_id = GetPlayerOwnableCar(playerid);

							if(oc_id == INVALID_VEHICLE_ID)
							{
								if(GetPlayerOwnableCars(playerid) == 0)
									SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
								else
									SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");

								return 1;
							}
							else
							{
								new Float: veh_x,
									Float: veh_y,
									Float: veh_z;

								GetVehiclePos(oc_id, veh_x, veh_y, veh_z);

								if(!IsPlayerInRangeOfPoint(playerid, 15.0, veh_x, veh_y, veh_z))
								{
									SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт слишком далеко от Вас");

									return 1;
								}
							}
						}

						if(IsBusinessOwned(action_id))
						{
							if(GetBusinessData(action_id, B_OWNER_ID) != GetPlayerAccountID(playerid))
							{
								if(GetBusinessData(action_id, B_LOCK_STATUS))
									return GameTextForPlayer(playerid, "~w~business~n~~r~closed", 4000, 1);

								if(GetBusinessData(action_id, B_ENTER_PRICE) > 0 && i_paid_biz != action_id)
								{
									new fmt_str[128];
									SetPVarInt(playerid, "biz_enter", action_id + 1);

									format
									(
										fmt_str, sizeof fmt_str,
										"{FFFFFF}Вход платный и составляет {FF9900}%d руб\n"\
										"{99FF00}Вы уверены что хотите войти сюда?",
										GetBusinessData(action_id, B_ENTER_PRICE)
									);
									return Dialog(playerid, DIALOG_BIZ_ENTER, DIALOG_STYLE_MSGBOX, GetBusinessData(action_id, B_NAME), fmt_str, "Да", "Нет");
								}
							}
						}
						
						EnterPlayerToBiz(playerid, action_id);
					}
				}
				case PICKUP_ACTION_TYPE_BIZ_EXIT:
				{
					new in_biz = GetPlayerInBiz(playerid);
					if(in_biz != -1)
					{
						new type = GetBusinessData(in_biz, B_INTERIOR);
						if(action_id == type)
						{
							SetPlayerPosEx
							(
								playerid,
								GetBusinessData(in_biz, B_EXIT_POS_X),
								GetBusinessData(in_biz, B_EXIT_POS_Y),
								GetBusinessData(in_biz, B_EXIT_POS_Z),
								GetBusinessData(in_biz, B_EXIT_ANGLE),
								0,
								0
							);
							SetPlayerInBiz(playerid, -1);

							new type_2 = GetBusinessData(in_biz, B_TYPE);
							
							if(type_2 == BUSINESS_TYPE_CAR_TUNING)
							{
								new vehicleid = GetPlayerOwnableCar(playerid);

								SetVehiclePos(vehicleid, vehicle_temp_position[playerid][0], vehicle_temp_position[playerid][1], vehicle_temp_position[playerid][2]);
								SetVehicleZAngle(vehicleid, vehicle_temp_position[playerid][3]);

								LinkVehicleToInterior(vehicleid, 0);
								SetVehicleVirtualWorld(vehicleid, 0);
							}
						}
					}
				}
				case PICKUP_ACTION_TYPE_BIZ_HEALTH:
				{
					new businessid = GetPlayerInBiz(playerid);
					if(businessid != -1)
					{
						if(businessid == action_id)
						{
							new time = gettime();
							if(GetPVarInt(playerid, "biz_health_use") <= time)
							{
								new price = BIZ_HEALTH_SERVICE_PRICE;
								if(GetPlayerMoneyEx(playerid) >= price)
								{
									new query[255];

									format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS) > 0 ? GetBusinessData(businessid, B_PRODS)-1 : 0, GetBusinessData(businessid, B_PRODS) > 0 ? GetBusinessData(businessid, B_BALANCE)+price : 0, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
									mysql_query(mysql, query, false);

									if(!mysql_errno())
									{
										GivePlayerMoneyEx(playerid, -price, "Использование аптечки в бизнесе", false, true);

										if(GetBusinessData(businessid, B_PRODS) >= 1)
										{
											AddBusinessData(businessid, B_PRODS, -, 1);
											AddBusinessData(businessid, B_BALANCE, +, price);
										}
										SetPlayerHealthEx(playerid, 99.0);
										SetPVarInt(playerid, "biz_health_use", time + 300); // 300 сек (5 минут)

										mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), time, price, IsBusinessOwned(businessid));
										mysql_query(mysql, query, false);
									}
									else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 24)");
								}
								else SendClientMessage(playerid, 0x999999FF, "Услуги медпункта стоят 150 рублей");
							}
							else SendClientMessage(playerid, 0x999999FF, "Недавно Вы уже пользовались услугами медпункта");

							// SetPlayerHealthEx(playerid, 95.0);
						}
					}
				}
				case PICKUP_ACTION_TYPE_BIZ_SHOP_247:
				{
					new businessid = GetPlayerInBiz(playerid);
					if(businessid != -1)
					{
						new type = GetBusinessData(businessid, B_TYPE);
						if(type == BUSINESS_TYPE_SHOP_24_7)
						{
							callcmd::buy(playerid, "");
						}
					}
				}
				case PICKUP_ACTION_TYPE_CELL_SALON:
				{
					new businessid = GetPlayerInBiz(playerid);
					
					if(businessid != -1)
					{
						new type = GetBusinessData(businessid, B_TYPE);
						if(type == BUSINESS_TYPE_CELL_SALON)
						{
							callcmd::buy(playerid, "");
						}
					}
				}
				case PICKUP_ACTION_TYPE_HOUSE:
				{
					ShowPlayerHouseInfo(playerid, action_id);
				}
				case PICKUP_ACTION_TYPE_HOUSE_HEALTH:
				{
					new houseid = GetPlayerInHouse(playerid);
					if(houseid != -1)
					{
						new type = GetHouseData(houseid, H_TYPE);

						if(IsPlayerInRangeOfPoint(playerid, 4.0, GetHouseTypeInfo(type, HT_HEALTH_POS_X), GetHouseTypeInfo(type, HT_HEALTH_POS_Y), GetHouseTypeInfo(type, HT_HEALTH_POS_Z)))
						{
							SetPlayerHealthEx(playerid, 100.0);
							GameTextForPlayer(playerid, "~b~~h~100 hp", 3000, 1);
						}
					}
				}
				case PICKUP_ACTION_TYPE_REALTOR_HOME:
				{
					new businessid = GetPlayerInBiz(playerid);
					if(businessid != -1)
					{
						new type = GetBusinessData(businessid, B_TYPE);
						if(type == BUSINESS_TYPE_REALTOR_HOME)
						{
							Dialog
							(
								playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
								"{99CC00}Номера свободных домов",
								g_house_realtor_list,
								"Закрыть", ""
							);
						}
					}
				}
				case PICKUP_ACTION_TYPE_BIZ_CLOTHING:
				{
					new businessid = GetPlayerInBiz(playerid);
					if(businessid != -1)
					{
						new type = GetBusinessData(businessid, B_TYPE);
						if(type == BUSINESS_TYPE_CLOTHING_SHOP)
						{
							ShowPlayerClothingShopPanel(playerid);
						}
					}
				}
				case PICKUP_ACTION_TYPE_BIZ_CAR_MARK:
				{
					Dialog
					(
						playerid, DIALOG_BIZ_CAR_MARKET, DIALOG_STYLE_MSGBOX,
						"{FFCC00}Покупка транспорта",
						"{FFFFFF}На территории авторынка могут находиться не все модели транспорта, которые\n\
						можно приобрести (некоторые отсутствуют из-за того, что их взяли на прокат)\n\
						Нажмите кнопку \"Далее\" чтобы посмотреть весь доступный для покупки транспорт",
						"Далее", "Отмена"
					);
				}
				case PICKUP_ACTION_TYPE_ENTRANCE_ENT:
				{
					EnterPlayerToEntrance(playerid, action_id);
				}
				case PICKUP_ACTION_TYPE_ENTRANCE_EXI:
				{
					new entranceid = GetPlayerInEntrance(playerid);
					if(entranceid != -1)
					{
						if(GetPlayerInEntranceFloor(playerid) == 0)
						{
							SetPlayerPosEx
							(
								playerid,
								GetEntranceData(entranceid, E_EXIT_POS_X),
								GetEntranceData(entranceid, E_EXIT_POS_Y),
								GetEntranceData(entranceid, E_EXIT_POS_Z),
								GetEntranceData(entranceid, E_EXIT_ANGLE),
								0,
								0
							);

							SetPlayerInEntrance(playerid, -1);
							SetPlayerInEntranceFloor(playerid, -1);
						}
						else
							SendClientMessage(playerid, -1, "Выход работает только на этаже 'Подъезд'!");
					}
				}
				case PICKUP_ACTION_TYPE_ENTRANCE_LIF:
				{
					new entranceid = GetPlayerInEntrance(playerid);
					if(entranceid != -1)
					{
						new floor = GetPlayerInEntranceFloor(playerid);
						if(floor != -1)
						{
							ShowPlayerEntranceFloorsLift(playerid, entranceid, floor);
						}
					}
				}
				case PICKUP_ACTION_TYPE_BIZ_CAR_ENT:
				{
					SetPlayerPosEx(playerid, 5.4881, -27.7033, 1085.9291, 180.0, _, _, false);
					SetCameraBehindPlayer(playerid);
				}
				case PICKUP_ACTION_TYPE_BIZ_CAR_EXI:
				{
					SetPlayerPosEx(playerid, 5.4975, -26.3967, 1080.9968, 180.0, _, _, false);
					SetCameraBehindPlayer(playerid);
				}
				case PICKUP_ACTION_TYPE_GET_CAR_NUM:
				{
					if(GetPlayerOwnableCar(playerid) == INVALID_VEHICLE_ID)
					{
						if(GetPlayerOwnableCars(playerid) == 0)
							SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
						else
							SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
					}
					else
					{
						new vehicleid = GetPlayerOwnableCar(playerid),
							index = GetVehicleData(vehicleid, V_ACTION_ID);

						if(!strcmp(g_ownable_car[index][OC_NUMBER], "------"))
						{
							Dialog
							(
								playerid, DIALOG_OWNABLE_CAR_NUMBER, DIALOG_STYLE_MSGBOX,
								"{FFCD00}Получение номеров",
								"{FFFFFF}Стоимость покупки номеров для Вашего ТС составит 5000 руб",
								"Купить", "Выйти"
							);
						}
						else
							SendClientMessage(playerid, 0x999999FF, "На Вашем ТС уже есть номерные знаки");
					}
				}
				case PICKUP_ACTION_TYPE_GET_CAR_N2:
				{
					if(GetPlayerOwnableCar(playerid) == INVALID_VEHICLE_ID)
					{
						if(GetPlayerOwnableCars(playerid) == 0)
							SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
						else
							SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
					}
					else
					{
						new vehicleid = GetPlayerOwnableCar(playerid),
							index = GetVehicleData(vehicleid, V_ACTION_ID);

						if(!strcmp(g_ownable_car[index][OC_NUMBER], "------"))
						{
							Dialog
							(
								playerid, DIALOG_OWNABLE_CAR_NUMBER, DIALOG_STYLE_MSGBOX,
								"{FFCD00}Получение номеров",
								"{FFFFFF}Стоимость покупки номеров для Вашего ТС составит 5000 руб",
								"Купить", "Выйти"
							);
						}
						else
							SendClientMessage(playerid, 0x999999FF, "На Вашем ТС уже есть номерные знаки");
					}
				}
				case PICKUP_ACTION_TYPE_MINER_CARRI:
				{
					if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER
					&& GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_MINER_UNLOAD)
					{
						if(!miner_carriage[0][MC_STATUS])
						{
							new fmt_str[64];

							new rand = random(45) + 16;
							new items = GetPlayerJobLoadItems(playerid) + rand;

							RemovePlayerAttachedObjects(playerid);
						//	SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 18634, A_OBJECT_BONE_RIGHT_HAND, 0.07, 0.03, 0.04, 0.0, 270.0, 270.0, 1.5, 2.1, 1.8, 0);

							ApplyAnimationEx(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0, 0);
							SetPlayerJobLoadItems(playerid, items);

							format(fmt_str, sizeof fmt_str, "Вы доставили в вагонетку {FF9900}%d кг {66CC00}руды", rand);
							SendClientMessage(playerid, 0x66CC00FF, fmt_str);

							format(fmt_str, sizeof fmt_str, "Общее количество добытого сырья: {FF9900}%d кг", items);
							SendClientMessage(playerid, 0x3399FFFF, fmt_str);

							format(fmt_str, sizeof fmt_str, "+ %d кг", rand);
							SetPlayerChatBubble(playerid, fmt_str, 0x66CC00FF, 10.0, 2000);

							miner_carriage[0][MC_ORE_COUNT] += rand;

							if(miner_carriage[0][MC_ORE_COUNT] >= 10000)
							{
								DestroyPickup(miner_carriage[0][MC_PICKUP_ID]);
								miner_carriage[0][MC_PICKUP_ID] = -1;

								SetTimerEx("MinerCarriageMove", 7_000, false, "i", 0);

								UpdateDynamic3DTextLabelText(miner_carriage[0][MC_LABEL], 0xFFFF00FF, "Ожидание...");
							}
							else
							{
								format(fmt_str, sizeof fmt_str, "Загрузка\n\n{FFCC00}Количество руды\n%d / 10000 кг", miner_carriage[0][MC_ORE_COUNT]);
								UpdateDynamic3DTextLabelText(miner_carriage[0][MC_LABEL], 0x66CC00FF, fmt_str);
							}

							SetPlayerMinerJobLoadCP(playerid);
						}
					}
				}
				case PICKUP_ACTION_TYPE_MPREG:
				{
					Dialog
						(
							playerid, DIALOG_MPREG, DIALOG_STYLE_LIST,
							"{FFCD00}Регистрация на мероприятия",
							""c_s"[1] "c_b"DeathMatch Zone",
							"Выбрать", "Отмена"
						);
				}
				case PICKUP_ACTION_TYPE_GANG_REPOSIT:
				{
					if(GetPlayerTeamEx(playerid) != (action_id + TEAM_OPG_ARZAMASKAYA - 1))
						return SendClientMessage(playerid, 0x999999FF, "У Вас нет доступа к этому складу");

					Dialog
					(
						playerid, DIALOG_GANG_REPOSITORY, DIALOG_STYLE_LIST,
						"{FFCD00}Склад банды",
						"\
						{00CC00}1. Положить наркотики\n\
						{00CC00}2. Положить патроны\n\
						{00CC00}3. Положить металл\n\
						{00CC00}4. Положить деньги\n\
						5. Взять наркотики\n\
						6. Взять патроны\n\
						7. Взять металл\n\
						8. Взять деньги\n\
						",
						"Выбрать", "Отмена"
					);
				}
				case PICKUP_ACTION_TYPE_ARMORY:
				{
					switch(action_id)
					{
						case ARMORY_TYPE_ARMOR:
						{
							if(GetPlayerTeamEx(playerid) != TEAM_ARMY)
								return SendClientMessage(playerid, 0x999999FF, "У Вас нет доступа к этому");

							new Float: armour;

							GetPlayerArmour(playerid, armour);

							if(armour > 20.0)
								return SendClientMessage(playerid, 0x999999FF, "У Вас уже есть бронежилет");

							SetPlayerArmour(playerid, 100.0);
						}
						case ARMORY_TYPE_SECURITY:
						{
							if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT)
								return SendClientMessage(playerid, 0x999999FF, "У Вас нет доступа к этому");

							if(!(1 <= GetPlayerJob(playerid) <= 3))
								return SendClientMessage(playerid, 0x999999FF, "Оружейный склад доступен только сотрудникам службы охраны");

							Dialog
							(
								playerid, DIALOG_ARMORY, DIALOG_STYLE_LIST,
								"{FFCD00}Оружейный склад",
								"1. Взять дубинку\n"\
								"2. Взять маску\n"\
								"3. Взять бронежилет\n"\
								"4. Взять пистолет с глушителем\n"\
								"5. Взять Desert Eagle\n"\
								"6. Взять MP5\n"\
								"7. Взять дробовик",
								"Взять", "Отмена"
							);
						}
						case ARMORY_TYPE_POLICE:
						{
							new armory_index;

							switch(GetPlayerVirtualWorld(playerid))
							{
								case 5: armory_index = 0;
								case 6: armory_index = 1;
								case 17: armory_index = 2;
							}

							if(GetPlayerTeamEx(playerid) != (TEAM_DPS + armory_index))
								return SendClientMessage(playerid, 0x999999FF, "У Вас нет доступа к этому");

							Dialog
							(
								playerid, DIALOG_ARMORY, DIALOG_STYLE_LIST,
								"{FFCD00}Оружейный склад",
								"1. Взять дубинку\n"\
								"2. Взять маску\n"\
								"3. Взять бронежилет\n"\
								"4. Взять пистолет с глушителем\n"\
								"5. Взять Desert Eagle\n"\
								"6. Взять MP5\n"\
								"7. Взять дробовик\n"\
								"8. Взять AK47\n"\
								"9. Взять винтовку",
								"Взять", "Отмена"
							);
						}
					}
				}
				case PICKUP_ACTION_TYPE_BIZ_SHOP_GUN:
				{
					new businessid = GetPlayerInBiz(playerid);
					if(businessid != -1)
					{
						new type = GetBusinessData(businessid, B_TYPE);
						if(type == BUSINESS_TYPE_SHOP_GUN)
						{
							callcmd::buy(playerid, "");
						}
					}
				}
				case PICKUP_ACTION_TYPE_BIZ_CAR_TUN:
				{
				    if(GetPlayerOwnableCars(playerid) == 0)
						SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
					else
						SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
									
				    new businessid = GetPlayerInBiz(playerid);
				    if(businessid != -1)
					{
						if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_CAR_TUNING))
						{
							Dialog
							(
								playerid, DIALOG_BIZ_CAR_TUNING, DIALOG_STYLE_LIST,
								"{FFCD00}Станция тех.обслуживания",
								""c_b"1. Починить транспорта\t{00CC00}25.000 руб\n"\
								""c_b"2. Perfomance Tuning\n"\
								"3. Покраска транспорта\t"c_m"250.000$",
								"Выбрать", "Отмена"
							);
						}
					}
				}
			}
		}
	}
	return 1;
}

/*	print("ee");
					if(GetPlayerInBiz(playerid) == -1)
					{
						new type = GetBusinessData(GetPlayerInBiz(playerid), B_INTERIOR);
						print("ee");
						if(type == BUSINESS_TYPE_CAR_TUNING)
						{
							print("ee");

							Dialog
							(
								playerid, DIALOG_BIZ_CAR_TUNING, DIALOG_STYLE_LIST,
								"{FFCD00}Станция тех.обслуживания",
								"1. Починить транспорта\t{00CC00}25.000 руб\n"\
								"2. Perfomance Tuning",
								"Выбрать", "Отмена"
							);*/

public: HidePlayerSelectPanelPriceTimer(playerid)
{
	if(GetPlayerData(playerid, P_USE_SELECT_PANEL) == SELECT_PANEL_TYPE_NONE)
	{
		HidePlayerSelectPanelPrice(playerid);
	}
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	Kick(playerid);

	return 0;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	Kick(playerid);

	return 0;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	Kick(playerid);

	return 0;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);

	if(GetPlayerMenu(playerid) == admin_spec_menu)
	{
		if(GetPlayerSpectateData(playerid, S_PLAYER) == -1) return HideMenuForPlayer(admin_spec_menu, playerid);

		new fmt_text[100],
			spec_player = GetPlayerSpectateData(playerid, S_PLAYER);

		switch(row)
		{
			case 0, 8: StopSpectate(playerid);
			case 1:
			{
				StartSpectate(playerid, spec_player);
				ShowMenuForPlayer(admin_spec_menu, playerid);
			}
			case 2:
			{
				ShowPlayerStats(spec_player, playerid);
				ShowMenuForPlayer(admin_spec_menu, playerid);
			}
			case 3:
			{
				callcmd::skick(playerid, IntToString(spec_player));
				ShowMenuForPlayer(admin_spec_menu, playerid);
			}
			case 4:
			{
				format(fmt_text, sizeof fmt_text, "%d 5", spec_player);
				callcmd::mute(playerid, fmt_text);
				ShowMenuForPlayer(admin_spec_menu, playerid);
			}
			case 5:
			{
				callcmd::slap(playerid, IntToString(spec_player));
				ShowMenuForPlayer(admin_spec_menu, playerid);
			}
			case 6:
			{
				// callcmd::test(playerid, IntToString(spec_player));
				ShowMenuForPlayer(admin_spec_menu, playerid);
			}
			case 7:
			{
				format(fmt_text, sizeof fmt_text, "[SP] %s[%d]  |  PING %d  |  IP  %s  |  R-IP  %s",
				GetPlayerNameEx(spec_player), spec_player, GetPlayerPing(spec_player), GetPlayerIpEx(spec_player), GetPlayerData(spec_player, P_REG_IP));
				SendClientMessage(playerid, 0x00CC66FF, fmt_text);
				ShowMenuForPlayer(admin_spec_menu, playerid);
			}
		}
	}

	/*
	if(GetPlayerMenu(playerid) == reg_select_skin_menu)
    {
		if(!IsPlayerLogged(playerid))
		{
			if(GetPlayerData(playerid, P_ACCOUNT_STATE) == ACCOUNT_STATE_REG_SKIN)
			{
				new sex = GetPlayerSex(playerid);
				new select_skin = GetPlayerSelectSkin(playerid);

				switch(row)
				{
					case 0:
					{
						if(++select_skin >= sizeof reg_skin_data[] || !reg_skin_data[sex][select_skin])
						{
							select_skin = 0;
						}
					}
					case 1:
					{
						if(--select_skin < 0)
						{
							select_skin = sizeof(reg_skin_data[])-1;

							if(!sex)
								select_skin -= 2;
						}
					}
					case 2:
					{
						SetPlayerData(playerid, P_SKIN, reg_skin_data[sex][select_skin]);

						new query[90];
						format(query, sizeof query, "UPDATE accounts SET skin=%d,last_login=%d WHERE id=%d LIMIT 1", GetPlayerSkinEx(playerid), gettime(), GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);

						if(!mysql_errno())
						{
							SetPlayerData(playerid, P_MONEY, 500);
							SetPlayerData(playerid, P_SELECT_SKIN, -1);

							HideMenuForPlayer(reg_select_skin_menu, playerid);

							SetPlayerSpawnInit(playerid);
							SpawnPlayer(playerid);

							RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_FOREARM);
							SetPlayerInit(playerid);

							SendClientMessage(playerid, 0xFFFF00FF, "Рекомендуем прочитать раздел {FF3300}Помощь по игре.{FFFF00} Он находится слева от Вас");
							SendClientMessage(playerid, 0xFFFF00FF, "В нем Вы найдете всю интересующую Вас информацию. Удачи и приятной игры!");

							return 1;
						}
						else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 01)");
					}
				}

				SetPlayerSelectSkin(playerid, select_skin, reg_skin_data[sex][select_skin]);
				ShowMenuForPlayer(reg_select_skin_menu, playerid);
			}
		}
    }
	*/
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	/*
	if(GetPlayerMenu(playerid) == reg_select_skin_menu)
	{
		if(!IsPlayerLogged(playerid))
		{
			if(GetPlayerData(playerid, P_ACCOUNT_STATE) == ACCOUNT_STATE_REG_SKIN)
			{
				ShowMenuForPlayer(reg_select_skin_menu, playerid);
			}
		}
	}
	*/
	if(GetPlayerMenu(playerid) == admin_spec_menu)
	{
		if(GetPlayerSpectateData(playerid, S_PLAYER) != -1)
		{
			ShowMenuForPlayer(admin_spec_menu, playerid);
		}
	}
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(PRESSED(KEY_NO))
		callcmd::no(playerid, "");

	if(PRESSED(KEY_YES))
		callcmd::yes(playerid, "");

	if(newkeys & KEY_SPRINT && newkeys & KEY_JUMP)
	{
		if(!IsPlayerInAnyVehicle(playerid))
		{
			if(times[playerid] == true)
				{
					SetTimerEx("AntiBH",1000,false,"i",playerid);
			}
		}
	}

	if(IsPlayerInAnyVehicle(playerid))
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			/*
			new pedal_type = PEDAL_TYPE_NONE;

			if(PRESSED(KEY_SPRINT) && !PRESSED(KEY_JUMP))
				pedal_type = PEDAL_TYPE_GAS;

			else if(PRESSED(KEY_JUMP) && !PRESSED(KEY_SPRINT))
				pedal_type = PEDAL_TYPE_BRAKE;

			else if(RELEASED(KEY_SPRINT) || RELEASED(KEY_JUMP))
				pedal_type = PEDAL_TYPE_NONE;

			player_press_pedal[playerid] = pedal_type;
			*/

			if(GetPlayerSettingData(playerid, S_VEH_CONTROL) == SETTING_TYPE_ON)
			{
				if(PRESSED(KEY_HANDBRAKE | KEY_FIRE)) // правый ctrl
				{
					if(GetPlayerOwnableCar(playerid) != INVALID_VEHICLE_ID)
					{
						callcmd::lock(playerid, "1");
					}
				}
				if(PRESSED(KEY_ACTION))
				{
					callcmd::e(playerid, "");
				}
				if(PRESSED(KEY_FIRE))
				{
					callcmd::l(playerid, "");
				}
				if(PRESSED(KEY_ANALOG_UP)) // num 8
				{
					callcmd::b(playerid, "");
				}
				if(PRESSED(KEY_ANALOG_DOWN)) // num 2
				{
					callcmd::i(playerid, "");
				}
				if(PRESSED(KEY_ANALOG_LEFT)) // num 4
				{
					callcmd::sl(playerid, "");
				}
				if(PRESSED(KEY_ANALOG_RIGHT)) // num 6
				{
					callcmd::alarm(playerid, "");
				}
			}

			if(PRESSED(KEY_SUBMISSION))
			{
				if(!IsPlayerInVehicle(playerid, GetPlayerOwnableCar(playerid)))
				{
					new job_car = GetPlayerJobCar(playerid);
					if(IsPlayerInVehicle(playerid, job_car))
					{
						new action_type = GetVehicleData(job_car, V_ACTION_TYPE);
						new car_type = (action_type - VEHICLE_ACTION_TYPE_BUS_DRIVER) + 1;

						new job_id = GetPlayerJob(playerid);
						if(job_id == car_type)
						{
							switch(job_id)
							{
								case JOB_BUS_DRIVER:
								{
									if(IsPlayerInJob(playerid))
									{
										Dialog
										(
											playerid, DIALOG_END_JOB, DIALOG_STYLE_MSGBOX,
											"{FFCD00}Диспетчер автопарка",
											"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
											"Да", "Нет"
										);
									}
									else
									{
										Dialog
										(
											playerid, DIALOG_BUS_ROUTE_COST, DIALOG_STYLE_INPUT,
											"{FFCD00}Стоимость проезда",
											"{FFFFFF}Сколько будет стоить проезд?\n"\
											"Укажите цену от 0 до 100 рублей",
											"Далее", "Отмена"
										);
									}
								}
								case JOB_TAXI_DRIVER:
								{
									if(IsPlayerInJob(playerid))
									{
										Dialog
										(
											playerid, DIALOG_END_JOB, DIALOG_STYLE_MSGBOX,
											"{FFCD00}Диспетчер таксопарка",
											"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
											"Да", "Нет"
										);
									}
									else
									{
										Dialog
										(
											playerid, DIALOG_TAXI_NAME, DIALOG_STYLE_INPUT,
											"{FFCD00}Название такси",
											"{FFFFFF}Придумайте название для вашего такси\n"\
											"Максимальная длина 15 символов\n\n"\
											"Если вы не хотите как-то называться\n"\
											"нажмите кнопку \"Пропустить\"",
											"Далее", "Пропустить"
										);
									}
								}
								case JOB_MECHANIC:
								{
									if(IsPlayerInJob(playerid))
									{
										Dialog
										(
											playerid, DIALOG_END_JOB, DIALOG_STYLE_MSGBOX,
											"{FFCD00}Автомеханик",
											"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
											"Да", "Нет"
										);
									}
									else
									{
										Dialog
										(
											playerid, DIALOG_MECHANIC_START_JOB, DIALOG_STYLE_MSGBOX,
											"{FFCD00}Диспетчер",
											"{FFFFFF}Вы хотите начать работу автомеханика?",
											"Да", "Нет"
										);
									}
								}
								case JOB_TRUCKER:
								{
									if(IsPlayerInJob(playerid))
									{
										Dialog
										(
											playerid, DIALOG_END_JOB, DIALOG_STYLE_MSGBOX,
											"{FFCD00}Диспетчер автопарка",
											"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
											"Да", "Нет"
										);
									}
									else
									{
										Dialog
										(
											playerid, DIALOG_TRUCKER_START_JOB, DIALOG_STYLE_MSGBOX,
											"{FFCD00}Дальнобойщик",
											"{FFFFFF}Вы хотите начать работу дальнобойщика?",
											"Да", "Нет"
										);
									}
								}
							}
						}
					}
				}
				else callcmd::car(playerid, "");
			}
			if(HOLDING(KEY_CROUCH))
			{
				CallLocalFunction("CheckNearestGate", "i", playerid);
			}
			if(newkeys == KEY_CROUCH)
			{
				print("[eq]");
				if(IsPlayerInRangeOfPoint(playerid,  10.0, -0.2940,2006.1187,1554.2031) && GetPlayerInHouse(playerid) == GetPlayerHouse(playerid) && GetPlayerState(playerid) == 2)
		        {
		        	new houseid = GetPlayerHouse(playerid);
		            SetVehiclePos
		            (
		                GetPlayerOwnableCar(playerid), 
		                GetHouseData(houseid, H_CAR_POS_X),
		                GetHouseData(houseid, H_CAR_POS_Y),
		                GetHouseData(houseid, H_CAR_POS_Z)
		            ); 
		            SetVehicleZAngle(GetPlayerOwnableCar(playerid), GetHouseData(houseid, H_CAR_ANGLE));
		            SetCameraBehindPlayer(playerid);
		            LinkVehicleToInterior(GetPlayerOwnableCar(playerid),0);
		            SetPlayerInterior(playerid,0);
		            SetPlayerVirtualWorld(playerid,0);
		            SetVehicleVirtualWorld(GetPlayerOwnableCar(playerid), 0);
		            return true;
		        }
		        
			   /* if(IsPlayerInRangeOfPoint(playerid, 3.0, 1850.7094,2196.4565,15.8480))
				{
					Dialog
					(
						playerid, DIALOG_TUNINGSALON, DIALOG_STYLE_LIST,
						"{FFCD00}Мастерская у Петровича",
						"- Починка авто (30.000 рублей)\n"\
						"- Тюнинг авто",
						"Выбрать", "Закрыть"
					);
					return 1;
				}
			    if(IsPlayerInRangeOfPoint(playerid, 3.0, 275.8153,673.9254,12.0000))
				{
					Dialog
					(
						playerid, DIALOG_TUNINGSALONA, DIALOG_STYLE_LIST,
						"{FFCD00}Мастерская у Громова",
						"- Починка авто (30.000 рублей)\n"\
						"- Тюнинг авто",
						"Выбрать", "Закрыть"
					);
					return 1;
				}*/
			}
		}
	}
	else
	{
		if(PRESSED(KEY_FIRE))
		{
			if(GetPlayerData(playerid, P_SNACK))
			{
				SetPlayerData(playerid, P_SNACK, false);

				SetPlayerHealthEx(playerid, 25.0, true);
				GameTextForPlayer(playerid, "~g~~h~+25 hp", 2500, 6);

				ApplyAnimationEx(playerid, "FOOD", "EAT_Chicken", 4.0, 0, 0, 0, 0, 0, 0);
				//SetTimerEx("T_RemovePlayerAttachedObject", 3000, false, "ii", playerid, A_OBJECT_SLOT_HAND);
			}
			if(GetPlayerData(playerid, P_DRINK_STEP) >= 1)
			{
				AddPlayerData(playerid, P_DRINK_STEP, -, 1);
				if(!GetPlayerData(playerid, P_DRINK_STEP))
				{
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				}
			}
		}
/*		if(PRESSED(KEY_SPRINT))
		{
			if(IsPlayerUseAnim(playerid))
			{
				ClearPlayerUseAnim(playerid);
			}

			if(GetPlayerData(playerid, P_REALTOR_TYPE) != REALTOR_TYPE_NONE)
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_INTERIOR);
					new interior = GetBusinessInteriorInfo(type, BT_ENTER_INTERIOR);

					//HidePlayerWaitPanel(playerid);
					TogglePlayerSpectating(playerid, false);

					if(GetPlayerData(playerid, P_REALTOR_TYPE) == REALTOR_TYPE_BIZ)
					{
						PlayerTeleportInit(playerid, 331.0103, 662.5683, 49.7290, 67.7277);
						SetPlayerPosEx(playerid, 331.0103, 662.5683, 49.7290, 67.7277, interior, businessid + 255, false);
					}
					else
					{
						PlayerTeleportInit(playerid, 160.7020, 745.5962, 25.8272, 159.1750);
						SetPlayerPosEx(playerid, 160.7020, 745.5962, 25.8272, 159.1750, interior, businessid + 255, false);
					}
				}
				SetPlayerData(playerid, P_REALTOR_TYPE, REALTOR_TYPE_NONE);
			}
		}*/
		if(PRESSED(KEY_WALK))
		{
			if(GetPlayerInHouse(playerid) != -1)
			{
				new houseid = GetPlayerInHouse(playerid);
				if(GetHouseData(houseid, H_IMPROVEMENTS) > 5)
				{
					Dialog
					(
						playerid, DIALOG_ACTION_EXIT_HOUSE, DIALOG_STYLE_LIST,
						"{FFCC00}Выход",
						"1. Улица\n\
						2. Гараж",
						"Далее", "Закрыть"
					);
					return 1;
				}
				else
					ExitPlayerFromHouse(playerid, 3.0);
			}
			
			else if(GetPlayerData(playerid, P_IN_HOTEL_ROOM) != -1)
			{
				ExitPlayerFromHotelRoom(playerid);
			}
			
			if(IsPlayerInRangeOfPoint(playerid, 2.0, -109.4100,968.7141,12.3526))
			{
  				ShowPlayerQuestMenu(playerid);
			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 1802.2566,2513.8135,15.8725))
			{
  				ShowPlayerQuestMenu(playerid);
			}
			/*if(IsPlayerInRangeOfPoint(playerid, 2.0, 1886.5671,2032.1482,17.3037))
			{
				Dialog
				(
					playerid, DIALOG_QUEST_23, DIALOG_STYLE_LIST,
					"{FFCD00}Квестовый персонаж",
					"- Историческая викторина {ce325b}[Квест]\n"\
					"- Помощь в празднике {ce325b}[Квест]\n"\
					"- Срочная помощь {ce325b}[Сюжетная линия]",
					"Выбрать", "Закрыть"
		 		);
				return 1;
			}*/

			if(IsPlayerInRangeOfPoint(playerid, 3.0, 609.434875,1729.022583,12.078809))
			{
				Dialog
				(
					playerid, DIALOG_CONTENER1, DIALOG_STYLE_MSGBOX,
					"{FFCD00}Может выпасть:",
					"- Аптечки\n"\
					"- Ремонтные комлекты\n"\
					"- Аксессуар на спину\n"\
					"- Пачка денег\n"\
					"- Сертификат на опыт\n"\
					"- Любое оружие",
					"Выбрать", "Закрыть"
				);
				
				//return 1;
			}
			if(IsPlayerInRangeOfPoint(playerid, 3.0, 617.468688,1729.151977,12.078809))
			{
				Dialog
				(
					playerid, DIALOG_CONTENER2, DIALOG_STYLE_MSGBOX,
					"{FFCD00}Может выпасть:",
					"- Одежда работника ДПС\n"\
					"- Одежда генерала армии\n"\
					"- Одежда снегурочки\n"\
					"- Одежда 'Илья'\n"\
					"- Одежда генерала ФСБ\n"\
					"- Одежда работника медицинской службы",
					"Понятно", "Закрыть"
				);
				//return 1;
			}
			if(IsPlayerInRangeOfPoint(playerid, 100.0, 2035.7643,1416.3625,999.7344))
			{
				new bedid = -1;

				for(new i; i < sizeof g_med_bed_pos; i++)
				{
					if(!IsPlayerInRangeOfPoint(playerid, 1.5, g_med_bed_pos[i][0], g_med_bed_pos[i][1], g_med_bed_pos[i][2])) continue;
					bedid = i;
					break;
				}

				if(bedid == -1) return 1;
				else if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1) return SendClientMessage(playerid, 0xCECECEFF, "Вы уже заняли койку");
				else if(GetPlayerHealthEx(playerid) >= 95.0)
				{
					return SendClientMessage(playerid, 0xCECECEFF, "Вы не нуждаетесь в лечении");
				}
				else if(g_med_bed_used[bedid]) return SendClientMessage(playerid, 0xCECECEFF, "Эта койка занята");

				else
				{
					SetPlayerData(playerid, P_OCCUPIED_BED, bedid);

					g_med_bed_used[bedid] = true;

					new fmt_msg[85];

					format(fmt_msg, sizeof fmt_msg, "Койка №%d\n\n{FFCC00}Пациент:\n%s", bedid + 1, GetPlayerNameEx(playerid));
					UpdateDynamic3DTextLabelText(g_med_bed_label[bedid], 0xFFFFFFEE, fmt_msg);

					format(fmt_msg, sizeof fmt_msg, "Вы заняли койку №%d. В зависимости от состояния здоровья лечение может занять время", bedid + 1);
					SendClientMessage(playerid, 0x66CC00FF, fmt_msg);

					SendClientMessage(playerid, -1, "Чтобы выписаться подойдите к врачу или выйдите за пределы больницы");
				}
			}

/*			if(GetPlayerNearestATM(playerid) != -1)
			{
				ShowPlayerATMDialog(playerid);
			}*/
			if(GetPlayerInHouse(playerid) != -1)
			{
				new houseid = GetPlayerInHouse(playerid);
				if(GetHouseData(houseid, H_IMPROVEMENTS) >= 1)
				{
					ExitPlayerFromHouse(playerid, 1.1);
				}
			}

	/*		if(GetPlayerData(playerid, P_LAST_PICKUP) != -1)
			{
				new pickupid = GetPlayerData(playerid, P_LAST_PICKUP);
				new action_id = GetPickupInfo(pickupid, P_ACTION_ID);

				if(IsPlayerInRangeOfPoint(playerid, 1.7, GetPickupInfo(pickupid, P_POS_X), GetPickupInfo(pickupid, P_POS_Y), GetPickupInfo(pickupid, P_POS_Z)))
				{
					switch(GetPickupInfo(pickupid, P_ACTION_TYPE))
					{

					}
				}
			}
		*/
			if(GetPlayerData(playerid, P_IN_HOTEL_ROOM) != -1)
			{
				ExitPlayerFromHotelRoom(playerid);
			}
		}
		if(PRESSED(KEY_HANDBRAKE | KEY_WALK))
		{
			new targetid = GetPlayerTargetPlayer(playerid);
			//new targetid = playerid;

			if(targetid != INVALID_PLAYER_ID && !GetPlayerWeapon(playerid))
			{
				SetPlayerData(playerid, P_TARGET_ID, targetid);

				new fmt_str[64];
				format(fmt_str, sizeof fmt_str, "{FFCD00}Действия (%s)", GetPlayerNameEx(targetid));

				Dialog
				(
					playerid, DIALOG_ACTION, DIALOG_STYLE_LIST,
					fmt_str,
					"1. Приветствие\n\
					2. Показать паспорт\n\
					3. Показать лицензии\n\
					4. Показать навыки",
					"Выбрать", "Закрыть"
				);
			}
		}
		if(PRESSED(KEY_HANDBRAKE))
		{
			if(GetPVarInt(playerid, "have_jerrican") == 1 && GetPlayerSpeed(playerid) == 0.0)
			{
				new vehicleid = GetNearestVehicleID(playerid, 2.3);
				if(vehicleid != INVALID_VEHICLE_ID)
				{
					SetPVarInt(playerid, "jerrican_fill_car", vehicleid);

					Dialog
					(
						playerid, DIALOG_JERRICAN_FILL_CAR, DIALOG_STYLE_MSGBOX,
						"{6699FF}Канистра",
						"{FFFFFF}Вы хотите заправить этот транспорт с канистры?",
						"Да", "Нет"
					);
				}
			}
		}
		if(PRESSED(KEY_CTRL_BACK | KEY_HANDBRAKE))
		{
			if(GetPlayerOwnableCar(playerid) != INVALID_VEHICLE_ID)
			{
				callcmd::car(playerid, "");
			}
		}
		else if(PRESSED(KEY_CTRL_BACK))
		{
			CallLocalFunction("cmd_trunk", "i", playerid);
		}
	}
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	return 1;
}

public OnPlayerUpdate(playerid)
{
	FixBugMoneyMinus(playerid);
	SetPlayerData(playerid, P_AFK_TIME, 0);
	
	new string[50];
	new string2[50];

	format(string, sizeof(string), "X%d", Config[sDonPower]);
	format(string2, sizeof(string2), "%d/1000",Iter_Count(Player));

	
	if(IsPlayerDriver(playerid))
	{
		new keys, gas_brake, left_right;

		GetPlayerKeys(playerid, keys, gas_brake, left_right);

		// SendClientMessage(playerid, -1, IntToString(gas_brake));

		new pedal_type = PEDAL_TYPE_NONE;

		if((keys & KEY_SPRINT) && !(keys & KEY_JUMP || keys & KEY_HANDBRAKE))
			pedal_type = PEDAL_TYPE_GAS;

		else if(keys & KEY_JUMP && !(keys & KEY_SPRINT || keys & KEY_HANDBRAKE))
			pedal_type = PEDAL_TYPE_BRAKE;

		player_press_pedal[playerid] = pedal_type;
	}

	/*
	new current_weapon = GetPlayerWeapon(playerid);

	if(current_weapon != GetPVarInt(playerid, "current_weapon"))
	{
		OnPlayerChangeWeapon(playerid, current_weapon);

		SetPVarInt(playerid, "current_weapon", current_weapon);
	}
	*/
	if(GetPlayerTempJobCheckAnim(playerid))
	{
		new anim_index = GetPlayerAnimationIndex(playerid);

		/*
			new fmt_str[32];

			format(fmt_str, sizeof fmt_str, "index: %d", anim_index);
			SendClientMessage(playerid, 0xCECECEFF, fmt_str);
		*/

		switch(GetPlayerTempJob(playerid))
		{
			case TEMP_JOB_LOADER:
			{
				if(!GetPlayerSex(playerid))
				{
					if(!(anim_index == 259 || anim_index == 1189 || anim_index == 1224))
					{
						anim_index = -1;
					}
				}
				else
				{
					if(!(anim_index == 259 || anim_index == 260 || anim_index == 1275 || anim_index == 1276 || anim_index == 1289))
					{
						anim_index = -1;
					}
				}

				if(anim_index == -1)
				{
					SetPlayerTempJobCheckAnim(playerid, false);
					SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LOADER_DROP_LOAD);
				}
			}
			case TEMP_JOB_MINER:
			{
				if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_MINER_UNLOAD)
				{
					if(!(anim_index == 616 || anim_index == 1189 || anim_index == 1224))
						SetPlayerTempJobState(playerid, TEMP_JOB_STATE_MINER_DROP_LOAD);
				}
			}
			case TEMP_JOB_FACTORY:
			{
				if(!GetPlayerSex(playerid))
				{
					if(!(anim_index == 259 || anim_index == 949 || anim_index == 1189 || anim_index == 1224 || anim_index == 1257 || anim_index == 1269))
					{
						anim_index = -1;
					}
				}
				else
				{
					if(!(anim_index == 259 || anim_index == 1196 || anim_index == 1275 || anim_index == 1276 || anim_index == 1269 || anim_index == 1283))
					{
						anim_index = -1;
					}
				}

				if(anim_index == -1)
				{
					SetPlayerTempJobCheckAnim(playerid, false);
					SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_DROP_P);
				}
			}
			case TEMP_JOB_LUMBERJACK:
			{
				if(!(anim_index == 1189 || anim_index == 1224 || anim_index == 260 || anim_index == 1275 || anim_index == 1276))
				{
					anim_index = -1;
				}

				if(anim_index == -1)
					SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LUMBERJACK_DROP);
			}
			default:
			{
				SetPlayerTempJobCheckAnim(playerid, false);
			}
		}
	}
	/*
	if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER)
	{
		if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_MINER_UNLOAD)
		{
			new anim_idx = GetPlayerAnimationIndex(playerid);

			if(!(anim_idx == 616 || anim_idx == 1189 || anim_idx == 1224))
				SetPlayerTempJobState(playerid, TEMP_JOB_STATE_MINER_DROP_LOAD);
		}
	}
	*/

	if(GetPVarInt(playerid, "test") == 1)
	{
		new fmt_str[64];

		format(fmt_str, sizeof fmt_str, "a_index: %d", GetPlayerAnimationIndex(playerid));
		SendClientMessage(playerid, 0xCECECEFF, fmt_str);
	}

	if(GetPlayerWeaponState(playerid) == 2) SetPlayerData(playerid, P_WEAPON_RELOADING, false);
	if(GetPlayerWeaponState(playerid) == 3 && !GetPlayerData(playerid, P_WEAPON_RELOADING))
	{
		SetPlayerData(playerid, P_WEAPON_RELOADING, true);

		switch(GetPlayerWeapon(playerid))
		{
			case 22:
			{
				if(GetPlayerData(playerid, P_SKILL_COLT) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][0]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[0] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][0] = 0;

						AddPlayerData(playerid, P_SKILL_COLT, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_colt", GetPlayerData(playerid, P_SKILL_COLT));

						SetPlayerSkillLevel(playerid, 0, GetPlayerData(playerid, P_SKILL_COLT) * 10);
					}
				}
			}
			case 23:
			{
				if(GetPlayerData(playerid, P_SKILL_SDPISTOL) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][1]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[1] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][1] = 0;

						AddPlayerData(playerid, P_SKILL_SDPISTOL, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_sdpistol", GetPlayerData(playerid, P_SKILL_SDPISTOL));

						SetPlayerSkillLevel(playerid, 1, GetPlayerData(playerid, P_SKILL_SDPISTOL) * 10);
					}
				}
			}
			case 24:
			{
				if(GetPlayerData(playerid, P_SKILL_DEAGLE) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][2]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[2] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][2] = 0;

						AddPlayerData(playerid, P_SKILL_DEAGLE, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_deagle", GetPlayerData(playerid, P_SKILL_DEAGLE));

						SetPlayerSkillLevel(playerid, 2, GetPlayerData(playerid, P_SKILL_DEAGLE) * 10);
					}
				}
			}
			case 25:
			{
				if(GetPlayerData(playerid, P_SKILL_SHOTGUN) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][3]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[3] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][3] = 0;

						AddPlayerData(playerid, P_SKILL_SHOTGUN, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_shotgun", GetPlayerData(playerid, P_SKILL_SHOTGUN));

						SetPlayerSkillLevel(playerid, 3, GetPlayerData(playerid, P_SKILL_SHOTGUN) * 10);
					}
				}
			}
			case 29:
			{
				if(GetPlayerData(playerid, P_SKILL_MP5) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][4]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[4] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][4] = 0;

						AddPlayerData(playerid, P_SKILL_MP5, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_mp5", GetPlayerData(playerid, P_SKILL_MP5));

						SetPlayerSkillLevel(playerid, 7, GetPlayerData(playerid, P_SKILL_MP5) * 10);
					}
				}
			}
			case 30:
			{
				if(GetPlayerData(playerid, P_SKILL_AK47) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][5]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[5] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][5] = 0;

						AddPlayerData(playerid, P_SKILL_AK47, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_ak47", GetPlayerData(playerid, P_SKILL_AK47));

						SetPlayerSkillLevel(playerid, 8, GetPlayerData(playerid, P_SKILL_AK47) * 10);
					}
				}
			}
			case 31:
			{
				if(GetPlayerData(playerid, P_SKILL_M4) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][6]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[6] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][6] = 0;

						AddPlayerData(playerid, P_SKILL_M4, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_m4", GetPlayerData(playerid, P_SKILL_M4));

						SetPlayerSkillLevel(playerid, 9, GetPlayerData(playerid, P_SKILL_M4) * 10);
					}
				}
			}
			case 34:
			{
				if(GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][7]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[7] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][7] = 0;

						AddPlayerData(playerid, P_SKILL_SNIPER_RIFLE, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_sniper_rifle", GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE));

						SetPlayerSkillLevel(playerid, 10, GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE) * 10);
					}
				}
			}
			case 26:
			{
				if(GetPlayerData(playerid, P_SKILL_SAWNOFF) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][8]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[8] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][8] = 0;

						AddPlayerData(playerid, P_SKILL_SAWNOFF, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_sawnoff", GetPlayerData(playerid, P_SKILL_SAWNOFF));

						SetPlayerSkillLevel(playerid, 4, GetPlayerData(playerid, P_SKILL_SAWNOFF) * 10);
					}
				}
			}
			case 27:
			{
				if(GetPlayerData(playerid, P_SKILL_COMBAT_SG) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][9]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[9] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][9] = 0;

						AddPlayerData(playerid, P_SKILL_COMBAT_SG, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_combat_sg", GetPlayerData(playerid, P_SKILL_COMBAT_SG));

						SetPlayerSkillLevel(playerid, 5, GetPlayerData(playerid, P_SKILL_COMBAT_SG) * 10);
					}
				}
			}
			case 28:
			{
				if(GetPlayerData(playerid, P_SKILL_MICRO_UZI) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][10]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[10] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][10] = 0;

						AddPlayerData(playerid, P_SKILL_MICRO_UZI, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_micro_uzi", GetPlayerData(playerid, P_SKILL_MICRO_UZI));

						SetPlayerSkillLevel(playerid, 6, GetPlayerData(playerid, P_SKILL_MICRO_UZI) * 10);
					}
				}
			}
		}
	}
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	for (new i; i < inputtext[i]; i++) {
		if (inputtext[i] == '%')
			inputtext[i] = '#';
		else if (inputtext[i] == '{' && inputtext[i + 7] == '}')
			strdel(inputtext, i, i + 8);
	}

	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);

	new last_dialog = GetPlayerData(playerid, P_LAST_DIALOG);
	SetPlayerData(playerid, P_LAST_DIALOG, INVALID_DIALOG_ID);
	
	new list_id = listitem + 1;
	
	//new list_id;

	if(last_dialog == dialogid)
	{
		switch(dialogid)
		{
			case DIALOG_LOGIN: // Авторизация
			{
				if(GetPlayerData(playerid, P_ACCOUNT_STATE) == ACCOUNT_STATE_LOGIN)
				{
					if(response)
					{
						new login_step = GetPlayerData(playerid, P_ACCOUNT_STEP_STATE);
						new str_len = strlen(inputtext);
						new bool: wrong_password = false;

						switch(login_step)
						{
							case LOGIN_STATE_PASSWORD:
							{
								if(1 <= str_len <= 65)
								{
									strmid(CheckPass[playerid], inputtext, 0, strlen(inputtext), 65);
									new hash[65];
            						SHA256_PassHash(CheckPass[playerid], GetPlayerData(playerid, P_SALT), hash, 65);

									// str_len = strlen(GetPlayerData(playerid, P_PASSWORD));
									if(strcmp(hash, GetPlayerData(playerid, P_PASSWORD)))//[playerid][pPassword]))
									//if(!str_len || strcmp(inputtext, GetPlayerData(playerid, P_PASSWORD), false) != 0)
									{
										wrong_password = true;
										login_step --;
									}
								}
								else login_step --;
							}
							case LOGIN_STATE_PHONE:
							{
								str_len = strlen(GetPlayerData(playerid, P_SETTING_PHONE));
								if(!str_len || strcmp(GetPlayerData(playerid, P_SETTING_PHONE)[str_len - 5], inputtext) != 0)
								{
									wrong_password = true;
									login_step--;
								}
							}
							default:
								return 1;
						}
						ShowPlayerLoginDialog(playerid, login_step + 1, wrong_password);
					}
					else Kick:(playerid);
				}
			}
			case DIALOG_REGISTER: // Регистрация
			{
				if(GetPlayerData(playerid, P_ACCOUNT_STATE) == ACCOUNT_STATE_REGISTER)
				{
					new reg_step = GetPlayerData(playerid, P_ACCOUNT_STEP_STATE);
					new str_len = strlen(inputtext);

					switch(reg_step)
					{
						case REGISTER_STATE_PASSWORD: // ввод пароля
						{
							if(str_len)
							{
								if(!(6 <= str_len <= 15))
								{
									Dialog
									(
										playerid, DIALOG_REGISTER, DIALOG_STYLE_MSGBOX,
										"{FF9900}Ошибка",
										"{FFFFFF}Длина пароля должна быть от 6 до 15 символов\n"\
										"Рекомендуется использовать русские и латинские буквы, а также любые знаки",
										"Повтор", ""
									);
									return PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
								}
								else if(strfind(inputtext, "%") != -1 || strfind(inputtext, " ") != -1)
								{
									Dialog
									(
										playerid, DIALOG_REGISTER, DIALOG_STYLE_MSGBOX,
										"{FF9900}Ошибка",
										"{FFFFFF}Введенный Вами пароль содержит недопустимые символы или пробелы",
										"Повтор", ""
									);
									return PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
								}
								else if(IsNumeric(GetPlayerNameEx(playerid)))
								{
									Dialog
									(
										playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
										"{FF9900}Ошибка",
										"{FFFFFF}Ваш ник не должен содержать цифры. Измените его и повторите регистрацию",
										"Повтор", ""
									);
									return Kick:(playerid);
								}
								else
								{
									strmid(CheckPass[playerid], inputtext, 0, strlen(inputtext), 65);

									//pformat(g_player[playerid][P_PASSWORD], 16, "%s", inputtext);
								}
							}
							else reg_step --;
						}
					/*	case REGISTER_STATE_EMAIL: 		// ввод емайла
						{
							if(str_len)
							{
								if(!IsValidMail(inputtext, str_len))
								{
									Dialog
									(
										playerid, DIALOG_REGISTER, DIALOG_STYLE_MSGBOX,
										"{FF9900}Ошибка",
										"{FFFFFF}Адрес электронной почты введен неверно",
										"Повтор", ""
									);
									return PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
								}
								new query[128];
								new Cache: result, is_email_exist;

								mysql_format(mysql, query, sizeof query, "SELECT email FROM accounts WHERE email='%e' LIMIT 1", inputtext);
								result = mysql_query(mysql, query);

								is_email_exist = cache_num_rows();
								cache_delete(result);

								if(is_email_exist)
								{
									Dialog
									(
										playerid, DIALOG_REGISTER, DIALOG_STYLE_MSGBOX,
										"{FF9900}Ошибка",
										"{FFFFFF}Этот адрес электронной почты уже привязан к другому аккаунту",
										"Повтор", ""
									);
									return PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
								}
								else
								{
									format(g_player[playerid][P_EMAIL], 61, "%s", inputtext);
								}
							}
							else reg_step --;
						}
						*/
						case REGISTER_STATE_REFER: 		// ввод ника пригласившего игрока
						{
							if(response)
							{
								if(2 <= str_len <= 20)
								{
									new query[75];
									new Cache: result;

									mysql_format(mysql, query, sizeof query, "SELECT id FROM accounts WHERE name='%e' LIMIT 1", inputtext);
									result = mysql_query(mysql, query);

									if(cache_num_rows())
										SetPlayerData(playerid, P_REFER, cache_get_row_int(0, 0));

									cache_delete(result);

									if(!GetPlayerData(playerid, P_REFER))
									{
										Dialog
										(
											playerid, DIALOG_REGISTER, DIALOG_STYLE_MSGBOX,
											"{FF9900}Ошибка",
											"{FFFFFF}Такого игрока не существует.\n"\
											"Если вы не знаете других игроков нажмите кнопку \"Пропустить\"",
											"Повтор", "Пропустить"
										);
										return PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
									}
								}
								else reg_step --;
							}
						}
						case REGISTER_STATE_SEX:		// выбор пола
						{
							SetPlayerData(playerid, P_SEX, !response);
						}
					}
					ShowPlayerRegDialog(playerid, reg_step + 1);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_PLAYER_MENU:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case 1: ShowPlayerStats(playerid);
						case 2: ShowPlayerCMDSDialog(playerid);
						case 3: ShowPlayerSettings(playerid);
						case 4: ShowPlayerSecuritySettings(playerid);
						case 5: ShowPlayerReportMenuDialog(playerid);
						case 6: ShowPlayerImprovementsDialog(playerid);
						case 7: ShowServerRules(playerid);
						case 8: ShowPlayerChangeNameDialog(playerid);
						case 9: callcmd::donat(playerid, "");
						case 10: {
							Dialog
							(
								playerid, DIALOG_ACT_PROMO, DIALOG_STYLE_LIST,
								"Промокод",
								"{FFFFFF}1. Обычный промокод\n"\
								"2. Промокод ютубера",
								"Далее", "Назад"
							);
						}
						case 11: callcmd::reward(playerid);
						case 12: callcmd::quest(playerid);
						default:
							return 1;
					}
				}
			}
			case DIALOG_ACT_PROMO:
			{
			    if(response)
			    {
					switch(listitem) {
						case 0: ShowPlayerPromoActive(playerid);
						case 1: callcmd::ytpromo(playerid, "");
					}
			    }
			}
			case DIALOG_OWNABLE_CAR_PT:
			{
			    if(response)
			    {
					ShowPerformanceItem(playerid, list_id);
			    }
			}

			case DIALOG_OWNABLE_CAR_PT_ITEM:
			{
			    if(response)
			    {
			        new vehicleid = GetPlayerOwnableCar(playerid);

			        if(vehicleid == INVALID_VEHICLE_ID)
			            return 1;

			        new index = GetVehicleData(vehicleid, V_ACTION_ID);

			        new pt_item_level[3],
			            pt_item_type = GetPVarInt(playerid, "pt_item_type");

			        pt_item_level[0] = GetOwnableCarData(index, OC_PT_ENGINE);
			        pt_item_level[1] = GetOwnableCarData(index, OC_PT_BRAKE);
			        pt_item_level[2] = GetOwnableCarData(index, OC_PT_STABILITY);

			        if(pt_item_level[pt_item_type - 1] != list_id - 1)
			        {
			            if(pt_item_level[pt_item_type - 1] < list_id - 1)
			            	SendClientMessage(playerid, 0x999999FF, "Сначала Вы должны приобрести предыдущее улучшение");

			            else
			                SendClientMessage(playerid, 0x999999FF, "Достигнут максимальный уровень улучшения, или вы не купили предыдущее улучшение");

			            ShowPerformanceItem(playerid, pt_item_type);

			            return 1;
			        }

			        if(pt_item_level[pt_item_type - 1] >= 3 && GetPlayerPremium(playerid) != 3)
			        {
			            SendClientMessage(playerid, 0x999999FF, "Покупка этого улучшения доступна только для пользователей имеющих VIP Gold статус.");
			            ShowPerformanceItem(playerid, pt_item_type);

			            return 1;
			        }

			        Dialog(playerid, DIALOG_OWNABLE_CAR_PT_ACCEPT, DIALOG_STYLE_MSGBOX, "Покупка улучшения", "{FFFFFF}Вы действительно хотите приобрести это улучшение?", "Купить", "Отмена");

			        SetPVarInt(playerid, "pt_item_id", list_id);
			    }
			    else ShowVehicleImproveDialog(playerid);
			}
			case DIALOG_OWNABLE_CAR_PT_ACCEPT:
			{
				new pt_item_type = GetPVarInt(playerid, "pt_item_type"),
				pt_item_id = GetPVarInt(playerid, "pt_item_id");

				if(response)
				{
					new pt_item_price[3],
					pt_item_level[3],
					businessid;

					pt_item_price[0] = engine_ptune_price[pt_item_id - 1];
					pt_item_price[1] = brake_ptune_price[pt_item_id - 1];
					pt_item_price[2] = stability_ptune_price[pt_item_id - 1];

					if(GetPlayerMoneyEx(playerid) >= pt_item_price[pt_item_type - 1])
					{
						new vehicleid = GetPlayerOwnableCar(playerid);

						if(vehicleid == INVALID_VEHICLE_ID)
						return 0;

						new index = GetVehicleData(vehicleid, V_ACTION_ID);

						pt_item_level[0] = GetOwnableCarData(index, OC_PT_ENGINE);
						pt_item_level[1] = GetOwnableCarData(index, OC_PT_BRAKE);
						pt_item_level[2] = GetOwnableCarData(index, OC_PT_STABILITY);

						pt_item_level[pt_item_type - 1] ++;

						SetOwnableCarData(index, OC_PT_ENGINE, pt_item_level[0]);
						SetOwnableCarData(index, OC_PT_BRAKE, pt_item_level[1]);
						SetOwnableCarData(index, OC_PT_STABILITY, pt_item_level[2]);

						new query[255];

						mysql_format(mysql, query, sizeof query, "UPDATE ownable_cars SET pt_engine=%d, pt_brake=%d, pt_stability=%d WHERE id=%d", pt_item_level[0], pt_item_level[1], pt_item_level[2], GetOwnableCarData(index, OC_SQL_ID));
						mysql_query(mysql, query);
						print(query);
						if(mysql_errno())
							return printf("sql error %d", mysql_errno());

						GivePlayerMoneyEx(playerid, -pt_item_price[pt_item_type - 1], "Performance Tuning");

						SendClientMessage(playerid, 0x66CC33FF, "Вы успешно приобрели улучшение");

						businessid = GetPlayerInBiz(playerid);

						new price = pt_item_price[pt_item_type - 1];
						new take_prods = 5;

						if(GetBusinessData(businessid, B_PRODS) >= take_prods)
						{
							format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
						}
						else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);

						
						if(!mysql_errno())
						{
							if(GetBusinessData(businessid, B_PRODS) >= take_prods)
							{
								AddBusinessData(businessid, B_PRODS, -, take_prods);
								AddBusinessData(businessid, B_BALANCE, +, price);
							}

							mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
							mysql_query(mysql, query, false);
						}
						else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 22)");
						
					}
				}

				ShowPerformanceItem(playerid, pt_item_type);
			}
			case DIALOG_QM:
            {
                if (!response) return 1;

                switch( listitem )
                {
                    case 0..19:
                    {
                        new format_str[28];
                        format(format_str, sizeof format_str, "Введите текст для поля №%d", listitem+1);

                        if(!strcmp(quick_mes[playerid][listitem][line], format_str, true, 64 ))
                            return SendClientMessage(playerid, -1, "Текст для данного сообщения не установлен, для того чтобы задать текст перейдите в раздел {FFBF00}'Редактировать'");

                        sendQuickMessage(playerid, quick_mes[playerid][listitem][line]);
                        callcmd::binder(playerid);
                    }
                    case 21:
                    {
                        for( new j; j < 5; j++)
                            sendQuickMessage(playerid, quick_mes[playerid][j][line]);
                    }
                    case 22: editMessage(playerid);
                }
                return 1;
            }
            case DIALOG_EDIT_QM:
            {
                if (!response) return callcmd::binder(playerid);
                if (listitem != 20)
                Dialog(playerid, DIALOG_TEXT_QM, DIALOG_STYLE_INPUT, "{FFBF00}Введите сообщение:", " ", "Сохранить", "Назад");
                else
                {
                    for( new j; j < 20; j++ )
                        format(quick_mes[playerid][j][line], 28, "Введите текст для поля №%d", j+1);
                //
                    editMessage(playerid);
                }
                SetPVarInt(playerid, #dialog, listitem+1);
            }
			case DIALOG_TEXT_QM:
            {
                if (!response)
                    return editMessage(playerid);

                if (strlen (inputtext) > 128)
                {
                    SendClientMessage(playerid, -1, "Максимальное количество символов 128");

                    return Dialog(playerid, DIALOG_TEXT_QM, DIALOG_STYLE_INPUT, "{37B6CE}Введите сообщение:", " ", "Сохранить", "Назад");
                }

                for( new j; j < 20; j++ )
                {
                    if(GetPVarInt(playerid, #dialog) == j+1)
                    {
                        format(quick_mes[playerid][j][line], 128, inputtext);
                        save_QuickMessage(playerid, j);
                    }
                }
                editMessage(playerid);

            }
			case DIALOG_PLAYER_STATS:
			{
				if(response)
				{
					callcmd::mm(playerid, "");
				}
			}
						case DIALOG_SELL_GIFT:
			{
			    if(!response) return 1;

			    new rand_prize = random(8),
					fmt_str[159];

			    switch(rand_prize)
			    {
			        case 1:
			        {
						new rand = random(50);

						AddPlayerData(playerid, P_AMMO, +, rand);
						UpdatePlayerDatabaseInt(playerid, "ammo", GetPlayerData(playerid, P_AMMO));

						format(fmt_str, sizeof fmt_str, "Вы обменяли подарок, Вам выпали патроны: {FFFFFF}%d шт.", rand);

			        }
			        case 2:
					{
						new rand = random(50);

						AddPlayerData(playerid, P_METALL, +, rand);
						UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_METALL));

						format(fmt_str, sizeof fmt_str, "Вы обменяли подарок, Вам выпал металл: {FFFFFF}%d кг.", rand);
					}
					case 3:
					{
					    new rand = random(100);

						AddPlayerData(playerid, P_DRUGS, +, rand);
						UpdatePlayerDatabaseInt(playerid, "drugs", GetPlayerData(playerid, P_DRUGS));

						format(fmt_str, sizeof fmt_str, "Вы обменяли подарок, Вам выпали наркотики: {FFFFFF}%d гр.", rand);
					}
					case 4:
					{
					    new rand = random(2000000);

					    GivePlayerMoneyEx(playerid, rand, "подковы", true, true);

					    format(fmt_str, sizeof fmt_str, "Вы обменяли подарок, Вам выпали деньги: {FFFFFF}$%d", rand);
					}
					case 5:
					{
					    format(fmt_str, sizeof fmt_str, "Отклчено!.");
					}
					case 6:
					{
						new rand = random(1000);

					    GivePlayerDonate(playerid, rand, "подковы", true);

					    format(fmt_str, sizeof fmt_str, "Вы обменяли подарок, Вам выпал донат: {FFFFFF}%d шт.", rand);
					}
   			        case 7:
			        {
						new rand = random(300);

						AddPlayerData(playerid, P_AMMO, +, rand);
						UpdatePlayerDatabaseInt(playerid, "ammo", GetPlayerData(playerid, P_AMMO));

						format(fmt_str, sizeof fmt_str, "Вы обменяли подарок, Вам выпали патроны: {FFFFFF}%d шт.", rand);
			        }
			        case 8:
					{
						new rand = random(150);

						AddPlayerData(playerid, P_METALL, +, rand);
						UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_METALL));

						format(fmt_str, sizeof fmt_str, "Вы обменяли подарок, Вам выпал металл: {FFFFFF}%d кг.", rand);
					}
					case 9:
					{
					    new rand = random(150);

						AddPlayerData(playerid, P_DRUGS, +, rand);
						UpdatePlayerDatabaseInt(playerid, "drugs", GetPlayerData(playerid, P_DRUGS));

						format(fmt_str, sizeof fmt_str, "Вы обменяли подарок, Вам выпали наркотики: {FFFFFF}%d гр.", rand);
					}
			        default:
			        {
						new rand = random(300);

						AddPlayerData(playerid, P_AMMO, +, rand);
						UpdatePlayerDatabaseInt(playerid, "ammo", GetPlayerData(playerid, P_AMMO));

						format(fmt_str, sizeof fmt_str, "Вы обменяли подарок, Вам выпали патроны: {FFFFFF}%d шт.", rand);

			        }
			    }

			    SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			    AddPlayerData(playerid, P_GIFTS, -, 1);

			    new fmt_str1[144];
			    format(fmt_str1, sizeof fmt_str1, "У Вас осталось подарков: {FFFFFF}%d шт.", GetPlayerData(playerid, P_GIFTS));
				SendClientMessage(playerid, 0xffff00FF, fmt_str1);
				new query[144];

				format(query, sizeof query, "UPDATE accounts SET gifts=%d WHERE id=%d", GetPlayerData(playerid, P_GIFTS), GetPlayerAccountID(playerid));
				mysql_query(mysql, query, false);
			}
			case DIALOG_AUTOSALON_CAR_BUY:
			{
			    if(!response) return 1/*RemovePlayerFromVehicle(playerid)*/;

			    switch(list_id)
				{
				    case 1:
				    {
				    	if(!response || GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return 1;

						new biz_id = GetPlayerInBiz(playerid);
						if (biz_id == -1) return 1;
						new car_market_id = biz_id - 34;
						if(GetBusinessData(biz_id, B_TYPE) != BUSINESS_TYPE_CAR_MARKET) return 1;

						BuyOwnableCar(playerid, car_market_id, buy_car_select_car[playerid]);

						return 1;
				    }
				    case 2:
				    {
				        Send(playerid,-1,"Не доступно до след. обновления!");
				        /*if(!response || GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return 1;

						new biz_id = GetPlayerInBiz(playerid);
						new car_market_id = biz_id - 34;
						if(GetBusinessData(biz_id, B_TYPE) != BUSINESS_TYPE_CAR_MARKET) return 1;

						BuyOwnableCarFamily(playerid, car_market_id, buy_car_select_car[playerid], buy_car_select_color[playerid][0], buy_car_select_color[playerid][1]);

						return 1;*/
				    }
				}
			}
   			case DIALOG_RENT_BIKE:
            {
                if(!response) return 1;
                if(GetPlayerData(playerid, P_RENT_BIKE)) return SendClientMessage(playerid, -1,"{FFFF00}[Информация]{FFFFFF} Вы уже арендовали транспорт!");

                new cashrent;
                cashrent = GetPlayerLevel(playerid)*100;
                if(GetPlayerMoneyEx(playerid) < cashrent) return SendClientMessage(playerid, -1,"{FFFF00}[Информация]{FFFFFF} У вас недостаточно средств!");
                GivePlayerMoneyEx(playerid, -cashrent, "Аренда велика", true);

                new Float:POS[4];
                GetPlayerPos(playerid, POS[0],POS[1],POS[2]);
                GetPlayerFacingAngle(playerid, POS[3]);

                SetPlayerData(playerid, P_RENT_BIKE , CreateVehicle(522, POS[0],POS[1],POS[2],POS[3], -1, -1, 40,0,VEHICLE_ACTION_TYPE_RENT_BIKE));
                SendClientMessage(playerid, -1,"{FFFF00}[Информация]{FFFFFF} Вы успешно арендовали мото!");
                PutPlayerInVehicle(playerid, GetPlayerData(playerid, P_RENT_BIKE), 0);
                return 1;
            }
            case DIALOG_ORG_CAR_GET:
	        {
	            if(!response) return 1;
	            new fmt_text[100];
	            new action_id = GetPlayerListitemValue(playerid, 0);

	            format(fmt_text, sizeof fmt_text, "Вы взяли транспорт {ffff00}%s", g_vehicle_info[g_org_car[action_id][O_MODEL][listitem]-400][VI_NAME]);
	            SendClientMessage(playerid, -1, fmt_text);
	            SendClientMessage(playerid, -1, "Если вы не будете использовать транспорт в течении двух минут, он будет удален");

	            new buy_cars_count = g_org_car[action_id][O_COUNT]++;

	            if(buy_cars_count >= 3)
	            g_org_car[action_id][O_COUNT] = 0;

	            new Float: pos_x = org_car_pos_spawn[action_id][buy_cars_count][0];
	            new Float: pos_y = org_car_pos_spawn[action_id][buy_cars_count][1];
	            new Float: pos_z = org_car_pos_spawn[action_id][buy_cars_count][2];
	            new Float: angle = org_car_pos_spawn[action_id][buy_cars_count][3];

	            new vehicleid = CreateVehicle(g_org_car[action_id][O_MODEL][listitem], pos_x, pos_y, pos_z, angle, g_org_car[action_id][O_COLOR][0], g_org_car[action_id][O_COLOR][1], 120, 0, VEHICLE_ACTION_ORG_CAR, g_org_car[action_id][O_FRAC_ID]);
	            SetVehicleData(vehicleid, V_ACTION_OWNER, playerid); //
	            SetPlayerData(playerid, P_FRACTION_CAR, vehicleid);
	            //    PutPlayerInVehicle(playerid, vehicleid, 0);

	        }
			case DIALOG_PLAYER_CMDS:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case 1:
						{
							Dialog
							(
								playerid, DIALOG_PLAYER_CMDS, DIALOG_STYLE_MSGBOX,
								"Команды транспорта",
								"{00CC33}/car{FFFFFF} - меню транспорта\n"\
								"{00CC33}/key{FFFFFF}  - вставить ключ\n"\
								"{00CC33}/e{FFFFFF} - завести двигатель\n"\
								"{00CC33}/lock{FFFFFF} - закрыть транспорт\n"\
								"{00CC33}/park{FFFFFF} - припарковать транспорт",
								"Назад", "Закрыть"
							);
						}
						case 2:
						{
							Dialog
							(
								playerid, DIALOG_PLAYER_CMDS, DIALOG_STYLE_MSGBOX,
								"Команды общения",
								"{00CC33}/c(all) [номер]{FFFFFF} - позвонить\n"\
								"{00CC33}/sms [номер] [текст]{FFFFFF}  - отправить сообщение\n"\
								"{00CC33}/p{FFFFFF} - принять вызов\n"\
								"{00CC33}/h{FFFFFF} - завершить вызов\n"\
								"{00CC33}/f(n) [текст]{FFFFFF} - рация семьи\n"\
								"{00CC33}/r(n) [текст]{FFFFFF} - рация организации\n"\
								"{00CC33}/me [текст]{FFFFFF} - выполнить действие\n"\
								"{00CC33}/do [текст]{FFFFFF} - выполнить действие от 3-го лица\n"\
								"{00CC33}/try [текст]{FFFFFF} - выполнить действие (Удачно/не удачно)\n"\
								"{00CC33}/s [текст]{FFFFFF} - крикнуть\n"\
								"{00CC33}/n [текст]{FFFFFF} - OOC чат\n"\
								"{00CC33}/w [текст]{FFFFFF} - прошептать\n"\
								"{00CC33}/ad [текст]{FFFFFF} - подать объявление\n"\
								"{00CC33}/u [текст]{FFFFFF} - радио-эфир (для гостя)\n"\
								"{00CC33}/gnews [текст]{FFFFFF} - гос. волна\n",
								"Назад", "Закрыть"
							);
						}
						case 3:
						{
							Dialog
							(
								playerid, DIALOG_PLAYER_CMDS, DIALOG_STYLE_MSGBOX,
								"Команды дома",
								"{00CCFF}/home{FFFFFF} - панель управление\n"\
								"{00CCFF}/sellhome{FFFFFF} - продать дом гос-ву\n"\
								"{00CCFF}/sellmyhome [id игрока] [цена]{FFFFFF} - продать дом игроку\n"\
								"{00CCFF}/exit{FFFFFF} - выйти из дома\n"\
								"{00CCFF}/makestore{FFFFFF} - перенести шкаф\n"\
								"{00CCFF}/use{FFFFFF} - использовать шкаф\n"\
								"{00CCFF}/live [id игрока]{FFFFFF} - прописать игрока\n"\
								"{00CCFF}/liveout [id игрока]{FFFFFF} - выгнать игрока\n"\
								"{00CCFF}/homelock{FFFFFF} - закрыть/открыть дом",
								"Назад", "Закрыть"
							);
						}
						case 4:
						{
							Dialog
							(
								playerid, DIALOG_PLAYER_CMDS, DIALOG_STYLE_MSGBOX,
								"Команды бизнеса",
								"{33CC66}/business{FFFFFF} - панель управление\n"\
								"{33CC66}/sellbiz{FFFFFF} - продать бизнес гос-ву\n"\
								"{33CC66}/buybiz{FFFFFF} - купить бизнес\n"\
								"{33CC66}/sellmybiz [id игрока] [цена]{FFFFFF} - продать бизнес игроку\n"\
								"{33CC66}/fuelst{FFFFFF} - панель управления АЗС\n"\
								"{33CC66}/sellfuelst{FFFFFF} - продать АЗС гос-ву\n"\
								"{33CC66}/buyfuelst{FFFFFF} - купить АЗС\n"\
								"{33CC66}/sellmyfuelst [id игрока] [цена]{FFFFFF} - продать АЗС игроку",
								"Назад", "Закрыть"
							);
						}
						case 5:
						{
							Dialog
							(
								playerid, DIALOG_PLAYER_CMDS, DIALOG_STYLE_MSGBOX,
								"Команды работ",
								"{6699CC}/getfuel{FFFFFF} - заказать топливо (механик)\n"\
								"{6699CC}/fill [id игрока] [кол-во] [цена]{FFFFFF} - продать топливо игроку\n"\
								"{6699CC}/repair [id игрока]{FFFFFF} - починить транспорт",
								"Назад", "Закрыть"
							);
						}
						case 6:
						{
      						Dialog
							(
								playerid, DIALOG_PLAYER_CMDS, DIALOG_STYLE_MSGBOX,
								"Команды банд",
								"{CCCC33}/makegun{FFFFFF} - создать оружие\n"\
								"{CCCC33}/capture{FFFFFF} - начать захват\n"\
								"{CCCC33}/(un)tie{FFFFFF} - связать / развязать\n"\
								"{CCCC33}/close{FFFFFF} - закрыть склад\n"\
								"{CCCC33}/killstop{FFFFFF} - топ по киллам на каптах",
								"Назад", "Закрыть"
							);
						}
						case 7:
						{
                            Dialog
							(
								playerid, DIALOG_PLAYER_CMDS, DIALOG_STYLE_MSGBOX,
								"Команды правительства",
								"{99CC33}/smenu{FFFFFF} - меню советника\n"\
								"{99CC33}/givelic{FFFFFF} - выдать лицензию\n"\
								"{99CC33}/free{FFFFFF} - выпустить преступника\n"\
								"{99CC33}/debtorlist{FFFFFF} - список должников\n"\
								"{99CC33}/debtorsell{FFFFFF} - забрать имущество у должника",
								"Назад", "Закрыть"
							);
       					}
       					case 8:
						{
                            Dialog
							(
								playerid, DIALOG_PLAYER_CMDS, DIALOG_STYLE_MSGBOX,
								"Команды армии",
								"Команд нету",
								"Назад", "Закрыть"
							);
						}
						case 9:
						{
                            Dialog
							(
								playerid, DIALOG_PLAYER_CMDS, DIALOG_STYLE_MSGBOX,
								"Команды полиции",
								"{0066FF}/search{FFFFFF} - произвести обыск\n"\
								"{0066FF}/(un)cuff{FFFFFF} - надеть / снять наручники\n"\
								"{0066FF}/su{FFFFFF} - выдать розыск\n"\
								"{0066FF}/clear{FFFFFF} - очистить розыск\n"\
								"{0066FF}/arrest{FFFFFF} - посадить в кпз\n"\
								"{0066FF}/m [текст]{FFFFFF} - мегафон\n"\
								"{0066FF}/ticket{FFFFFF} - выдать штраф\n"\
								"{0066FF}/takelic{FFFFFF} - отобрать лицензии\n"\
								"{0066FF}/wanted{FFFFFF} - список подозреваемых\n"\
								"{0066FF}/follow{FFFFFF} - вести преступника за собой\n"\
								"{0066FF}/putpl{FFFFFF} - затолкать в транспорт\n"\
								"{0066FF}/(off)dis{FFFFFF} - замаскироваться(ФСБ)",
								"Назад", "Закрыть"
							);
						}
						case 10:
						{
						    Dialog
							(
								playerid, DIALOG_PLAYER_CMDS, DIALOG_STYLE_MSGBOX,
								"Команды СМИ",
								"{FFCC33}/edit{FFFFFF} - редактировать объявление\n"\
								"{FFCC33}/t{FFFFFF} - радио-эфир\n"\
								"{FFCC33}/givemic{FFFFFF} - дать доступ к эфиру",
								"Назад", "Закрыть"
							);
						}
						case 11:
						{
						    Dialog
							(
								playerid, DIALOG_PLAYER_CMDS, DIALOG_STYLE_MSGBOX,
								"Команды медиков",
								"{FF66FF}/medhelp [id игрока]{FFFFFF} - предложить лечение в больнице\n"\
								"{FF66FF}/heal [id игрока]{FFFFFF} - предложить лечение на выезде\n"\
								"{FF66FF}/out [id игрока]{FFFFFF} - выписать игрока из больницы\n"\
								"{FF66FF}/changesex [id игрока]{FFFFFF} - сменить пол игроку",
								"Назад", "Закрыть"
							);
						}
						case 12:
						{
							Dialog
							(
								playerid, DIALOG_PLAYER_CMDS, DIALOG_STYLE_MSGBOX,
								"Команды лидеров",
								"{ABCDEF}/invite{FFFFFF} - принять в организацию\n"\
								"{ABCDEF}/uninvite{FFFFFF} - уволить игрока\n"\
								"{ABCDEF}/rang{FFFFFF} - выдать ранг игроку\n"\
								"{ABCDEF}/changeskin{FFFFFF} - сменить скин\n"\
								"{ABCDEF}/showall{FFFFFF} - список всех сотрудников\n"\
								"{ABCDEF}/uninviteoff{FFFFFF} - уволить в оффлайне\n"\
								"{ABCDEF}/addvacancy{FFFFFF} - создать вакансию\n"\
								"{ABCDEF}/delvacancy{FFFFFF} - удалить вакансию.\n"\
								"{ABCDEF}/gnews{FFFFFF} - государственная волна",
								"Назад", "Закрыть"
							);
						}
						case 13:
						{
							Dialog
							(
								playerid, DIALOG_PLAYER_CMDS, DIALOG_STYLE_MSGBOX,
								"Общие команды",
								"{00CC33}/mycoins [id игрока] [количество]{FFFFFF} - посмотреть свое количество монет\n"\
								"{00CC33}/givemycoins [id игрока] [количество]{FFFFFF} - передать монеты\n"\
								"{00CC33}/speedometr{FFFFFF} - выбрать спидометр\n"\
								"{00CC33}/pay [id игрока] [количество]{FFFFFF} - передать деньги\n"\
								"{00CC33}/online{FFFFFF} - онлайн сервера",
								"Назад", "Закрыть"
							);
						}
						default:
							return 1;
					}
					//ShowPlayerCMDSDialog(playerid);
				}
				else callcmd::mm(playerid, "");
			}
			case DIALOG_PLAYER_SETTINGS:
			{
				if(response)
				{
					new E_PLAYER_SETTINGS_STRUCT: setting_id = E_PLAYER_SETTINGS_STRUCT: listitem;
					switch(listitem)
					{
						case 0..5:
						{
							if(S_CHAT_TYPE <= setting_id <= S_VEH_CONTROL)
							{
								new setting_type = GetPlayerSettingData(playerid, setting_id);

								switch(setting_id)
								{
									case S_CHAT_TYPE:
									{
										if(!(SETTING_CHAT_OFF <= ++setting_type <= SETTING_CHAT_ADVANCE))
										{
											setting_type = SETTING_CHAT_OFF;
										}
									}
									case S_TEAM_CHAT..S_VEH_CONTROL:
									{
										setting_type ^= SETTING_TYPE_ON;
									}
								}
								if(setting_id == S_PLAYERS_NICK)
								{
									foreach(new idx : Player)
										ShowPlayerNameTagForPlayer(playerid, idx, setting_type);
								}

								SetPlayerSettingData(playerid, setting_id, setting_type);
								SetPlayerChatInit(playerid);

								ShowPlayerSettings(playerid);
							}
						}
						case 6:
						{
							Dialog
						    (
						        playerid, DIALOG_SET_SPAWN, DIALOG_STYLE_LIST,
						        "{FFCC00}Изменение места появления в игре",
						        "1. На Ж/Д вокзале или автостанции\n\
						        2. В собственном доме\n\
						        3. В гостиничном номере\n\
						        4. На базе организации\n\
						        5. В гостях (совместное проживание)\n\
						        6. На базе семьи",
						        "Выбрать", "Отмена"
						    );
						}
						case 7:
						{
							new query[128];

							format
							(
								query, sizeof query,
								"UPDATE accounts SET "\
								"setting1=%d,"\
								"setting2=%d,"\
								"setting4=%d,"\
								"setting5=%d,"\
								"setting6=%d"\
								" WHERE id=%d LIMIT 1",
								GetPlayerSettingData(playerid, S_CHAT_TYPE),
								GetPlayerSettingData(playerid, S_TEAM_CHAT),
								GetPlayerSettingData(playerid, S_NICK_IN_CHAT),
								GetPlayerSettingData(playerid, S_ID_IN_CHAT),
								GetPlayerSettingData(playerid, S_VEH_CONTROL),
								GetPlayerAccountID(playerid)
							);
							mysql_query(mysql, query, false);

							if(!mysql_errno())
							{
								Dialog
								(
									playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
									"{FFCD00}Сохранено",
									"{FFFFFF}Новые настройки будут автоматически устанавливаться после каждой авторизации",
									"Ок", ""
								);
							}
							else
							{
								SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 02)");
								ShowPlayerSettings(playerid);
							}

						}

					}
				}
				else callcmd::mm(playerid, "");
			}
			case DIALOG_PLAYER_SECURITY_SETTINGS:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case 1:
						{
							Dialog
							(
								playerid, DIALOG_SECURITY_SETTING_INFO, DIALOG_STYLE_MSGBOX,
								"{FFCD00}Информация о настройках",
								"{FFFFFF}Тут Вы можете изменить настройки безопасности вашего аккаунта. Это\n"\
								"поможет защитить его от взлома.\n\n"\
								"Существуют 3 вида защиты: с использованием мобильного приложения\n"\
								"{6699FF}Google Authenticator{FFFFFF}, системы 'Случайный код' или номера мобильного\n"\
								"телефона. Если Вы включите защиту, то при авторизации, помимо\n"\
								"пароля, будет запрашиваться ввод кода или части номера телефона\n"\
								"(в зависимости от ваших настроек). Подробнее Вы можете узнать, выбрав\n"\
								"нужный пункт в меню безопасности.\n\n"\
								"Система будет запрашивать ввод только если Ваш IP адрес или подсеть\n"\
								"(первые 2 цифры IP адреса) игрока не совпадают с теми, которые были\n"\
								"записаны при успешном входе в игру. Другими словами, система\n"\
								"выдаст запрос, если под Вашим аккаунтом попытаются зайти с другого\n"\
								"компьютера.",
								"Назад", ""
							);
						}
						case 2:
						{
							if(strcmp(GetPlayerData(playerid, P_SETTING_PHONE), "None", true) != 0)
							{
								// установлен
								Dialog
								(
									playerid, DIALOG_SECURITY_SETTING_PHONE, DIALOG_STYLE_LIST,
									"{FFCD00}При авторизации запрашивать мобильный...",
									"Не запрашивать\n"\
									"Если подсеть не совпадает с моей\n"\
									"Если IP не совпадает с моим",
									"Сохранить", "Назад"
								);
							}
							else
							{
								// не установлен
								Dialog
								(
									playerid, DIALOG_SECURITY_SETTING_INFO, DIALOG_STYLE_MSGBOX,
									"{FFCD00}Мобильный телефон",
									"{FFFFFF}В данный момент мы проводим обновление этой системы безопасности.\n"\
									"Приносим свои извинения за временные неудобства.",
									"Назад", ""
								);
							}

						}
						case 3:
						{
							if(strcmp(GetPlayerData(playerid, P_SETTING_PIN), "None", true) != 0)
							{
								Dialog
								(
									playerid, DIALOG_SECURITY_SETTING_PIN, DIALOG_STYLE_LIST,
									"{FFCD00}При авторизации запрашивать случайный PIN-код...",
									"Не запрашивать\n"\
									"Если подсеть не совпадает с моей\n"\
									"Если IP не совпадает с моим",
									"Сохранить", "Назад"
								);
							}
							else
							{
								Dialog
								(
									playerid, DIALOG_SECURITY_SETTING_PIN_SET, DIALOG_STYLE_MSGBOX,
									"{FFCD00}Случайный PIN-код",
									"{FFFFFF}Для продолжения, вам необходимо придумать и набрать 4-х значный код.\n\n"\
									"Эта система безопасности поможет защитить Ваш аккаунт, если на\n"\
									"компьютер попадет вирус-кейлоггер, который перехватывает данные с\n"\
									"клавиатуры.  Кнопки всегда располагаются в случайном порядке, что не даст\n"\
									"злоумышленникам возможность узнать ваш PIN-код.",
									"Далее", "Назад"
								);
							}
						}
						case 4:
						{
							Dialog
							(
								playerid, DIALOG_SECURITY_SETTING_INFO, DIALOG_STYLE_MSGBOX,
								"{FFCD00}Защита с использованием приложения Authenticator",
								"{FFFFFF}Этот тип защиты является самым надежным для Вашего аккаунта. Чтобы его активировать,\n"\
								"зайдите в Личный Кабинет на сайте {33CCFF}"SERVER_SITE" (Настройки > Защитить акк.) {FFFFFF}и следуйте\n"\
								"инструкциям.\n\n"\
								"Вам потребуется мобильное устройство с поддержкой сторонних приложений (Android, iOS,\n"\
								"Windows Phone и другие). После включения защиты на сайте, вернитесь в это меню для\n"\
								"завершения настройки.",
								"Назад", ""
							);
						}
						case 5:
						{
							Dialog
							(
								playerid, DIALOG_SECURITY_SETTING_PASS_1, DIALOG_STYLE_INPUT,
								"{FFCD00}Изменение пароля",
								"{FFFFFF}Введите Ваш текущий пароль в поле ниже:",
								"Далее", "Назад"
							);
						}
						case 6:
						{
							if(!strcmp(GetPlayerData(playerid, P_SETTING_PIN), "None", true))
							{
								Dialog
								(
									playerid, DIALOG_SECURITY_SETTING_PIN_SET, DIALOG_STYLE_MSGBOX,
									"{FFCD00}Случайный PIN-код",
									"{FFFFFF}Для продолжения, вам необходимо придумать и набрать 4-х значный код.\n\n"\
									"Эта система безопасности поможет защитить Ваш аккаунт, если на\n"\
									"компьютер попадет вирус-кейлоггер, который перехватывает данные с\n"\
									"клавиатуры.  Кнопки всегда располагаются в случайном порядке, что не даст\n"\
									"злоумышленникам возможность узнать ваш PIN-код.",
									"Далее", "Назад"
								);
							}
							else ShowPlayerPinCodePTD(playerid, PIN_CODE_STATE_CHECK);
						}
						case 7:
						{
							// 7. Статус безопасности
							static const
								setting_status_name[3][64] =
							{
								"{CC9900}Не запрашивается",
								"{3399FF}Запрашивается при несовпадении подсети",
								"{009900}Запрашивается при несовпадении IP"
							};

							new fmt_str[364];
							format
							(
								fmt_str, sizeof fmt_str,
								"{FFFFFF}Тут Вы можете увидеть статус всех Ваших настроек безопасности.\n"\
								"Для их изменения, выберите нужный пункт в меню настроек\n\n"\
								"Мобильный телефон:\t\t%s\n"\
								"{FFFFFF}Случайный PIN-код:\t\t%s\n"\
								"{FFFFFF}Google Authenticator:\t\t{CC9900}Не запрашивается",
								setting_status_name[GetPlayerData(playerid, P_REQUEST_PHONE)],
								setting_status_name[GetPlayerData(playerid, P_REQUEST_PIN)]
							);
							Dialog(playerid, DIALOG_SECURITY_SETTING_INFO, DIALOG_STYLE_MSGBOX, "{FFCD00}Статус безопасности", fmt_str, "Назад", "");
						}
						case 8:
						{
						/*	if(GetPlayerData(playerid, P_CONFIRM_EMAIL))
								return SendClientMessage(playerid, 0xFFFFFFFF, "Ваш Email-адрес уже подтвержден");

							Dialog
							(
								playerid, DIALOG_SECURITY_SETTING_EMAIL, DIALOG_STYLE_MSGBOX,
								"{6699FF}Подтверждение Email",
								"{FFFFFF}При регистрации на сервере на Вашу почту мы выслали ссылку для\n"\
								"подтверждения Email. Она действительна в течение 14 дней.\n"\
								"Пожалуйста, проверьте почту и подтвердите ее.\n\n"\
								"В случае, если вы не получили наше письмо, нажмите кнопку \"Повтор\".\n"\
								"Мы отправим Вам новую ссылку.",
								"Закрыть", "Повтор"
							);
							*/
							SendClientMessage(playerid, -1, "Отключено!");
						}
						default:
							return 1;
					}
				}
				else callcmd::mm(playerid, "");
			}
			case DIALOG_ACTION_EXIT_HOUSE:
			{
				if(response)
					ExitPlayerFromHouse(playerid, 3.0, listitem);
			}
			case DIALOG_ACTION_TYPE_GET_FAMILY:
            {
                if(!(g_family_loaded >= 200))
                {
                    Dialog
                    (
                        playerid, DIALOG_CREATE_FAMILY, DIALOG_STYLE_INPUT,
                        "Создание семьи",
                        "{FFFFFF}Стоимость создания семьи:{32a44b} 300 донат-рублей\n\
                        {FFFFFF}Чтобы создать семью, введите название семьи, и нажмите 'Создать'",
                        "Создать", "Отмена"
                    );
                }
            }
           /* case DIALOG_CREATE_FAMILY:
            {
                if(!response) return 1;

                if(GetPlayerData(playerid, P_FAMILY) != 0) return SendClientMessage(playerid, 0xCECECEFF, "Вы уже состоите в семье");
                if(GetPlayerDonateRub(playerid) >= 300)
                {
                    if(GetPlayerData(playerid, P_LEVEL) >= 3)
                    {
                        new query[256],
                            Cache: result,
                            rows;

                        mysql_format(mysql, query, sizeof query, "SELECT * FROM family WHERE name='%s'", inputtext);
                        result = mysql_query(mysql, query, true);

                        rows = cache_num_rows();

                        cache_delete(result);

                        if(rows)
                        {
                            SendClientMessage(playerid, 0xCECECEFF, "Данное имя уже используется");
                            Dialog
                            (
                                playerid, DIALOG_CREATE_FAMILY, DIALOG_STYLE_INPUT,
                                "Создание семьи",
                                "{FFFFFF}Введите название семьи, и нажмите 'Создать'",
                                "Создать", "Отмена"
                            );

                            return 1;
                        }



                        new time = gettime();

                        mysql_format
                        (
                            mysql, query, sizeof query,
                            "INSERT INTO family "\
                                "(name,u_id,time) "\
                                "VALUES "\
                                "('%e',%d,%d)",
                            inputtext,
                            GetPlayerAccountID(playerid),
                            time
                        );
                        result = mysql_query(mysql, query);

                        new fam_id = cache_insert_id() - 1;

                        SetPlayerData(playerid, P_FAMILY, fam_id);
                        SetPlayerData(playerid, P_FAMILY_RANK, 10);

                        SetFamilyData(fam_id, F_SQL_ID, fam_id);

                        format(g_family[fam_id][F_NAME], 64, "%s", inputtext);

                        SetFamilyData(fam_id, F_TIME, time);
                        SetFamilyData(fam_id, F_HOUSE_ID, -1);
                        SetFamilyData(fam_id, F_USER_ID, GetPlayerAccountID(playerid));
                        format(g_family[fam_id][F_RANK1], 32, "Пусто");
                        format(g_family[fam_id][F_RANK2], 32, "Пусто");
                        format(g_family[fam_id][F_RANK3], 32, "Пусто");
                        format(g_family[fam_id][F_RANK4], 32, "Пусто");
                        format(g_family[fam_id][F_RANK5], 32, "Пусто");
                        format(g_family[fam_id][F_RANK6], 32, "Пусто");
                        format(g_family[fam_id][F_RANK7], 32, "Пусто");
                        format(g_family[fam_id][F_RANK8], 32, "Пусто");
                        format(g_family[fam_id][F_RANK9], 32, "Пусто");
                        format(g_family[fam_id][F_RANK10], 32, "Пусто");

                        cache_delete(result);

                        GivePlayerDonateRub(playerid, -300, "Создание семьи", true);

                        format(query, sizeof query, "Семья '%s' создана. {d8284c}Команды по управлению /mn > 2", inputtext);
                        SendClientMessage(playerid, 0x1E90FFFF, query);

                        format(query, sizeof query, "UPDATE accounts SET family=%d, family_rank=%d WHERE id=%d LIMIT 1", GetPlayerData(playerid, P_FAMILY), GetPlayerData(playerid, P_FAMILY_RANK), GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);

                    }
                    else SendClientMessage(playerid, 0xCECECEFF, "Для создания семьи необходимо проживать в штате не менее 3-ex лет");
                }
                else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно донат-рублей");
            }*/
            case DIALOG_ACTION_QUEST:
			{
				if(!response) return 1;

				switch(listitem)
				{
					case 0:
					{

					    if(GetPlayerData(playerid, P_QUEST_1) >= 1) return Send(playerid, -1, "Вы уже выполнили этот квест");

					    new fmt_str[255 + 1];

						format
						(
							fmt_str, sizeof fmt_str,
							""c_server"Информация: "c_b"Перенеси 10 мешков на работе грузчика.\n\
							"c_server"Награда: "c_m"5000000$\n\
							"c_server"Местоположение: "c_b"/gps > Работы для новичков > Работа грузчика\n\
							"c_server"Прогресс: "c_b"%d/10",
							GetPlayerData(playerid, P_QUEST_EXP_1)
						);

						Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Квест | Первые деньги", fmt_str, "Закрыть", "");
						return 1;
					}
					case 1:
					{

					    if(GetPlayerData(playerid, P_QUEST_2) >= 1) return Send(playerid, -1, "Вы уже выполнили этот квест");

					    new fmt_str[255 + 1];

						format
						(
							fmt_str, sizeof fmt_str,
							""c_server"Информация: "c_b"Купи мобильный телефон\n\
							"c_server"Награда: "c_m"5000000$\n\
							"c_server"Местоположение: "c_b"/gps > Общественные места > Сотовый салон\n\
							"c_server"Прогресс: "c_b"%d/1",
							GetPlayerData(playerid, P_QUEST_EXP_2)
						);

						Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Квесты", fmt_str, "Закрыть", "");
						return 1;
					}
					case 2:
					{

					    if(GetPlayerData(playerid, P_QUEST_3) >= 1) return Send(playerid, -1, "Вы уже выполнили этот квест");

					    new fmt_str[255 + 1];

						format
						(
							fmt_str, sizeof fmt_str,
							""c_server"Информация: "c_b"Ступай на шахту и поработай там\n\
							"c_server"Награда: "c_m"5000000$\n\
							"c_server"Местоположение: "c_b"/gps > Работы для новичков > Работа шахтера\n\
							"c_server"Прогресс: "c_b"%d/20",
							GetPlayerData(playerid, P_QUEST_EXP_3)
						);

						Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Квесты", fmt_str, "Закрыть", "");
						return 1;
					}
					case 3:
					{

					    if(GetPlayerData(playerid, P_QUEST_4) >= 1) return Send(playerid, -1, "Вы уже выполнили этот квест");

					    new fmt_str[255 + 1];

						format
						(
							fmt_str, sizeof fmt_str,
							""c_server"Информация: "c_b"Ступай на лесопилку и спили там 20 деревьев. Будь осторожнее.\n\
							"c_server"Награда: "c_m"5000000$\n\
							"c_server"Местоположение: "c_b"/gps > Работы для новичков > Работа лесоруба\n\
							"c_server"Прогресс: "c_b"%d/20",
							GetPlayerData(playerid, P_QUEST_EXP_4)
						);

						Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Квесты", fmt_str, "Закрыть", "");
						return 1;
					}
					case 4:
					{

					    if(GetPlayerData(playerid, P_QUEST_5) >= 1) return Send(playerid, -1, "Вы уже выполнили этот квест");

					    new fmt_str[255 + 1];

						format
						(
							fmt_str, sizeof fmt_str,
							""c_server"Информация: "c_b"Отправляйся в любой автосалон и купи себе транспорт\n\
							"c_server"Награда: "c_m"10000000$\n\
							"c_server"Местоположение: "c_b"/gps > Транспортные узлы\n\
							"c_server"Прогресс: "c_b"%d/1",
							GetPlayerData(playerid, P_QUEST_EXP_5)
						);

						Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Квесты", fmt_str, "Закрыть", "");
						return 1;
					}
					case 5:
					{

					    if(GetPlayerData(playerid, P_QUEST_6) >= 1) return Send(playerid, -1, "Вы уже выполнили этот квест");

					    new fmt_str[255 + 1];

						format
						(
							fmt_str, sizeof fmt_str,
							""c_server"Информация: "c_b"Отправляйся в магазин одежды и купи себе одежду\n\
							"c_server"Награда: "c_m"5000000$\n\
							"c_server"Местоположение: "c_b"/gps > Ближайший магазин одежды\n\
							"c_server"Прогресс: "c_b"%d/1",
							GetPlayerData(playerid, P_QUEST_EXP_6)
						);

						Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Квесты", fmt_str, "Закрыть", "");
						return 1;
					}
					case 6:
					{

					    if(GetPlayerData(playerid, P_QUEST_7) >= 1) return Send(playerid, -1, "Вы уже выполнили этот квест");

					    new fmt_str[255 + 1];

						format
						(
							fmt_str, sizeof fmt_str,
							""c_server"Информация: "c_b"Вступи в любую семью\n\
							"c_server"Награда: "c_m"10000000$\n\
							"c_server"Прогресс: "c_b"%d/1",
							GetPlayerData(playerid, P_QUEST_EXP_7)
						);

						Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Квесты", fmt_str, "Закрыть", "");
						return 1;
					}
					case 7:
					{

					    if(GetPlayerData(playerid, P_QUEST_8) >= 1) return Send(playerid, -1, "Вы уже выполнили этот квест");

					    new fmt_str[270 + 1];

						format
						(
							fmt_str, sizeof fmt_str,
							""c_server"Информация: "c_b"Вступи в любую организацию.\n\
							"c_server"Награда: "c_m"10000000$\n\
							"c_server"Прогресс: "c_b"%d/1",
							GetPlayerData(playerid, P_QUEST_EXP_8)
						);

						Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Квесты", fmt_str, "Закрыть", "");
						return 1;
					}
				}
			}
			case DIALOG_FAMILY_CAR_RANG:
            {
                if(response)
                {
                    new idx = GetPVarInt(playerid, "sql_id"),
                        model_id,
                        rang,
                        Cache: result,
                        query[120];

                    mysql_format(mysql, query, sizeof query, "SELECT model_id, rang FROM family_cars WHERE id='%d'", idx);
                    result = mysql_query(mysql, query, true);
                    printf(query);

                    if(cache_num_rows())
                    {
                        model_id = cache_get_field_content_int(0, "model_id");
                        rang = cache_get_field_content_int(0, "rang");
                    }
                    format(query, sizeof(query),
					""c_b"Модель: "c_s"%s\n\
					"c_b"Доступна с "c_s"%d "c_b"ранга\n\
					Введите новый ранг с которого будет доступен этот транспорт",
					GetVehicleInfo(model_id-400, VI_NAME),
					rang);

					Dialog(playerid, DIALOG_FAMILY_CAR_RANG_SET, DIALOG_STYLE_INPUT,"Транспорт семьи", query, "Далее", "Отмена");

					printf(query);
                    cache_delete(result);
                }
            }
			case DIALOG_FAMILY_CAR_RANG_SET:
            {
                if(response)
                {
                    new input = strval(inputtext);
                    if(input < 11 && IsNumeric(inputtext))
                    {
                        new idx = GetPVarInt(playerid, "sql_id"),
                             query[100];

                        SetFamilyCarData(idx, F_RANG, input);

                        mysql_format(mysql, query, sizeof query, "UPDATE family_cars SET rang = '%d' WHERE id='%d'",input, idx);
                        mysql_query(mysql, query, false);
                        SendClientMessage(playerid, -1, "Ранг успешно изменён");
                    }
                }
            }
			case DIALOG_COLOR_FAMILY_SET:
			{
			    ShowFamilyColorSet(playerid);
			}
			case DIALOG_FAMILY_SETRANG_MENU:
            {
                //new fmt_text[500], fam_id = GetPlayerData(playerid, P_FAMILY);
                if(!response) return callcmd::fmenu(playerid, "");

			    switch(list_id)
				{
				    case 1:
				    {
				        new fmt_text[500],
							fam_id = GetPlayerData(playerid, P_FAMILY);

					 	format(fmt_text, sizeof fmt_text,
						""c_server"[1] "c_b"%s\n\
						"c_server"[2] "c_b"%s\n\
						"c_server"[3] "c_b"%s\n\
						"c_server"[4] "c_b"%s\n\
						"c_server"[5] "c_b"%s\n\
						"c_server"[6] "c_b"%s\n\
						"c_server"[7] "c_b"%s\n\
						"c_server"[8] "c_b"%s\n\
						"c_server"[9] "c_b"%s\n\
						"c_server"[10] "c_b"%s",
						GetFamilyData(fam_id, F_RANK1),
						GetFamilyData(fam_id, F_RANK2),
						GetFamilyData(fam_id, F_RANK3),
						GetFamilyData(fam_id, F_RANK4),
						GetFamilyData(fam_id, F_RANK5),
						GetFamilyData(fam_id, F_RANK6),
						GetFamilyData(fam_id, F_RANK7),
						GetFamilyData(fam_id, F_RANK8),
						GetFamilyData(fam_id, F_RANK9),
						GetFamilyData(fam_id, F_RANK10));

						Dialog(playerid, DIALOG_SET_FRANG_INV, DIALOG_STYLE_LIST, "Доступ к команде /finvite", fmt_text, "Далее", "Закрыть");
				    }
				    case 2:
				    {
				        new fmt_text[500],
								fam_id = GetPlayerData(playerid, P_FAMILY);

					 	format(fmt_text, sizeof fmt_text,
						""c_server"[1] "c_b"%s\n\
						"c_server"[2] "c_b"%s\n\
						"c_server"[3] "c_b"%s\n\
						"c_server"[4] "c_b"%s\n\
						"c_server"[5] "c_b"%s\n\
						"c_server"[6] "c_b"%s\n\
						"c_server"[7] "c_b"%s\n\
						"c_server"[8] "c_b"%s\n\
						"c_server"[9] "c_b"%s\n\
						"c_server"[10] "c_b"%s",
						GetFamilyData(fam_id, F_RANK1),
						GetFamilyData(fam_id, F_RANK2),
						GetFamilyData(fam_id, F_RANK3),
						GetFamilyData(fam_id, F_RANK4),
						GetFamilyData(fam_id, F_RANK5),
						GetFamilyData(fam_id, F_RANK6),
						GetFamilyData(fam_id, F_RANK7),
						GetFamilyData(fam_id, F_RANK8),
						GetFamilyData(fam_id, F_RANK9),
						GetFamilyData(fam_id, F_RANK10));

						Dialog(playerid, DIALOG_SET_FRANG_UNINV, DIALOG_STYLE_LIST, "Доступ к команде /funinvite", fmt_text, "Далее", "Закрыть");

				    }
				    case 3:
				    {

                        new fmt_text[500],
							fam_id = GetPlayerData(playerid, P_FAMILY);

					 	format(fmt_text, sizeof fmt_text,
						""c_server"[1] "c_b"%s\n\
						"c_server"[2] "c_b"%s\n\
						"c_server"[3] "c_b"%s\n\
						"c_server"[4] "c_b"%s\n\
						"c_server"[5] "c_b"%s\n\
						"c_server"[6] "c_b"%s\n\
						"c_server"[7] "c_b"%s\n\
						"c_server"[8] "c_b"%s\n\
						"c_server"[9] "c_b"%s\n\
						"c_server"[10] "c_b"%s",
						GetFamilyData(fam_id, F_RANK1),
						GetFamilyData(fam_id, F_RANK2),
						GetFamilyData(fam_id, F_RANK3),
						GetFamilyData(fam_id, F_RANK4),
						GetFamilyData(fam_id, F_RANK5),
						GetFamilyData(fam_id, F_RANK6),
						GetFamilyData(fam_id, F_RANK7),
						GetFamilyData(fam_id, F_RANK8),
						GetFamilyData(fam_id, F_RANK9),
						GetFamilyData(fam_id, F_RANK10));

						Dialog(playerid, DIALOG_SET_FRANG_MUTE, DIALOG_STYLE_LIST, "Доступ к команде /fmute", fmt_text, "Далее", "Закрыть");

				    }
				    case 4:
				    {

                        new fmt_text[500],
							fam_id = GetPlayerData(playerid, P_FAMILY);

					 	format(fmt_text, sizeof fmt_text,
						""c_server"[1] "c_b"%s\n\
						"c_server"[2] "c_b"%s\n\
						"c_server"[3] "c_b"%s\n\
						"c_server"[4] "c_b"%s\n\
						"c_server"[5] "c_b"%s\n\
						"c_server"[6] "c_b"%s\n\
						"c_server"[7] "c_b"%s\n\
						"c_server"[8] "c_b"%s\n\
						"c_server"[9] "c_b"%s\n\
						"c_server"[10] "c_b"%s",
						GetFamilyData(fam_id, F_RANK1),
						GetFamilyData(fam_id, F_RANK2),
						GetFamilyData(fam_id, F_RANK3),
						GetFamilyData(fam_id, F_RANK4),
						GetFamilyData(fam_id, F_RANK5),
						GetFamilyData(fam_id, F_RANK6),
						GetFamilyData(fam_id, F_RANK7),
						GetFamilyData(fam_id, F_RANK8),
						GetFamilyData(fam_id, F_RANK9),
						GetFamilyData(fam_id, F_RANK10));

						Dialog(playerid, DIALOG_SET_FRANG_UNMUTE, DIALOG_STYLE_LIST, "Доступ к команде /funmute", fmt_text, "Далее", "Закрыть");
				    }
				    case 5:
				    {

                        new fmt_text[500],
							fam_id = GetPlayerData(playerid, P_FAMILY);

					 	format(fmt_text, sizeof fmt_text,
						""c_server"[1] "c_b"%s\n\
						"c_server"[2] "c_b"%s\n\
						"c_server"[3] "c_b"%s\n\
						"c_server"[4] "c_b"%s\n\
						"c_server"[5] "c_b"%s\n\
						"c_server"[6] "c_b"%s\n\
						"c_server"[7] "c_b"%s\n\
						"c_server"[8] "c_b"%s\n\
						"c_server"[9] "c_b"%s\n\
						"c_server"[10] "c_b"%s",
						GetFamilyData(fam_id, F_RANK1),
						GetFamilyData(fam_id, F_RANK2),
						GetFamilyData(fam_id, F_RANK3),
						GetFamilyData(fam_id, F_RANK4),
						GetFamilyData(fam_id, F_RANK5),
						GetFamilyData(fam_id, F_RANK6),
						GetFamilyData(fam_id, F_RANK7),
						GetFamilyData(fam_id, F_RANK8),
						GetFamilyData(fam_id, F_RANK9),
						GetFamilyData(fam_id, F_RANK10));

						Dialog(playerid, DIALOG_SET_FRANG_WARN, DIALOG_STYLE_LIST, "Доступ к команде /fwarn", fmt_text, "Далее", "Закрыть");

				    }
				    case 6:
				    {

                        new fmt_text[500],
							fam_id = GetPlayerData(playerid, P_FAMILY);

					 	format(fmt_text, sizeof fmt_text,
						""c_server"[1] "c_b"%s\n\
						"c_server"[2] "c_b"%s\n\
						"c_server"[3] "c_b"%s\n\
						"c_server"[4] "c_b"%s\n\
						"c_server"[5] "c_b"%s\n\
						"c_server"[6] "c_b"%s\n\
						"c_server"[7] "c_b"%s\n\
						"c_server"[8] "c_b"%s\n\
						"c_server"[9] "c_b"%s\n\
						"c_server"[10] "c_b"%s",
						GetFamilyData(fam_id, F_RANK1),
						GetFamilyData(fam_id, F_RANK2),
						GetFamilyData(fam_id, F_RANK3),
						GetFamilyData(fam_id, F_RANK4),
						GetFamilyData(fam_id, F_RANK5),
						GetFamilyData(fam_id, F_RANK6),
						GetFamilyData(fam_id, F_RANK7),
						GetFamilyData(fam_id, F_RANK8),
						GetFamilyData(fam_id, F_RANK9),
						GetFamilyData(fam_id, F_RANK10));

						Dialog(playerid, DIALOG_SET_FRANG_UNWARN, DIALOG_STYLE_LIST, "Доступ к команде /funwarn", fmt_text, "Далее", "Закрыть");

				    }
				    case 7:
				    {

                        new fmt_text[500],
							fam_id = GetPlayerData(playerid, P_FAMILY);

					 	format(fmt_text, sizeof fmt_text,
						""c_server"[1] "c_b"%s\n\
						"c_server"[2] "c_b"%s\n\
						"c_server"[3] "c_b"%s\n\
						"c_server"[4] "c_b"%s\n\
						"c_server"[5] "c_b"%s\n\
						"c_server"[6] "c_b"%s\n\
						"c_server"[7] "c_b"%s\n\
						"c_server"[8] "c_b"%s\n\
						"c_server"[9] "c_b"%s\n\
						"c_server"[10] "c_b"%s",
						GetFamilyData(fam_id, F_RANK1),
						GetFamilyData(fam_id, F_RANK2),
						GetFamilyData(fam_id, F_RANK3),
						GetFamilyData(fam_id, F_RANK4),
						GetFamilyData(fam_id, F_RANK5),
						GetFamilyData(fam_id, F_RANK6),
						GetFamilyData(fam_id, F_RANK7),
						GetFamilyData(fam_id, F_RANK8),
						GetFamilyData(fam_id, F_RANK9),
						GetFamilyData(fam_id, F_RANK10));

						Dialog(playerid, DIALOG_SET_FRANG_GIVER, DIALOG_STYLE_LIST, "Доступ к команде /frang", fmt_text, "Далее", "Закрыть");

				    }
				    case 8:
				    {

                        new fmt_text[500],
							fam_id = GetPlayerData(playerid, P_FAMILY);

					 	format(fmt_text, sizeof fmt_text,
						""c_server"[1] "c_b"%s\n\
						"c_server"[2] "c_b"%s\n\
						"c_server"[3] "c_b"%s\n\
						"c_server"[4] "c_b"%s\n\
						"c_server"[5] "c_b"%s\n\
						"c_server"[6] "c_b"%s\n\
						"c_server"[7] "c_b"%s\n\
						"c_server"[8] "c_b"%s\n\
						"c_server"[9] "c_b"%s\n\
						"c_server"[10] "c_b"%s",
						GetFamilyData(fam_id, F_RANK1),
						GetFamilyData(fam_id, F_RANK2),
						GetFamilyData(fam_id, F_RANK3),
						GetFamilyData(fam_id, F_RANK4),
						GetFamilyData(fam_id, F_RANK5),
						GetFamilyData(fam_id, F_RANK6),
						GetFamilyData(fam_id, F_RANK7),
						GetFamilyData(fam_id, F_RANK8),
						GetFamilyData(fam_id, F_RANK9),
						GetFamilyData(fam_id, F_RANK10));

						Dialog(playerid, DIALOG_SET_FRANG_TAKEMONEY, DIALOG_STYLE_LIST, "Доступ к деньгам на складе", fmt_text, "Далее", "Закрыть");

				    }
				    case 9:
				    {

                        new fmt_text[500],
							fam_id = GetPlayerData(playerid, P_FAMILY);

					 	format(fmt_text, sizeof fmt_text,
						""c_server"[1] "c_b"%s\n\
						"c_server"[2] "c_b"%s\n\
						"c_server"[3] "c_b"%s\n\
						"c_server"[4] "c_b"%s\n\
						"c_server"[5] "c_b"%s\n\
						"c_server"[6] "c_b"%s\n\
						"c_server"[7] "c_b"%s\n\
						"c_server"[8] "c_b"%s\n\
						"c_server"[9] "c_b"%s\n\
						"c_server"[10] "c_b"%s",
						GetFamilyData(fam_id, F_RANK1),
						GetFamilyData(fam_id, F_RANK2),
						GetFamilyData(fam_id, F_RANK3),
						GetFamilyData(fam_id, F_RANK4),
						GetFamilyData(fam_id, F_RANK5),
						GetFamilyData(fam_id, F_RANK6),
						GetFamilyData(fam_id, F_RANK7),
						GetFamilyData(fam_id, F_RANK8),
						GetFamilyData(fam_id, F_RANK9),
						GetFamilyData(fam_id, F_RANK10));

						Dialog(playerid, DIALOG_SET_FRANG_TAKEDRUGS, DIALOG_STYLE_LIST, "Доступ к наркотикам на складе", fmt_text, "Далее", "Закрыть");

				    }
				    case 10:
				    {

                        new fmt_text[500],
							fam_id = GetPlayerData(playerid, P_FAMILY);

					 	format(fmt_text, sizeof fmt_text,
						""c_server"[1] "c_b"%s\n\
						"c_server"[2] "c_b"%s\n\
						"c_server"[3] "c_b"%s\n\
						"c_server"[4] "c_b"%s\n\
						"c_server"[5] "c_b"%s\n\
						"c_server"[6] "c_b"%s\n\
						"c_server"[7] "c_b"%s\n\
						"c_server"[8] "c_b"%s\n\
						"c_server"[9] "c_b"%s\n\
						"c_server"[10] "c_b"%s",
						GetFamilyData(fam_id, F_RANK1),
						GetFamilyData(fam_id, F_RANK2),
						GetFamilyData(fam_id, F_RANK3),
						GetFamilyData(fam_id, F_RANK4),
						GetFamilyData(fam_id, F_RANK5),
						GetFamilyData(fam_id, F_RANK6),
						GetFamilyData(fam_id, F_RANK7),
						GetFamilyData(fam_id, F_RANK8),
						GetFamilyData(fam_id, F_RANK9),
						GetFamilyData(fam_id, F_RANK10));

						Dialog(playerid, DIALOG_SET_FRANG_TAKEMETALL, DIALOG_STYLE_LIST, "Доступ к металлу на складе", fmt_text, "Далее", "Закрыть");

				    }
				    case 11:
				    {

                        new fmt_text[500],
							fam_id = GetPlayerData(playerid, P_FAMILY);

					 	format(fmt_text, sizeof fmt_text,
						""c_server"[1] "c_b"%s\n\
						"c_server"[2] "c_b"%s\n\
						"c_server"[3] "c_b"%s\n\
						"c_server"[4] "c_b"%s\n\
						"c_server"[5] "c_b"%s\n\
						"c_server"[6] "c_b"%s\n\
						"c_server"[7] "c_b"%s\n\
						"c_server"[8] "c_b"%s\n\
						"c_server"[9] "c_b"%s\n\
						"c_server"[10] "c_b"%s",
						GetFamilyData(fam_id, F_RANK1),
						GetFamilyData(fam_id, F_RANK2),
						GetFamilyData(fam_id, F_RANK3),
						GetFamilyData(fam_id, F_RANK4),
						GetFamilyData(fam_id, F_RANK5),
						GetFamilyData(fam_id, F_RANK6),
						GetFamilyData(fam_id, F_RANK7),
						GetFamilyData(fam_id, F_RANK8),
						GetFamilyData(fam_id, F_RANK9),
						GetFamilyData(fam_id, F_RANK10));

						Dialog(playerid, DIALOG_SET_FRANG_TAKEAMMO, DIALOG_STYLE_LIST, "Доступ к патронам на складе", fmt_text, "Далее", "Закрыть");

				    }
				}
            }
            case DIALOG_SET_FRANG_INV:
			{
			    if(!response) return callcmd::fmenu(playerid, "");

			    new fmt_text[556], fmt_msg[185],
					fam_id = GetPlayerData(playerid, P_FAMILY),
					rang_id = GetPlayerData(playerid, P_FAMILY_RANK);

			    switch(list_id)
				{
				    case 1:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_Inv='1' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_INV, 1);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /finvite на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK1));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 2:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_Inv='2' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_INV, 2);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /finvite на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK2));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 3:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_Inv='3' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_INV, 3);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /finvite на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK3));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 4:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_Inv='4' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_INV, 4);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /finvite на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK4));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 5:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_Inv='4' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_INV, 5);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /finvite на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK5));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 6:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_Inv='6' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_INV, 6);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /finvite на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK6));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 7:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_Inv='7' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_INV, 7);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /finvite на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK7));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 8:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_Inv='8' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_INV, 8);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /finvite на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK8));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 9:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_Inv='9' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_INV, 9);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /finvite на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK8));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 10:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_Inv='10' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_INV, 10);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /finvite на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK10));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				}
			}
			case DIALOG_SET_FRANG_UNINV:
			{
			    if(!response) return callcmd::fmenu(playerid, "");

			    new fmt_text[556], fmt_msg[185],
					fam_id = GetPlayerData(playerid, P_FAMILY),
					rang_id = GetPlayerData(playerid, P_FAMILY_RANK);

			    switch(list_id)
				{
				    case 1:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_UnInv='1' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_UNINV, 1);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /funinvite на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK1));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 2:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_UnInv='2' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_UNINV, 2);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /funinvite на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK2));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 3:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_UnInv='3' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_UNINV, 3);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /funinvite на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK3));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 4:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_UnInv='4' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_UNINV, 4);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /funinvite на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK4));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 5:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_UnInv='5' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_UNINV, 5);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /funinvite на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK5));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 6:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_UnInv='6' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_UNINV, 6);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /funinvite на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK6));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 7:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_UnInv='7' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_UNINV, 7);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /funinvite на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK7));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 8:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_UnInv='8' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_UNINV, 8);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /funinvite на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK8));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 9:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_UnInv='9' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_UNINV, 9);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /funinvite на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK9));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 10:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_UnInv='10' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_UNINV, 10);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /funinvite на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK10));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				}
			}
			case DIALOG_SET_FRANG_MUTE:
			{
			    if(!response) return callcmd::fmenu(playerid, "");

			    new fmt_text[556], fmt_msg[185],
					fam_id = GetPlayerData(playerid, P_FAMILY),
					rang_id = GetPlayerData(playerid, P_FAMILY_RANK);

			    switch(list_id)
				{
				    case 1:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_Mute='1' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_MUTE, 1);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /fmute на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK1));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 2:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_Mute='2' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_MUTE, 2);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /fmute на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK2));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 3:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_Mute='3' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_MUTE, 3);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /fmute на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK3));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 4:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_Mute='4' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_MUTE, 4);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /fmute на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK4));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 5:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_Mute='5' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_MUTE, 5);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /fmute на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK5));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 6:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_Mute='6' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_MUTE, 6);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /fmute на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK6));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 7:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_Mute='7' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_MUTE, 7);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /fmute на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK7));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 8:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_Mute='8' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_MUTE, 8);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /fmute на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK8));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 9:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_Mute='9' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_MUTE, 9);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /fmute на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK9));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 10:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_Mute='10' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_MUTE, 10);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /fmute на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK10));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				}
			}
			case DIALOG_SET_FRANG_UNMUTE:
			{
			    if(!response) return callcmd::fmenu(playerid, "");

			    new fmt_text[556], fmt_msg[185],
					fam_id = GetPlayerData(playerid, P_FAMILY),
					rang_id = GetPlayerData(playerid, P_FAMILY_RANK);

			    switch(list_id)
				{
				    case 1:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_UnMute='1' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_UNMUTE, 1);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /funmute на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK1));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 2:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_UnMute='2' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_UNMUTE, 2);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /funmute на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK2));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 3:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_UnMute='3' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_UNMUTE, 3);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /funmute на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK3));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 4:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_UnMute='4' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_UNMUTE, 4);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /funmute на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK4));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 5:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_UnMute='5' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_UNMUTE, 5);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /funmute на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK5));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 6:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_UnMute='6' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_UNMUTE, 6);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /funmute на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK6));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 7:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_UnMute='7' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_UNMUTE, 7);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /funmute на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK7));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 8:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_UnMute='8' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_UNMUTE, 8);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /funmute на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK8));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 9:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_UnMute='9' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_UNMUTE, 9);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /funmute на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK9));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 10:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_UnMute='10' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_UNMUTE, 10);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /funmute на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK10));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				}
			}
			case DIALOG_SET_FRANG_WARN:
			{
			    if(!response) return callcmd::fmenu(playerid, "");

			    new fmt_text[556], fmt_msg[185],
					fam_id = GetPlayerData(playerid, P_FAMILY),
					rang_id = GetPlayerData(playerid, P_FAMILY_RANK);

			    switch(list_id)
				{
				    case 1:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_Warn='1' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_WARN, 1);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /fwarn на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK1));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 2:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_Warn='2' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_WARN, 2);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /fwarn на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK2));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 3:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_Warn='3' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_WARN, 3);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /fwarn на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK3));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 4:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_Warn='4' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_WARN, 4);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /fwarn на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK4));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 5:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_Warn='5' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_WARN, 5);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /fwarn на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK5));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 6:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_Warn='6' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_WARN, 6);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /fwarn на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK6));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 7:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_Warn='7' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_WARN, 7);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /fwarn на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK7));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 8:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_Warn='8' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_WARN, 8);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /fwarn на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK8));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 9:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_Warn='9' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_WARN, 9);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /fwarn на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK9));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 10:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_Warn='10' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_WARN, 10);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /fwarn на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK10));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				}
			}
			case DIALOG_SET_FRANG_UNWARN:
			{
			    if(!response) return callcmd::fmenu(playerid, "");

			    new fmt_text[556], fmt_msg[185],
					fam_id = GetPlayerData(playerid, P_FAMILY),
					rang_id = GetPlayerData(playerid, P_FAMILY_RANK);

			    switch(list_id)
				{
				    case 1:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_UnWarn='1' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_UNWARN, 1);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /funwarn на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK1));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 2:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_UnWarn='2' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_UNWARN, 2);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /funwarn на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK2));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 3:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_UnWarn='3' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_UNWARN, 3);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /funwarn на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK3));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 4:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_UnWarn='4' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_UNWARN, 4);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /funwarn на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK4));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 5:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_UnWarn='5' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_UNWARN, 5);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /funwarn на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK5));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 6:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_UnWarn='6' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_UNWARN, 6);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /funwarn на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK6));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 7:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_UnWarn='7' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_UNWARN, 7);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /funwarn на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK7));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 8:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_UnWarn='8' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_UNWARN, 8);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /funwarn на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK8));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 9:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_UnWarn='9' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_UNWARN, 9);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /funwarn на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK9));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 10:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_UnWarn='10' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_UNWARN, 10);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /funwarn на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK10));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				}
			}
			case DIALOG_SET_FRANG_GIVER:
			{
			    if(!response) return callcmd::fmenu(playerid, "");

			    new fmt_text[556], fmt_msg[185],
					fam_id = GetPlayerData(playerid, P_FAMILY),
					rang_id = GetPlayerData(playerid, P_FAMILY_RANK);

			    switch(list_id)
				{
				    case 1:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_GiveRang='1' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_GIVER, 1);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /frang на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK1));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 2:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_GiveRang='2' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_GIVER, 2);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /frang на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK2));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 3:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_GiveRang='3' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_GIVER, 3);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /frang на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK3));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 4:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_GiveRang='4' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_GIVER, 4);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /frang на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK4));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 5:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_GiveRang='5' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_GIVER, 5);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /frang на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK5));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 6:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_GiveRang='6' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_GIVER, 6);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /frang на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK6));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 7:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_GiveRang='7' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_GIVER, 7);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /frang на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK7));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 8:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_GiveRang='8' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_GIVER, 8);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /frang на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK8));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 9:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_GiveRang='9' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_GIVER, 8);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /frang на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK9));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 10:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_GiveRang='10' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_RANG_GIVER, 10);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к команде /frang на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK10));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				}
			}
			case DIALOG_SET_FRANG_TAKEMONEY:
			{
			    if(!response) return callcmd::fmenu(playerid, "");

			    new fmt_text[556], fmt_msg[185],
					fam_id = GetPlayerData(playerid, P_FAMILY),
					rang_id = GetPlayerData(playerid, P_FAMILY_RANK);

			    switch(list_id)
				{
				    case 1:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeMoney='1' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_MONEY, 1);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'деньгам' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK1));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 2:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeMoney='2' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_MONEY, 2);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'деньгам' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK2));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 3:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeMoney='3' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_MONEY, 3);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'деньгам' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK3));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 4:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeMoney='4' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_MONEY, 4);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'деньгам' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK4));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 5:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeMoney='5' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_MONEY, 5);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'деньгам' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK5));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 6:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeMoney='6' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_MONEY, 6);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'деньгам' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK6));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 7:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeMoney='7' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_MONEY, 7);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'деньгам' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK7));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 8:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeMoney='8' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_MONEY, 8);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'деньгам' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK8));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 9:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeMoney='9' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_MONEY, 9);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'деньгам' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK9));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 10:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeMoney='10' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_MONEY, 10);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'деньгам' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK10));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				}
			}
			case DIALOG_SET_FRANG_TAKEDRUGS:
			{
			    if(!response) return callcmd::fmenu(playerid, "");

			    new fmt_text[556], fmt_msg[185],
					fam_id = GetPlayerData(playerid, P_FAMILY),
					rang_id = GetPlayerData(playerid, P_FAMILY_RANK);

			    switch(list_id)
				{
				    case 1:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeDrugs='1' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_DRUGS, 1);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'наркотикам' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK1));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 2:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeDrugs='2' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_DRUGS, 2);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'наркотикам' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK2));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 3:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeDrugs='3' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_DRUGS, 3);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'наркотикам' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK3));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 4:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeDrugs='4' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_DRUGS, 4);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'наркотикам' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK4));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 5:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeDrugs='5' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_DRUGS, 5);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'наркотикам' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK5));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 6:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeDrugs='6' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_DRUGS, 6);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'наркотикам' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK6));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 7:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeDrugs='7' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_DRUGS, 7);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'наркотикам' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK7));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 8:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeDrugs='8' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_DRUGS, 8);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'наркотикам' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK8));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 9:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeDrugs='9' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_DRUGS, 9);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'наркотикам' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK9));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 10:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeDrugs='10' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_DRUGS, 10);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'наркотикам' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK10));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				}
			}
			case DIALOG_SET_FRANG_TAKEMETALL:
			{
			    if(!response) return callcmd::fmenu(playerid, "");

			    new fmt_text[556], fmt_msg[185],
					fam_id = GetPlayerData(playerid, P_FAMILY),
					rang_id = GetPlayerData(playerid, P_FAMILY_RANK);

			    switch(list_id)
				{
				    case 1:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeMetall='1' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_METALL, 1);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'металлу' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK1));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 2:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeMetall='2' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_METALL, 2);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'металлу' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK2));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 3:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeMetall='3' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_METALL, 3);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'металлу' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK3));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 4:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeMetall='4' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_METALL, 4);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'металлу' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK4));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 5:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeMetall='5' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_METALL, 5);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'металлу' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK5));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 6:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeMetall='6' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_METALL, 6);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'металлу' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK6));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 7:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeMetall='7' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_METALL, 7);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'металлу' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK7));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 8:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeMetall='8' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_METALL, 8);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'металлу' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK8));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 9:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeMetall='9' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_METALL, 9);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'металлу' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK9));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 10:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeMetall='10' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_METALL, 10);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'металлу' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK10));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				}
			}
			case DIALOG_SET_FRANG_TAKEAMMO:
			{
			    if(!response) return callcmd::fmenu(playerid, "");

			    new fmt_text[556], fmt_msg[185],
					fam_id = GetPlayerData(playerid, P_FAMILY),
					rang_id = GetPlayerData(playerid, P_FAMILY_RANK);

			    switch(list_id)
				{
				    case 1:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeAmmo='1' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_AMMO, 1);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'патронам' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK1));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 2:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeAmmo='2' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_AMMO, 2);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'патронам' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK2));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 3:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeAmmo='3' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_AMMO, 3);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'патронам' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK3));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 4:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeAmmo='4' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_AMMO, 4);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'патронам' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK4));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 5:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeAmmo='5' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_AMMO, 5);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'патронам' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK5));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 6:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeAmmo='6' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_AMMO, 6);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'патронам' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK6));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 7:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeAmmo='7' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_AMMO, 7);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'патронам' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK7));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 8:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeAmmo='8' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_AMMO, 8);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'патронам' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK8));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 9:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeAmmo='9' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_AMMO, 9);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'патронам' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK9));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				    case 10:
				    {
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET r_TakeAmmo='10' WHERE id='%d' LIMIT 1", fam_id + 1);
						mysql_query(mysql, fmt_text, false);

						SetFamilyData(fam_id, F_TAKE_AMMO, 10);

						format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] сменил доступ к 'патронам' на складе на ранг '%s'+ ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetFamilyData(fam_id, F_RANK10));

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(!IsPlayerLogged(i)) continue;
							if(GetPlayerData(i, P_FAMILY) == 0) continue;
							if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

							if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

							SendClientMessage(i, 0x6699CCFF, fmt_msg);
						}
				    }
				}
			}
			case DIALOG_FAMILY_NCHANGE:
			{
			    if(!response) return callcmd::fmenu(playerid, "");

			    new fmt_text[556],
					fam_id = GetPlayerData(playerid, P_FAMILY);


				new query[128],
					Cache: result,
					rows;

				mysql_format(mysql, query, sizeof query, "SELECT * FROM family WHERE name='%s'", inputtext);
				result = mysql_query(mysql, query, true);

				rows = cache_num_rows();

				cache_delete(result);

				if(rows)
				{
					SendClientMessage(playerid, 0xCECECEFF, "Данное имя уже используется");
					callcmd::fmenu(playerid, "");

					return 1;
				}

			 	format(fmt_text, sizeof fmt_text, "Вы успешно изменили название семьи с {ffff00}\"%s\" {1E90FF}на {ffff00}\"%s\"", GetFamilyData(fam_id, F_NAME), inputtext);
				SendClientMessage(playerid, 0x1E90FFFF, fmt_text);

				GivePlayerDonate(playerid, -100, "Сменил название семьи", true);


				format(g_family[fam_id][F_NAME], 64, inputtext);
				mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET name='%s' WHERE id='%d' LIMIT 1", inputtext, fam_id + 1);
				mysql_query(mysql, fmt_text, false);
			}
			case DIALOG_FAMILY_COLOR:
			{
			    if(!response) return callcmd::fmenu(playerid, "");

			    if(GetPlayerData(playerid, P_DONATE_MONEY) < 20) return SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно рублей, требуется 20");

			    if(0 > list_id > 16) return SendClientMessage(playerid, 0xCECECEFF, "ID цвета от 0 до 16");

			    new fam_id = GetPlayerData(playerid, P_FAMILY),
					fmt_text[556];

			    SetFamilyData(fam_id, F_COLOR, list_id);

			    GivePlayerDonate(playerid, -20, "Сменил цвет семьи", true);

                mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET color='%d' WHERE id='%d' LIMIT 1", list_id, fam_id + 1);
				mysql_query(mysql, fmt_text, false);

				format(fmt_text, sizeof fmt_text, "Вы успешно изменили цвет семьи {ffff00}%s {1E90FF}на {%06x}%s", GetFamilyData(fam_id, F_NAME), family_colors[list_id] >>> 8, family_colors_name[list_id]);
				SendClientMessage(playerid, 0x1E90FFFF, fmt_text);
			}
			case DIALOG_FAMILY_WAREHOUSE:
			{
			    if(!response) return callcmd::fmenu(playerid, "");

			    switch(list_id)
				{
				    case 1:
				    {
				        Dialog
                        (
                            playerid, DIALOG_FAMILY_PUT_CASH, DIALOG_STYLE_INPUT,
                            "Положить деньги",
                            "{FFFFFF}Укажите сумму:",
                            "Положить", "Отмена"
                        );
				    }
				    case 2:
				    {
				    	Dialog
                        (
                            playerid, DIALOG_FAMILY_PUT_DRUGS, DIALOG_STYLE_INPUT,
                            "Положить наркотики",
                            "{FFFFFF}Укажите количество грамм:",
                            "Положить", "Отмена"
                        );
					}
					case 3:
					{
					    Dialog
                        (
                            playerid, DIALOG_FAMILY_PUT_METALL, DIALOG_STYLE_INPUT,
                            "Положить металл",
                            "{FFFFFF}Укажите количество кг:",
                            "Положить", "Отмена"
                        );
					}
					case 4:
					{
					    Dialog
                        (
                            playerid, DIALOG_FAMILY_PUT_AMMO, DIALOG_STYLE_INPUT,
                            "Положить патроны",
                            "{FFFFFF}Укажите количество шт:",
                            "Положить", "Отмена"
                        );
					}
					case 5:
					{
					    new rank = GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_TAKE_MONEY);

                		if(GetPlayerData(playerid, P_FAMILY_RANK) < rank) return Send(playerid, COR_RED, "[Ошибка]: "c_b" У вас недостаточно нужный ранг в семье, чтобы брать деньги со склада семьи.");

					    Dialog
                        (
                            playerid, DIALOG_FAMILY_TAKE_CASH, DIALOG_STYLE_INPUT,
                            "Взять деньги",
                            "{FFFFFF}Укажите сумму:",
                            "Взять", "Отмена"
                        );
					}
					case 6:
					{
					    new rank = GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_TAKE_DRUGS);

                		if(GetPlayerData(playerid, P_FAMILY_RANK) < rank) return Send(playerid, COR_RED, "[Ошибка]: "c_b" У вас недостаточно нужный ранг в семье, чтобы брать наркотики со склада семьи.");

						Dialog
                        (
                            playerid, DIALOG_FAMILY_TAKE_DRUGS, DIALOG_STYLE_INPUT,
                            "Взять наркотики",
                            "{FFFFFF}Укажите количество грамм:",
                            "Взять", "Отмена"
                        );
					}
					case 7:
					{
					    new rank = GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_TAKE_METALL);

                		if(GetPlayerData(playerid, P_FAMILY_RANK) < rank) return Send(playerid, COR_RED, "[Ошибка]: "c_b" У вас недостаточно нужный ранг в семье, чтобы брать металл со склада семьи.");

					    Dialog
                        (
                            playerid, DIALOG_FAMILY_TAKE_METALL, DIALOG_STYLE_INPUT,
                            "Взять металл",
                            "{FFFFFF}Укажите количество кг:",
                            "Взять", "Отмена"
                        );
					}
					case 8:
					{
					    new rank = GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_TAKE_AMMO);

                		if(GetPlayerData(playerid, P_FAMILY_RANK) < rank) return Send(playerid, COR_RED, "[Ошибка]: "c_b" У вас недостаточно нужный ранг в семье, чтобы брать патроны со склада семьи.");

					    Dialog
                        (
                            playerid, DIALOG_FAMILY_TAKE_AMMO, DIALOG_STYLE_INPUT,
                            "Взять патроны",
                            "{FFFFFF}Укажите количество шт:",
                            "Взять", "Отмена"
                        );
					}
				}
			}
			case DIALOG_FAMILY_PUT_CASH:
            {
                if(!response) return 1;


                new put_sum = strval(inputtext);
                if(put_sum > 0 && IsNumeric(inputtext))
                {

                    new fmt_str[155];
                    new money = GetPlayerMoneyEx(playerid);

                    if(money >= put_sum)
                    {
                        format(fmt_str, sizeof fmt_str, "UPDATE accounts a,family f SET a.money=%d,f.money=f.money + %d WHERE a.id=%d AND f.id=%d", money-put_sum, put_sum, GetPlayerAccountID(playerid), GetPlayerData(playerid, P_FAMILY) + 1);
                        mysql_query(mysql, fmt_str, false);

                        if(!mysql_errno())
                        {
                            GivePlayerMoneyEx(playerid, -put_sum, "Пополнение банка семьи", false, true);

                            new fmt_msg[144],
								fam_id = GetPlayerData(playerid, P_FAMILY),
								rang_id = GetPlayerData(playerid, P_FAMILY_RANK);

                            format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s: %s %s[%d] положил(-а) на склад семьи %d$", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, g_family[GetPlayerData(playerid, P_FAMILY)][F_NAME], GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, put_sum);

							for(new i; i < MAX_PLAYERS; i ++)
							{
								if(!IsPlayerConnected(i)) continue;
								if(!IsPlayerLogged(i)) continue;
								if(GetPlayerData(i, P_FAMILY) == 0) continue;
								if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

								if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

								SendClientMessage(i, 0x6699CCFF, fmt_msg);
							}

                            AddFamilyData(GetPlayerData(playerid, P_FAMILY), F_MONEY, +, put_sum);
                            format
                            (
                                fmt_str, sizeof fmt_str,
                                ""c_b"Вы положили:\t{32a44b}$%d\n"\
                                "{FFFFFF}Итоговый баланс семьи: $%d",
                                put_sum,
                                GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_MONEY)
                            );
                            return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{1E90FF}Операция завершена успешно", fmt_str, "Вернуться", "");
                        }
                        else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 09)");
                    }
                    else SendClientMessage(playerid, 0xFFFFFFFF, "Недостаточно средств");
                }
                return 1;
            }
            case DIALOG_FAMILY_PUT_DRUGS:
            {
                if(!response) return 1;


                new put_sum = strval(inputtext);
                if(put_sum > 0 && IsNumeric(inputtext))
                {

                    new fmt_str[180];
                    new money = GetPlayerData(playerid, P_DRUGS);

                    if(money >= put_sum)
                    {
                        format(fmt_str, sizeof fmt_str, "UPDATE accounts a,family f SET a.drugs=%d,f.drugs=f.drugs + %d WHERE a.id=%d AND f.id=%d", money-put_sum, put_sum, GetPlayerAccountID(playerid), GetPlayerData(playerid, P_FAMILY) + 1);
                        mysql_query(mysql, fmt_str, false);

                        if(!mysql_errno())
                        {
                            AddPlayerData(playerid, P_DRUGS, -, put_sum);
                            UpdatePlayerDatabaseInt(playerid, "drugs", GetPlayerData(playerid, P_DRUGS));

                            AddFamilyData(GetPlayerData(playerid, P_FAMILY), F_DRUGS, +, put_sum);

                            new fmt_msg[144],
								fam_id = GetPlayerData(playerid, P_FAMILY),
								rang_id = GetPlayerData(playerid, P_FAMILY_RANK);

							format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s: %s %s[%d] положил(-а) на склад семьи %d грамм наркотиков.", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, g_family[GetPlayerData(playerid, P_FAMILY)][F_NAME], GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, put_sum);

							for(new i; i < MAX_PLAYERS; i ++)
							{
								if(!IsPlayerConnected(i)) continue;
								if(!IsPlayerLogged(i)) continue;
								if(GetPlayerData(i, P_FAMILY) == 0) continue;
								if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

								if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

								SendClientMessage(i, 0x6699CCFF, fmt_msg);
							}

                            format
                            (
                                fmt_str, sizeof fmt_str,
                                ""c_b"Вы положили: "c_i"%d г. "c_b"наркотиков\n"\
                                "\n"\
                                "{FFFFFF}Количество наркотиков на складе: "c_i"%d\n"\
								""c_b"Количество наркотиков у вас: "c_i"%d",
                                put_sum,
                                GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_DRUGS),
                                GetPlayerData(playerid, P_DRUGS)
                            );
                            return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{1E90FF}Операция завершена успешно", fmt_str, "Вернуться", "");
                        }
                        else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 09)");
                    }
                    else SendClientMessage(playerid, 0xFFFFFFFF, "У вас нет такого количество наркотиков!");
                }
                return 1;
            }
            case DIALOG_FAMILY_PUT_METALL:
            {
                if(!response) return 1;


                new put_sum = strval(inputtext);
                if(put_sum > 0 && IsNumeric(inputtext))
                {

                    new fmt_str[155];
                    new money = GetPlayerData(playerid, P_METALL);

                    if(money >= put_sum)
                    {
                        format(fmt_str, sizeof fmt_str, "UPDATE accounts a,family f SET a.metall=%d,f.metal=f.metal + %d WHERE a.id=%d AND f.id=%d", money-put_sum, put_sum, GetPlayerAccountID(playerid), GetPlayerData(playerid, P_FAMILY) + 1);
                        mysql_query(mysql, fmt_str, false);

                        if(!mysql_errno())
                        {
                            AddPlayerData(playerid, P_METALL, -, put_sum);
                            UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_METALL));

                            AddFamilyData(GetPlayerData(playerid, P_FAMILY), F_METAL, +, put_sum);

                            new fmt_msg[144],
								fam_id = GetPlayerData(playerid, P_FAMILY),
								rang_id = GetPlayerData(playerid, P_FAMILY_RANK);

                            format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s: %s %s[%d] положил(-а) на склад семьи %d кг. металла.", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, g_family[GetPlayerData(playerid, P_FAMILY)][F_NAME], GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, put_sum);

							for(new i; i < MAX_PLAYERS; i ++)
							{
								if(!IsPlayerConnected(i)) continue;
								if(!IsPlayerLogged(i)) continue;
								if(GetPlayerData(i, P_FAMILY) == 0) continue;
								if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

								if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

								SendClientMessage(i, 0x6699CCFF, fmt_msg);
							}

                            format
                            (
                                fmt_str, sizeof fmt_str,
                                ""c_b"Вы положили: "c_i"%d кг. "c_b"металла\n"\
                                "\n"\
                                "{FFFFFF}Количество металла на складе: "c_i"%d\n"\
								""c_b"Количество металла у вас: "c_i"%d",
                                put_sum,
                                GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_METAL),
                                GetPlayerData(playerid, P_METALL)
                            );
                            return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{1E90FF}Операция завершена успешно", fmt_str, "Вернуться", "");
                        }
                        else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 09)");
                    }
                    else SendClientMessage(playerid, 0xFFFFFFFF, "У вас нет такого количество металла!");
                }
                return 1;
            }
            case DIALOG_FAMILY_PUT_AMMO:
            {
                if(!response) return 1;


                new put_sum = strval(inputtext);
                if(put_sum > 0 && IsNumeric(inputtext))
                {

                    new fmt_str[155];
                    new money = GetPlayerData(playerid, P_AMMO);

                    if(money >= put_sum)
                    {
                        format(fmt_str, sizeof fmt_str, "UPDATE accounts a,family f SET a.ammo=%d,f.ammo=f.ammo + %d WHERE a.id=%d AND f.id=%d", money-put_sum, put_sum, GetPlayerAccountID(playerid), GetPlayerData(playerid, P_FAMILY) + 1);
                        mysql_query(mysql, fmt_str, false);

                        if(!mysql_errno())
                        {
                            AddPlayerData(playerid, P_AMMO, -, put_sum);
                            UpdatePlayerDatabaseInt(playerid, "ammo", GetPlayerData(playerid, P_AMMO));

                            AddFamilyData(GetPlayerData(playerid, P_FAMILY), F_AMMO, +, put_sum);

                            new fmt_msg[144],
								fam_id = GetPlayerData(playerid, P_FAMILY),
								rang_id = GetPlayerData(playerid, P_FAMILY_RANK);

                            format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s: %s %s[%d] положил(-а) на склад семьи %d шт. патронов.", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, g_family[GetPlayerData(playerid, P_FAMILY)][F_NAME], GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, put_sum);

							for(new i; i < MAX_PLAYERS; i ++)
							{
								if(!IsPlayerConnected(i)) continue;
								if(!IsPlayerLogged(i)) continue;
								if(GetPlayerData(i, P_FAMILY) == 0) continue;
								if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

								if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

								SendClientMessage(i, 0x6699CCFF, fmt_msg);
							}

                            format
                            (
                                fmt_str, sizeof fmt_str,
                                ""c_b"Вы положили: "c_i"%d шт. "c_b"патронов\n"\
                                "\n"\
                                "{FFFFFF}Количество патронов на складе: "c_i"%d\n"\
								""c_b"Количество патронов у вас: "c_i"%d",
                                put_sum,
                                GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_DRUGS),
                                GetPlayerData(playerid, P_DRUGS)
                            );
                            return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{1E90FF}Операция завершена успешно", fmt_str, "Вернуться", "");
                        }
                        else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 09)");
                    }
                    else SendClientMessage(playerid, 0xFFFFFFFF, "У вас нет такого количество патронов!");
                }
                return 1;
            }
            case DIALOG_FAMILY_TAKE_CASH:
            {
                if(!response) return 1;

                new put_sum = strval(inputtext);
                if(put_sum > 0 && IsNumeric(inputtext))
                {

                    new fmt_str[155];
                    new money = GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_MONEY);

                    if(money >= put_sum)
                    {
                        format(fmt_str, sizeof fmt_str, "UPDATE accounts a,family f SET a.money=%d,f.money=f.money - %d WHERE a.id=%d AND f.id=%d", money-put_sum, put_sum, GetPlayerAccountID(playerid), GetPlayerData(playerid, P_FAMILY) + 1);
                        mysql_query(mysql, fmt_str, false);

                        if(!mysql_errno())
                        {
                            GivePlayerMoneyEx(playerid, put_sum, "Взятие денег с банка семьи", false, true);

                            AddFamilyData(GetPlayerData(playerid, P_FAMILY), F_MONEY, -, put_sum);

                            new fmt_msg[144],
								fam_id = GetPlayerData(playerid, P_FAMILY),
								rang_id = GetPlayerData(playerid, P_FAMILY_RANK);

                            format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s: %s %s[%d] взял(-а) со склада семьи %d$", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, g_family[GetPlayerData(playerid, P_FAMILY)][F_NAME], GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, put_sum);

							for(new i; i < MAX_PLAYERS; i ++)
							{
								if(!IsPlayerConnected(i)) continue;
								if(!IsPlayerLogged(i)) continue;
								if(GetPlayerData(i, P_FAMILY) == 0) continue;
								if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

								if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

								SendClientMessage(i, 0x6699CCFF, fmt_msg);
							}
                            format
                            (
                                fmt_str, sizeof fmt_str,
                                ""c_b"Вы взяли:\t{32a44b}$%d\n"\
                                "{FFFFFF}Итоговый баланс семьи: $%d",
                                put_sum,
                                GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_MONEY)
                            );
                            return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{1E90FF}Операция завершена успешно", fmt_str, "Вернуться", "");
                        }
                        else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 09)");
                    }
                    else SendClientMessage(playerid, 0xFFFFFFFF, "Недостаточно средств");
                }
                return 1;
            }
            case DIALOG_FAMILY_TAKE_DRUGS:
            {
                if(!response) return 1;


                new put_sum = strval(inputtext);
                if(put_sum > 0 && IsNumeric(inputtext))
                {

                    new fmt_str[155];
                    new money = GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_DRUGS);

                    if(money >= put_sum)
                    {
                        format(fmt_str, sizeof fmt_str, "UPDATE accounts a,family f SET a.drugs=%d,f.drugs=f.drugs - %d WHERE a.id=%d AND f.id=%d", money-put_sum, put_sum, GetPlayerAccountID(playerid), GetPlayerData(playerid, P_FAMILY) + 1);
                        mysql_query(mysql, fmt_str, false);

                        if(!mysql_errno())
                        {
                            AddPlayerData(playerid, P_DRUGS, +, put_sum);
                            UpdatePlayerDatabaseInt(playerid, "drugs", GetPlayerData(playerid, P_DRUGS));

                            AddFamilyData(GetPlayerData(playerid, P_FAMILY), F_DRUGS, -, put_sum);

                            new fmt_msg[180],
								fam_id = GetPlayerData(playerid, P_FAMILY),
								rang_id = GetPlayerData(playerid, P_FAMILY_RANK);

                            format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s: %s %s[%d] взял(-а) со склада семьи %d грамм наркотиков.", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, g_family[GetPlayerData(playerid, P_FAMILY)][F_NAME], GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, put_sum);

							for(new i; i < MAX_PLAYERS; i ++)
							{
								if(!IsPlayerConnected(i)) continue;
								if(!IsPlayerLogged(i)) continue;
								if(GetPlayerData(i, P_FAMILY) == 0) continue;
								if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

								if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

								SendClientMessage(i, 0x6699CCFF, fmt_msg);
							}

                            format
                            (
                                fmt_str, sizeof fmt_str,
                                ""c_b"Вы взяли: "c_i"%d г. "c_b"наркотиков\n"\
                                "\n"\
                                "{FFFFFF}Количество наркотиков на складе: "c_i"%d\n"\
								""c_b"Количество наркотиков у вас: "c_i"%d",
                                put_sum,
                                GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_DRUGS),
                                GetPlayerData(playerid, P_DRUGS)
                            );
                            return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{1E90FF}Операция завершена успешно", fmt_str, "Вернуться", "");
                        }
                        else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 09)");
                    }
                    else SendClientMessage(playerid, 0xFFFFFFFF, "На складе семьи нет такого количество наркотиков!");
                }
                return 1;
            }
            case DIALOG_FAMILY_TAKE_METALL:
            {
                if(!response) return 1;


                new put_sum = strval(inputtext);
                if(put_sum > 0 && IsNumeric(inputtext))
                {

                    new fmt_str[155];
                    new money = GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_METAL);

                    if(money >= put_sum)
                    {
                        format(fmt_str, sizeof fmt_str, "UPDATE accounts a,family f SET a.metall=%d,f.metal=f.metal - %d WHERE a.id=%d AND f.id=%d", money-put_sum, put_sum, GetPlayerAccountID(playerid), GetPlayerData(playerid, P_FAMILY) + 1);
                        mysql_query(mysql, fmt_str, false);

                        if(!mysql_errno())
                        {
                            AddPlayerData(playerid, P_METALL, +, put_sum);
                            UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_METALL));

                            AddFamilyData(GetPlayerData(playerid, P_FAMILY), F_METAL, -, put_sum);

                            new fmt_msg[144],
								fam_id = GetPlayerData(playerid, P_FAMILY),
								rang_id = GetPlayerData(playerid, P_FAMILY_RANK);

                            format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s: %s %s[%d] взял(-а) со склада семьи %d кг. металла.", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, g_family[GetPlayerData(playerid, P_FAMILY)][F_NAME], GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, put_sum);

							for(new i; i < MAX_PLAYERS; i ++)
							{
								if(!IsPlayerConnected(i)) continue;
								if(!IsPlayerLogged(i)) continue;
								if(GetPlayerData(i, P_FAMILY) == 0) continue;
								if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

								if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

								SendClientMessage(i, 0x6699CCFF, fmt_msg);
							}

                            format
                            (
                                fmt_str, sizeof fmt_str,
                                ""c_b"Вы взяли: "c_i"%d г. "c_b"металла\n"\
                                "\n"\
                                "{FFFFFF}Количество металла на складе: "c_i"%d\n"\
								""c_b"Количество металла у вас: "c_i"%d",
                                put_sum,
                                GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_DRUGS),
                                GetPlayerData(playerid, P_DRUGS)
                            );
                            return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{1E90FF}Операция завершена успешно", fmt_str, "Вернуться", "");
                        }
                        else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 09)");
                    }
                    else SendClientMessage(playerid, 0xFFFFFFFF, "На складе семьи нет такого количество металла!");
                }
                return 1;
            }
            case DIALOG_FAMILY_TAKE_AMMO:
            {
                if(!response) return 1;


                new put_sum = strval(inputtext);
                if(put_sum > 0 && IsNumeric(inputtext))
                {

                    new fmt_str[180];
                    new money = GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_AMMO);

                    if(money >= put_sum)
                    {
                        format(fmt_str, sizeof fmt_str, "UPDATE accounts a,family f SET a.ammo=%d,f.ammo=f.ammo - %d WHERE a.id=%d AND f.id=%d", money-put_sum, put_sum, GetPlayerAccountID(playerid), GetPlayerData(playerid, P_FAMILY) + 1);
                        mysql_query(mysql, fmt_str, false);

                        if(!mysql_errno())
                        {
                            AddPlayerData(playerid, P_AMMO, +, put_sum);
                            UpdatePlayerDatabaseInt(playerid, "ammo", GetPlayerData(playerid, P_AMMO));

                            AddFamilyData(GetPlayerData(playerid, P_FAMILY), F_AMMO, -, put_sum);

                            new fmt_msg[144],
								fam_id = GetPlayerData(playerid, P_FAMILY),
								rang_id = GetPlayerData(playerid, P_FAMILY_RANK);

                            format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s: %s %s[%d] взял(-а) со склада семьи %d шт. патронов.", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, g_family[GetPlayerData(playerid, P_FAMILY)][F_NAME], GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, put_sum);

							for(new i; i < MAX_PLAYERS; i ++)
							{
								if(!IsPlayerConnected(i)) continue;
								if(!IsPlayerLogged(i)) continue;
								if(GetPlayerData(i, P_FAMILY) == 0) continue;
								if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

								if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

								SendClientMessage(i, 0x6699CCFF, fmt_msg);
							}

                            format
                            (
                                fmt_str, sizeof fmt_str,
                                ""c_b"Вы взяли: "c_i"%d шт. "c_b"патронов\n"\
                                "\n"\
                                "{FFFFFF}Количество патронов на складе:\t"c_i"%d\n"\
								""c_b"Количество патронов у вас: "c_i"%d",
                                put_sum,
                                GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_DRUGS),
                                GetPlayerData(playerid, P_DRUGS)
                            );
                            return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{1E90FF}Операция завершена успешно", fmt_str, "Вернуться", "");
                        }
                        else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 09)");
                    }
                    else SendClientMessage(playerid, 0xFFFFFFFF, "На складе семьи нет такого количество патронов!");
                }
                return 1;
            }
            case DIALOG_FAMILY_MENU:
            {
                if(!response) return 1;

                switch(listitem)
                {
                    case 0: ShowFamilyInfo(playerid);
                    case 1:
                    {
                        if(GetPlayerData(playerid, P_FAMILY_RANK) != 10) return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет доступа");
                        Dialog
                        (
                            playerid, DIALOG_FAMILY_SETTINGS, DIALOG_STYLE_LIST,
                            "Настройки",
                            ""c_server"[1] "c_b"Установить место появления\n\
                            "c_server"[2] "c_b"Управление рангами\n\
							"c_server"[3] "c_b"Сменить название семьи (80 руб.)\n\
							"c_server"[4] "c_b"Сменить цвет семьи (20 руб.)\n\
							"c_server"[5] "c_b"Настройка доступа рангов\n\
							"c_s"[6] "c_b"Управление транспортом",
                            "Далее", ""
                        );
                    }
                    case 2:
                    {
                    	ShowFamilyHelpCommands(playerid);
                    }
                    case 3: ShowFamilyWarehouseMenu(playerid);
					case 4:
					{
					    if(GetPlayerData(playerid, P_FAMILY_RANK) < 9) return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет доступа");

						new query[256];
						format(query, sizeof query, "SELECT name, score, family_rank FROM accounts WHERE family = %d ORDER BY family_rank DESC", GetPlayerData(playerid, P_FAMILY));
						mysql_tquery(mysql, query, "ShowFamilyAllPlayers", "i", playerid);
					}
                }
            }
            case DIALOG_FAMILY_SETTINGS:
            {
                if(response)
                {
                    switch(listitem)
                    {
                        case 0:
                        {
                            Dialog
                            (
                                playerid, DIALOG_FAMILY_SPAWN_SET, DIALOG_STYLE_MSGBOX,
                                "Настройки семьи",
                                "Вы действительно хотите установить точку спавна вашей семьи\n\
                                На то место где вы находитесь?",
                                "Далее", "Отмена"
                            );
                        }
                        case 1:ShowChangeRangDialog(playerid);
                        case 2: ShowChangeNameDialog(playerid);
                        case 3: callcmd::setfcolor(playerid);
						case 4: ShowFamilyRangSetMenu(playerid);
						case 5: ViewFamilyCar(playerid);
                    }
                }
            }
            case DIALOG_FAMILY_SPAWN_SET:
            {
                if(!response) return true;
                new family = GetPlayerData(playerid, P_FAMILY);

                GetPlayerPos(playerid, g_family[family][F_SPAWN_POSITION][0], g_family[family][F_SPAWN_POSITION][1], g_family[family][F_SPAWN_POSITION][2]);
                GetPlayerFacingAngle(playerid, g_family[family][F_SPAWN_POSITION][3]);

                g_family[family][F_SPAWN_IV][0] = GetPlayerInterior(playerid);
                g_family[family][F_SPAWN_IV][1] = GetPlayerVirtualWorld(playerid);

                SendClientMessage(playerid, -1, "Позиция спавна успешно изменена!");

                new query[276];
                format(query, sizeof query, "UPDATE family SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_fa = '%f', inter = '%d', world = '%d' WHERE id = %d", g_family[family][F_SPAWN_POSITION][0], g_family[family][F_SPAWN_POSITION][1], g_family[family][F_SPAWN_POSITION][2], g_family[family][F_SPAWN_POSITION][3], g_family[family][F_SPAWN_IV][0], g_family[family][F_SPAWN_IV][1], family);
                mysql_query(mysql, query, false);
                printf(query);
                return 1;
            }
            case DIALOG_FAMILY_LEAVE:
            {
                new fmt_text[110];
                if(response)
                {
                    new fam_id = GetPlayerData(playerid, P_FAMILY),
                    rang_id = GetPlayerData(playerid, P_FAMILY_RANK);

                    format(fmt_text, sizeof fmt_text, "[F] %s %s[%d] покинул семью по собственному желанию",
                    GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid);

                    for(new i; i < MAX_PLAYERS; i ++)
                    {
                        if(!IsPlayerConnected(i)) continue;
                        if(!IsPlayerLogged(i)) continue;
                        if(GetPlayerData(i, P_FAMILY) == 0) continue;
                        if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

                        if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

                        SendClientMessage(i, 0xCECECEFF, fmt_text);
                    }

                    format(fmt_text, sizeof fmt_text, "Вы покинули семью \"%s\"", GetFamilyData(fam_id, F_NAME));
                    SendClientMessage(playerid, 0xFFFF00FF, fmt_text);

                    FUnInvite(playerid, playerid);
                }
            }
            case DIALOG_FAMILY_RANG:
            {
                if(!response) return callcmd::fmenu(playerid, "");

                new fam_id = GetPlayerData(playerid, P_FAMILY),
                    desc[32] = "";

                switch(listitem)
                {
                    case 0: strcat(desc, g_family[fam_id][F_RANK1]);
                    case 1: strcat(desc, g_family[fam_id][F_RANK2]);
                    case 2: strcat(desc, g_family[fam_id][F_RANK3]);
                    case 3: strcat(desc, g_family[fam_id][F_RANK4]);
                    case 4: strcat(desc, g_family[fam_id][F_RANK5]);
                    case 5: strcat(desc, g_family[fam_id][F_RANK6]);
                    case 6: strcat(desc, g_family[fam_id][F_RANK7]);
                    case 7: strcat(desc, g_family[fam_id][F_RANK8]);
                    case 8: strcat(desc, g_family[fam_id][F_RANK9]);
                    case 9: strcat(desc, g_family[fam_id][F_RANK10]);
                }

                SetPVarInt(playerid, "userang", listitem+1);
                Dialog
                (
                    playerid, DIALOG_FAMILY_RCHANGE, DIALOG_STYLE_INPUT,
                    desc,
                    "{FFFFFF}Введите название, которое Вы хотите {d8284c}установить:",
                    "Далее", "Отмена"
                );
            }
            case DIALOG_FAMILY_RCHANGE:
            {
                if(!response) return callcmd::fmenu(playerid, "");

                new fmt_text[556],
                    rang_id = GetPVarInt(playerid, "userang"),
                    fam_id = GetPlayerData(playerid, P_FAMILY);

                switch(rang_id)
                {
                    case 1:
                    {
                        format(g_family[fam_id][F_RANK1], 32, inputtext);
                        mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET rank1='%s' WHERE id='%d' LIMIT 1", inputtext, fam_id + 1);
                        mysql_query(mysql, fmt_text, false);
                    }
                    case 2:
                    {
                        format(g_family[fam_id][F_RANK2], 32, inputtext);
                        mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET rank2='%s' WHERE id='%d' LIMIT 1", inputtext, fam_id + 1);
                        mysql_query(mysql, fmt_text, false);
                    }
                    case 3:
                    {
                        format(g_family[fam_id][F_RANK3], 32, inputtext);
                        mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET rank3='%s' WHERE id='%d' LIMIT 1", inputtext, fam_id + 1);
                        mysql_query(mysql, fmt_text, false);
                    }
                    case 4:
                    {
                        format(g_family[fam_id][F_RANK4], 32, inputtext);
                        mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET rank4='%s' WHERE id='%d' LIMIT 1", inputtext, fam_id + 1);
                        mysql_query(mysql, fmt_text, false);
                    }
                    case 5:
                    {
                        format(g_family[fam_id][F_RANK5], 32, inputtext);
                        mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET rank5='%s' WHERE id='%d' LIMIT 1", inputtext, fam_id + 1);
                        mysql_query(mysql, fmt_text, false);
                    }
                    case 6:
                    {
                        format(g_family[fam_id][F_RANK6], 32, inputtext);
                        mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET rank6='%s' WHERE id='%d' LIMIT 1", inputtext, fam_id + 1);
                        mysql_query(mysql, fmt_text, false);
                    }
                    case 7:
                    {
                        format(g_family[fam_id][F_RANK7], 32, inputtext);
                        mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET rank7='%s' WHERE id='%d' LIMIT 1", inputtext, fam_id + 1);
                        mysql_query(mysql, fmt_text, false);
                    }
                    case 8:
                    {
                        format(g_family[fam_id][F_RANK8], 32, inputtext);
                        mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET rank8='%s' WHERE id='%d' LIMIT 1", inputtext, fam_id + 1);
                        mysql_query(mysql, fmt_text, false);
                    }
                    case 9:
                    {
                        format(g_family[fam_id][F_RANK9], 32, inputtext);
                        mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET rank9='%s' WHERE id='%d' LIMIT 1", inputtext, fam_id + 1);
                        mysql_query(mysql, fmt_text, false);
                    }
                    case 10:
                    {
                        format(g_family[fam_id][F_RANK10], 32, inputtext);
                        mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET rank10='%s' WHERE id='%d' LIMIT 1", inputtext, fam_id + 1);
                        mysql_query(mysql, fmt_text, false);
                    }
                }

                format(fmt_text, sizeof fmt_text, "Вы успешно изменили название ранга {d8284c}№%d {1E90FF}на {d8284c}\"%s\"", rang_id, inputtext);
                SendClientMessage(playerid, 0x1E90FFFF, fmt_text);
            }
			case DIALOG_SECURITY_SETTING_INFO:
			{
				ShowPlayerSecuritySettings(playerid);
			}
			case DIALOG_SECURITY_SETTING_PHONE:
			{
				if(!strcmp(GetPlayerData(playerid, P_SETTING_PHONE), "None", true)) return 1;

				if(response)
				{
					if(0 <= listitem <= 2)
					{
						new query[64 + 1];
						SetPlayerData(playerid, P_REQUEST_PHONE, listitem);

						format(query, sizeof query, "UPDATE accounts SET request_phone=%d WHERE id=%d LIMIT 1", listitem, GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);

						if(!mysql_errno())
						{
							SendClientMessage(playerid, 0xFFFFFFFF, "Изменения в настройках безопасности {00FFCC}сохранены");
							switch(listitem + 1)
							{
								case 1: SendClientMessage(playerid, 0xFF6600FF, "Запрос на ввод мобильного телефона отключен");
								case 2: SendClientMessage(playerid, 0xFFFF00FF, "Ваш мобильный телефон будет запрашиваться при несовпадении подсети");
								case 3: SendClientMessage(playerid, 0x66CC00FF, "Мобильный телефон будет запрашиваться при несовпадении IP адресов");
							}
						}
						else
						{
							SendClientMessage(playerid, 0xFFFFFFFF, "Изменения в настройках безопасности {FF3333}не сохранены");
							SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 03)");
						}
					}
				}
				ShowPlayerSecuritySettings(playerid);
			}
			case DIALOG_SECURITY_SETTING_PHONE_S:
			{
				// установить телефон
				if(strcmp(GetPlayerData(playerid, P_SETTING_PHONE), "None", true) != 0) return 1;
			}
			case DIALOG_SECURITY_SETTING_PIN:
			{
				if(!strcmp(GetPlayerData(playerid, P_SETTING_PIN), "None", true)) return 1;

				if(response)
				{
					if(0 <= listitem <= 2)
					{
						new query[64 + 1];
						SetPlayerData(playerid, P_REQUEST_PIN, listitem);

						format(query, sizeof query, "UPDATE accounts SET request_pin=%d WHERE id=%d LIMIT 1", listitem, GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);

						if(!mysql_errno())
						{
							SendClientMessage(playerid, 0xFFFFFFFF, "Изменения в настройках безопасности {00FFCC}сохранены");
							switch(listitem + 1)
							{
								case 1: SendClientMessage(playerid, 0xFF6600FF, "Запрос случайного PIN-кода отключен");
								case 2: SendClientMessage(playerid, 0xFFFF00FF, "Ваш случайный PIN-код будет запрашиваться при несовпадении подсети");
								case 3: SendClientMessage(playerid, 0x66CC00FF, "Случайный PIN-код будет запрашиваться при несовпадении IP адресов");
							}
						}
						else
						{
							SendClientMessage(playerid, 0xFFFFFFFF, "Изменения в настройках безопасности {FF3333}не сохранены");
							SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 03)");
						}
					}
				}
				ShowPlayerSecuritySettings(playerid);
			}
			case DIALOG_SECURITY_SETTING_PIN_SET:
			{
				// установить пин код
				if(strcmp(GetPlayerData(playerid, P_SETTING_PIN), "None", true) != 0) return 1;

				if(response)
				{
					ShowPlayerPinCodePTD(playerid, PIN_CODE_STATE_SET);
				}
				else ShowPlayerSecuritySettings(playerid);
			}
			case DIALOG_SECURITY_SETTING_PASS_1:
			{
				if(response)
				{
					strmid(CheckPass[playerid], inputtext, 0, strlen(inputtext), 65);
					new hash[65];
       				SHA256_PassHash(CheckPass[playerid], GetPlayerData(playerid, P_SALT), hash, 65);

					if(!strcmp(hash, GetPlayerData(playerid, P_PASSWORD)))
					{
						Dialog
						(
							playerid, DIALOG_SECURITY_SETTING_PASS_2, DIALOG_STYLE_INPUT,
							"{FFCD00}Новый пароль",
							"{FFFFFF}Введите новый пароль в поле ниже:",
							"Изменить", "Отмена"
						);
						return 1;
					}
					else SendClientMessage(playerid, 0xFF6600FF, "Вы ввели неверный пароль");
				}
				ShowPlayerSecuritySettings(playerid);
			}
			case DIALOG_SECURITY_SETTING_PASS_2:
			{
				if(response)
				{
					if(!(1 <= strlen(inputtext) <= 15) || strfind(inputtext, " ") != -1)
					{
						SendClientMessage(playerid, 0xFF6600FF, "Длина пароля должна быть от 6 до 64 символов");
						SendClientMessage(playerid, 0xFF6600FF, "Также не допускается использование пробелов");
					}
					else
					{
						new query[256];

						for(new i; i < 10; i++) g_player[playerid][P_SALT][i] = random(79) + 47;
			            g_player[playerid][P_SALT][10] = 0;
			            SHA256_PassHash(inputtext, g_player[playerid][P_SALT], g_player[playerid][P_PASSWORD], 65);

			            format(query, sizeof query, "Ваш новый пароль: {3399FF}%s", inputtext);

						SendClientMessage(playerid, 0xFFFF00FF, query);
						SendClientMessage(playerid, 0xFFFFFFFF, "Рекомендуем сделать скрин {00CC00}(клавиша F8) {FFFFFF}чтобы не забыть его");

						ShowPlayerSecuritySettings(playerid);

						mysql_format(mysql, query, sizeof query, "UPDATE accounts SET password='%e', salt='%e' WHERE id=%d LIMIT 1", g_player[playerid][P_PASSWORD], g_player[playerid][P_SALT], GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);



						// OLD SYSTEM
						//format(g_player[playerid][P_PASSWORD], 65, "%s", inputtext);
						return 1;
					}

					Dialog
					(
						playerid, DIALOG_SECURITY_SETTING_PASS_2, DIALOG_STYLE_INPUT,
						"{FFCD00}Новый пароль",
						"{FFFFFF}Введите новый пароль в поле ниже:",
						"Изменить", "Отмена"
					);
				}
				else ShowPlayerSecuritySettings(playerid);
			}
			case DIALOG_SECURITY_SETTING_EMAIL:
			{
				if(!response)
				{
					// отправка кода на почту
					Dialog
					(
						playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
						"{FFCD00}Письмо отправлено",
						"{FFFFFF}В течение нескольких минут на Вашу почту придет письмо с новой ссылкой.\n"\
						"Перейдите по ней для подтверждения Email.",
						"Закрыть", ""
					);
				}
			}
			case DIALOG_AUTOREPORT:
			{
	            if(!response) return DeletePVar(playerid, "IdReport");
	            new idx = GetPVarInt(playerid, "IdReport") - 1;

	            switch(listitem)
	            {
		            case 0: format(str, sizeof(str), "Администратор: %s[%d] для %s[%d]: Здравствуйте, наблюдаю за игроком. | Приятной игры на Нашем сервере! :)",GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(idx), idx);
		            case 1: format(str, sizeof(str), "Администратор: %s[%d] для %s[%d]: Нарушений за игроком не заметили. | Приятной игры на Нашем сервере! :)",GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(idx), idx);
		            case 2: format(str, sizeof(str), "Администратор: %s[%d] для %s[%d]: Игрок был наказан, спасибо за информацию. | Приятной игры на Нашем сервере! :)",GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(idx), idx);
		            case 3: format(str, sizeof(str), "Администратор: %s[%d] для %s[%d]: Здравствуйте, не засоряйте пожалуйста репорт. | Приятной игры на Нашем сервере! :)",GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(idx), idx);
		            case 4: format(str, sizeof(str), "Администратор: %s[%d] для %s[%d]: Приобретите данный пост или же подайте заявление на форум — forum.samp-tape.ru",GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(idx), idx);
		            case 5: format(str, sizeof(str), "Администратор: %s[%d] для %s[%d]: Здравствуйте, приобретите данный пост — /buyadm | Приятной игры на Нашем сервере! :)",GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(idx), idx);
		            case 6: format(str, sizeof(str), "Администратор: %s[%d] для %s[%d]: Чтобы получать новые промокоды подпишитесь на рассылку офф.группы — vk.com/samp_mobi",GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(idx), idx);
		            case 7: format(str, sizeof(str), "Администратор: %s[%d] для %s[%d]: Наш сайт — SAMP-TAPE.RU / Форум — forum.samp-tape.ru / ВКонтакте — vk.com/samp_mobi",GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(idx), idx);
		            case 8: format(str, sizeof(str), "Администратор: %s[%d] для %s[%d]: Здравствуйте, Вы можете подать жалобу на форум — forum.samp-tape.ru",GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(idx), idx);
		            case 9: format(str, sizeof(str), "Администратор: %s[%d] для %s[%d]: Свяжитесь с Основателями проекта в ВК. Их страницы есть контактах офф.группы.",GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(idx), idx);
		            case 10: format(str, sizeof(str), "Администратор: %s[%d] для %s[%d]: Пополнить счет Вы можете на сайте — SAMP-TAPE.RU",GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(idx), idx);
		            case 11: format(str, sizeof(str), "Администратор: %s[%d] для %s[%d]: Пополните счёт аккаунта на сайте SAMP-TAPE.RU и купите в /mm > Дополнительно",GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(idx), idx);
		        }
	            SendClientMessage(idx, 0xff9945FF, str);
	            DeletePVar(idx, "RepUn"), DeletePVar(playerid, "IdReport");
	            SendMessageToAdmins(str, 0xff9945FF);
	            return true;
	        }
	        case 5512:
			{

				new report_id = TempReportInfo[playerid][reportID], status = REPORT_STATUS_ANSWERED, Cache:result;
				if (!response) status = REPORT_STATUS_SKIPPED;

				mysql_query_[0] = EOS;

				mysql_format(mysql, mysql_query_, sizeof (mysql_query_), "SELECT * FROM "TABLE_REPORTS" \
					WHERE status=0 AND id=%d", report_id
				);
				result = mysql_query(mysql, mysql_query_, true);

				mysql_query_[0] = EOS;

				new rows = cache_num_rows();

				if(!rows)
				{
					cache_delete(result);
					SendClientMessage(playerid, COLOR_WHITE, !"{afafaf}На данный запрос уже был дан ответ!");
					return true;
				}
				mysql_format(mysql, mysql_query_, sizeof (mysql_query_), "UPDATE "TABLE_REPORTS" SET \
					status=%d, answer='%s' WHERE status=0 AND id=%d", status, inputtext, report_id
				);
				mysql_query(mysql, mysql_query_);
				new targetid = TempReportInfo[playerid][reportPlayerID];
				TempReportInfo[playerid][reportID] = 0;

				Dialog(playerid, 5513, DIALOG_STYLE_MSGBOX, ""c_server"Вы ответили на запрос", "{FFFFFF}Хотите посмотреть следующий запрос?", "Да", "Отмена");
				if (!response) {
					format(stringer, sizeof (stringer), "Ваш запрос №%d был пропущен администратором %s[%d].",
						report_id, GetPlayerData(playerid, P_NAME), playerid
					);
					SendClientMessage(targetid, COLOR_YELLOW, stringer), stringer[0] = EOS;

					format(stringer1, sizeof(stringer1), "{afafaf}[A] %s[%d] пропустил запрос №%d игрока %s[%d].",
						GetPlayerNameEx(playerid), playerid, report_id, GetPlayerData(targetid, P_NAME), targetid
					);
					SendMessageToAdmins(stringer1,0xFfa500AA);

		            /*if(PlayerInfo[playerid][pAdmin]) PlayerInfo[playerid][pRepAdm]--;
		            else PlayerInfo[playerid][pHotvet]--;*/

					cache_delete(result);
					return true;
				}
				format(stringer, sizeof (stringer), "\
					{FFFFFF}Дата запроса: {afafaf}%s\n \n\
					{FFFFFF}Ваш запрос №%d:\n\
					{afafaf}| {afafaf}%s\n \n\
					{FFFFFF}Ответ от администрации:\n\
					{afafaf}| "c_server"%s",
					TempReportInfo[playerid][reportDate], report_id, TempReportInfo[playerid][reportText], inputtext
				);
				Dialog(targetid, 0000, DIALOG_STYLE_MSGBOX, !""c_server"Ответ администрации", stringer, !"Спасибо", !"");

				format(stringer, sizeof (stringer), ""c_server"Ваш запрос №%d: {FFFFFF}%s", report_id, TempReportInfo[playerid][reportText]);
				SendClientMessage(targetid, COLOR_YELLOW, stringer);
				format(stringer, sizeof (stringer), ""c_server"Ответ от администратора %s[%d]: {FFFFFF}%s", GetPlayerData(playerid,P_NAME), playerid, inputtext);
				SendClientMessage(targetid, COLOR_YELLOW, stringer), stringer[0] = EOS;

				format(stringer1, sizeof(stringer1), "{afafaf}[A] %s[%d] ответил игроку %s[%d]: %s",
					GetPlayerNameEx(playerid), playerid, GetPlayerData(targetid,P_NAME), targetid, inputtext
				);
				SendMessageToAdmins(stringer1,0xFfa500AA);

	            /*if(PlayerInfo[playerid][pAdmin]) PlayerInfo[playerid][pRepAdm]++;
	            else PlayerInfo[playerid][pHotvet] ++;*/

				cache_delete(result);

				return true;
			}
			case 5513: {
				if (!response) {
					TempReportInfo[playerid][reportID] = 0;
					return true;
				}
				report_Show(playerid);
				return true;
			}
	        case 9182:
			{
				if (!response)
					return true;

				if (!strlen(inputtext))
					return SendClientMessage(playerid, COLOR_WHITE, !"{afafaf}Вы ничего не ввели!");

				if(IsPlayerMuted(playerid))
				return SendClientMessage(playerid, 0xFF6600FF, "У вас бан чата!");
				
				if (PlayerReportFix[playerid] > gettime())
					return SendClientMessage(playerid, COLOR_WHITE, !"{afafaf}Подавать жалобу можно 1 раз в минуту!");

				report_Send(playerid, inputtext);
				
				PlayerReportFix[playerid] = gettime() + 60;

				return true;
			}
			case DIALOG_REPORT:
			{
				if(response)
				{
					new len = strlen(inputtext);
					if(1 <= len <= 130)
					{
						new fmt_str[300];

						format(fmt_str, sizeof fmt_str, "[Жалобы]: "c_b"Поступила новая жалоба от "c_server"%s[%d]: {FFFFFF}%s", GetPlayerNameEx(playerid), playerid, inputtext);
						SendMessageToAdmins(fmt_str, COR_SERVER);


						SendClientMessage(playerid, 0xFFFFFFFF, "Ваше сообщение отправлено");

						strmid(RepInfo[playerid][Reptex], inputtext,0,strlen(inputtext),130);
      					RepInfo[playerid][RepTime] = gettime();
      					SetPVarInt(playerid,"RepUn",1);

						format(fmt_str, sizeof fmt_str, "%s", inputtext);

						SendLog(playerid, LOG_TYPE_REPORT, fmt_str);

						return 1;
					}
					else if(len > 130)
					{
						SendClientMessage(playerid, 0x999999FF, "Слишком длинное сообщение");
					}
					ShowPlayerReportDialog(playerid);
				}
				else callcmd::mm(playerid, "");
			}
			case DIALOG_ASK:
			{
				if(response)
				{
					new len = strlen(inputtext);
					if(1 <= len <= 130)
					{
						new fmt_str[300];

						format(fmt_str, sizeof fmt_str, "[Вопросы]: "c_b"Поступил новый вопрос от "c_server"%s[%d]: {FFFFFF}%s", GetPlayerNameEx(playerid), playerid, inputtext);
						SendMessageToHelpers(fmt_str, COR_SERVER);

						SendClientMessage(playerid, 0xFFFFFFFF, "Ваше сообщение отправлено");

						strmid(AskInfo[playerid][Asktex], inputtext,0,strlen(inputtext),130);
      					AskInfo[playerid][AskTime] = gettime();
      					SetPVarInt(playerid,"AskUn",1);

						format(fmt_str, sizeof fmt_str, "%s", inputtext);

						//SendLog(playerid, LOG_TYPE_REPORT, fmt_str);

						return 1;
					}
					else if(len > 130)
					{
						SendClientMessage(playerid, 0x999999FF, "Слишком длинное сообщение");
					}
					ShowPlayerAskDialog(playerid);
				}
				else callcmd::mm(playerid, "");
			}
			case DIALOG_PLAYER_IMPROVEMENTS:
			{
				if(response)
				{
					new my_i_level = GetPlayerData(playerid, P_IMPROVEMENTS);

					if(0 <= listitem <= sizeof(g_player_improvements)-1)
					{
						new i_level = GetPlayerImprovementInfo(listitem, I_LEVEL);
						new i_price = GetPlayerImprovementInfo(listitem, I_PRICE);

						if(my_i_level < listitem)
						{
							SendClientMessage(playerid, 0xCECECEFF, "Это улучшение пока не доступно");
						}
						else if(my_i_level > listitem)
						{
							SendClientMessage(playerid, 0xCECECEFF, "Вы уже купили это улучшение");
						}
						else if(GetPlayerLevel(playerid) < i_level || GetPlayerMoneyEx(playerid) < i_price)
						{
							new fmt_str[64 + 1];

							format(fmt_str, sizeof fmt_str, "Для покупки этого улучшения необходим %d уровень и %d рублей", i_level, i_price);
							SendClientMessage(playerid, 0x999999FF, fmt_str);
						}
						else
						{
							new fmt_str[85];

							format(fmt_str, sizeof fmt_str, "UPDATE accounts SET money=%d,improvements=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid) - i_price, my_i_level + 1, GetPlayerAccountID(playerid));
							mysql_query(mysql, fmt_str, false);

							if(!mysql_errno())
							{
								GivePlayerMoneyEx(playerid, -i_price, "Покупка улучшения аккаунта", false);

								AddPlayerData(playerid, P_IMPROVEMENTS, +, 1);

								format(fmt_str, sizeof fmt_str, "Вы приобрели улучшение {FFCD00}\"%s\"", GetPlayerImprovementInfo(listitem, I_NAME));
								SendClientMessage(playerid, 0x3399FFFF, fmt_str);

								switch(listitem + 1)
								{
									case 1:
										SendClientMessage(playerid, 0xCECECEFF, "Полоска здоровья будет уменьшаться значительно медленнее");

									case 2:
										SendClientMessage(playerid, 0xCECECEFF, "Теперь Вы можете покидать организацию по собственному желанию {33FF33}(/leave)");

									case 3:
										SendClientMessage(playerid, 0xCECECEFF, "Теперь Вы можете носить с собой в 2 раза больше металла, патронов и наркотиков");

									case 4:
										SendClientMessage(playerid, 0xCECECEFF, "Теперь Вы можете не бояться небольших аварий, двигатель не заглохнет");

									case 5:
										SendClientMessage(playerid, 0xCECECEFF, "Теперь Ваше оружие будет сохраняться в полном объеме при выходе из игры");
								}
							}
							else
							{
								SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 06)");
								ShowPlayerImprovementsDialog(playerid);
							}
						}
					}
					else
					{
						Dialog
						(
							playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
							"{0099CC}Информация",
							"{FFFFFF}1. Выносливость позволит находиться в хорошей форме длительное\n"\
							"время. Полоска здоровья будет уменьшаться медленнее.\n\n"\
							"2. Решительность позволит вам самостоятельно принять решение об\n"\
							"увольнении с организации (команда /leave). Без решительности вы не\n"\
							"сможете покинуть организацию по собственному желанию.\n\n"\
							"3. Рюкзак даст возможность переносить с собой металл, патроны и\n"\
							"наркотики в гораздо большем количестве.\n\n"\
							"4. Став мастером вождения, двигатель транспорта под Вашим управлением\n"\
							"больше не будет глохнуть при различных ударах.\n\n"\
							"5. Полная экипировка сохраняет все ваше оружие в полном объеме,\n"\
							"при выходе из игры.",
							"Закрыть", ""
						);
					}
				}
				else callcmd::mm(playerid, "");
			}
			case DIALOG_CHANGE_NAME:
			{
				if(response)
				{
					if(!GetPVarInt(playerid, "change_name_status"))
					{
						new len = strlen(inputtext);
						if(4 <= len <= 20)
						{
							new bool: valid_name = true;
							for(new idx; idx < len; idx ++)
							{
								switch(inputtext[idx])
								{
									case 'a'..'z', 'A'..'Z', '[', ']', '_': continue;
									default:
										valid_name = false;
								}
							}

							if(!strcmp(GetPlayerNameEx(playerid), inputtext, true))
							{
								SendClientMessage(playerid, 0xFF6600FF, "Вы уже используете это имя");
							}
							else if(valid_name)
							{
								new query[128];
								new Cache: result, rows;

								mysql_format(mysql, query, sizeof query, "SELECT id FROM accounts WHERE name='%e' LIMIT 1", inputtext);
								result = mysql_query(mysql, query, true);

								rows = cache_num_rows();
								cache_delete(result);

								if(!rows)
								{
									SetPVarInt(playerid, "change_name_status", 1);
									SetPVarString(playerid, "change_name", inputtext);

									Dialog
									(
										playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
										"{FFCD00}Заявка на изменение имени",
										"{FFFFFF}Ваша просьба об изменении ника отправлена администрации.\n"\
										"Вы получите сообщение, как только заявка будет обработана.\n\n"\
										"Если в течении нескольких минут Ваше имя не было изменено,\n"\
										"то, скорее всего, оно не соответствует RP правилам,\n"\
										"либо Вы уже используете RP имя.",
										"Ок", ""
									);

									format(query, sizeof query, "[Смена non rp имени] %s >> %s {FFCD00}| /okay %d для одобрения" , GetPlayerNameEx(playerid), inputtext, playerid);
									SendMessageToAdmins(query, 0x66CC99FF);

								}
								else SendClientMessage(playerid, 0xFF6600FF, "Введенное Вами имя уже используется");

							}
							else
							{
								SendClientMessage(playerid, 0xFF6600FF, "Имя уже используется или содержит недопустимые символы");
								SendClientMessage(playerid, 0xFFFFFFFF, "Используйте латинские буквы a-z A-Z, а также символы [ ] _");
							}
						}
						else SendClientMessage(playerid, 0xFF6600FF, "Недопустимый формат ввода");
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Вы уже подавали заявку на изменение имени");
				}
			}
			case 29000:
		    {
		        new ttext[30],string[200];
		        if(!response) return 1;
		        switch(list_id)
		        {
		            case 1:
		            {
		                if(strlen(interview[TEAM_ARMY][text_time]) == 0 && strlen(interview[TEAM_ARMY][text_crit]) == 0)
						{
						    format(interview[TEAM_ARMY][text_time],15, "Неизвестно");
						    format(interview[TEAM_ARMY][text_crit], 70, "Неизвестно");
						}
						format(string,sizeof(string),"\
						{FFFFFF}Время: {FF8040}%s{FFFFFF}\n\
						Критерии: {FF8040}%s{FFFFFF}\n\n\
						Чтобы узнать местоположение военкомата нажмите {FF8040}Далее{FFFFFF}",interview[TEAM_ARMY][text_time],interview[TEAM_ARMY][text_crit]);
						ttext = "Армия";
						click_status[playerid] = 1;
					}
		            case 2:
					{
						if(strlen(interview[TEAM_GOVERNMENT][text_time]) == 0 && strlen(interview[TEAM_GOVERNMENT][text_crit]) == 0)
						{
						    format(interview[TEAM_GOVERNMENT][text_time],15, "Неизвестно");
						    format(interview[TEAM_GOVERNMENT][text_crit], 70, "Неизвестно");
						}
						format(string,sizeof(string),"\
						{FFFFFF}Время: {FF8040}%s{FFFFFF}\n\
						Критерии: {FF8040}%s{FFFFFF}\n\n\
						Чтобы узнать местоположение мэрии нажмите {FF8040}Далее{FFFFFF}",interview[TEAM_GOVERNMENT][text_time],interview[TEAM_GOVERNMENT][text_crit]);
						ttext = "Мэрия";
						click_status[playerid] = 2;
					}
		            case 3:
					{
						if(strlen(interview[TEAM_DPS][text_time]) == 0 && strlen(interview[TEAM_DPS][text_crit]) == 0)
						{
							format(interview[TEAM_DPS][text_time],15, "Неизвестно");
						    format(interview[TEAM_DPS][text_crit], 70, "Неизвестно");
						}
						format(string,sizeof(string),"\
						{FFFFFF}Время: {FF8040}%s{FFFFFF}\n\
						Критерии: {FF8040}%s{FFFFFF}\n\n\
						Чтобы узнать местоположение ГИБДД нажмите {FF8040}Далее{FFFFFF}",interview[TEAM_DPS][text_time],interview[TEAM_DPS][text_crit]);
						ttext = "ГИБДД";
						click_status[playerid] = 3;
					}
		            case 4:
					{
						if(strlen(interview[TEAM_HOSPITAL][text_time]) == 0 && strlen(interview[TEAM_HOSPITAL][text_crit]) == 0)
						{
							format(interview[TEAM_HOSPITAL][text_time],15, "Неизвестно");
						    format(interview[TEAM_HOSPITAL][text_crit], 70, "Неизвестно");
						}
						format(string,sizeof(string),"\
						{FFFFFF}Время: {FF8040}%s{FFFFFF}\n\
						Критерии: {FF8040}%s{FFFFFF}\n\n\
						Чтобы узнать местоположение больницы, нажмите {FF8040}Далее{FFFFFF}",interview[TEAM_HOSPITAL][text_time],interview[TEAM_HOSPITAL][text_crit]);
						ttext = "Больница г. Los-Santos";
						click_status[playerid] = 4;
					}
		            case 5:
		            {
						if(strlen(interview[TEAM_RADIO][text_time]) == 0 && strlen(interview[TEAM_RADIO][text_crit]) == 0)
						{
							format(interview[TEAM_RADIO][text_time],15, "Неизвестно");
						    format(interview[TEAM_RADIO][text_crit], 70, "Неизвестно");
						}
						format(string,sizeof(string),"\
						{FFFFFF}Время: {FF8040}%s{FFFFFF}\n\
						Критерии: {FF8040}%s{FFFFFF}\n\n\
						Чтобы узнать местоположение ГТРК нажмите {FF8040}Далее{FFFFFF}",interview[TEAM_RADIO][text_time],interview[TEAM_RADIO][text_crit]);
						ttext = "СМИ";
						click_status[playerid] = 5;
					}
		            case 6:
					{
						if(strlen(interview[TEAM_FBI][text_time]) == 0 && strlen(interview[TEAM_FBI][text_crit]) == 0)
						{
							format(interview[TEAM_FBI][text_time],15, "Неизвестно");
						    format(interview[TEAM_FBI][text_crit], 70, "Неизвестно");
						}
						format(string,sizeof(string),"\
						{FFFFFF}Время: {FF8040}%s{FFFFFF}\n\
						Критерии: {FF8040}%s{FFFFFF}\n\n\
						Чтобы узнать местоположение ФСБ нажмите {FF8040}Далее{FFFFFF}",interview[TEAM_FBI][text_time],interview[TEAM_FBI][text_crit]);
						ttext = "ФСБ";
						click_status[playerid] = 6;
					}
					case 7:
					{
						if(strlen(interview[TEAM_PPS][text_time]) == 0 && strlen(interview[TEAM_PPS][text_crit]) == 0)
						{
							format(interview[TEAM_PPS][text_time],15, "Неизвестно");
						    format(interview[TEAM_PPS][text_crit], 70, "Неизвестно");
						}
						format(string,sizeof(string),"\
						{FFFFFF}Время: {FF8040}%s{FFFFFF}\n\
						Критерии: {FF8040}%s{FFFFFF}\n\n\
						Чтобы узнать местоположение УМВД нажмите {FF8040}Далее{FFFFFF}",interview[TEAM_PPS][text_time],interview[TEAM_PPS][text_crit]);
						ttext = "УМВД";
						click_status[playerid] = 7;
					}
		        }
		        Dialog(playerid, 29005, DIALOG_STYLE_MSGBOX,ttext,string,"Далее","Назад");
		    }
		    case 29005:
		    {
		        if(!response)
		        {
		            return callcmd::vacancy(playerid);
				}
				switch(click_status[playerid])
				{
				    case 1:
					{
						if(strlen(interview[TEAM_ARMY][text_time]) == 0) return SendClientMessage(playerid,-1,"{FFFF00}[Информация]{FFFFFF} В данный момент собеседование не проводится!");
						SetPlayerCheckpoint(playerid,1916.5503,2302.2786,15.1412,5.0);
					}
				    case 2:
					{
					    if(strlen(interview[TEAM_GOVERNMENT][text_time]) == 0) return SendClientMessage(playerid,-1,"{FFFF00}[Информация]{FFFFFF} В данный момент собеседование не проводится!");
						SetPlayerCheckpoint(playerid,-113.2410,627.7893,11.8676,5.0);
					}
				    case 3:
					{
					    if(strlen(interview[TEAM_DPS][text_time]) == 0) return SendClientMessage(playerid,-1,"{FFFF00}[Информация]{FFFFFF} В данный момент собеседование не проводится!");
						SetPlayerCheckpoint(playerid,1895.6697,-2212.2500,10.9975,5.0);
					}
				    case 4:
					{
					    if(strlen(interview[TEAM_HOSPITAL][text_time]) == 0) return SendClientMessage(playerid,-1,"{FFFF00}[Информация]{FFFFFF} В данный момент собеседование не проводится!");
						SetPlayerCheckpoint(playerid,-286.9034, 576.8859, 12.8447,5.0);
					}
				    case 5:
					{
					    if(strlen(interview[TEAM_RADIO][text_time]) == 0) return SendClientMessage(playerid,-1,"{FFFF00}[Информация]{FFFFFF} В данный момент собеседование не проводится!");
						SetPlayerCheckpoint(playerid,-317.8738,816.2292,13.0515,5.0);
					}
				    case 6:
					{
					    if(strlen(interview[TEAM_FBI][text_time]) == 0) return SendClientMessage(playerid,-1,"{FFFF00}[Информация]{FFFFFF} В данный момент собеседование не проводится!");
						SetPlayerCheckpoint(playerid,1818.4851,2095.7136,16.1642,5.0);
					}
					case 7:
					{
					    if(strlen(interview[TEAM_PPS][text_time]) == 0) return SendClientMessage(playerid,-1,"{FFFF00}[Информация]{FFFFFF} В данный момент собеседование не проводится!");
						SetPlayerCheckpoint(playerid,2578.9482,-2416.1196,21.9922,5.0);
					}
				}
				SendClientMessage(playerid, -1,"{FFFF00}[Информация]{FFFFFF} Местоположение организации отмечено у Вас на GPS");
				return 1;
		    }
			case DIALOG_LEADER_MENU:
		    {
		        if(!response) return 1;
		        switch(list_id)
		        {
		            case 1: Dialog(playerid, DIALOG_LEADER_MENU_UNINVITE, DIALOG_STYLE_INPUT,"Панель лидера","Введите имя сотрудника, которого хотите уволить!","Ввести","Закрыть");
					case 3: callcmd::showall(playerid,"");
					case 4: Dialog(playerid, DIALOG_LEADER_MENU_JOBS,DIALOG_STYLE_LIST,"Панель лидера","1. Создать вакансию\n2. Удалить вакансию","Выбрать","Закрыть");
				}
		    }

		    case DIALOG_LEADER_MENU_JOBS:
		    {
		        if(!response) return 1;
		        switch(list_id)
		        {
		            case 1: callcmd::addvacancy(playerid);
		            case 2: callcmd::delvacancy(playerid);
		        }
		    }
		    case DIALOG_LEADER_MENU_UNINVITE:
		    {
		        if(!response) return 1;
		        callcmd::uninviteoff(playerid,inputtext);
		        return 1;
		    }
		    case 3000:
			{
				new id = DuelOffer[playerid];

				if(!response)
				{
					SendClientMessage(id, -1, "Игрок отказался от дуэля!");
					SendClientMessage(playerid, -1, "Вы успешно отказались от дуэля!");
					DuelOffer[playerid] = -1;
					DuelOffer[id] = -1;
					DuelCash[id] = 0;
					DuelCash[playerid] = 0;

					return true;
				}
				if(!ProxDetectorS(10, playerid, id))
				{
					DuelOffer[playerid] = -1;
					DuelOffer[id] = -1;
					DuelCash[id] = 0;
					DuelCash[playerid] = 0;
					SendClientMessage(playerid, -1, "Вы далеко друг от друга!");

					return true;
				}
				if(GetPlayerMoney(playerid) < DuelCash[playerid] || GetPlayerMoney(id) < DuelCash[playerid])
				{
					SendClientMessage(playerid, -1, "У Вас или у Вашего соперника недостаточно денег!");
					SendClientMessage(id, -1, "У Вас или у Вашего соперника недостаточно денег!");
					DuelOffer[playerid] = -1;
					DuelOffer[id] = -1;
					DuelCash[id] = 0;
					DuelCash[playerid] = 0;

					return true;
				}
				SendClientMessage(playerid, -1, "Вы приняли дуэль! Дуэль начнется через 10 секунд.");
				SendClientMessage(id, -1, "Игрок принял дуэль! Дуэль начнется через 10 секунд.");
				DuelTimer[playerid] = SetTimerEx("DuelOn", 1000, true, "ii", playerid, id);
				SetPVarInt(playerid, "antifloodduel", gettime()+60);
				TogglePlayerControllable(playerid, 0);
				TogglePlayerControllable(id, 0);
			}
			case DIALOG_ACTION_F_PROGRESS:
			{
			    new fmt_str[300];

			    if(!response) return 1;

				switch(list_id-1)
				{
					case 0:
					{

					    if(GetPlayerData(playerid, P_PROGRESS_1) >= 1) return Send(playerid, -1, "Вы уже выполнили это достижение.");

						format
						(
							fmt_str, sizeof fmt_str,
							""c_server"Информация: "c_b"Станьте врачем и вылечите 1000 пациетов.\n\
							"c_server"Награда: "c_b"100 DONATE-RUB\n\
							"c_server"Прогресс: "c_b"%d/1.000",
							GetPlayerData(playerid, P_PROGRESS_EXP_1)
						);

						Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Достижения", fmt_str, "Закрыть", "");
						return 1;
					}
					case 1:
					{

					    if(GetPlayerData(playerid, P_PROGRESS_2) >= 1) return Send(playerid, -1, "Вы уже выполнили это достижение.");

						format
						(
							fmt_str, sizeof fmt_str,
							""c_server"Информация: "c_b"Станьте полицейским и выдайте штраф 500 раз.\n\
							"c_server"Награда: "c_b"100 DONATE-RUB\n\
							"c_server"Прогресс: "c_b"%d/500",
							GetPlayerData(playerid, P_PROGRESS_EXP_2)
						);

						Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Достижения", fmt_str, "Закрыть", "");
						return 1;
					}
					case 2:
					{

					    if(GetPlayerData(playerid, P_PROGRESS_3) >= 1) return Send(playerid, -1, "Вы уже выполнили это достижение.");

						format
						(
							fmt_str, sizeof fmt_str,
							""c_server"Информация: "c_b"Станьте полицейским и выдайте розыск 500 раз.\n\
							"c_server"Награда: "c_b"100 DONATE-RUB\n\
							"c_server"Прогресс: "c_b"%d/500",
							GetPlayerData(playerid, P_PROGRESS_EXP_3)
						);

						Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Достижения", fmt_str, "Закрыть", "");
						return 1;
					}
					case 3:
					{

					    if(GetPlayerData(playerid, P_PROGRESS_4) >= 1) return Send(playerid, -1, "Вы уже выполнили это достижение.");

						format
						(
							fmt_str, sizeof fmt_str,
							""c_server"Информация: "c_b"Станьте полицейским и посадите игроков в тюрьму 500 раз.\n\
							"c_server"Награда: "c_b"100 DONATE-RUB\n\
							"c_server"Прогресс: "c_b"%d/500",
							GetPlayerData(playerid, P_PROGRESS_EXP_4)
						);

						Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Достижения", fmt_str, "Закрыть", "");
						return 1;
					}
					case 4:
					{

					    if(GetPlayerData(playerid, P_PROGRESS_5) >= 1) return Send(playerid, -1, "Вы уже выполнили это достижение.");

						format
						(
							fmt_str, sizeof fmt_str,
							""c_server"Информация: "c_b"Устройтесь в радиоцентр и отредактируйте 1000 объявлений.\n\
							"c_server"Награда: "c_b"50 DONATE-RUB\n\
							"c_server"Прогресс: "c_b"%d/1.000",
							GetPlayerData(playerid, P_PROGRESS_EXP_5)
						);

						Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Достижения", fmt_str, "Закрыть", "");
						return 1;
					}
					case 5:
					{

					    if(GetPlayerData(playerid, P_PROGRESS_6) >= 1) return Send(playerid, -1, "Вы уже выполнили это достижение.");

						format
						(
							fmt_str, sizeof fmt_str,
							""c_server"Информация: "c_b"Станьте адвокатом и выпустите с тюрьмы 500 людей.\n\
							"c_server"Награда: "c_b"100 DONATE-RUB\n\
							"c_server"Прогресс: "c_b"%d/500",
							GetPlayerData(playerid, P_PROGRESS_EXP_6)
						);

						Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Достижения", fmt_str, "Закрыть", "");
						return 1;
					}
				}
			}
			case DIALOG_ACTION_F_QUEST:
			{
			    new fmt_str[300];

			    if(!response) return 1;

				switch(list_id-1)
				{
					case 0:
					{

					    if(GetPlayerData(playerid, P_F_QUEST_1) >= 1) return Send(playerid, -1, "Вы уже выполнили этот квест.");

						format
						(
							fmt_str, sizeof fmt_str,
							""c_server"Информация: "c_b"Выпустите 40 людей с тюрьмы.\n\
							"c_server"Награда: "c_b"1 CASE\n\
							"c_server"Прогресс: "c_b"%d/35",
							GetPlayerData(playerid, P_F_QUEST_EXP_1)
						);

						Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Квесты", fmt_str, "Закрыть", "");
						return 1;
					}
					case 1:
					{

					    if(GetPlayerData(playerid, P_F_QUEST_2) >= 1) return Send(playerid, -1, "Вы уже выполнили этот квест.");

						format
						(
							fmt_str, sizeof fmt_str,
							""c_server"Информация: "c_b"Убейте 30 людей во время войный за территорию.\n\
							"c_server"Награда: "c_b"1 CASE\n\
							"c_server"Прогресс: "c_b"%d/30",
							GetPlayerData(playerid, P_F_QUEST_EXP_2)
						);

						Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Квесты", fmt_str, "Закрыть", "");
						return 1;
					}
					case 2:
					{

					    if(GetPlayerData(playerid, P_F_QUEST_3) >= 1) return Send(playerid, -1, "Вы уже выполнили этот квест.");

						format
						(
							fmt_str, sizeof fmt_str,
							""c_server"Информация: "c_b"Посадите 40 людей в тюрьму.\n\
							"c_server"Награда: "c_b"1 CASE\n\
							"c_server"Прогресс: "c_b"%d/40",
							GetPlayerData(playerid, P_F_QUEST_EXP_3)
						);

						Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Квесты", fmt_str, "Закрыть", "");
						return 1;
					}
					case 3:
					{

					    if(GetPlayerData(playerid, P_F_QUEST_4) >= 1) return Send(playerid, -1, "Вы уже выполнили этот квест.");

						format
						(
							fmt_str, sizeof fmt_str,
							""c_server"Информация: "c_b"Отредактируйте 150 объявлений.\n\
							"c_server"Награда: "c_b"1 CASE\n\
							"c_server"Прогресс: "c_b"%d/150",
							GetPlayerData(playerid, P_F_QUEST_EXP_4)
						);

						Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Квесты", fmt_str, "Закрыть", "");
						return 1;
					}
					case 4:
					{

					    if(GetPlayerData(playerid, P_F_QUEST_5) >= 1) return Send(playerid, -1, "Вы уже выполнили этот квест.");

						format
						(
							fmt_str, sizeof fmt_str,
							""c_server"Информация: "c_b"Вылечите 100 пациентов.\n\
							"c_server"Награда: "c_b"1 CASE\n\
							"c_server"Прогресс: "c_b"%d/100",
							GetPlayerData(playerid, P_F_QUEST_EXP_5)
						);

						Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Квесты", fmt_str, "Закрыть", "");
						return 1;
					}
				}
			}
			case DIALOG_DONATE_CASE:
			{
			    if(GetPlayerData(playerid, P_DONATE_CASE) <= 0)
					return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет кейса.");
		
	            GetPlayerPrise(playerid);
	            
	            Dialog(playerid,DIALOG_DONATE_CASE_PRISE,DIALOG_STYLE_MSGBOX,
				"Открытие кейса",
				"{ffffff}Поздравляем Вы открыли кейс, Ваш приз: Посмотрите в чат.",
				"Забрать",""
				);
				return 1;
			}
			case DIALOG_OBMEN_MONET:
			{

			    if(!response) return 1;
			    
			    if((GetPlayerOwnableCars(playerid) + 1) > GetPlayerCarSlots(playerid))
				{
					SendClientMessage(playerid, 0x3399FFFF, "Все слоты для транспорта заняты. Вы можете увеличить их: {FFFF00}/menu > Дополнительно");
					return -1;
				}

				if(GetPlayerOwnableCar(playerid) != INVALID_VEHICLE_ID)
				{
					SendClientMessage(playerid, 0x999999FF, "Для покупки транспорта нужно выгрузить уже загруженный транспорт с сервера");
					return -1;
				}

				switch(list_id-1)
				{
					case 0:
					{
					    if(Cars[car_1] <= 0) return Send(playerid,-1,"На складе нет данного транспорта!");
					
					    if(GetPlayerData(playerid, P_COINS) < 1000) return Send(playerid,-1,"У вас недостаточно монет!");
					    
					    new minus = Cars[car_1] -1;
					    mysql_format(mysql, str, 256, "UPDATE car_obmen SET car_1 = '%d'", minus);
         				mysql_query(mysql, str);

						Cars[car_1] = minus;
					    
					    new modelid = 407, color_1 = 17, color_2 = 17;
					    
					    new Float: pos_x = -335.7250;
						new Float: pos_y = 424.3185;
						new Float: pos_z = 12.2686;
						new Float: angle = 356.7986;
	
						new query[220],
							Cache: result,
							idx;

						idx = GetFreeOwnableCarID();

						SetOwnableCarData(idx, OC_OWNER_ID, 	GetPlayerAccountID(playerid));

						SetOwnableCarData(idx, OC_MODEL_ID, 	modelid);
						SetOwnableCarData(idx, OC_COLOR_1, 		color_1);
						SetOwnableCarData(idx, OC_COLOR_2, 		color_2);

						SetOwnableCarData(idx, OC_POS_X, 		pos_x);
						SetOwnableCarData(idx, OC_POS_Y, 		pos_y);
						SetOwnableCarData(idx, OC_POS_Z, 		pos_z);
						SetOwnableCarData(idx, OC_ANGLE, 		angle);

						strmid(g_ownable_car[idx][OC_NUMBER], "------", 0, 8, 8);

						SetOwnableCarData(idx, OC_ALARM, 		false);
						SetOwnableCarData(idx, OC_KEY_IN, 		false);

						SetOwnableCarData(idx, OC_CREATE, 		gettime());

						format(g_ownable_car[idx][OC_OWNER_NAME], 21, GetPlayerNameEx(playerid));
						// ----------------------------------------------------------------------------------------

						new vehicleid = CreateVehicle
						(
							GetOwnableCarData(idx, OC_MODEL_ID),
							GetOwnableCarData(idx, OC_POS_X),
							GetOwnableCarData(idx, OC_POS_Y),
							GetOwnableCarData(idx, OC_POS_Z),
							GetOwnableCarData(idx, OC_ANGLE),
							GetOwnableCarData(idx, OC_COLOR_1),
							GetOwnableCarData(idx, OC_COLOR_2),
							-1,
							0,
							VEHICLE_ACTION_TYPE_OWNABLE_CAR,
							idx
						);
						if(vehicleid != INVALID_VEHICLE_ID)
						{
							CreateVehicleLabel(vehicleid, GetOwnableCarData(idx, OC_NUMBER), 0xFFFF00EE, 0.0, 0.0, 1.3, 20.0);
							SetVehicleParam(vehicleid, V_LOCK, false);

							SetVehicleData(vehicleid, V_MILEAGE, 0.0);
						}

						SetPlayerData(playerid, P_OWNABLE_CAR, vehicleid);

						format
						(
							query, sizeof query,
							"INSERT INTO ownable_cars \
							(owner_id,model_id,color_1,color_2,pos_x,pos_y,pos_z,angle,create_time) \
							VALUES \
							('%d','%d','%d','%d','%f','%f','%f','%f','%d')",
							GetPlayerAccountID(playerid),
							modelid,
							color_1,
							color_2,
							pos_x,
							pos_y,
							pos_z,
							angle,
							gettime()
						);
						result = mysql_query(mysql, query, true);

						SetOwnableCarData(idx, OC_SQL_ID, cache_insert_id());

						cache_delete(result);
						
						AddPlayerData(playerid, P_COINS, -, 1000);
	    				UpdatePlayerDatabaseInt(playerid, "coins", GetPlayerData(playerid, P_COINS));

						SendClientMessage(playerid, 0x66CC00FF, "Поздравляем! Вы обменяли монеты на Пожарную машину.");
						SendClientMessage(playerid, 0x66CC00FF, "Напишите {0099FF}/car {66CC00}чтобы узнать о возможностях");
						EnablePlayerGPS(playerid, 55, pos_x, pos_y, pos_z, "Местоположение Вашего транспорта отмечено на GPS");
					}
					case 1:
					{
					    if(Cars[car_2] <= 0) return Send(playerid,-1,"На складе нет данного транспорта!");

					    if(GetPlayerData(playerid, P_COINS) < 1000) return Send(playerid,-1,"У вас недостаточно монет!");
					    
					    new minus = Cars[car_2] -1;
					    mysql_format(mysql, str, 256, "UPDATE car_obmen SET car_2 = '%d'", minus);
         				mysql_query(mysql, str);

						Cars[car_2] = minus;

					    new modelid = 431, color_1 = 17, color_2 = 17;

					    new Float: pos_x = -335.7250;
						new Float: pos_y = 424.3185;
						new Float: pos_z = 12.2686;
						new Float: angle = 356.7986;

						new query[220],
							Cache: result,
							idx;

						idx = GetFreeOwnableCarID();

						SetOwnableCarData(idx, OC_OWNER_ID, 	GetPlayerAccountID(playerid));

						SetOwnableCarData(idx, OC_MODEL_ID, 	modelid);
						SetOwnableCarData(idx, OC_COLOR_1, 		color_1);
						SetOwnableCarData(idx, OC_COLOR_2, 		color_2);

						SetOwnableCarData(idx, OC_POS_X, 		pos_x);
						SetOwnableCarData(idx, OC_POS_Y, 		pos_y);
						SetOwnableCarData(idx, OC_POS_Z, 		pos_z);
						SetOwnableCarData(idx, OC_ANGLE, 		angle);

						strmid(g_ownable_car[idx][OC_NUMBER], "------", 0, 8, 8);

						SetOwnableCarData(idx, OC_ALARM, 		false);
						SetOwnableCarData(idx, OC_KEY_IN, 		false);

						SetOwnableCarData(idx, OC_CREATE, 		gettime());

						format(g_ownable_car[idx][OC_OWNER_NAME], 21, GetPlayerNameEx(playerid));
						// ----------------------------------------------------------------------------------------

						new vehicleid = CreateVehicle
						(
							GetOwnableCarData(idx, OC_MODEL_ID),
							GetOwnableCarData(idx, OC_POS_X),
							GetOwnableCarData(idx, OC_POS_Y),
							GetOwnableCarData(idx, OC_POS_Z),
							GetOwnableCarData(idx, OC_ANGLE),
							GetOwnableCarData(idx, OC_COLOR_1),
							GetOwnableCarData(idx, OC_COLOR_2),
							-1,
							0,
							VEHICLE_ACTION_TYPE_OWNABLE_CAR,
							idx
						);
						if(vehicleid != INVALID_VEHICLE_ID)
						{
							CreateVehicleLabel(vehicleid, GetOwnableCarData(idx, OC_NUMBER), 0xFFFF00EE, 0.0, 0.0, 1.3, 20.0);
							SetVehicleParam(vehicleid, V_LOCK, false);

							SetVehicleData(vehicleid, V_MILEAGE, 0.0);
						}

						SetPlayerData(playerid, P_OWNABLE_CAR, vehicleid);

						format
						(
							query, sizeof query,
							"INSERT INTO ownable_cars \
							(owner_id,model_id,color_1,color_2,pos_x,pos_y,pos_z,angle,create_time) \
							VALUES \
							('%d','%d','%d','%d','%f','%f','%f','%f','%d')",
							GetPlayerAccountID(playerid),
							modelid,
							color_1,
							color_2,
							pos_x,
							pos_y,
							pos_z,
							angle,
							gettime()
						);
						result = mysql_query(mysql, query, true);

						SetOwnableCarData(idx, OC_SQL_ID, cache_insert_id());

						cache_delete(result);

						AddPlayerData(playerid, P_COINS, -, 1000);
	    				UpdatePlayerDatabaseInt(playerid, "coins", GetPlayerData(playerid, P_COINS));

						SendClientMessage(playerid, 0x66CC00FF, "Поздравляем! Вы обменяли монеты на Автобус.");
						SendClientMessage(playerid, 0x66CC00FF, "Напишите {0099FF}/car {66CC00}чтобы узнать о возможностях");
						EnablePlayerGPS(playerid, 55, pos_x, pos_y, pos_z, "Местоположение Вашего транспорта отмечено на GPS");
					}
					case 2:
					{
					    if(Cars[car_3] <= 0) return Send(playerid,-1,"На складе нет данного транспорта!");

					    if(GetPlayerData(playerid, P_COINS) < 1000) return Send(playerid,-1,"У вас недостаточно монет!");
					    
					    new minus = Cars[car_3] -1;
					    mysql_format(mysql, str, 256, "UPDATE car_obmen SET car_3 = '%d'", minus);
         				mysql_query(mysql, str);

						Cars[car_3] = minus;

					    new modelid = 563, color_1 = 17, color_2 = 17;

					    new Float: pos_x = -335.7250;
						new Float: pos_y = 424.3185;
						new Float: pos_z = 12.2686;
						new Float: angle = 356.7986;

						new query[220],
							Cache: result,
							idx;

						idx = GetFreeOwnableCarID();

						SetOwnableCarData(idx, OC_OWNER_ID, 	GetPlayerAccountID(playerid));

						SetOwnableCarData(idx, OC_MODEL_ID, 	modelid);
						SetOwnableCarData(idx, OC_COLOR_1, 		color_1);
						SetOwnableCarData(idx, OC_COLOR_2, 		color_2);

						SetOwnableCarData(idx, OC_POS_X, 		pos_x);
						SetOwnableCarData(idx, OC_POS_Y, 		pos_y);
						SetOwnableCarData(idx, OC_POS_Z, 		pos_z);
						SetOwnableCarData(idx, OC_ANGLE, 		angle);

						strmid(g_ownable_car[idx][OC_NUMBER], "------", 0, 8, 8);

						SetOwnableCarData(idx, OC_ALARM, 		false);
						SetOwnableCarData(idx, OC_KEY_IN, 		false);

						SetOwnableCarData(idx, OC_CREATE, 		gettime());

						format(g_ownable_car[idx][OC_OWNER_NAME], 21, GetPlayerNameEx(playerid));
						// ----------------------------------------------------------------------------------------

						new vehicleid = CreateVehicle
						(
							GetOwnableCarData(idx, OC_MODEL_ID),
							GetOwnableCarData(idx, OC_POS_X),
							GetOwnableCarData(idx, OC_POS_Y),
							GetOwnableCarData(idx, OC_POS_Z),
							GetOwnableCarData(idx, OC_ANGLE),
							GetOwnableCarData(idx, OC_COLOR_1),
							GetOwnableCarData(idx, OC_COLOR_2),
							-1,
							0,
							VEHICLE_ACTION_TYPE_OWNABLE_CAR,
							idx
						);
						if(vehicleid != INVALID_VEHICLE_ID)
						{
							CreateVehicleLabel(vehicleid, GetOwnableCarData(idx, OC_NUMBER), 0xFFFF00EE, 0.0, 0.0, 1.3, 20.0);
							SetVehicleParam(vehicleid, V_LOCK, false);

							SetVehicleData(vehicleid, V_MILEAGE, 0.0);
						}

						SetPlayerData(playerid, P_OWNABLE_CAR, vehicleid);

						format
						(
							query, sizeof query,
							"INSERT INTO ownable_cars \
							(owner_id,model_id,color_1,color_2,pos_x,pos_y,pos_z,angle,create_time) \
							VALUES \
							('%d','%d','%d','%d','%f','%f','%f','%f','%d')",
							GetPlayerAccountID(playerid),
							modelid,
							color_1,
							color_2,
							pos_x,
							pos_y,
							pos_z,
							angle,
							gettime()
						);
						result = mysql_query(mysql, query, true);

						SetOwnableCarData(idx, OC_SQL_ID, cache_insert_id());

						cache_delete(result);

						AddPlayerData(playerid, P_COINS, -, 1000);
	    				UpdatePlayerDatabaseInt(playerid, "coins", GetPlayerData(playerid, P_COINS));

						SendClientMessage(playerid, 0x66CC00FF, "Поздравляем! Вы обменяли монеты на Пожарный вертолет.");
						SendClientMessage(playerid, 0x66CC00FF, "Напишите {0099FF}/car {66CC00}чтобы узнать о возможностях");
						EnablePlayerGPS(playerid, 55, pos_x, pos_y, pos_z, "Местоположение Вашего транспорта отмечено на GPS");
					}
					case 3:
					{
					    if(Cars[car_4] <= 0) return Send(playerid,-1,"На складе нет данного транспорта!");

					    if(GetPlayerData(playerid, P_COINS) < 1000) return Send(playerid,-1,"У вас недостаточно монет!");
					    
					    new minus = Cars[car_4] -1;
					    mysql_format(mysql, str, 256, "UPDATE car_obmen SET car_4 = '%d'", minus);
         				mysql_query(mysql, str);

						Cars[car_4] = minus;

					    new modelid = 597, color_1 = 17, color_2 = 17;

					    new Float: pos_x = -335.7250;
						new Float: pos_y = 424.3185;
						new Float: pos_z = 12.2686;
						new Float: angle = 356.7986;

						new query[220],
							Cache: result,
							idx;

						idx = GetFreeOwnableCarID();

						SetOwnableCarData(idx, OC_OWNER_ID, 	GetPlayerAccountID(playerid));

						SetOwnableCarData(idx, OC_MODEL_ID, 	modelid);
						SetOwnableCarData(idx, OC_COLOR_1, 		color_1);
						SetOwnableCarData(idx, OC_COLOR_2, 		color_2);

						SetOwnableCarData(idx, OC_POS_X, 		pos_x);
						SetOwnableCarData(idx, OC_POS_Y, 		pos_y);
						SetOwnableCarData(idx, OC_POS_Z, 		pos_z);
						SetOwnableCarData(idx, OC_ANGLE, 		angle);

						strmid(g_ownable_car[idx][OC_NUMBER], "------", 0, 8, 8);

						SetOwnableCarData(idx, OC_ALARM, 		false);
						SetOwnableCarData(idx, OC_KEY_IN, 		false);

						SetOwnableCarData(idx, OC_CREATE, 		gettime());

						format(g_ownable_car[idx][OC_OWNER_NAME], 21, GetPlayerNameEx(playerid));
						// ----------------------------------------------------------------------------------------

						new vehicleid = CreateVehicle
						(
							GetOwnableCarData(idx, OC_MODEL_ID),
							GetOwnableCarData(idx, OC_POS_X),
							GetOwnableCarData(idx, OC_POS_Y),
							GetOwnableCarData(idx, OC_POS_Z),
							GetOwnableCarData(idx, OC_ANGLE),
							GetOwnableCarData(idx, OC_COLOR_1),
							GetOwnableCarData(idx, OC_COLOR_2),
							-1,
							0,
							VEHICLE_ACTION_TYPE_OWNABLE_CAR,
							idx
						);
						if(vehicleid != INVALID_VEHICLE_ID)
						{
							CreateVehicleLabel(vehicleid, GetOwnableCarData(idx, OC_NUMBER), 0xFFFF00EE, 0.0, 0.0, 1.3, 20.0);
							SetVehicleParam(vehicleid, V_LOCK, false);

							SetVehicleData(vehicleid, V_MILEAGE, 0.0);
						}

						SetPlayerData(playerid, P_OWNABLE_CAR, vehicleid);

						format
						(
							query, sizeof query,
							"INSERT INTO ownable_cars \
							(owner_id,model_id,color_1,color_2,pos_x,pos_y,pos_z,angle,create_time) \
							VALUES \
							('%d','%d','%d','%d','%f','%f','%f','%f','%d')",
							GetPlayerAccountID(playerid),
							modelid,
							color_1,
							color_2,
							pos_x,
							pos_y,
							pos_z,
							angle,
							gettime()
						);
						result = mysql_query(mysql, query, true);

						SetOwnableCarData(idx, OC_SQL_ID, cache_insert_id());

						cache_delete(result);

						AddPlayerData(playerid, P_COINS, -, 1000);
	    				UpdatePlayerDatabaseInt(playerid, "coins", GetPlayerData(playerid, P_COINS));

						SendClientMessage(playerid, 0x66CC00FF, "Поздравляем! Вы обменяли монеты на Полицейскую машину.");
						SendClientMessage(playerid, 0x66CC00FF, "Напишите {0099FF}/car {66CC00}чтобы узнать о возможностях");
						EnablePlayerGPS(playerid, 55, pos_x, pos_y, pos_z, "Местоположение Вашего транспорта отмечено на GPS");
					}
					case 4:
					{
					    if(Cars[car_5] <= 0) return Send(playerid,-1,"На складе нет данного транспорта!");

					    if(GetPlayerData(playerid, P_COINS) < 3000) return Send(playerid,-1,"У вас недостаточно монет!");
					    
					    new minus = Cars[car_5] -1;
					    mysql_format(mysql, str, 256, "UPDATE car_obmen SET car_5 = '%d'", minus);
         				mysql_query(mysql, str);
         				
						Cars[car_5] = minus;

					    new modelid = 444, color_1 = 17, color_2 = 17;

					    new Float: pos_x = -335.7250;
						new Float: pos_y = 424.3185;
						new Float: pos_z = 12.2686;
						new Float: angle = 356.7986;

						new query[220],
							Cache: result,
							idx;

						idx = GetFreeOwnableCarID();

						SetOwnableCarData(idx, OC_OWNER_ID, 	GetPlayerAccountID(playerid));

						SetOwnableCarData(idx, OC_MODEL_ID, 	modelid);
						SetOwnableCarData(idx, OC_COLOR_1, 		color_1);
						SetOwnableCarData(idx, OC_COLOR_2, 		color_2);

						SetOwnableCarData(idx, OC_POS_X, 		pos_x);
						SetOwnableCarData(idx, OC_POS_Y, 		pos_y);
						SetOwnableCarData(idx, OC_POS_Z, 		pos_z);
						SetOwnableCarData(idx, OC_ANGLE, 		angle);

						strmid(g_ownable_car[idx][OC_NUMBER], "------", 0, 8, 8);

						SetOwnableCarData(idx, OC_ALARM, 		false);
						SetOwnableCarData(idx, OC_KEY_IN, 		false);

						SetOwnableCarData(idx, OC_CREATE, 		gettime());

						format(g_ownable_car[idx][OC_OWNER_NAME], 21, GetPlayerNameEx(playerid));
						// ----------------------------------------------------------------------------------------

						new vehicleid = CreateVehicle
						(
							GetOwnableCarData(idx, OC_MODEL_ID),
							GetOwnableCarData(idx, OC_POS_X),
							GetOwnableCarData(idx, OC_POS_Y),
							GetOwnableCarData(idx, OC_POS_Z),
							GetOwnableCarData(idx, OC_ANGLE),
							GetOwnableCarData(idx, OC_COLOR_1),
							GetOwnableCarData(idx, OC_COLOR_2),
							-1,
							0,
							VEHICLE_ACTION_TYPE_OWNABLE_CAR,
							idx
						);
						if(vehicleid != INVALID_VEHICLE_ID)
						{
							CreateVehicleLabel(vehicleid, GetOwnableCarData(idx, OC_NUMBER), 0xFFFF00EE, 0.0, 0.0, 1.3, 20.0);
							SetVehicleParam(vehicleid, V_LOCK, false);

							SetVehicleData(vehicleid, V_MILEAGE, 0.0);
						}

						SetPlayerData(playerid, P_OWNABLE_CAR, vehicleid);

						format
						(
							query, sizeof query,
							"INSERT INTO ownable_cars \
							(owner_id,model_id,color_1,color_2,pos_x,pos_y,pos_z,angle,create_time) \
							VALUES \
							('%d','%d','%d','%d','%f','%f','%f','%f','%d')",
							GetPlayerAccountID(playerid),
							modelid,
							color_1,
							color_2,
							pos_x,
							pos_y,
							pos_z,
							angle,
							gettime()
						);
						result = mysql_query(mysql, query, true);

						SetOwnableCarData(idx, OC_SQL_ID, cache_insert_id());

						cache_delete(result);

						AddPlayerData(playerid, P_COINS, -, 3000);
	    				UpdatePlayerDatabaseInt(playerid, "coins", GetPlayerData(playerid, P_COINS));

						SendClientMessage(playerid, 0x66CC00FF, "Поздравляем! Вы обменяли монеты на Монстер.");
						SendClientMessage(playerid, 0x66CC00FF, "Напишите {0099FF}/car {66CC00}чтобы узнать о возможностях");
						EnablePlayerGPS(playerid, 55, pos_x, pos_y, pos_z, "Местоположение Вашего транспорта отмечено на GPS");
					}
				}
			}
			
			case DIALOG_QUEST_OPEN:
			{
			    if(!response) return 1;

			    switch(list_id-1)
				{
					case 0: ShowPlayerQuestMenu(playerid);
					case 1: ShowPlayerQuestMenuFrac(playerid);

				}
			}
			case DIALOG_YTPROMO_ACTIVATE:
			{
			    /*if(GetPlayerLevel(playerid) < 12)
					return SendClientMessage(playerid, 0xCECECEFF, "Активировать ютуберский промокод можно с 12 игрового уровня (/menu > статистика)");*/

				if(response)
				{
					if(!strlen(inputtext))
					{
						callcmd::ytpromo(playerid, "");

						return 1;
					}

					new query[256],
						Cache: result,
						rows,
						type,
						amount,
						paydays,
						usings;

					mysql_format(mysql, query, sizeof query, "SELECT 1 FROM ytpromocode_activations WHERE uip='%e' AND code='%s'", GetPlayerIpEx(playerid), inputtext);
					result = mysql_query(mysql, query, true);
					rows = cache_num_rows();
					cache_delete(result);
					if (rows >= 5) {
						SendClientMessage(playerid, 0x3399FFFF, "Ограничение на активацию");
						return 1;
					}

					mysql_format(mysql, query, sizeof query, "SELECT * FROM ytpromocode_activations WHERE uid='%d' AND code='%s'", GetPlayerAccountID(playerid), inputtext);
					result = mysql_query(mysql, query, true);
					rows = cache_num_rows();

					if(rows)
					{
						//type = cache_get_field_content_int(0, "type");
						paydays = cache_get_field_content_int(0, "paydays");

						format(query, sizeof query, "Вы уже активировали этот промокод");

						if(paydays)
							format(query, sizeof query, "%s. Вы получите свой приз через %d PayDay", query, paydays);





						SendClientMessage(playerid, 0x1E90FFFF, query);

						cache_delete(result);

						return 1;
					}

					cache_delete(result);

					mysql_format(mysql, query, sizeof query, "SELECT * FROM ytpromocode WHERE code='%s' AND usings > 0", inputtext);
					result = mysql_query(mysql, query, true);

					rows = cache_num_rows();

					if(rows)
					{
				 		type = cache_get_field_content_int(0, "type");
						amount = cache_get_field_content_int(0, "amount");
						usings = cache_get_field_content_int(0, "usings");
						paydays = cache_get_field_content_int(0, "paydays");
					}

					cache_delete(result);

					if(!rows)
					{
						SendClientMessage(playerid, 0xCECECEFF, "Введенный промокод не существует");
						callcmd::ytpromo(playerid, "");

						return 1;
					}

					if(usings > 0)
					{
						if(!paydays)
						{
							AddPlayerData(playerid, promo_info[type][P_DATA], +, amount);
							UpdatePlayerDatabaseInt(playerid, promo_info[type][P_SQL_NAME], GetPlayerData(playerid, promo_info[type][P_DATA]));

							if(!strcmp(promo_info[type][P_SQL_NAME], "bank"))
							{
								SendClientMessage(playerid, 0x999999FF, "Деньги были зачислены на банковский счёт");
							}
						}

						format(query, sizeof query, "Вы активировали промокод \"%s\"", inputtext);

						if(paydays > 0)
							format(query, sizeof query, "%s. Вы получите свой приз через %d PayDay", query, paydays);

						SendClientMessage(playerid, 0x66CC33FF, query);

						mysql_format(mysql, query, sizeof query, "UPDATE ytpromocode SET usings='%d' WHERE code='%s'", usings - 1, inputtext);
						mysql_query(mysql, query, false);

						mysql_format(mysql, query, sizeof query, "INSERT INTO ytpromocode_activations (uid,uip,code,paydays) VALUES (%d,'%e','%e',%d)", GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), inputtext, paydays);
						mysql_query(mysql, query, false);

					}
					else
					{
						SendClientMessage(playerid, 0xCECECEFF, "Лимит использования промокода исчерпан");
						callcmd::ytpromo(playerid, "");
					}
				}
			}
			case DIALOG_YTPROMO_CREATE:
			{
				if(response)
				{
					new code[32], type, amount, usings = 100000, paydays = 0;

					if(sscanf(inputtext, "P<,>s[32]dddd", code, type, amount))
					{
						SendClientMessage(playerid, 0xCECECEFF, "Некорректный ввод");
						callcmd::createytpromo(playerid, "");

						return 1;
					}
					else
					{
						if(!(0 <= type <= 2))
						{
							SendClientMessage(playerid, 0xCECECEFF, "Тип должен быть от 0 до 2");
							callcmd::createytpromo(playerid, "");

							return 1;
						}

						if(!(1 <= amount <= 10_000_000))
						{
							SendClientMessage(playerid, 0xCECECEFF, "Количество должно быть от 1 до 10.000.000");
							callcmd::createytpromo(playerid, "");

							return 1;
						}


						new query[128],
							Cache: result,
							rows;

						mysql_format(mysql, query, sizeof query, "SELECT * FROM ytpromocode WHERE code='%s'", code);
						result = mysql_query(mysql, query, true);

						rows = cache_num_rows();

						cache_delete(result);

						if(rows)
						{
							SendClientMessage(playerid, 0xCECECEFF, "Такой промокод уже есть в базе данных");
							callcmd::createytpromo(playerid, "");

							return 1;
						}

						mysql_format(mysql, query, sizeof query, "INSERT INTO ytpromocode (code, type, amount, usings, paydays) VALUES ('%s', %d, %d, %d, %d)",
						code, type, amount, usings, paydays);

						mysql_query(mysql, query);

						format(query, sizeof query, "YT-Промокод \"%s\" создан (Тип: %s, Количество: %d)", code, promo_info[type][P_NAME], amount);
						SendClientMessage(playerid, 0x66CC33FF, query);
					}
				}
			}
			case DIALOG_MTOP:
		    {
		        MtopMenu(playerid);
		    }
		    case DIALOG_MTOP_MENU:
		    {
		        if(!response) return 1;
		        switch(list_id)
		        {
		            case 1: callcmd::top_salary_new_work(playerid);
		            case 2: callcmd::top_salary_gos_work(playerid);
		            case 3: callcmd::top_payday(playerid);
		            case 4: callcmd::top_progress(playerid);
		            case 5: callcmd::top_quest(playerid);
		        }
		    }
		    case DIALOG_BOOMBOX_MENU:
		    {
				switch(listitem)
		  		{
		  		    case 0:
		      		{
		      		    new green_zone_id = GetPVarInt(playerid, "player_in_green_zone") - 1;

						if(green_zone_id != -1)
						{
							new fmt_text[144];

							format(fmt_text, sizeof fmt_text, "На территории {FFFF00}'%s' {1E90FF}нельзя пользоваться BoomBox. Выберите другое место!", g_green_zones[green_zone_id][GZ_NAME]);
							SendClientMessage(playerid, 0x1E90FFFF, fmt_text);

							return 1;
						}
						else
		      		    	callcmd::placeboomboxx(playerid, "");
		            }
		    		case 1:
		      		{
		      		    if(GetPVarType(playerid, "PlacedBB"))
						{
							if(IsPlayerInRangeOfPoint(playerid, 3.0, GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ")))
							{
		      		    		callcmd::placeboomboxxx(playerid, "");
                            }
							else
							{
					   			return SendClientMessage(playerid, -1, "Вы далеко от своего BoomBox!");
							}
					    }
					    else
					    {
					        SendClientMessage(playerid, -1, "Вы не поставили BoomBox!");
						}
		            }
		            case 2:
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
							if(IsPlayerInRangeOfPoint(playerid, 3.0, GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ")))
							{
		                		callcmd::setboomboxx(playerid, "");
                            }
							else
							{
					   			return SendClientMessage(playerid, -1, "Вы далеко от своего BoomBox!");
							}
					    }
					    else
					    {
					        SendClientMessage(playerid, -1, "Вы не поставили BoomBox!");
						}
		            }
		            case 3:
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
							if(IsPlayerInRangeOfPoint(playerid, 3.0, GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ")))
							{
				                if(GetPVarType(playerid, "BBArea"))
							    {
							        new string[128], pName[MAX_PLAYER_NAME];
							        GetPlayerName(playerid, pName, sizeof(pName));
									format(string, sizeof(string), "* %s выключил BoomBox.", pName);
									SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
							        foreach(Player, i)
									{
							            if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
							            {
							                StopStream(i);
										}
									}
							        DeletePVar(playerid, "BBStation");
								}
								SendClientMessage(playerid, COR_QUEST, "[Успешно]: "c_b"Вы успешно выключили BoomBox!");
                            }
							else
							{
					   			return SendClientMessage(playerid, -1, "Вы далеко от своего BoomBox!");
							}
					    }
					    else
					    {
					        SendClientMessage(playerid, -1, "Вы не поставили BoomBox!");
						}
		            }
		        }
				return 1;
			}
		    case DIALOG_BOOMBOX:
		    {
		    	/*if(!response)
		     	{
		            SendClientMessage(playerid, COLOR_WHITE, " You cancel the Radio Station");
		        	return 1;
		        }*/
				switch(listitem)
		  		{
		  		    case 0:
		      		{
		      		    Dialog(playerid,DIALOG_BOOMBOX0,DIALOG_STYLE_LIST,"Радиостанции",
						  "Russia Radio\n\
			   		      Radio Europa Plus\n\
			 		      Radio Hit FM\n\
					      Radio Record\n\
					      Radio D-FM\n\
					      Comedy Radio",
						  "Включить","Закрыть");
		            }
		    		case 1:
		      		{
		      		    Dialog(playerid,DIALOG_BOOMBOX1,DIALOG_STYLE_LIST,"Макс Корж",
						  "Макс Корж - Оптимист\n\
			   		      Макс Корж - Пролетарка\n\
			 		      Макс Корж - Контрольный\n\
					      Макс Корж - Шантаж\n\
					      Макс Корж - 2 типа людей\n\
					      Макс Корж - Разнесем\n\
					      Макс Корж - Малолетка\n\
					      Макс Корж - Времена\n\
					      Макс Корж - Тепло\n\
					      Макс Корж - Её виной",
						  "Включить","Закрыть");
		            }
		            case 2:
		            {
		                Dialog(playerid,DIALOG_BOOMBOX2,DIALOG_STYLE_LIST,"Miyagi & Эндшпиль",
						"Miyagi & Эндшпиль - Фея\n\
						Miyagi & Эндшпиль feat. N.E.R.A.K. - Именно та\n\
						Miyagi & Эндшпиль - Бонни\n\
						Miyagi & Эндшпиль - Marlboro\n\
						Miyagi & Эндшпиль - Мой Babylon\n\
						Miyagi & Эндшпиль feat. Рем Дигга - I Got Love\n\
						Miyagi & Эндшпиль - Малиновый рассвет\n\
						Miyagi & Эндшпиль - Рапапапапам\n\
						Miyagi & Эндшпиль - Utopia\n\
						Miyagi & Эндшпиль - All the Time",
						"Включить","Закрыть");
		            }
		            case 3:
		            {
		                Dialog(playerid,DIALOG_BOOMBOX3,DIALOG_STYLE_LIST,"Канги",
						"Канги - Возьми сердце моё\n\
						Канги - Эйя\n\
						Канги - Вали\n\
						Канги - Просто услышь меня\n\
						Канги - Жить не запретишь\n\
						Канги - Собака",
						"Включить","Закрыть");
		            }
		            case 4:
		            {
		                Dialog(playerid,DIALOG_BOOMBOX4,DIALOG_STYLE_LIST,"MORGENSHTERN",
						"MORGENSHTERN - Cristal & Моёт\n\
						MORGENSHTERN & Lil Pump - WATAFUK?!\n\
						MORGENSHTERN  & Тимати - El Problema\n\
						MORGENSHTERN & Элджей - Lollipop\n\
						MORGENSHTERN - ICE\n\
						MORGENSHTERN & Элджей - Cadillac\n\
						MORGENSHTERN - Пососи\n\
						MORGENSHTERN & Клава Кока - Мне пох\n\
						MORGENSHTERN - Yung Hefner\n\
						MORGENSHTERN - Новый Мерин",
						"Включить","Закрыть");
					}
					case 5:
					{
					    Dialog(playerid,DIALOG_BOOMBOX5,DIALOG_STYLE_LIST,"Slava Marlow",
						"Slava Marlow - \n\
						Slava Marlow - \n\
						Slava Marlow - \n\
						Slava Marlow - \n\
						Slava Marlow - \n\
						Slava Marlow - \n\
						Slava Marlow - \n\
						Slava Marlow - \n\
						Slava Marlow - \n\
						Slava Marlow - ",
						"Включить","Закрыть");
					}
					case 6:
					{
					    Dialog(playerid,DIALOG_BOOMBOX6,DIALOG_STYLE_LIST,"Country","181 Kicking Country\nAbsolute Country Radio","Select","Cancel");
					}
					case 7:
					{
					    Dialog(playerid,DIALOG_BOOMBOX7,DIALOG_STYLE_INPUT, "Boombox Input URL", "Please put a Music URL to play the Music", "Play", "Cancel");
					}
					case 8:
					{
		                if(GetPVarType(playerid, "BBArea"))
					    {
					        new string[128], pName[MAX_PLAYER_NAME];
					        GetPlayerName(playerid, pName, sizeof(pName));
							format(string, sizeof(string), "* %s has turned off their boombox.", pName);
							SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
					        foreach(Player, i)
							{
					            if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
					            {
					                StopStream(i);
								}
							}
					        DeletePVar(playerid, "BBStation");
						}
						SendClientMessage(playerid, COLOR_WHITE, "Вы выключили бумбокс");
					}
		        }
				return 1;
			}
			case DIALOG_BOOMBOX0://RAP
			{
			    /*if(!response)
			    {
		     		Dialog(playerid,DIALOG_BOOMBOX,DIALOG_STYLE_LIST,"Radio List","Jazz\nPop\nRap\nR&B and Urban\nRock\nCountry\nEnter URL\nTurn Off Boombox","Select", "Cancel");
				}*/
				if(response)
		        {
		            if(listitem == 0)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://rusradio.hostingradio.ru/rusradio128.mp3", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://rusradio.hostingradio.ru/rusradio128.mp3");
						}
					}
					if(listitem == 1)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://ep256.streamr.ru", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://ep256.streamr.ru");
						}
					}
					if(listitem == 2)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://hitfm.hostingradio.ru/hitfm128.mp3", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://hitfm.hostingradio.ru/hitfm128.mp3");
						}
					}
					if(listitem == 3)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://online.radiorecord.ru:8101/rr_128", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://online.radiorecord.ru:8101/rr_128");
						}
					}
					if(listitem == 4)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://dfm.hostingradio.ru/dfm128.mp3", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://dfm.hostingradio.ru/dfm128.mp3");
						}
					}
					if(listitem == 5)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://ic7.101.ru:8000/s60", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://ic7.101.ru:8000/s60");
						}
					}
				}
				return 1;
			}
			case DIALOG_BOOMBOX1:
			{
			    /*if(!response)
			    {
		     		Dialog(playerid,DIALOG_BOOMBOX,DIALOG_STYLE_LIST,"Radio List","Jazz\nPop\nRap\nR&B and Urban\nRock\nCountry\nEnter URL\nTurn Off Boombox","Select", "Cancel");
				}*/
				if(response)
		        {
		            if(listitem == 0)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://dl.muzonovs.ru/uploads/files/2017-11/1510124704_maks-korzh-optimist-www_muzonov_net.mp3", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://dl.muzonovs.ru/uploads/files/2017-11/1510124704_maks-korzh-optimist-www_muzonov_net.mp3");
						}
					}
				 	if(listitem == 1)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://dl.muzonovs.ru/uploads/files/2018-09/1536354039_1536349123_maks-korzh-proletarka.mp3", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://dl.muzonovs.ru/uploads/files/2018-09/1536354039_1536349123_maks-korzh-proletarka.mp3");
						}
					}
					if(listitem == 2)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://dl.muzonovs.ru/uploads/files/2019-04/1554531411_maks-korzh-kontrolnyy-2019-muzonov_net.mp3", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://dl.muzonovs.ru/uploads/files/2019-04/1554531411_maks-korzh-kontrolnyy-2019-muzonov_net.mp3");
						}
					}
					if(listitem == 3)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://dl.muzonovs.ru/uploads/files/2019-06/1560371089_maks-korzh-shantazh.mp3", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://dl.muzonovs.ru/uploads/files/2019-06/1560371089_maks-korzh-shantazh.mp3");
						}
					}
					if(listitem == 4)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://dl.muzonovs.ru/uploads/files/2019-08/1566462500_maks-korzh-2-tipa-lyudey.mp3", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://dl.muzonovs.ru/uploads/files/2019-08/1566462500_maks-korzh-2-tipa-lyudey.mp3");
						}
					}
					if(listitem == 5)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://dl.muzonovs.ru/uploads/files/2020-01/1580430900_maks-korzh-raznesem-2020.mp3", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://dl.muzonovs.ru/uploads/files/2020-01/1580430900_maks-korzh-raznesem-2020.mp3");
						}
					}
					if(listitem == 6)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://dl.muzonovs.ru/uploads/files/2019-12/1577676930_maks-korzh-maloletka.mp3", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://dl.muzonovs.ru/uploads/files/2019-12/1577676930_maks-korzh-maloletka.mp3");
						}
					}
					if(listitem == 7)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://dl.muzonovs.ru/files/music/2020/08/maks-korzh-vremena.mp3", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://dl.muzonovs.ru/files/music/2020/08/maks-korzh-vremena.mp3");
						}
					}
					if(listitem == 8)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://dl.muzonovs.ru/files/music/2020/08/maks-korzh-teplo.mp3", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://dl.muzonovs.ru/files/music/2020/08/maks-korzh-teplo.mp3");
						}
					}
					if(listitem == 9)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://dl.muzonovs.ru/files/music/2020/10/maks-korzh-eyo-vinoj.mp3", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://dl.muzonovs.ru/files/music/2020/10/maks-korzh-eyo-vinoj.mp3");
						}
					}
				}
				return 1;
			}
			case DIALOG_BOOMBOX2:
			{
			    /*if(!response)
			    {
		            Dialog(playerid,DIALOG_BOOMBOX,DIALOG_STYLE_LIST,"Radio List","Jazz\nPop\nRap\nR&B and Urban\nRock\nCountry\nEnter URL\nTurn Off Boombox","Select", "Cancel");
				}*/
				if(response)
		        {
		            if(listitem == 0)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://dl.muzonovs.ru/files/music/2021/01/miyagi-miyagi-endshpil-feya.mp3", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://dl.muzonovs.ru/files/music/2021/01/miyagi-miyagi-endshpil-feya.mp3");
						}
					}
					if(listitem == 1)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://dl.muzonovs.ru/uploads/files/2019-04/1555686984_miyagi-amp-endshpil-n_e_r_a_k_-imenno-ta-2018-muzonov_net.mp3", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://dl.muzonovs.ru/uploads/files/2019-04/1555686984_miyagi-amp-endshpil-n_e_r_a_k_-imenno-ta-2018-muzonov_net.mp3");
						}
					}
					if(listitem == 2)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://dl.muzonovs.ru/files/music/2021/01/miyagi-bonni-feat-endshpil.mp3", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://dl.muzonovs.ru/files/music/2021/01/miyagi-bonni-feat-endshpil.mp3");
						}
					}
					if(listitem == 3)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://dl.muzonovs.ru/uploads/files/2019-06/1561112728_miyagi-marlboro.mp3", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://dl.muzonovs.ru/uploads/files/2019-06/1561112728_miyagi-marlboro.mp3");
						}
					}
					if(listitem == 4)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://dl.muzonovs.ru/files/music/2020/04/endshpil-moj-babylon.mp3", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://dl.muzonovs.ru/files/music/2020/04/endshpil-moj-babylon.mp3");
						}
					}
					if(listitem == 5)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://dl.muzonovs.ru/files/music/2020/03/miyagi-i-got-love.mp3", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://dl.muzonovs.ru/files/music/2020/03/miyagi-i-got-love.mp3");
						}
					}
					if(listitem == 6)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://dl.muzonovs.ru/files/music/2020/08/miyagi-endshpil-malinovyj-rassvet.mp3", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://dl.muzonovs.ru/files/music/2020/08/miyagi-endshpil-malinovyj-rassvet.mp3");
						}
					}
					if(listitem == 7)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://dl.muzonovs.ru/files/music/2020/05/endshpil-rapapapapam.mp3", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://dl.muzonovs.ru/files/music/2020/05/endshpil-rapapapapam.mp3");
						}
					}
					if(listitem == 8)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://dl.muzonovs.ru/files/music/2020/04/miyagi-andy-panda-utopia-miyagi-andy-panda.mp3", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://dl.muzonovs.ru/files/music/2020/04/miyagi-andy-panda-utopia-miyagi-andy-panda.mp3");
						}
					}
					if(listitem == 9)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://dl.muzonovs.ru/files/music/2020/12/miyagi-all-the-time.mp3", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://dl.muzonovs.ru/files/music/2020/12/miyagi-all-the-time.mp3");
						}
					}
				}
				return 1;
			}
			case DIALOG_BOOMBOX3://RAP
			{
			    /*if(!response)
			    {
		     		Dialog(playerid,DIALOG_BOOMBOX,DIALOG_STYLE_LIST,"Radio List","Jazz\nPop\nRap\nR&B and Urban\nRock\nCountry\nEnter URL\nTurn Off Boombox","Select", "Cancel");
				}*/
				if(response)
		        {
		            if(listitem == 0)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://dl.muzonovs.ru/files/music/2021/02/kangi-vozmi-serdce-moe.mp3", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://dl.muzonovs.ru/files/music/2021/02/kangi-vozmi-serdce-moe.mp3");
						}
					}
					if(listitem == 1)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://dl.muzonovs.ru/files/music/2021/01/kangi-ejya-ejya-ejya-jo.mp3", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://dl.muzonovs.ru/files/music/2021/01/kangi-ejya-ejya-ejya-jo.mp3");
						}
					}
					if(listitem == 2)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://dl.muzonovs.ru/files/music/2020/08/kangi-vali-original.mp3", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://dl.muzonovs.ru/files/music/2020/08/kangi-vali-original.mp3");
						}
					}
					if(listitem == 3)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://dl.muzonovs.ru/files/music/2020/04/kangi-prosto-uslysh-menya-a-moya-lyubov-samaya-chistaya.mp3", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://dl.muzonovs.ru/files/music/2020/04/kangi-prosto-uslysh-menya-a-moya-lyubov-samaya-chistaya.mp3");
						}
					}
					if(listitem == 4)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://dl.muzonovs.ru/files/music/2021/03/zhit-ne-zapretish-kangi.mp3", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://dl.muzonovs.ru/files/music/2021/03/zhit-ne-zapretish-kangi.mp3");
						}
					}
					if(listitem == 5)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://dl.muzonovs.ru/files/music/2020/04/kangi-kangi-sobaka.mp3", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://dl.muzonovs.ru/files/music/2020/04/kangi-kangi-sobaka.mp3");
						}
					}
				}
				return 1;
			}
			case DIALOG_BOOMBOX4://HIP HOP
			{
			    if(!response)
			    {
		     		Dialog(playerid,DIALOG_BOOMBOX,DIALOG_STYLE_LIST,"Radio List","Jazz\nPop\nRap\nR&B and Urban\nRock\nCountry\nEnter URL\nTurn Off Boombox","Select", "Cancel");
				}
				if(response)
		        {
		            if(listitem == 0)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=32999", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=32999");
						}
					}
					if(listitem == 1)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=105867", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=105867");
						}
					}
				}
				return 1;
			}
			case DIALOG_BOOMBOX5://ROCK
			{
			    if(!response)
			    {
		     		Dialog(playerid,DIALOG_BOOMBOX,DIALOG_STYLE_LIST,"Radio List","Jazz\nPop\nRap\nR&B and Urban\nRock\nCountry\nEnter URL\nTurn Off Boombox","Select", "Cancel");
				}
				if(response)
		        {
		            if(listitem == 0)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=785339", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=785339");
						}
					}
		   			if(listitem == 1)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=19275", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=19275");
						}
					}
				}
				return 1;
			}
			case DIALOG_BOOMBOX6://COUNTRY
			{
			    if(!response)
			    {
			       Dialog(playerid,DIALOG_BOOMBOX,DIALOG_STYLE_LIST,"Radio List","Jazz\nPop\nRap\nR&B and Urban\nRock\nCountry\nEnter URL\nTurn Off Boombox","Select", "Cancel");
				}
				if(response)
		        {
		            if(listitem == 0)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=71887", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=71887");
						}
					}
		   			if(listitem == 1)
		            {
		                if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=34839", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=34839");
						}
					}
				}
				return 1;
			}
			case DIALOG_BOOMBOX7://SET URL
			{
				if(response == 1)
				{
				    if(isnull(inputtext))
				    {
				        SendClientMessage(playerid, COLOR_WHITE, "You did not enter anything" );
				        return 1;
				    }
				    if(strlen(inputtext))
				    {
				        if(GetPVarType(playerid, "PlacedBB"))
						{
						    foreach(Player, i)
							{
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
								{
									PlayStream(i, inputtext, GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						  		}
						  	}
					  		SetPVarString(playerid, "BBStation", inputtext);
						}
					}
				}
				else
				{
				    return 1;
				}
			}
		    case 30000:
		    {
		        if(!response) return 1;
		        if(!(2 <= strlen(inputtext) <= 6))
				{
					Dialog(playerid, 30000,DIALOG_STYLE_INPUT,"Создать собеседование","Введите время, на которое вы хотите назначить собеседование\n\n{FF0000}Разрешено вводить время от 2-х до 6 символов!","Ввести","Закрыть");
					return 1;
				}
				for(new i = strlen(inputtext); i != 0; --i)
				{
		            switch(inputtext[i])
		            {
		                    case 'A'..'Z', 'А'..'Я','a'..'z', 'а'..'я' :
		                    return Dialog(playerid, 30000,DIALOG_STYLE_INPUT,"Создать собеседование","Введите время, на которое вы хотите назначить собеседование\n\n{FF0000}Разрешено вводить только цифры!","Ввести","Закрыть");
		            }
				}
				switch(GetPlayerTeamEx(playerid))
				{
					case TEAM_ARMY: format(interview[TEAM_ARMY][text_time],15,"%s",inputtext);
					case TEAM_GOVERNMENT: format(interview[TEAM_GOVERNMENT][text_time],15,"%s",inputtext);
					case TEAM_DPS: format(interview[TEAM_DPS][text_time],15,"%s",inputtext);
					case TEAM_RADIO: format(interview[TEAM_RADIO][text_time],15,"%s",inputtext);
					case TEAM_HOSPITAL: format(interview[TEAM_HOSPITAL][text_time],15,"%s",inputtext);
					case TEAM_FBI: format(interview[TEAM_FBI][text_time], 15,"%s",inputtext);
					case TEAM_PPS: format(interview[TEAM_PPS][text_time], 15,"%s",inputtext);
				}
				Dialog(playerid, 30001, DIALOG_STYLE_INPUT,"Создать собеседование","Введите критерии, которые вам необходимы","Ввести","Закрыть");
		    }
		    case 30001:
		    {
		        if(!response)
				{
				    switch(GetPlayerTeamEx(playerid))
				    {
				        case TEAM_DPS: interview[TEAM_DPS][text_time] = EOS;
				        case TEAM_FBI: interview[TEAM_FBI][text_time] = EOS;
				        case TEAM_ARMY: interview[TEAM_ARMY][text_time] = EOS;
				        case TEAM_HOSPITAL: interview[TEAM_HOSPITAL][text_time] = EOS;
				        case TEAM_GOVERNMENT: interview[TEAM_GOVERNMENT][text_time] = EOS;
				        case TEAM_RADIO: interview[TEAM_RADIO][text_time] = EOS;
				        case TEAM_PPS: interview[TEAM_PPS][text_time] = EOS;
				    }
					return 1;
				}
		        if(!(2 <= strlen(inputtext) <= 70))
				{
					Dialog(playerid, 30001, DIALOG_STYLE_INPUT,"Создать собеседование","Введите критерии, которые вам необходимы\n\n{FF0000}Разрешено вводить от 2-х до 70 символов!","Ввести","Закрыть");
					return 1;
				}
				switch(GetPlayerTeamEx(playerid))
				{
				    case TEAM_ARMY: format(interview[TEAM_ARMY][text_crit], 100,"%s",inputtext);
				    case TEAM_GOVERNMENT: format(interview[TEAM_GOVERNMENT][text_crit],100,"%s",inputtext);
				    case TEAM_DPS: format(interview[TEAM_DPS][text_crit], 100,"%s",inputtext);
				    case TEAM_HOSPITAL: format(interview[TEAM_HOSPITAL][text_crit],100,"%s", inputtext);
				    case TEAM_RADIO: format(interview[TEAM_HOSPITAL][text_crit],100,"%s",inputtext);
				    case TEAM_FBI: format(interview[TEAM_FBI][text_crit], 100,"%s",inputtext);
				    case TEAM_PPS: format(interview[TEAM_PPS][text_crit], 100,"%s",inputtext);
				}
				SendClientMessage(playerid, -1,"{FFFF00}[Информация]{FFFFFF} Собеседование успешно создано!");
				return 1;
		    }
		    
			// -----------------------------------------------------------------
			case DIALOG_GPS:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case 1:
						{
							Dialog
							(
								playerid, DIALOG_GPS_PUBLIC_PLACES, DIALOG_STYLE_LIST,
								"{FFCC00}Общественные места",
								"1. Автошкола\n\
								2. Военкомат\n\
								3. Авторынок эконом класса\n\
								4. Авторынок среднего класса\n\
								5. Авторынок премиум класса\n\
								6. Мото-Вело рынок",
								"Отметить", "Назад"
							);
						}
						case 2:
						{
							Dialog
							(
								playerid, DIALOG_GPS_TRANSPORT, DIALOG_STYLE_LIST,
								"{FFCC00}Транспортные узлы",
								"1. Стоянка автобусов\n\
								2. Стоянка такси | Бытырево\n\
								3. Стоянка такси | Эдово\n\
								4. Стоянка такси | Арзамас\n\
								5. Стоянка такси | Лыткарино",
								"Отметить", "Назад"
							);
						}
						case 3:
						{
							Dialog
							(
								playerid, DIALOG_GPS_STATE_ORGANIZATIONS, DIALOG_STYLE_LIST,
								"{FFCC00}Государственные организации",
								"1. Правительство области\n\
								2. Отдел полиции №1 (ГИБДД)\n\
								3. Отдел полиции №2 (УМВД)\n\
								4. ФСБ\n\
								5. Больница\n\
								6. ГТРК «Ритм»\n\
								7. Воинская часть",
								"Отметить", "Назад"
							);
						}
						case 4:
						{
							Dialog
							(
								playerid, DIALOG_GPS_GANGS, DIALOG_STYLE_LIST,
								"{FFCC00}Базы преступных группировок",
								"1. Арзамасская ОПГ\n\
								2. Батыревская ОПГ\n\
								3. Лыткаринская ОПГ",
								"Отметить", "Назад"
							);
						}
						case 5:
						{
							Dialog
							(
								playerid, DIALOG_GPS_JOBS, DIALOG_STYLE_LIST,
								"{FFCC00}По работе",
								"1. Городской склад {CC9900}(работа грузчика)\n\
								2. Шахта {CC9900}(работа шахтера)\n\
								3. Лесопилка {CC9900}(работа лесоруба)\n\
								4. Завод по производству продуктов\n\
								5. Покупка нефти для завода\n\
								6. Покупка металла для завода\n\
								{FFFFFF}11. Стоянка автомехаников",
								"Отметить", "Назад"
							);
						}
						case 6:
						{
							Dialog
							(
								playerid, DIALOG_GPS_BANKS, DIALOG_STYLE_LIST,
								"{FFCC00}Банки",
								"1. Банк №1\n\
								1. Банк №2",
								"Отметить", "Назад"
							);
							// 3. Банк Эдово // (частный)
						}
						case 7: // 8. контейнеры
						{
							EnablePlayerGPS(playerid, 37, 614.108764,1718.524780,12.070997);
						}
						case 8:
						{
							Dialog
							(
								playerid, DIALOG_GPS_MP, DIALOG_STYLE_LIST,
								"{FFCC00}Развлечения",
								"1. DeathMatch Zone\n\
								2. Гонки",
								"Отметить", "Назад"
							);
							// 3. Банк Эдово // (частный)
						}
						case 9:
						{
							new fmt_str[128];

							new stationid;
							new Float: dist;

							stationid = GetNearestFuelStation(playerid, 0.0);
							dist = GetPlayerDistanceFromPoint(playerid, GetFuelStationData(stationid, FS_POS_X), GetFuelStationData(stationid, FS_POS_Y), GetFuelStationData(stationid, FS_POS_Z));

							EnablePlayerGPS
							(
								playerid,
								47,
								GetFuelStationData(stationid, FS_POS_X),
								GetFuelStationData(stationid, FS_POS_Y),
								GetFuelStationData(stationid, FS_POS_Z),
								""
							);

							format(fmt_str, sizeof fmt_str, "Ближе всех к Вам находится АЗС №%d \"%s\" (расстояние %.1f м)", stationid, GetFuelStationData(stationid, FS_NAME), dist);
							SendClientMessage(playerid, 0xFFFF00FF, fmt_str);

							SendClientMessage(playerid, 0xFFFF00FF, "Она отмечена у Вас буквой {0099CC}Z");
						}
						case 10:
						{
							new fmt_str[128];

							new biz_id;
							new Float: dist;

							biz_id = GetNearestBiz(playerid, BUSINESS_TYPE_CLOTHING_SHOP, 0.0);
							dist = GetPlayerDistanceFromPoint(playerid, GetBusinessData(biz_id, B_POS_X), GetBusinessData(biz_id, B_POS_Y), GetBusinessData(biz_id, B_POS_Z));

							EnablePlayerGPS
							(
								playerid,
								45,
								GetBusinessData(biz_id, B_POS_X),
								GetBusinessData(biz_id, B_POS_Y),
								GetBusinessData(biz_id, B_POS_Z),
								""
							);

							format(fmt_str, sizeof fmt_str, "Ближе всех к Вам находится \"%s\" №%d (расстояние %.1f м)", GetBusinessInteriorInfo(GetBusinessData(biz_id, B_INTERIOR), BT_NAME), biz_id,  dist);
							SendClientMessage(playerid, 0xFFFF00FF, fmt_str);

							SendClientMessage(playerid, 0xFFFF00FF, "Она отмечена у Вас значком {32a44b}$");
						}
						case 11:
						{
							new fmt_str[128];

							new biz_id;
							new Float: dist;

							biz_id = GetNearestBiz(playerid, BUSINESS_TYPE_SHOP_GUN, 0.0);
							dist = GetPlayerDistanceFromPoint(playerid, GetBusinessData(biz_id, B_POS_X), GetBusinessData(biz_id, B_POS_Y), GetBusinessData(biz_id, B_POS_Z));

							EnablePlayerGPS
							(
								playerid,
								18,
								GetBusinessData(biz_id, B_POS_X),
								GetBusinessData(biz_id, B_POS_Y),
								GetBusinessData(biz_id, B_POS_Z),
								""
							);

							format(fmt_str, sizeof fmt_str, "Ближе всех к Вам находится \"%s\" №%d (расстояние %.1f м)", GetBusinessInteriorInfo(GetBusinessData(biz_id, B_INTERIOR), BT_NAME), biz_id,  dist);
							SendClientMessage(playerid, 0xFFFF00FF, fmt_str);

							SendClientMessage(playerid, 0xFFFF00FF, "Она отмечена у Вас значком {32a44b}$");
						}
						case 12:
						{
							new fmt_str[128];

							new biz_id;
							new Float: dist;

							biz_id = GetNearestBiz(playerid, BUSINESS_TYPE_SHOP_24_7, 0.0);
							dist = GetPlayerDistanceFromPoint(playerid, GetBusinessData(biz_id, B_POS_X), GetBusinessData(biz_id, B_POS_Y), GetBusinessData(biz_id, B_POS_Z));

							EnablePlayerGPS
							(
								playerid,
								23,
								GetBusinessData(biz_id, B_POS_X),
								GetBusinessData(biz_id, B_POS_Y),
								GetBusinessData(biz_id, B_POS_Z),
								""
							);

							format(fmt_str, sizeof fmt_str, "Ближе всех к Вам находится \"%s\" №%d (расстояние %.1f м)", GetBusinessInteriorInfo(GetBusinessData(biz_id, B_INTERIOR), BT_NAME), biz_id,  dist);
							SendClientMessage(playerid, 0xFFFF00FF, fmt_str);

							SendClientMessage(playerid, 0xFFFF00FF, "Она отмечена у Вас значком {32a44b}$");
						}
						case 13:
						{
							new fmt_str[128];

							new biz_id;
							new Float: dist;

							biz_id = GetNearestBiz(playerid, BUSINESS_TYPE_CAR_TUNING, 0.0);
							dist = GetPlayerDistanceFromPoint(playerid, GetBusinessData(biz_id, B_POS_X), GetBusinessData(biz_id, B_POS_Y), GetBusinessData(biz_id, B_POS_Z));

							EnablePlayerGPS
							(
								playerid,
								27,
								GetBusinessData(biz_id, B_POS_X),
								GetBusinessData(biz_id, B_POS_Y),
								GetBusinessData(biz_id, B_POS_Z),
								""
							);

							format(fmt_str, sizeof fmt_str, "Ближе всех к Вам находится \"%s\" №%d (расстояние %.1f м)", GetBusinessInteriorInfo(GetBusinessData(biz_id, B_INTERIOR), BT_NAME), biz_id,  dist);
							SendClientMessage(playerid, 0xFFFF00FF, fmt_str);

							SendClientMessage(playerid, 0xFFFF00FF, "Она отмечена у Вас значком {32a44b}$");
						}
						case 14:
						{
							new fmt_str[128];

							new biz_id;
							new Float: dist;

							biz_id = GetNearestBiz(playerid, BUSINESS_TYPE_CASINO, 0.0);
							dist = GetPlayerDistanceFromPoint(playerid, GetBusinessData(biz_id, B_POS_X), GetBusinessData(biz_id, B_POS_Y), GetBusinessData(biz_id, B_POS_Z));

							EnablePlayerGPS
							(
								playerid,
								44,
								GetBusinessData(biz_id, B_POS_X),
								GetBusinessData(biz_id, B_POS_Y),
								GetBusinessData(biz_id, B_POS_Z),
								""
							);

							format(fmt_str, sizeof fmt_str, "Ближе всех к Вам находится \"%s\" №%d (расстояние %.1f м)", GetBusinessInteriorInfo(GetBusinessData(biz_id, B_INTERIOR), BT_NAME), biz_id,  dist);
							SendClientMessage(playerid, 0xFFFF00FF, fmt_str);

							SendClientMessage(playerid, 0xFFFF00FF, "Она отмечена у Вас значком {32a44b}$");
						}
		    			/*case 15:
						{
							Dialog
							(
								playerid, DIALOG_GPS_QUEST, DIALOG_STYLE_LIST,
								"{FFCC00}8 марта",
								"1. Потерянные цветы\n\
								2. Магазин цветов\n\
								3. Концертный зал\n\
								4. Магазин парфюмерии\n\
								5. Больница\n\
								6. Магазин тортов\n\
								7. Магазин продуктов\n\
								8. Магазин свечей\n\
								9. Дом Тимура",
								"Отметить", "Назад"
							);
						}*/
						case 15:
						{
						    EnablePlayerGPS(playerid, 21, -316.1636,400.8567,13.5937);
						}
						default:
							return 1;
					}
				}
			}
			case DIALOG_GPS_MP:
			{
				if(response)
				{
					if(0 <= listitem <= sizeof gps_mp-1)
					{
						EnablePlayerGPS
						(
							playerid,
							gps_mp[listitem][G_MARKET_TYPE],
							gps_mp[listitem][G_POS_X],
							gps_mp[listitem][G_POS_Y],
							gps_mp[listitem][G_POS_Z],
							"Место отмечено у Вас на GPS"
						);
					}
				}
				else callcmd::gps(playerid, "");
			}
			case DIALOG_GPS_PUBLIC_PLACES:
			{
				if(response)
				{
					if(0 <= listitem <= sizeof gps_public_places-1)
					{
						EnablePlayerGPS
						(
							playerid,
							gps_public_places[listitem][G_MARKET_TYPE],
							gps_public_places[listitem][G_POS_X],
							gps_public_places[listitem][G_POS_Y],
							gps_public_places[listitem][G_POS_Z],
							"Место отмечено у Вас на GPS"
						);
					}
				}
				else callcmd::gps(playerid, "");
			}
			case DIALOG_GPS_TRANSPORT:
			{
				if(response)
				{
					if(0 <= listitem <= sizeof gps_transport-1)
					{
						EnablePlayerGPS
						(
							playerid,
							gps_transport[listitem][G_MARKET_TYPE],
							gps_transport[listitem][G_POS_X],
							gps_transport[listitem][G_POS_Y],
							gps_transport[listitem][G_POS_Z],
							"Место отмечено у Вас на GPS"
						);
					}
				}
				else callcmd::gps(playerid, "");
			}
			case DIALOG_GPS_STATE_ORGANIZATIONS:
			{
				if(response)
				{
					if(0 <= listitem <= sizeof gps_state_organizations-1)
					{
						EnablePlayerGPS
						(
							playerid,
							gps_state_organizations[listitem][G_MARKET_TYPE],
							gps_state_organizations[listitem][G_POS_X],
							gps_state_organizations[listitem][G_POS_Y],
							gps_state_organizations[listitem][G_POS_Z],
							"Местоположение организации отмечено у Вас на GPS"
						);
					}
				}
				else callcmd::gps(playerid, "");
			}
			case DIALOG_GPS_GANGS:
			{
				if(response)
				{
					if(0 <= listitem <= sizeof gps_gangs-1)
					{
						EnablePlayerGPS
						(
							playerid,
							gps_gangs[listitem][G_MARKET_TYPE],
							gps_gangs[listitem][G_POS_X],
							gps_gangs[listitem][G_POS_Y],
							gps_gangs[listitem][G_POS_Z],
							"Место отмечено у Вас на GPS"
						);
					}
				}
				else callcmd::gps(playerid, "");
			}
			case DIALOG_GPS_JOBS:
			{
				if(response)
				{
					if(0 <= listitem <= sizeof gps_jobs-1)
					{
						EnablePlayerGPS
						(
							playerid,
							gps_jobs[listitem][G_MARKET_TYPE],
							gps_jobs[listitem][G_POS_X],
							gps_jobs[listitem][G_POS_Y],
							gps_jobs[listitem][G_POS_Z],
							"Место отмечено у Вас на GPS"
						);
					}
				}
				else callcmd::gps(playerid, "");
			}
			case DIALOG_GPS_BANKS:
			{
				if(response)
				{
					if(0 <= listitem <= sizeof gps_banks-1)
					{
						EnablePlayerGPS
						(
							playerid,
							gps_banks[listitem][G_MARKET_TYPE],
							gps_banks[listitem][G_POS_X],
							gps_banks[listitem][G_POS_Y],
							gps_banks[listitem][G_POS_Z],
							"Банк отмечен у Вас на GPS"
						);
					}
				}
				else callcmd::gps(playerid, "");
			}
			case DIALOG_GPS_BUSINESS:
			{
				if(response)
				{
					if(0 <= listitem <= MAX_BUSINESS_GPS-1)
					{
						new idx = GetPlayerListitemValue(playerid, listitem);
						new businessid = GetBusinessGPSInfo(idx, BG_BIZ_ID);

						if(GetBusinessGPSInfo(idx, BG_SQL_ID))
						{
							EnablePlayerGPS
							(
								playerid,
								56,
								GetBusinessData(businessid, B_POS_X),
								GetBusinessData(businessid, B_POS_Y),
								GetBusinessData(businessid, B_POS_Z),
								"Бизнес отмечен у Вас на GPS"
							);
						}
						else callcmd::gps(playerid, "");
					}
				}
				else callcmd::gps(playerid, "");
			}
			// -----------------------------------------------------------------
			case DIALOG_HELP:
			{
				if(response)
				{
					if(0 <= listitem <= sizeof help_info - 1)
						ShowPlayerHelpSection(playerid, listitem);
				}
				else DeletePVar(playerid, "help_section");
			}
			case DIALOG_HELP_SECTION:
			{
				new sectionid = GetPVarInt(playerid, "help_section");

				if(!response && sectionid < sizeof help_info - 1)
				{
					ShowPlayerHelpSection(playerid, sectionid + 1);
				}
				else callcmd::help(playerid, "");
			}
			// -----------------------------------------------------------------
			case DIALOG_SERVER_RADIO:
			{
				if(response)
				{
					if(0 <= listitem <= sizeof g_server_radio - 1)
					{
						PlayAudioStreamForPlayer(playerid, GetServerRadioData(listitem, SR_CHANNEL_URL));

						SetPVarInt(playerid, "server_radio_enabled", 1);
						SendClientMessage(playerid, 0x66CC00FF, "Онлайн радио включено");
					}
				}
			}
			case DIALOG_CAR_RADIO:
            {
                if(response)
                {
                    if(0 <= listitem <= sizeof g_server_radio - 1)
                    {
                        PlayAudioStreamForPlayer(playerid, GetServerRadioData(listitem, SR_CHANNEL_URL));

                        SetPVarInt(playerid, "server_radio_enabled", 1);
                        SendClientMessage(playerid, COR_SERVER, "[Успешно]: "c_b"Вы включили радио.");
                        Action(playerid, "включил(-а) радио.", _, false);
                    }
                }
            }
            case DIALOG_PLAY_RADIO:
            {
                if(response)
                {
                    if(0 <= listitem <= sizeof g_server_radio - 1)
                    {
                        PlayAudioStreamForPlayer(playerid, GetServerRadioData(listitem, SR_CHANNEL_URL));

                        SetPVarInt(playerid, "server_radio_enabled", 1);
                        SendClientMessage(playerid, COR_SERVER, "[Успешно]: "c_b"Вы начали слушать радио с помощью наушников.");
                        Action(playerid, "включил(-а) наушники и начал(-а) слушать радио.", _, false);

                      //  SetPlayerAttachedObject(playerid, 3, 19424, 2,0.05,0.0,0.0,90.0,360.0,270.0);
                    }
                }
            }
			// -----------------------------------------------------------------
			case DIALOG_ANIM_LIST:
			{
				if(response)
				{
					if(!SetPlayerAnimation(playerid, listitem))
					{
						Dialog
						(
							playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
							"Информация",
							"Для быстрого запуска нужной анимации можно использовать {FFFFFF}/anim(list) [номер анимации из списка]",
							"Закрыть", ""
						);
					}
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_OPEN_HOOD_OR_TRUNK:
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				if(vehicleid)
				{
					new E_VEHICLE_PARAMS_STRUCT: param = response ? V_BONNET : V_BOOT;
					new set_status = GetVehicleParam(vehicleid, param) ^ VEHICLE_PARAM_ON;

					SetVehicleParam(vehicleid, param, set_status);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_DRIVING_TUTORIAL_START:
			{
				if(response)
					ShowDrivingTutorialSection(playerid, 0);
			}
			case DIALOG_DRIVING_TUTORIAL:
			{
				new step = GetPVarInt(playerid, "driving_tutorial_step");
				if(response)
				{
					step ++;
				}
				else step --;

				if(step >= sizeof driving_tutorial)
				{
					Dialog
					(
						playerid, DIALOG_DRIVING_TUTORIAL_END, DIALOG_STYLE_MSGBOX,
						"{0099FF}Завершение",
						"{FFFFFF}Надеемся вы все внимательно прочли и готовы приступить к сдаче экзамена\n"\
						"Если вы сомневаетесь в чем-либо, то рекомендуем не рисковать и прочитать нужный раздел еще раз!\n\n"\
						"{CC9900}Желаем Вам удачи на экзамене!\n"\
						"Для того, чтобы завершить обучение нажмите \"Выход\"",
						"Выход", "Назад"
					);
				}
				else if(step < 0)
				{
					ShowPlayerDrivingTutorial(playerid);
				}
				else
				{
					ShowDrivingTutorialSection(playerid, step);

					if(step == 1)
					{
						SpeedometrShowForPlayer(playerid);
					}
					else SpeedometrHideForPlayer(playerid);
				}
			}
			case DIALOG_DRIVING_TUTORIAL_END:
			{
				if(!response)
					ShowDrivingTutorialSection(playerid, sizeof driving_tutorial - 1);
			}
			case DIALOG_DRIVING_EXAM_INFO:
			{
				if(response)
				{
					if(GetPlayerData(playerid, P_DRIVING_LIC) < 1)
					{
						if(GetPlayerMoneyEx(playerid) >= 600)
						{
							GivePlayerMoneyEx(playerid, -600, "Сдача на права");

							Dialog
							(
								playerid, DIALOG_DRIVING_EXAM_START, DIALOG_STYLE_MSGBOX,
								"{CCCC00}Теоретическая часть",
								"{FFFFFF}Вам будет предложено 12 вопросов для проверки теоретических знаний\n"\
								"Чтобы сдать эту часть экзамена необходимо ответить минимум на 9 из них\n"\
								"Если правильных ответов будет меньше, то вы не будете допущены до практический части\n\n"\
								"{33CCFF}На каждый вопрос будет несколько вариантов ответа, правильный из который только один.\n"\
								"О результате вы узнаете когда ответите на все 12 вопросов",
								"Далее", "Отмена"
							);
							ClearPlayerDrivingExamInfo(playerid);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Сдача на права стоит 600 рублей");
					}
					else SendClientMessage(playerid, 0xCECECEFF, "У Вас уже есть права");
				}
			}
			case DIALOG_DRIVING_EXAM_START:
			{
				if(response)
				{
					SetPlayerDrivingExamInfo(playerid, DE_POINTS, 0);
					ShowPlayerDrivingExam(playerid, 0);
				}
			}
			case DIALOG_DRIVING_EXAM:
			{
				new step = GetPlayerDrivingExamInfo(playerid, DE_EXAM_STEP);

				if(driving_exam[step][DE_CORRECT_ANSWER] == (listitem + 1))
				{
					SetPlayerChatBubble(playerid, "+1", 0xFFFF00FF, 5.0, 2000);
					SetPlayerDrivingExamInfo(playerid, DE_POINTS, GetPlayerDrivingExamInfo(playerid, DE_POINTS) + 1);
				}
				ShowPlayerDrivingExam(playerid, step + 1);
			}
			case DIALOG_DRIVING_EXAM_RESULT:
			{
				if(GetPlayerDrivingExamInfo(playerid, DE_POINTS) >= 9)
				{
					Dialog
					(
						playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
						"{CCCC00}Практическая часть",
						"{FFFFFF}Отлично, теперь приступим к практической части\n"\
						"Вам нужно будет немного проехаться по городу на учебном авто\n"\
						"Найти его можно на стоянке слева от выхода\n\n"\
						"{FF9900}Внимание! Соблюдайте осторожность и не превышайте скорость\n"\
						"Если вы повредите автомобиль экзамен будет провален",
						"Начать", ""
					);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_ATM:
			{
				if(response)
				{
					switch(listitem+1)
					{
						case 1,2: // Снять\Положить с банковского счета
						{
							ShowPlayerATMSelectSumDialog(playerid, !listitem);
						}
						case 3: // Баланс банковского счета
						{
							new fmt_str[64];
							format(fmt_str, sizeof fmt_str, "{FFFFFF}На Вашем банковском счету {%s}%d руб", GetPlayerBankMoney(playerid) > 0 ? ("00CC00") : ("FF6633"), GetPlayerBankMoney(playerid));

							Dialog
							(
								playerid, DIALOG_ATM_BALANCE, DIALOG_STYLE_MSGBOX,
								"{FFCD00}Баланс счета",
								fmt_str,
								"Назад", "Выйти"
							);
						}
						case 4: // Снять со счета предприятия
						{
							ShowPlayerATMCompanyDialog(playerid, true);
						}
						case 5: // Положить на счет предприятия
						{
							ShowPlayerATMCompanyDialog(playerid, false);
						}
						case 6: // Пополнить мобильный телефон
						{
							if(GetPlayerPhone(playerid) != 0)
							{
								Dialog
								(
									playerid, DIALOG_ATM_PHONE_BALANCE, DIALOG_STYLE_INPUT,
									"{FFCD00}Пополнение мобильного телефона",
									"{FFFFFF}Укажите сумму, на которую хотите пополнить счёт:",
									"Готово", "Назад"
								);
							}
							else
							{
								SendClientMessage(playerid, 0x999999FF, "У Вас нет телефона. Его можно купить в сотовом салоне");
								ShowPlayerATMDialog(playerid);
							}
						}
						case 7: // Безналичный перевод
						{
							if(GetPlayerLevel(playerid) >= 2)
							{
								Dialog
								(
									playerid, DIALOG_ATM_TRANSFER_MONEY_1, DIALOG_STYLE_INPUT,
									"{FFCD00}Безналичный перевод",
									"{FFFFFF}Укажите номер банковского счета:",
									"Далее", "Отмена"
								);
							}
							else SendClientMessage(playerid, 0x999999FF, "Перевод денег доступен со 2 уровня");
						}
						case 8:
						{
							Dialog
							(
								playerid, DIALOG_ATM_TICKET_SELECT, DIALOG_STYLE_LIST,
								"{FFCD00}Оплата штрафа",
								"1. Выбрать штраф из списка\n"\
								"2. Оплатить штраф по номеру",
								"Далее", "Отмена"
							);
						}
						case 9: // Благотворительность
						{
							ShowPlayerATMCharityDialog(playerid);
						}
						default:
							return 1;
					}
					ApplyAnimationEx(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
				}
			}
			case DIALOG_ATM_TAKE_MONEY: // снять деньги
			{
				if(response)
				{
					if(0 <= listitem <= 6)
					{
						new sum = atm_item_sum[listitem];
						if(GetPlayerBankMoney(playerid) >= sum)
						{
							new query[85];
							format(query, sizeof query, "UPDATE accounts SET money=%d,bank=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid) + sum, GetPlayerBankMoney(playerid) - sum, GetPlayerAccountID(playerid));
							mysql_query(mysql, query, false);

							if(!mysql_errno())
							{
								AddPlayerData(playerid, P_BANK, -, sum);
								GivePlayerMoneyEx(playerid, sum, "Снятие денег с банкомата", false, true);
							}
							else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 08)");

							ApplyAnimationEx(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
							ShowPlayerATMDialog(playerid);
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "На Вашем банковском счету недостаточно средств");
							ShowPlayerATMSelectSumDialog(playerid, true);
						}
					}
					else ShowPlayerATMSelectOtherSum(playerid, true);
				}
				else
				{
					ApplyAnimationEx(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					ShowPlayerATMDialog(playerid);
				}
			}
			case DIALOG_ATM_TAKE_OTHER_MONEY: // снять деньги (другая сума)
			{
				if(response)
				{
					new take_sum = strval(inputtext);
					if(take_sum > 0 && IsNumeric(inputtext))
					{
						if(GetPlayerBankMoney(playerid) >= take_sum)
						{
							new query[85];
							format(query, sizeof query, "UPDATE accounts SET money=%d,bank=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid) + take_sum, GetPlayerBankMoney(playerid) - take_sum, GetPlayerAccountID(playerid));
							mysql_query(mysql, query, false);

							if(!mysql_errno())
							{
								AddPlayerData(playerid, P_BANK, -, take_sum);
								GivePlayerMoneyEx(playerid, take_sum, "Снятие денег с банкомата (другая сумма)", false, true);
							}
							else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 08)");

							ApplyAnimationEx(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
							ShowPlayerATMDialog(playerid);
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "На Вашем банковском счету недостаточно средств");
							ShowPlayerATMSelectOtherSum(playerid, true);
						}
					}
					else ShowPlayerATMSelectOtherSum(playerid, true);
				}
				else
				{
					ApplyAnimationEx(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					ShowPlayerATMSelectSumDialog(playerid, true);
				}
			}
			case DIALOG_ATM_PUT_MONEY: // положить деньги
			{
				if(response)
				{
					if(0 <= listitem <= 6)
					{
						new sum = atm_item_sum[listitem];
						if(GetPlayerMoneyEx(playerid) >= sum)
						{
							new query[85];
							format(query, sizeof query, "UPDATE accounts SET money=%d,bank=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid) - sum, GetPlayerBankMoney(playerid) + sum, GetPlayerAccountID(playerid));
							mysql_query(mysql, query, false);

							if(!mysql_errno())
							{
								AddPlayerData(playerid, P_BANK, +, sum);
								GivePlayerMoneyEx(playerid, -sum, "Пополнение денег в банкомате", false, true);
							}
							else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 08)");

							ApplyAnimationEx(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
							ShowPlayerATMDialog(playerid);
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "У Вас с собой нет столько денег");
							ShowPlayerATMSelectSumDialog(playerid, false);
						}
					}
					else ShowPlayerATMSelectOtherSum(playerid, false);
				}
				else
				{
					ApplyAnimationEx(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					ShowPlayerATMDialog(playerid);
				}
			}
			case DIALOG_ATM_PUT_OTHER_MONEY: // положить деньги (другая сума)
			{
				if(response)
				{
					new put_sum = strval(inputtext);
					if(put_sum > 0 && IsNumeric(inputtext))
					{
						if(GetPlayerMoneyEx(playerid) >= put_sum)
						{
							new query[85];
							format(query, sizeof query, "UPDATE accounts SET money=%d,bank=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid) - put_sum, GetPlayerBankMoney(playerid) + put_sum, GetPlayerAccountID(playerid));
							mysql_query(mysql, query, false);

							if(!mysql_errno())
							{
								AddPlayerData(playerid, P_BANK, +, put_sum);
								GivePlayerMoneyEx(playerid, -put_sum, "Пополнение денег в банкомате (другая сумма)", false, true);
							}
							else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 08)");

							ApplyAnimationEx(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
							ShowPlayerATMDialog(playerid);
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "У Вас с собой нет столько денег");
							ShowPlayerATMSelectOtherSum(playerid, false);
						}
					}
					else ShowPlayerATMSelectOtherSum(playerid, false);
				}
				else
				{
					ApplyAnimationEx(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					ShowPlayerATMSelectSumDialog(playerid, false);
				}
			}
			case DIALOG_ATM_BALANCE:
			{
				if(response)
				{
					ApplyAnimationEx(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					ShowPlayerATMDialog(playerid);
				}
			}
			case DIALOG_ATM_PHONE_BALANCE:
			{
				if(response)
				{
					new sum = strval(inputtext);
					if(sum > 0 && IsNumeric(inputtext))
					{
						if(GetPlayerMoneyEx(playerid) >= sum)
						{
							new query[128];

							format(query, sizeof query, "UPDATE accounts SET money=%d,phone_balance=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-sum, GetPlayerData(playerid, P_PHONE_BALANCE)+sum, GetPlayerAccountID(playerid));
							mysql_query(mysql, query, false);

							if(!mysql_errno())
							{
								GivePlayerMoneyEx(playerid, -sum, "Пополнение счета телефона", false, true);
								AddPlayerData(playerid, P_PHONE_BALANCE, +, sum);

								format(query, sizeof query, "Вы пополнили счет мобильного телефона на {FF9900}%d руб", sum);
								SendClientMessage(playerid, 0x66CC00FF, query);

								format(query, sizeof query, "Сейчас на счету %d руб", GetPlayerData(playerid, P_PHONE_BALANCE));
								SendClientMessage(playerid, 0x66CC00FF, query);

								return 1;
							}
							else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 15)");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "У Вас не хватает денег");

						ApplyAnimationEx(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					}

					Dialog
					(
						playerid, DIALOG_ATM_PHONE_BALANCE, DIALOG_STYLE_INPUT,
						"{FFCD00}Пополнение мобильного телефона",
						"{FFFFFF}Укажите сумму, на которую хотите пополнить счёт:",
						"Готово", "Назад"
					);
				}
				else
				{
					ShowPlayerATMDialog(playerid);
					ApplyAnimationEx(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
				}
			}
			case DIALOG_ATM_SELECT_COMPANY_TAKE, DIALOG_ATM_SELECT_COMPANY_PUT:
			{
				if(response)
				{
					new bool: action = (dialogid == DIALOG_ATM_SELECT_COMPANY_TAKE);

					switch(listitem + 1)
					{
						case 1:
							ShowPlayerATMBusinessDialog(playerid, action);

						case 2:
							ShowPlayerATMFuelStationDialog(playerid, action);
					}
				}
				else
				{
					ShowPlayerATMDialog(playerid);
					ApplyAnimationEx(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
				}
			}
			case DIALOG_ATM_FUEL_ST_TAKE_MONEY:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						new sum = strval(inputtext);
						if(sum > 0 && IsNumeric(inputtext))
						{
							if(GetFuelStationData(stationid, FS_BALANCE) >= sum)
							{
								new query[128 + 1];

								format(query, sizeof query, "UPDATE accounts a, fuel_stations f SET a.money=%d,f.balance=%d WHERE a.id=%d AND f.id=%d", GetPlayerMoneyEx(playerid)+sum, GetFuelStationData(stationid, FS_BALANCE)-sum, GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID));
								mysql_query(mysql, query, false);

								if(!mysql_errno())
								{
									AddFuelStationData(stationid, FS_BALANCE, -, sum);
									GivePlayerMoneyEx(playerid, sum, "+ Снятие средств со счета АЗС", false, true);

									ApplyAnimationEx(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
									ShowPlayerATMDialog(playerid);
									return 1;
								}
								else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 18)");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "На счету предприятия нет такой суммы");
						}
						ShowPlayerATMFuelStationDialog(playerid, true);
					}
					else
					{
						ShowPlayerATMDialog(playerid);
						ApplyAnimationEx(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					}
				}
			}
			case DIALOG_ATM_FUEL_ST_PUT_MONEY:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						new sum = strval(inputtext);
						if(sum > 0 && IsNumeric(inputtext))
						{
							if(GetPlayerMoneyEx(playerid) >= sum)
							{
								new query[128 + 1];

								format(query, sizeof query, "UPDATE accounts a, fuel_stations f SET a.money=%d,f.balance=%d WHERE a.id=%d AND f.id=%d", GetPlayerMoneyEx(playerid)-sum, GetFuelStationData(stationid, FS_BALANCE)+sum, GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID));
								mysql_query(mysql, query, false);

								if(!mysql_errno())
								{
									AddFuelStationData(stationid, FS_BALANCE, +, sum);
									GivePlayerMoneyEx(playerid, -sum, "Пополнение счета АЗС", false, true);

									ApplyAnimationEx(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
									ShowPlayerATMDialog(playerid);
									return 1;
								}
								else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 18)");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас с собой нет столько денег");
						}
						ShowPlayerATMFuelStationDialog(playerid, false);
					}
					else
					{
						ShowPlayerATMDialog(playerid);
						ApplyAnimationEx(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					}
				}
			}
			case DIALOG_ATM_BIZ_TAKE_MONEY:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						new sum = strval(inputtext);
						if(sum > 0 && IsNumeric(inputtext))
						{
							if(GetBusinessData(businessid, B_BALANCE) >= sum)
							{
								new query[128 + 1];

								format(query, sizeof query, "UPDATE accounts a, business b SET a.money=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)+sum, GetBusinessData(businessid, B_BALANCE)-sum, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
								mysql_query(mysql, query, false);

								if(!mysql_errno())
								{
									AddBusinessData(businessid, B_BALANCE, -, sum);
									GivePlayerMoneyEx(playerid, sum, "+ Снятие средств со счета Бизнеса", false, true);

									ApplyAnimationEx(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
									ShowPlayerATMDialog(playerid);

									return 1;
								}
								else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 18)");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "На счету предприятия нет такой суммы");
						}
						ShowPlayerATMBusinessDialog(playerid, true);
					}
					else
					{
						ShowPlayerATMDialog(playerid);
						ApplyAnimationEx(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					}
				}
			}
			case DIALOG_ATM_BIZ_PUT_MONEY:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						new sum = strval(inputtext);
						if(sum > 0 && IsNumeric(inputtext))
						{
							if(GetPlayerMoneyEx(playerid) >= sum)
							{
								new query[128 + 1];

								format(query, sizeof query, "UPDATE accounts a, business b SET a.money=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-sum, GetBusinessData(businessid, B_BALANCE)+sum, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
								mysql_query(mysql, query, false);

								if(!mysql_errno())
								{
									AddBusinessData(businessid, B_BALANCE, +, sum);
									GivePlayerMoneyEx(playerid, -sum, "Пополнение счета Бизнеса", false, true);

									ApplyAnimationEx(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
									ShowPlayerATMDialog(playerid);
									return 1;
								}
								else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 18)");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас с собой нет столько денег");
						}
						ShowPlayerATMBusinessDialog(playerid, false);
					}
					else
					{
						ShowPlayerATMDialog(playerid);
						ApplyAnimationEx(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					}
				}
			}
			case DIALOG_ATM_TRANSFER_MONEY_1:
			{
				if(response)
				{
					new transfer_id = strval(inputtext);

					if(transfer_id > 0 && IsNumeric(inputtext))
					{
						SetPlayerBankTransfer(playerid, BT_ID, 0);

						new query[64 + 1];
						new Cache: result;

						format(query, sizeof query, "SELECT id FROM bank_accounts WHERE id=%d LIMIT 1", transfer_id);
						result = mysql_query(mysql, query);

						if(cache_num_rows())
							SetPlayerBankTransfer(playerid, BT_ID, cache_get_row_int(0, 0));

						cache_delete(result);

						if(GetPlayerBankTransfer(playerid, BT_ID))
						{
							return ShowPlayerATMTransfer(playerid);
						}
						else SendClientMessage(playerid, 0xFF6600FF, "Счета с таким номером не существует");
					}

					Dialog
					(
						playerid, DIALOG_ATM_TRANSFER_MONEY_1, DIALOG_STYLE_INPUT,
						"{FFCD00}Безналичный перевод",
						"{FFFFFF}Укажите номер банковского счета:",
						"Далее", "Отмена"
					);
				}
				else ShowPlayerATMDialog(playerid);
			}
			case DIALOG_ATM_TRANSFER_MONEY_2:
			{
				new transfer_id = GetPlayerBankTransfer(playerid, BT_ID);
				if(response && transfer_id)
				{
					new transfer_sum = strval(inputtext);
					if(transfer_sum > 0 && IsNumeric(inputtext))
					{
						if(GetPlayerBankMoney(playerid) >= transfer_sum)
						{
							new fmt_str[155];

							format(fmt_str, sizeof fmt_str, "UPDATE accounts a,bank_accounts ba SET a.bank=%d,ba.balance=ba.balance + %d WHERE a.id=%d AND ba.id=%d", GetPlayerBankMoney(playerid)-transfer_sum, transfer_sum, GetPlayerAccountID(playerid), transfer_id);
							mysql_query(mysql, fmt_str, false);

							if(!mysql_errno())
							{
								format(fmt_str, sizeof fmt_str, "+ Пополнения с банкомата %d руб", transfer_sum);
								BankAccountLog(playerid, transfer_id, fmt_str);

								AddPlayerData(playerid, P_BANK, -, transfer_sum);
								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}Откуда:\t\t\tОсновной счет\n"\
									"Куда:\t\t\t\tСчет №%d\n"\
									"Сумма:\t\t\t\t%d руб\n"\
									"Остаток на Вашем счету:\t%d руб",
									transfer_id,
									transfer_sum,
									GetPlayerBankMoney(playerid)
								);
								Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{99FF00}Перевод завершен", fmt_str, "Закрыть", "");

								return PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
							}
							else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 11)");
						}
						else SendClientMessage(playerid, 0xFF6600FF, "На основном банковском счете недостаточно денег");
					}
					ShowPlayerATMTransfer(playerid);
				}
				else ShowPlayerATMDialog(playerid);
			}
			case DIALOG_ATM_TICKET_SELECT:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case 1:
						{
							new fmt_text[1024],
								query[90],
								Cache: result,
								rows;

							mysql_format(mysql, query, sizeof query, "SELECT * FROM tickets WHERE uid=%d AND status=0", GetPlayerAccountID(playerid));
							result = mysql_query(mysql, query, true);

							rows = cache_num_rows();

							ClearPlayerListitemValues(playerid);

							if(rows)
							{
								for(new idx; idx < rows; idx ++)
								{
									new reason[64];

									SetPlayerListitemValue(playerid, idx, cache_get_field_content_int(idx, "id"));

									cache_get_field_content(idx, "description", reason);

									format(query, sizeof query, "#%d\t%d руб.\t%s\n", cache_get_field_content_int(idx, "id"),
									cache_get_field_content_int(idx, "amount"), reason);

									strcat(fmt_text, query);
								}
							}
							else format(fmt_text, sizeof fmt_text, "У Вас нет неоплаченных штрафов");

							cache_delete(result);

							Dialog
							(
								playerid, DIALOG_ATM_TICKET_LIST, DIALOG_STYLE_LIST,
								"{FFCD00}Список штрафов",
								fmt_text,
								"Выбор", "Отмена"
							);
						}
						case 2:
						{
							Dialog
							(
								playerid, DIALOG_ATM_TICKET_PAY, DIALOG_STYLE_INPUT,
								"{FFCD00}Оплата штрафа",
								"{FFFFFF}Введите номер штрафа, который\n"\
								"Вы хотели бы оплатить:",
								"Далее", "Отмена"
							);
						}
					}
				}
				else ShowPlayerATMDialog(playerid);
			}
			case DIALOG_ATM_TICKET_LIST:
			{
				if(response)
				{
					new ticketid = GetPlayerListitemValue(playerid, listitem);

					if(ticketid) PayTicket(playerid, ticketid);
				}

				ShowPlayerATMDialog(playerid);
			}
			case DIALOG_ATM_TICKET_PAY:
			{
				if(response)
				{
					new ticketid = strval(inputtext);

					PayTicket(playerid, ticketid);
				}

				ShowPlayerATMDialog(playerid);
			}
			case DIALOG_ATM_CHARITY:
			{
				if(response)
				{
					new put_sum = strval(inputtext);
					if(put_sum > 0 && IsNumeric(inputtext))
					{
						if(GetPlayerMoneyEx(playerid) >= put_sum)
						{
							new fmt_str[85];
							format(fmt_str, sizeof fmt_str, "INSERT INTO charity (uid,money,time) VALUES (%d,%d,%d)", GetPlayerAccountID(playerid), put_sum, gettime());
							mysql_query(mysql, fmt_str, false);

							GivePlayerMoneyEx(playerid, -put_sum, "Благотворительность", true, true);

							format(fmt_str, sizeof fmt_str, "Вы сделали пожертвование в размере %d рублей", put_sum);
							SendClientMessage(playerid, 0x3399FFFF, fmt_str);

							UpdateCharity();
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег");
							ShowPlayerATMCharityDialog(playerid);
						}
					}
					else ShowPlayerATMCharityDialog(playerid);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_PAY_FOR_RENT:
			{
				if(response)
				{
					new buffer = -1;
					switch(listitem + 1)
					{
						case 1: // Заплатить за дом
						{
							buffer = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
							if(buffer != -1)
							{
								ShowPlayerHousePayForRent(playerid);
								return 1;
							}
							else SendClientMessage(playerid, 0x999999FF, "У Вас нет дома");
						}
						case 2: // Оплатить аренду бизнеса
						{
							buffer = GetPlayerBusiness(playerid);
							if(buffer != -1)
							{
								ShowPlayerBusinessPayForRent(playerid);
								return 1;
							}
							else SendClientMessage(playerid, 0x999999FF, "У Вас нет бизнеса");
						}
						case 3: // Оплатить аренду АЗС
						{
							buffer = GetPlayerFuelStation(playerid);
							if(buffer != -1)
							{
								ShowPlayerFuelStationPayForRent(playerid);
								return 1;
							}
							else SendClientMessage(playerid, 0x999999FF, "У Вас нет заправки");
						}
						case 4: // Возврат денег за имущество
						{
						    new fmt_text[640],
					        Cache: result,
					        id;

							mysql_format(mysql, fmt_text, sizeof fmt_text, "SELECT * FROM return_money WHERE uid='%d' AND status=0", GetPlayerAccountID(playerid));
						    result = mysql_query(mysql, fmt_text, true);

						    new rows = cache_num_rows();

						    if(!rows)
						        SendClientMessage(playerid, 0xCECECEFF, "У Вас нет денег которые Вам должны вернуть");

						    else
						    {

						        new query[60],
						            money,
						            description[64];

						        format(fmt_text, sizeof fmt_text, "");

						        for(new i = 0; i < rows; i ++)
						        {
						            id = cache_get_field_content_int(i, "id");
						            money = cache_get_field_content_int(i, "money");
						            cache_get_field_content(i, "description", description);

						            format(query, sizeof query, "{FFFFFF}%d.$ %d {32a44b}(%s)\n", i + 1, money, description);
						            strcat(fmt_text, query);

						            SetPlayerListitemValue(playerid, i, id);
						        }

						        Dialog
						        (
						            playerid, DIALOG_RETURN_MONEY, DIALOG_STYLE_LIST,
						            "Возврат денег",
						            fmt_text,
						            "Выбрать", "Закрыть"
						        );
						    }

						    return cache_delete(result);
						}
					}
					ShowPlayerPayForRentDialog(playerid);
				}
			}
			case DIALOG_PAY_FOR_RENT_FUEL_ST:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						new days = strval(inputtext);
						if(days > 0 && IsNumeric(inputtext))
						{
							new fmt_str[128 + 1];

							new time = gettime();
							new rent_time = GetFuelStationData(stationid, FS_RENT_DATE);

							new rent_days = GetElapsedTime(rent_time, time, CONVERT_TIME_TO_DAYS);
							new rent_price = GetFuelStationData(stationid, FS_IMPROVEMENTS) < 4 ? GetFuelStationData(stationid, FS_RENT_PRICE) : GetFuelStationData(stationid, FS_RENT_PRICE) / 2;

							new total_price = rent_price * days;
							if((rent_days + days) <= 30)
							{
								if(GetPlayerBankMoney(playerid) >= total_price)
								{
									rent_time = (rent_time - (rent_time % 86400)) + (days * 86400);

									format(fmt_str, sizeof fmt_str, "UPDATE accounts a,fuel_stations f SET a.bank=%d,f.rent_time=%d WHERE a.id=%d AND f.id=%d", GetPlayerBankMoney(playerid)-total_price, rent_time, GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID));
									mysql_query(mysql, fmt_str, false);

									if(!mysql_errno())
									{
										AddPlayerData(playerid, P_BANK, -, total_price);
										SetFuelStationData(stationid, FS_RENT_DATE, rent_time);

										format(fmt_str, sizeof fmt_str, "С банковского счета снято {3399FF}%d руб", total_price);
										SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

										format(fmt_str, sizeof fmt_str, "Вы успешно продлили аренду АЗС еще на {3399FF}%d дней", days);
										SendClientMessage(playerid, 0x66CC00FF, fmt_str);
									}
								}
								else
								{
									SendClientMessage(playerid, 0xB5B500FF, "На основном банковском счету не хватает денег для оплаты");

									format(fmt_str, sizeof fmt_str, "Для продления аренды на %d дней необходимо %d руб", days, total_price);
									SendClientMessage(playerid, 0x999999FF, fmt_str);
								}
							}
							else SendClientMessage(playerid, 0xB5B500FF, "Вы не можете оплатить за аренду больше чем на 30 дней");
						}
						ShowPlayerFuelStationPayForRent(playerid);
					}
					else ShowPlayerPayForRentDialog(playerid);
				}
			}
			case DIALOG_PAY_FOR_RENT_BIZ:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						new days = strval(inputtext);
						if(days > 0 && IsNumeric(inputtext))
						{
							new fmt_str[128 + 1];

							new time = gettime();
							new rent_time = GetBusinessData(businessid, B_RENT_DATE);

							new rent_days = GetElapsedTime(rent_time, time, CONVERT_TIME_TO_DAYS);
							new rent_price = GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? GetBusinessData(businessid, B_RENT_PRICE) : GetBusinessData(businessid, B_RENT_PRICE) / 2;

							new total_price = rent_price * days;
							if((rent_days + days) <= 30)
							{
								if(GetPlayerBankMoney(playerid) >= total_price)
								{
									rent_time = (rent_time - (rent_time % 86400)) + (days * 86400);

									format(fmt_str, sizeof fmt_str, "UPDATE accounts a,business b SET a.bank=%d,b.rent_time=%d WHERE a.id=%d AND b.id=%d", GetPlayerBankMoney(playerid)-total_price, rent_time, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
									mysql_query(mysql, fmt_str, false);

									if(!mysql_errno())
									{
										AddPlayerData(playerid, P_BANK, -, total_price);
										SetBusinessData(businessid, B_RENT_DATE, rent_time);

										format(fmt_str, sizeof fmt_str, "С банковского счета снято {3399FF}%d руб", total_price);
										SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

										format(fmt_str, sizeof fmt_str, "Вы успешно продлили аренду бизнеса еще на {3399FF}%d дней", days);
										SendClientMessage(playerid, 0x66CC00FF, fmt_str);
									}
								}
								else
								{
									SendClientMessage(playerid, 0xB5B500FF, "На основном банковском счету не хватает денег для оплаты");

									format(fmt_str, sizeof fmt_str, "Для продления аренды на %d дней необходимо %d руб", days, total_price);
									SendClientMessage(playerid, 0x999999FF, fmt_str);
								}
							}
							else SendClientMessage(playerid, 0xB5B500FF, "Вы не можете оплатить за аренду больше чем на 30 дней");
						}
						ShowPlayerBusinessPayForRent(playerid);
					}
					else ShowPlayerPayForRentDialog(playerid);
				}
			}
			case DIALOG_PAY_FOR_RENT_HOUSE:
			{
				new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
				if(houseid != -1)
				{
					if(response)
					{
						new days = strval(inputtext);
						if(days > 0 && IsNumeric(inputtext))
						{
							new fmt_str[128 + 1];

							new time = gettime();
							new rent_time = GetHouseData(houseid, H_RENT_DATE);

							new rent_days = GetElapsedTime(rent_time, time, CONVERT_TIME_TO_DAYS);
							new rent_price = GetHouseData(houseid, H_IMPROVEMENTS) < 4 ? GetHouseData(houseid, H_RENT_PRICE) : GetHouseData(houseid, H_RENT_PRICE) / 2;

							new total_price = rent_price * days;
							if((rent_days + days) <= 30)
							{
								if(GetPlayerBankMoney(playerid) >= total_price)
								{
									rent_time = (rent_time - (rent_time % 86400)) + (days * 86400);

									format(fmt_str, sizeof fmt_str, "UPDATE accounts a,houses h SET a.bank=%d,h.rent_time=%d WHERE a.id=%d AND h.id=%d", GetPlayerBankMoney(playerid)-total_price, rent_time, GetPlayerAccountID(playerid), GetHouseData(houseid, H_SQL_ID));
									mysql_query(mysql, fmt_str, false);

									if(!mysql_errno())
									{
										AddPlayerData(playerid, P_BANK, -, total_price);
										SetHouseData(houseid, H_RENT_DATE, rent_time);

										format(fmt_str, sizeof fmt_str, "С банковского счета снято {3399FF}%d руб", total_price);
										SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

										format(fmt_str, sizeof fmt_str, "Вы успешно оплатили дом еще на {3399FF}%d дней", days);
										SendClientMessage(playerid, 0x66CC00FF, fmt_str);
									}
								}
								else
								{
									SendClientMessage(playerid, 0xB5B500FF, "На основном банковском счету не хватает денег для оплаты");

									format(fmt_str, sizeof fmt_str, "Для продления аренды на %d дней необходимо %d руб", days, total_price);
									SendClientMessage(playerid, 0x999999FF, fmt_str);
								}
							}
							else SendClientMessage(playerid, 0xB5B500FF, "Вы не можете оплатить за аренду больше чем на 30 дней");
						}
						ShowPlayerHousePayForRent(playerid);
					}
					else ShowPlayerPayForRentDialog(playerid);
				}
			}
			case DIALOG_RETURN_MONEY:
            {
                if(response)
                {
                    new idx = GetPlayerListitemValue(playerid, listitem);

                    new fmt_text[640],
                        Cache: result;

                    mysql_format(mysql, fmt_text, sizeof fmt_text, "SELECT * FROM return_money WHERE id='%d'", idx);
                    result = mysql_query(mysql, fmt_text, true);

                    new rows = cache_num_rows();

                    if(!rows)
                        SendClientMessage(playerid, 0xCECECEFF, "У Вас нет денег которые Вам должны вернуть");

                    else
                    {

                        new query[60],
                            money,
                            description[64];

                        money = cache_get_field_content_int(0, "money");
                        cache_get_field_content(0, "description", description);

                        format(query, sizeof query, "Вам было возвращено {FFFFFF}$%d (%s)", money, description);
                        SendClientMessage(playerid, 0x32a44bFF, query);

                        GivePlayerMoneyEx(playerid, money, "возврат денег", true, true);

                        mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE return_money SET status=1 WHERE id='%d'", idx);
                        result = mysql_query(mysql, fmt_text, true);
                    }

                    cache_delete(result);
                }
            }
			// -----------------------------------------------------------------
			case DIALOG_BANK:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case 1:
						{
							ShowPlayerBankAccounts(playerid);
						}
						case 2:
						{
							Dialog
							(
								playerid, DIALOG_BANK_CREATE_ACCOUNT, DIALOG_STYLE_INPUT,
								"{FFCD00}Создание нового счета",
								"{FFFFFF}Введите название для нового счета.\n"\
								"Максимальная длина 20 символов:",
								"Ок", "Отмена"
							);
						}
					}
				}
			}
			case DIALOG_BANK_ACCOUNTS:
			{
				if(response)
				{
					switch(listitem)
					{
						case 0: ShowPlayerATMDialog(playerid);
						case 1..(MAX_BANK_ACCOUNTS):
						{
							new accountid = GetPlayerListitemValue(playerid, listitem - 1);
							if(IsValidBankAccount(playerid, accountid))
							{
								SetPlayerUseListitem(playerid, accountid);
								Dialog
								(
									playerid, DIALOG_BANK_ACCOUNT_LOGIN, DIALOG_STYLE_PASSWORD,
									"{FFCD00}Авторизация",
									"{FFFFFF}Введите PIN-код счета:",
									"Ввести", "Отмена"
								);
							}
						}
					}
				}
				else ShowPlayerBankDialog(playerid);
			}
			case DIALOG_BANK_ACCOUNT_LOGIN:
			{
				if(response)
				{
					new accountid = GetPlayerUseListitem(playerid);
					if(IsValidBankAccount(playerid, accountid))
					{
						new len = strlen(inputtext);
						new pin_len = strlen(GetBankAccountData(playerid, accountid, BA_PIN_CODE));
						if(!strcmp(GetBankAccountData(playerid, accountid, BA_PIN_CODE), inputtext, false) && pin_len && len)
						{
							ShowPlayerBankAccountOperation(playerid);
						}
						else
						{
							Dialog
							(
								playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
								"{FF9900}Ошибка",
								"{FFFFFF}Вы допустили ошибку при вводе PIN-кода",
								"Закрыть", ""
							);
						}
					}
				}
			}
			case DIALOG_BANK_ACCOUNT_OPERATION:
			{
				if(response)
				{
					new accountid = GetPlayerUseListitem(playerid);
					if(IsValidBankAccount(playerid, accountid))
					{
						switch(listitem + 1)
						{
							case 1: // Информация о счете
							{
								UpdateBankAccountData(playerid, accountid);

								new fmt_str[128];
								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}Номер счета:\t\t%d\n"\
									"Наименование:\t\"%s\"\n"\
									"Баланс:\t\t{00CC66}%d руб",
									GetBankAccountData(playerid, accountid, BA_ID),
									GetBankAccountData(playerid, accountid, BA_NAME),
									GetBankAccountData(playerid, accountid, BA_BALANCE)
								);
								Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "{FFCD00}Информация", fmt_str, "Вернуться", "");
							}
							case 2: // История операций
							{
								ShowPlayerBankAccountLog(playerid, GetBankAccountData(playerid, accountid, BA_ID));
							}
							case 3: // Снять деньги
							{
								Dialog
								(
									playerid, DIALOG_BANK_ACCOUNT_TAKE_MONEY, DIALOG_STYLE_INPUT,
									"{FFCD00}Снять деньги",
									"{FFFFFF}Укажите сумму:",
									"Снять", "Отмена"
								);
							}
							case 4: // Положить деньги
							{
								Dialog
								(
									playerid, DIALOG_BANK_ACCOUNT_PUT_MONEY, DIALOG_STYLE_INPUT,
									"{FFCD00}Положить деньги",
									"{FFFFFF}Укажите сумму:",
									"Положить", "Отмена"
								);
							}
							case 5: // Перевести на другой счет
							{
								if(!PlayerTotalOnline(playerid, 24))
									return SendClientMessage(playerid, 0x999999FF, "Для перевода денег необходимо отыграть 24 часа");

								if(GetPlayerLevel(playerid) >= 2)
								{
									Dialog
									(
										playerid, DIALOG_BANK_ACCOUNT_TRANSFER_1, DIALOG_STYLE_INPUT,
										"{FFCD00}Перевод средств",
										"{FFFFFF}Укажите номер счета, на который\n"\
										"хотите осуществить перевод:",
										"Далее", "Отмена"
									);
								}
								else SendClientMessage(playerid, 0x999999FF, "Перевод денег доступен только со 2 уровня");
							}
							case 6: // Переименовать счет
							{
								Dialog
								(
									playerid, DIALOG_BANK_ACCOUNT_CHANGE_NAME, DIALOG_STYLE_INPUT,
									"{FFCD00}Переименование счета",
									"{FFFFFF}Введите новое название для этого счета.\n"\
									"Максимальная длина 20 символов:",
									"Ок", "Отмена"
								);
							}
							case 7: // Изменить PIN-код
							{
								Dialog
								(
									playerid, DIALOG_BANK_ACCOUNT_CHANGE_PIN, DIALOG_STYLE_INPUT,
									"{FFCD00}Изменение PIN-кода",
									"{FFFFFF}Введите новый PIN-код.\n"\
									"Длина от 4 до 8 цифр:",
									"Ок", "Отмена"
								);
							}
						}
					}
				}
				else ShowPlayerBankDialog(playerid);
			}
			case DIALOG_BANK_ACCOUNT_INFO:
			{
				ShowPlayerBankAccountOperation(playerid);
			}
			case DIALOG_BANK_ACCOUNT_TAKE_MONEY:
			{
				new accountid = GetPlayerUseListitem(playerid);
				if(response)
				{
					if(IsValidBankAccount(playerid, accountid))
					{
						new take_sum = strval(inputtext);
						if(take_sum > 0 && IsNumeric(inputtext))
						{
							UpdateBankAccountData(playerid, accountid);

							new fmt_str[155];
							new balance = GetBankAccountData(playerid, accountid, BA_BALANCE);

							if(balance >= take_sum)
							{
								format(fmt_str, sizeof fmt_str, "UPDATE accounts a,bank_accounts ba SET a.money=%d,ba.balance=ba.balance - %d WHERE a.id=%d AND ba.id=%d", GetPlayerMoneyEx(playerid)+take_sum, take_sum, GetPlayerAccountID(playerid), GetBankAccountData(playerid, accountid, BA_ID));
								mysql_query(mysql, fmt_str, false);

								if(!mysql_errno())
								{
									GivePlayerMoneyEx(playerid, take_sum, "Снятие с банк. счета (банк)", false, true);
									SetBankAccountData(playerid, accountid, BA_BALANCE, balance - take_sum);

									format(fmt_str, sizeof fmt_str, "- Снятие наличных %d руб", take_sum);
									BankAccountLog(playerid, GetBankAccountData(playerid, accountid, BA_ID), fmt_str);

									format
									(
										fmt_str, sizeof fmt_str,
										"{FFFFFF}Счет:\t\t№%d\n"\
										"Вы сняли:\t{FF9900}%d руб\n"\
										"{FFFFFF}Остаток:\t%d руб",
										GetBankAccountData(playerid, accountid, BA_ID),
										take_sum,
										GetBankAccountData(playerid, accountid, BA_BALANCE)
									);
									return Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "{3399FF}Операция завершена успешно", fmt_str, "Вернуться", "");
								}
								else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 09)");
							}
							else
							{
								format(fmt_str, sizeof fmt_str, "Недостаточно средств. Текущий баланс счета №%d: {009966}%d руб", GetBankAccountData(playerid, accountid, BA_ID), balance);
								SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
							}
						}

						Dialog
						(
							playerid, DIALOG_BANK_ACCOUNT_TAKE_MONEY, DIALOG_STYLE_INPUT,
							"{FFCD00}Снять деньги",
							"{FFFFFF}Укажите сумму:",
							"Снять", "Отмена"
						);
					}
				}
				else ShowPlayerBankAccountOperation(playerid);
			}
			case DIALOG_BANK_ACCOUNT_PUT_MONEY:
			{
				new accountid = GetPlayerUseListitem(playerid);
				if(response)
				{
					if(IsValidBankAccount(playerid, accountid))
					{
						new put_sum = strval(inputtext);
						if(put_sum > 0 && IsNumeric(inputtext))
						{
							UpdateBankAccountData(playerid, accountid);

							new fmt_str[155];
							new money = GetPlayerMoneyEx(playerid);
							new balance = GetBankAccountData(playerid, accountid, BA_BALANCE);

							if(money >= put_sum)
							{
								format(fmt_str, sizeof fmt_str, "UPDATE accounts a,bank_accounts ba SET a.money=%d,ba.balance=ba.balance + %d WHERE a.id=%d AND ba.id=%d", money-put_sum, put_sum, GetPlayerAccountID(playerid), GetBankAccountData(playerid, accountid, BA_ID));
								mysql_query(mysql, fmt_str, false);

								if(!mysql_errno())
								{
									GivePlayerMoneyEx(playerid, -put_sum, "Пополнение банк. счета (банк)", false, true);
									SetBankAccountData(playerid, accountid, BA_BALANCE, balance + put_sum);

									format(fmt_str, sizeof fmt_str, "+ Пополнение на сумму %d руб", put_sum);
									BankAccountLog(playerid, GetBankAccountData(playerid, accountid, BA_ID), fmt_str);

									format
									(
										fmt_str, sizeof fmt_str,
										"{FFFFFF}Счет:\t\t\t№%d\n"\
										"Вы положили:\t{00CC00}%d руб\n"\
										"{FFFFFF}Итоговый баланс:\t%d руб",
										GetBankAccountData(playerid, accountid, BA_ID),
										put_sum,
										GetBankAccountData(playerid, accountid, BA_BALANCE)
									);
									return Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "{3399FF}Операция завершена успешно", fmt_str, "Вернуться", "");
								}
								else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 09)");
							}
							else SendClientMessage(playerid, 0xFFFFFFFF, "Недостаточно средств");
						}

						Dialog
						(
							playerid, DIALOG_BANK_ACCOUNT_PUT_MONEY, DIALOG_STYLE_INPUT,
							"{FFCD00}Положить деньги",
							"{FFFFFF}Укажите сумму:",
							"Положить", "Отмена"
						);
					}
				}
				else ShowPlayerBankAccountOperation(playerid);
			}
			case DIALOG_BANK_ACCOUNT_TRANSFER_1:
			{
				new accountid = GetPlayerUseListitem(playerid);
				if(response)
				{
					if(IsValidBankAccount(playerid, accountid))
					{
						new transfer_id = strval(inputtext);
						if(transfer_id > 0 && IsNumeric(inputtext))
						{
							new fmt_str[64 + 1];
							new Cache: result;
							new rows;

							format(fmt_str, sizeof fmt_str, "SELECT id,name FROM bank_accounts WHERE id=%d LIMIT 1", transfer_id);
							result = mysql_query(mysql, fmt_str);

							if((rows = cache_num_rows()))
							{
								SetPlayerBankTransfer(playerid, BT_ID, cache_get_row_int(0, 0));
								cache_get_row(0, 1, g_player_bank_transfer[playerid][BT_NAME], mysql, 21);
							}
							cache_delete(result);

							if(rows)
							{
								return ShowPlayerBankAccountTransfer(playerid, accountid);
							}
							else SendClientMessage(playerid, 0xFF6600FF, "Счета с таким номером не существует");
						}

						Dialog
						(
							playerid, DIALOG_BANK_ACCOUNT_TRANSFER_1, DIALOG_STYLE_INPUT,
							"{FFCD00}Перевод средств",
							"{FFFFFF}Укажите номер счета, на который\n"\
							"хотите осуществить перевод:",
							"Далее", "Отмена"
						);
					}
				}
				else ShowPlayerBankAccountOperation(playerid);
			}
			case DIALOG_BANK_ACCOUNT_TRANSFER_2:
			{
				new accountid = GetPlayerUseListitem(playerid);
				if(response)
				{
					if(IsValidBankAccount(playerid, accountid))
					{
						new transfer_sum = strval(inputtext);
						new transfer_id = GetPlayerBankTransfer(playerid, BT_ID);

						if(transfer_sum > 0 && IsNumeric(inputtext))
						{
							UpdateBankAccountData(playerid, accountid);

							new balance = GetBankAccountData(playerid, accountid, BA_BALANCE);
							if(balance >= transfer_sum)
							{
								new fmt_str[160];

								if(GetBankAccountData(playerid, accountid, BA_ID) != transfer_id)
								{
									format(fmt_str, sizeof fmt_str, "UPDATE bank_accounts SET balance=balance-%d WHERE id=%d LIMIT 1", transfer_sum, GetBankAccountData(playerid, accountid, BA_ID));
									mysql_query(mysql, fmt_str, false);

									format(fmt_str, sizeof fmt_str, "UPDATE bank_accounts SET balance=balance+%d WHERE id=%d LIMIT 1", transfer_sum, transfer_id);
									mysql_query(mysql, fmt_str, false);

									SetBankAccountData(playerid, accountid, BA_BALANCE, balance - transfer_sum);
								}
								format(fmt_str, sizeof fmt_str, "- Перевод %d руб на счет №%d", transfer_sum, transfer_id);
								BankAccountLog(playerid, GetBankAccountData(playerid, accountid, BA_ID), fmt_str);

								format(fmt_str, sizeof fmt_str, "+ Перевод %d руб со счета №%d", transfer_sum, GetBankAccountData(playerid, accountid, BA_ID));
								BankAccountLog(playerid, transfer_id, fmt_str);

								SetPlayerBankTransfer(playerid, BT_ID, 0);

								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}Со счета:\t\t\t№%d\n"\
									"На счет:\t\t\t№%d\n"\
									"Cумма перевода:\t\t{FF9900}%d руб\n"\
									"{FFFFFF}Остаток на Вашем счете:\t{00CC66}%d руб",
									GetBankAccountData(playerid, accountid, BA_ID),
									transfer_id,
									transfer_sum,
									GetBankAccountData(playerid, accountid, BA_BALANCE)
								);
								Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "{3399FF}Перевод успешно выполнен", fmt_str, "Вернуться", "");
							}
							else
							{
								SendClientMessage(playerid, 0xFF6600FF, "На счету недостаточно средств для перевода");
								ShowPlayerBankAccountTransfer(playerid, accountid);
							}
						}
						else ShowPlayerBankAccountTransfer(playerid, accountid);
					}
				}
				else ShowPlayerBankAccountOperation(playerid);
			}
			case DIALOG_BANK_ACCOUNT_CHANGE_NAME:
			{
				new accountid = GetPlayerUseListitem(playerid);
				if(response)
				{
					if(IsValidBankAccount(playerid, accountid))
					{
						new len = strlen(inputtext);

						if(3 <= len <= 20)
						{
							if(!IsABadBankAccountName(inputtext))
							{
								new fmt_str[128];

								mysql_format(mysql, fmt_str, sizeof fmt_str, "UPDATE bank_accounts SET name='%e' WHERE id=%d LIMIT 1", inputtext, GetBankAccountData(playerid, accountid, BA_ID));
								mysql_query(mysql, fmt_str, false);

								if(!mysql_errno())
								{
									format(g_bank_account[playerid][accountid][BA_NAME], 21, "%s", inputtext);

									format(fmt_str, sizeof fmt_str, "* Переименование счета на \"%s\"", inputtext);
									BankAccountLog(playerid, GetBankAccountData(playerid, accountid, BA_ID), fmt_str);

									format
									(
										fmt_str, sizeof fmt_str,
										"{FFFFFF}Счет успешно переименован.\n"\
										"Теперь он будет доступен под названием \"%s\"",
										GetBankAccountData(playerid, accountid, BA_NAME)
									);
									return Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "{FFCD00}Завершение", fmt_str, "Вернуться", "");
								}
								else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 10)");
							}
							else
							{
								SendClientMessage(playerid, 0xFF6600FF, "Недопустимые символы в новом названии");
								SendClientMessage(playerid, 0xFF6600FF, "Можно использовать {FFCC15}русские {FF6600}и {FFCC15}английские {FF6600}буквы, а также {FFCC15}цифры");
							}
						}
						else SendClientMessage(playerid, 0xFF6600FF, "Длина названия счета может быть от {FFCC15}3 до 20 {FF6600}символов");

						Dialog
						(
							playerid, DIALOG_BANK_ACCOUNT_CHANGE_NAME, DIALOG_STYLE_INPUT,
							"{FFCD00}Переименование счета",
							"{FFFFFF}Введите новое название для этого счета.\n"\
							"Максимальная длина 20 символов:",
							"Ок", "Отмена"
						);
					}
				}
				else ShowPlayerBankAccountOperation(playerid);
			}
			case DIALOG_BANK_ACCOUNT_CHANGE_PIN:
			{
				new accountid = GetPlayerUseListitem(playerid);
				if(response)
				{
					if(IsValidBankAccount(playerid, accountid))
					{
						new len = strlen(inputtext);

						if(4 <= len <= 8 && IsNumeric(inputtext))
						{
							new fmt_str[128];

							mysql_format(mysql, fmt_str, sizeof fmt_str, "UPDATE bank_accounts SET pin='%e' WHERE id=%d LIMIT 1", inputtext, GetBankAccountData(playerid, accountid, BA_ID));
							mysql_query(mysql, fmt_str, false);

							if(!mysql_errno())
							{
								format(g_bank_account[playerid][accountid][BA_PIN_CODE], 9, "%s", inputtext);
								BankAccountLog(playerid, GetBankAccountData(playerid, accountid, BA_ID), "* Изменение PIN-кода");

								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}PIN-код успешно изменен.\n"\
									"Рекомендуем сделать скрин (F8) чтобы не забыть его: {CCFF00}%s",
									GetBankAccountData(playerid, accountid, BA_PIN_CODE)
								);
								return Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "{FFCD00}Изменение PIN", fmt_str, "Вернуться", "");
							}
							else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 10)");
						}

						Dialog
						(
							playerid, DIALOG_BANK_ACCOUNT_CHANGE_PIN, DIALOG_STYLE_INPUT,
							"{FFCD00}Изменение PIN-кода",
							"{FFFFFF}Введите новый PIN-код.\n"\
							"Длина от 4 до 8 цифр:",
							"Ок", "Отмена"
						);
					}
				}
				else ShowPlayerBankAccountOperation(playerid);
			}
			case DIALOG_BANK_CREATE_ACCOUNT:
			{
				if(response)
				{
					new len = strlen(inputtext);
					if(3 <= len <= 20)
					{
						if(!IsABadBankAccountName(inputtext))
						{
							new query[128];
							new Cache: result;
							new total_accounts;

							format(query, sizeof query, "SELECT COUNT(*) FROM bank_accounts WHERE uid=%d", GetPlayerAccountID(playerid));
							result = mysql_query(mysql, query);

							total_accounts = cache_get_row_int(0, 0);
							cache_delete(result);

							if(total_accounts < MAX_BANK_ACCOUNTS)
							{
								mysql_format(mysql, query, sizeof query, "INSERT INTO bank_accounts (uid,name,reg_time) VALUES (%d,'%e',%d)", GetPlayerAccountID(playerid), inputtext, gettime());
								mysql_query(mysql, query, false);

								if(!mysql_errno())
								{
									Dialog
									(
										playerid, DIALOG_BANK_CREATED_ACCOUNT, DIALOG_STYLE_MSGBOX,
										"{FFCD00}Счет создан",
										"{FFFFFF}Вы создали новый счет в банке.\n\n"\
										"Для доступа к нему используйте PIN-код {00FF66}0000{FFFFFF}. После входа\n"\
										"настоятельно рекомендуем изменить его на более сложный.\n"\
										"Это поможет защитить счет от несанкционированного доступа.",
										"Готово", ""
									);
								}
							}
							else Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFCD00}Лимит счетов", "{FFFFFF}Можно создать не более восьми банковских счетов", "Ок", "");
						}
						else
						{
							Dialog
							(
								playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
								"{FF3300}Ошибка",
								"{FFFFFF}Операция запрещена. Недопустимые символы в названии счета\n"\
								"Можно использовать {FFCC15}русские {FFFFFF}и {FFCC15}английские {FFFFFF}буквы, а также {FFCC15}цифры",
								"Выход", ""
							);
						}
					}
					else
					{
						Dialog
						(
							playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
							"{FF3300}Ошибка",
							"{FFFFFF}Длина названия счета может быть от {FFCC15}3 до 20 {FFFFFF}символов",
							"Закрыть", ""
						);
					}
				}
				else ShowPlayerBankDialog(playerid);
			}
			case DIALOG_BANK_CREATED_ACCOUNT:
			{
				ShowPlayerBankDialog(playerid);
			}
			// -----------------------------------------------------------------
			case DIALOG_PHONE_CALL:
			{
				if(response)
				{
					new number = strval(inputtext);

					if(number >= 0 && strlen(inputtext))
					{
						new params[16];
						valstr(params, number);

						callcmd::call(playerid, params);
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Ошибка набора");
				}
			}
			case DIALOG_PHONE_CALL_BALANCE:
			{
				SetPlayerPhoneUseState(playerid, false);
			}
			// -----------------------------------------------------------------
			case DIALOG_ACTION:
			{
				if(response)
				{
					if(1 <= (listitem+1) <= 4)
					{
						new targetid = GetPlayerData(playerid, P_TARGET_ID);

						if(IsPlayerConnected(targetid) && IsPlayerLogged(targetid))
						{
							if(IsPlayerInRangeOfPlayer(playerid, targetid, 10.0))
							{
								new params[5];
								valstr(params, targetid);

								new cmd[4][16] = {"cmd_hi", "cmd_pass", "cmd_lic", "cmd_skill"};
								CallLocalFunction(cmd[listitem], "ds", playerid, params);
							}
							else SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");
						}
						else SendClientMessage(playerid, 0x999999FF, "Игрок вышел из игры");
					}
					SetPlayerData(playerid, P_TARGET_ID, INVALID_PLAYER_ID);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_VIEV_JOBS_LIST:
			{
				if(response)
				{
					Dialog
					(
						playerid, DIALOG_JOIN_TO_JOB, DIALOG_STYLE_LIST,
						"{FFCD00}Список доступных работ",
						"1. Водитель автобуса\t\t\t{0099FF}2 лвл\n"\
						"2. Таксист\t\t\t\t{0099FF}3 лвл\n"\
						"3. Автомеханик\t\t\t{0099FF}4 лвл",
						//"4. Дальнобойщик\t\t\t{0099FF}4 лвл",

						/*
						"5. Уличный торговец\t\t\t{0099FF}6 лвл\n"\
						"6. Сотрудник МЧС\t\t\t{0099FF}7 лвл",
						*/
						"Выбрать", "Отмена"
					);
				}
			}
			case DIALOG_JOIN_TO_JOB:
			{
				if(response)
				{
					if(GetPlayerTeamEx(playerid) != 0)
						return SendClientMessage(playerid, 0x999999FF, "Вы не можете устроиться на работу, находясь во фракции");

					switch(listitem + 1)
					{
						case JOB_BUS_DRIVER:
						{
							if(GetPlayerLevel(playerid) < 2)
								return SendClientMessage(playerid, 0xCECECEFF, "Чтобы устроиться на работу водителя автобуса необходим 2 уровень");

							SendClientMessage(playerid, 0xFFFF00FF, "Поздравляем! {66CC00}Вы устроились на работу водителя автобуса");
							SendClientMessage(playerid, 0xFFFFFFFF, "Стоянки автобусов находятся на всех автостанциях. Используйте {0099FF}/gps {FFFFFF}чтобы найти ближайшую к вам");
						}
						case JOB_TAXI_DRIVER:
						{
							if(GetPlayerLevel(playerid) < 3)
								return SendClientMessage(playerid, 0xCECECEFF, "Чтобы устроиться на работу водителя такси необходим 3 уровень");

							SendClientMessage(playerid, 0xFFFF00FF, "Поздравляем! {66CC00}Вы устроились на работу таксиста");
							SendClientMessage(playerid, 0xFFFFFFFF, "Стоянки такси можно найти возле автостанций, ЖД вокзалов и других людных местах");
						}
						case JOB_MECHANIC:
						{
							if(GetPlayerLevel(playerid) < 4)
								return SendClientMessage(playerid, 0xCECECEFF, "Чтобы устроиться на работу автомеханика необходим 4 уровень");

							SendClientMessage(playerid, 0xFFFF00FF, "Поздравляем! {66CC00}Вы устроились на работу автомеханика");
							SendClientMessage(playerid, 0xFFFFFFFF, "Чтобы начать работу найдите служебный транспорт в Вашем городе. Используйте {FF9900}/gps {FFFFFF}при необходимости");
							SendClientMessage(playerid, 0xFFFFFFFF, "Команды: /getfuel - закупить топливо; /fill - заправить транспорт; /repair - починить транспорт");
						}
						/*case JOB_TRUCKER:
						{
							if(GetPlayerLevel(playerid) < 4)
								return SendClientMessage(playerid, 0xCECECEFF, "Чтобы устроиться на работу дальнобойщика необходим 4 уровень");

							SendClientMessage(playerid, 0xFFFF00FF, "Поздравляем! {66CC00}Вы устроились на работу дальнобойщика");
							SendClientMessage(playerid, 0xFFFFFFFF, "Используйте {FF9900}/gps {FFFFFF}чтобы найти стоянки транспорта для развозчиков");
							SendClientMessage(playerid, 0xFFFFFFFF, "Дополнительные инструкции и указания Вы будете получать в процессе работы");
						}*/
						default:
							return 1;
					}
					new query[64];

					format(query, sizeof query, "UPDATE accounts SET job=%d WHERE id=%d LIMIT 1", listitem + 1, GetPlayerAccountID(playerid));
					mysql_query(mysql, query, false);

					if(!mysql_errno())
					{
						SetPlayerData(playerid, P_JOB, listitem + 1);
					}
					else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 14)");
				}
			}
			case DIALOG_END_JOB:
			{
				if(response)
					EndPlayerJob(playerid);
			}
			case DIALOG_BUS_RENT_CAR:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);

					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);

					if(action_type == VEHICLE_ACTION_TYPE_BUS_DRIVER && action_id == VEHICLE_ACTION_ID_NONE)
					{
						if(GetPlayerMoneyEx(playerid) >= 180)
						{
							GivePlayerMoneyEx(playerid, -180, "Аренда автобуса", true, true);
							//SetVehicleData(vehicleid, V_ACTION_ID, true);

							SetPlayerData(playerid, P_JOB_CAR, vehicleid);
							return SendClientMessage(playerid, 0x66CC00FF, "Для того, чтобы начать работу водителя автобуса {FF9900}нажмите ~k~~TOGGLE_SUBMISSIONS~");
						}
						else SendClientMessage(playerid, 0x999999FF, "У Вас недостаточно денег чтобы заключить договор аренды");
					}
				}
				RemovePlayerFromVehicle(playerid);
			}
			case DIALOG_BUS_ROUTE_COST:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);

					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);

					if(action_type == VEHICLE_ACTION_TYPE_BUS_DRIVER && action_id == VEHICLE_ACTION_ID_NONE)
					{
						new route_cost = strval(inputtext);

						if(0 <= route_cost <= 100 && IsNumeric(inputtext))
						{
							SetPlayerData(playerid, P_JOB_TARIFF, route_cost);

							Dialog
							(
								playerid, DIALOG_BUS_ROUTE_SELECTION, DIALOG_STYLE_LIST,
								"{FFCD00}Выберите маршрут",
								g_bus_routes_list,
								"Ок", "Отмена"
							);
						}
						else
						{
							Dialog
							(
								playerid, DIALOG_BUS_ROUTE_COST, DIALOG_STYLE_INPUT,
								"{FFCD00}Стоимость проезда",
								"{FFFFFF}Сколько будет стоить проезд?\n"\
								"Укажите цену от 0 до 100 рублей",
								"Далее", "Отмена"
							);
						}
					}
				}
			}
			case DIALOG_BUS_ROUTE_SELECTION:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);

					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);

					if(action_type == VEHICLE_ACTION_TYPE_BUS_DRIVER && action_id == VEHICLE_ACTION_ID_NONE)
					{
						if(0 <= listitem <= sizeof g_bus_routes - 1)
						{
							SetPlayerData(playerid, P_BUS_ROUTE_STEP, 0);
							SetPlayerData(playerid, P_BUS_ROUTE, listitem);

							StartPlayerJob(playerid, JOB_BUS_DRIVER);
						}
					}
				}
			}
			case DIALOG_TAXI_RENT_CAR:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);

					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);

					if(action_type == VEHICLE_ACTION_TYPE_TAXI_DRIVER && action_id == VEHICLE_ACTION_ID_NONE)
					{
						if(GetPlayerMoneyEx(playerid) >= 200)
						{
							GivePlayerMoneyEx(playerid, -200, "Аренда такси", true, true);
							//SetVehicleData(vehicleid, V_ACTION_ID, true);

							SetPlayerData(playerid, P_JOB_CAR, vehicleid);
							return SendClientMessage(playerid, 0x66CC00FF, "Для того, чтобы начать работу таксиста {FF9900}нажмите ~k~~TOGGLE_SUBMISSIONS~");
						}
						else SendClientMessage(playerid, 0x999999FF, "У Вас недостаточно денег чтобы заключить договор аренды");
					}
				}
				RemovePlayerFromVehicle(playerid);
			}
			case DIALOG_TAXI_NAME:
			{
				if(response)
				{
					if(!(1 <= strlen(inputtext) <= 15))
					{
						Dialog
						(
							playerid, DIALOG_TAXI_NAME, DIALOG_STYLE_INPUT,
							"{FFCD00}Название такси",
							"{FFFFFF}Придумайте название для вашего такси\n"\
							"Максимальная длина 15 символов\n\n"\
							"Если вы не хотите как-то называться\n"\
							"нажмите кнопку \"Пропустить\"",
							"Далее", "Пропустить"
						);
						return 1;
					}
					else format(g_player[playerid][P_JOB_SERVICE_NAME], 17, "%s\n", inputtext);
				}
				else g_player[playerid][P_JOB_SERVICE_NAME][0] = 0;

				Dialog
				(
					playerid, DIALOG_TAXI_TARIFF, DIALOG_STYLE_INPUT,
					"{FFCD00}Настройка счетчика",
					"{FFFFFF}Укажите тариф по которому будет работать ваше такси\n"\
					"Эта сумма будет сниматься с пассажира каждые 100 м поездки\n"\
					"Тарифная ставка может быть от 0 до 200 рублей",
					"Ок", "Отмена"
				);
			}
			case DIALOG_TAXI_TARIFF:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);

					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);

					if(action_type == VEHICLE_ACTION_TYPE_TAXI_DRIVER && action_id == VEHICLE_ACTION_ID_NONE)
					{
						new tariff = strval(inputtext);

						if(!(0 <= tariff <= 200) || !IsNumeric(inputtext))
						{
							Dialog
							(
								playerid, DIALOG_TAXI_TARIFF, DIALOG_STYLE_INPUT,
								"{FFCD00}Настройка счетчика",
								"{FFFFFF}Укажите тариф по которому будет работать ваше такси\n"\
								"Эта сумма будет сниматься с пассажира каждые 100 м поездки\n"\
								"Тарифная ставка может быть от 0 до 200 рублей",
								"Ок", "Отмена"
							);
							return 1;
						}
						else
						{
							SetPlayerData(playerid, P_JOB_TARIFF, tariff);
							StartPlayerJob(playerid, JOB_TAXI_DRIVER);
						}
					}
				}
				g_player[playerid][P_JOB_SERVICE_NAME][0] = 0;
			}
			case DIALOG_MECHANIC_RENT_CAR:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);

					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);

					if(action_type == VEHICLE_ACTION_TYPE_MECHANIC && action_id == VEHICLE_ACTION_ID_NONE)
					{
						if(GetPlayerMoneyEx(playerid) >= 180)
						{
							GivePlayerMoneyEx(playerid, -180, "Аренда эвакуатора", true, true);
							//SetVehicleData(vehicleid, V_ACTION_ID, true);

							SetPlayerData(playerid, P_JOB_CAR, vehicleid);
							return SendClientMessage(playerid, 0x66CC00FF, "Для того, чтобы начать работу автомеханика {FF9900}нажмите ~k~~TOGGLE_SUBMISSIONS~");
						}
						else SendClientMessage(playerid, 0x999999FF, "У Вас недостаточно денег чтобы заключить договор аренды");
					}
				}
				RemovePlayerFromVehicle(playerid);
			}
			case DIALOG_MECHANIC_START_JOB:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);

					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);

					if(action_type == VEHICLE_ACTION_TYPE_MECHANIC && action_id == VEHICLE_ACTION_ID_NONE)
					{
						Dialog
						(
							playerid, DIALOG_MECHANIC_NAME, DIALOG_STYLE_INPUT,
							"{FFCD00}Автомеханик",
							"{FFFFFF}Введите название для Вашей техслужбы,\n"\
							"или оставьте поле пустым",
							"Готово", "Отмена"
						);
					}
				}
			}
			case DIALOG_MECHANIC_NAME:
			{
				if(response)
				{
					new len = strlen(inputtext);

					if(len)
					{
						if(!(1 <= len <= 15))
						{
							Dialog
							(
								playerid, DIALOG_MECHANIC_NAME, DIALOG_STYLE_INPUT,
								"{FFCD00}Автомеханик",
								"{FFFFFF}Введите название для Вашей техслужбы,\n"\
								"или оставьте поле пустым",
								"Готово", "Отмена"
							);
							return SendClientMessage(playerid, 0xCECECEFF, "Слишком длинное название | 15 символов максимум");
						}
						else format(g_player[playerid][P_JOB_SERVICE_NAME], 17, "%s\n", inputtext);
					}
					else g_player[playerid][P_JOB_SERVICE_NAME][0] = 0;

					StartPlayerJob(playerid, JOB_MECHANIC);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_TRUCKER_RENT_CAR:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);

					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);

					if(action_type == VEHICLE_ACTION_TYPE_TRUCKER && action_id == VEHICLE_ACTION_ID_NONE)
					{
						if(GetPlayerMoneyEx(playerid) >= 180)
						{
							GivePlayerMoneyEx(playerid, -180, "Аренда грузовика", true, true);
							//SetVehicleData(vehicleid, V_ACTION_ID, true);

							SetPlayerData(playerid, P_JOB_CAR, vehicleid);
							return SendClientMessage(playerid, 0x66CC00FF, "Для того, чтобы начать работу дальнобойщика {FF9900}нажмите ~k~~TOGGLE_SUBMISSIONS~");
						}
						else SendClientMessage(playerid, 0x999999FF, "У Вас недостаточно денег чтобы заключить договор аренды");
					}
				}
				RemovePlayerFromVehicle(playerid);
			}
			case DIALOG_TRUCKER_START_JOB:
			{
				if(response)
				{
					StartPlayerJob(playerid, JOB_TRUCKER);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_PHONE_BOOK:
			{
				if(response && (0 <= listitem <= MAX_PHONE_BOOK_CONTACTS-1))
				{
					ShowPhoneBookOperation(playerid, PHONE_BOOK_OPERATION_OPTIONS, listitem);
				}
			}
			case DIALOG_PHONE_BOOK_OPTION:
			{
				new contactid = GetPlayerPhoneBookSelectContact(playerid);
				if(contactid != INVALID_PLAYER_ID)
				{
					if(response)
					{
						ShowPhoneBookOperation(playerid, listitem + 1, contactid);
					}
					else ShowPlayerPhoneBook(playerid);
				}
			}
			case DIALOG_PHONE_BOOK_SEND_SMS:
			{
				if(response)
				{
					new len = strlen(inputtext);
					if(len)
					{
						if(len < 65)
						{
							new contactid = GetPlayerPhoneBookSelectContact(playerid);
							new fmt_str[90];

							format(fmt_str, sizeof fmt_str, "%s %s", GetPlayerPhoneBook(playerid, contactid, PB_NUMBER), inputtext);
							callcmd::sms(playerid, fmt_str);
							return 1;
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Слишком длинное сообщение");
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Введите сообщение для отправки");

					ShowPhoneBookOperation(playerid, PHONE_BOOK_OPERATION_SEND_SMS);
				}
				else ShowPhoneBookOperation(playerid, PHONE_BOOK_OPERATION_OPTIONS);
			}
			case DIALOG_PHONE_BOOK_CHANGE_NAME:
			{
				if(response)
				{
					if(3 <= strlen(inputtext) <= 20)
					{
						new contactid = GetPlayerPhoneBookSelectContact(playerid);
						new query[90];

						format(g_player_phone_book[playerid][contactid][PB_NAME], 21, "%s", inputtext);

						mysql_format(mysql, query, sizeof query, "UPDATE phone_books SET name='%e' WHERE id=%d LIMIT 1", inputtext, GetPlayerPhoneBook(playerid, contactid, PB_SQL_ID));
						mysql_query(mysql, query, false);

						SendClientMessage(playerid, 0x99CC33FF, "Имя контакта изменено");
						ShowPlayerPhoneBook(playerid);
					}
					else ShowPhoneBookOperation(playerid, PHONE_BOOK_OPERATION_CHANGE_NAM);
				}
				else ShowPhoneBookOperation(playerid, PHONE_BOOK_OPERATION_OPTIONS);
			}
			case DIALOG_PHONE_BOOK_CHANGE_NUMBER:
			{
				if(response)
				{
					if(3 <= strlen(inputtext) <= 9 && strval(inputtext) > 0 && IsNumeric(inputtext))
					{
						if(!CheckPhoneBookUsedNumber(playerid, inputtext))
						{
							new contactid = GetPlayerPhoneBookSelectContact(playerid);
							new query[90];

							format(g_player_phone_book[playerid][contactid][PB_NUMBER], 10, "%s", inputtext);

							mysql_format(mysql, query, sizeof query, "UPDATE phone_books SET number='%e' WHERE id=%d LIMIT 1", inputtext, GetPlayerPhoneBook(playerid, contactid, PB_SQL_ID));
							mysql_query(mysql, query, false);

							SendClientMessage(playerid, 0x99CC33FF, "Номер контакта изменен");
							ShowPlayerPhoneBook(playerid);
						}
					}
					else ShowPhoneBookOperation(playerid, PHONE_BOOK_OPERATION_CHANGE_NUM);
				}
				else ShowPhoneBookOperation(playerid, PHONE_BOOK_OPERATION_OPTIONS);
			}
			case DIALOG_PHONE_BOOK_ADD_CONTACT:
			{
				if(response)
				{
					new player_name[20 + 1];
					GetPVarString(playerid, "add_contact_name", player_name, sizeof(player_name));

					if(!(3 <= strlen(inputtext) <= 9) || strval(inputtext) < 1 || !IsNumeric(inputtext))
					{
						new fmt_str[64 + 1];

						format(fmt_str, sizeof fmt_str, "{FFFFFF}Введите номер телефона для контакта %s", player_name);
						Dialog(playerid, DIALOG_PHONE_BOOK_ADD_CONTACT, DIALOG_STYLE_INPUT, "{FFCD00}Добавление нового контакта", fmt_str, "Добавить", "Отмена");

						return 1;
					}
					AddPhoneBookContact(playerid, player_name, inputtext);
				}
				DeletePVar(playerid, "add_contact_name");
			}
			// -----------------------------------------------------------------
			case DIALOG_MINER_BUY_METALL:
			{
				if(response)
				{
					new count = strval(inputtext);
					new metall = GetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_AMOUNT);

					if(IsNumeric(inputtext))
					{
						if(metall >= count)
						{
							if(1 <= count <= 50)
							{
								if((GetPlayerData(playerid, P_METALL) + count) <= 20)
								{
									new sum = count * 15;
									if(GetPlayerMoneyEx(playerid) >= sum)
									{
										new fmt_str[80];

										format(fmt_str, sizeof fmt_str, "UPDATE accounts SET money=%d,metall=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-sum, GetPlayerData(playerid, P_METALL) + count, GetPlayerAccountID(playerid));
										mysql_query(mysql, fmt_str, false);

										if(!mysql_errno())
										{
											SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_AMOUNT, metall - count);
											UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL);

											AddPlayerData(playerid, P_METALL, +, count);

											format(fmt_str, sizeof fmt_str, "Вы купили %d кг за %d рублей", count, count * 15);
											SendClientMessage(playerid, 0x3399FFFF, fmt_str);

											return GivePlayerMoneyEx(playerid, -sum, "Покупка металла на шахте", false, true);
										}
										else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 12)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег для покупки такого количества металла");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Вы не можете носить с собой более 20 кг металла");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Можно купить от 1 до 50 кг металла");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "На складе шахты нет такого количества металла");
					}
					ShowPlayerBuyMetalDialog(playerid);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_TEMP_JOB_LOADER_START:
			{
				if(response)
				{
					if(GetPlayerTempJob(playerid) == TEMP_JOB_NONE)
					{
						//TogglePlayerDynamicCP(playerid, help_info_CP, false);

						SetPlayerSkin(playerid, GetTempJobInfo(TEMP_JOB_LOADER, TJ_SKIN)[GetPlayerSex(playerid)]);
					//	SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_THIGH, 18635, A_OBJECT_BONE_RIGHT_THIGH, 0.2, -0.06, 0.1, 0.0, -90.0, 90.0, 1.0, 1.0, 1.0, 0);

						SetPlayerJobLoadItems(playerid, 0);
						SetPlayerTempJob(playerid, TEMP_JOB_LOADER);

						SetPlayerLoaderJobLoadCP(playerid);

						SendClientMessage(playerid, COR_SERVER, "[Успешно]: "c_server"Вы начали работу грузчика!");
						SendClientMessage(playerid, COR_SERVER, "[Информация]: "c_server"Точки доставки груза помечены {FF0000}красным "c_server"маркером!");
					}
				}
			}
			case DIALOG_TEMP_JOB_LOADER_END:
			{
				if(response)
				{
					EndPlayerTempJob(playerid, TEMP_JOB_LOADER);
				}
			}
			case DIALOG_TEMP_JOB_MINER_START:
			{
				if(response)
				{
					if(GetPlayerTempJob(playerid) == TEMP_JOB_NONE)
					{
						SetPlayerSkin(playerid, GetTempJobInfo(TEMP_JOB_MINER, TJ_SKIN)[GetPlayerSex(playerid)]);
				//		SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 18634, A_OBJECT_BONE_RIGHT_HAND, 0.07, 0.03, 0.04, 0.0, 270.0, 270.0, 1.5, 2.1, 1.8, 0);

						SetPlayerJobLoadItems(playerid, 0);
						SetPlayerTempJob(playerid, TEMP_JOB_MINER);

						SetPlayerTempJobState(playerid, TEMP_JOB_STATE_MINER_LOAD);
						SetPlayerMinerJobLoadCP(playerid);

						SendClientMessage(playerid, 0x3399FFFF, "Вы начали работу шахтера");
						SendClientMessage(playerid, 0x66CC00FF, "Ищите месторождения железной руды на территории шахты");
						SendClientMessage(playerid, 0x66CC00FF, "Добытое сырье относите на склад для переплавки");
					}
				}
			}
			case DIALOG_TEMP_JOB_MINER_END:
			{
				if(response)
				{
					EndPlayerTempJob(playerid, TEMP_JOB_MINER);
				}
			}
			case DIALOG_TEMP_JOB_FACTORY_TRUCKER:
			{
				if(response)
				{
					new job = GetPlayerTempJob(playerid);

					switch(job)
					{
						case TEMP_JOB_NONE:
						{
							new skin = GetTempJobInfo(TEMP_JOB_FACTORY_TRUCKER, TJ_SKIN)[GetPlayerSex(playerid)];

							ClearAnimations(playerid);
							SetPlayerSkin(playerid, skin);

							if(GetPlayerSex(playerid))
					//		SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HEAD, 18638, A_OBJECT_BONE_HEAD, 0.16, 0.02, 0.0, 0.0, 0.0, 0.0, 1.0, 1.1, 1.12, 0);

							SetPlayerJobLoadItems(playerid, 0);
							SetPlayerTempJob(playerid, TEMP_JOB_FACTORY_TRUCKER);
							SetPlayerTempJobState(playerid, TEMP_JOB_STATE_NONE);

							SendClientMessage(playerid, 0x3399FFFF, "Вы начали работу в службе доставки завода");
							SendClientMessage(playerid, 0x66CC00FF, "Для получения информации воспользуйтесь инструкцией рядом с Вами");

							SetPlayerData(playerid, P_IN_JOB, true);
						}
						case TEMP_JOB_FACTORY_TRUCKER:
						{
							EndPlayerJob(playerid);
						}
					}
				}
			}
			case DIALOG_TEMP_JOB_FACTORY:
			{
				if(response)
				{
					new job = GetPlayerTempJob(playerid);

					switch(job)
					{
						case TEMP_JOB_NONE:
						{
							new skin = GetTempJobInfo(TEMP_JOB_FACTORY, TJ_SKIN)[GetPlayerSex(playerid)];
							if(!GetPlayerSex(playerid))
							{
								skin += random(2);
							}

							ClearAnimations(playerid);
							SetPlayerSkin(playerid, skin);
						//	SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HEAD, 18638, A_OBJECT_BONE_HEAD, 0.16, 0.02, 0.0, 0.0, 0.0, 0.0, 1.0, 1.1, 1.12, 0);

							TogglePlayerFactoryCP(playerid, true);
							SetPlayerData(playerid, P_JOB_WAGE, 0);

							SetPlayerJobLoadItems(playerid, 0);
							SetPlayerTempJob(playerid, TEMP_JOB_FACTORY);

							SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_TAKE_MET);

							SendClientMessage(playerid, 0x3399FFFF, "Вы начали работу в производственном цеху завода");
							SendClientMessage(playerid, 0x66CC00FF, "Для получения информации воспользуйтесь инструкцией у входа в цех");

							DeletePVar(playerid, "factory_skill");
							DeletePVar(playerid, "factory_bad_prods");
							DeletePVar(playerid, "factory_take_metall");
						}
						case TEMP_JOB_FACTORY:
						{
							EndPlayerTempJob(playerid, TEMP_JOB_FACTORY);
						}
					}
				}
			}
			case DIALOG_TEMP_JOB_LUMBERJACK_ST:
			{
				if(response)
				{
					if(GetPlayerTempJob(playerid) == TEMP_JOB_NONE)
					{
						SetPlayerSkin(playerid, GetTempJobInfo(TEMP_JOB_MINER, TJ_SKIN)[GetPlayerSex(playerid)]);
					//	SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 326, A_OBJECT_BONE_RIGHT_HAND, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0);

						SetPlayerJobLoadItems(playerid, 0);
						SetPlayerTempJob(playerid, TEMP_JOB_LUMBERJACK);

						SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LUMBERJACK_CHOP);
						SetPlayerLumberJackChopCP(playerid);

						SendClientMessage(playerid, 0x3399FFFF, "Вы начали работу лесоруба");
						SendClientMessage(playerid, 0x3399FFFF, "Точки добычи дерева помечены {FF0000}красными {3399FF}маркерами");
					}
				}
			}
			case DIALOG_TEMP_JOB_LUMBERJACK_END:
			{
				if(response)
				{
					EndPlayerTempJob(playerid, TEMP_JOB_LUMBERJACK);
				}
			}
			case DIALOG_CONTENER2:
			{
				if(cont3 >=1)
				{
                    if(GetPlayerMoneyEx(playerid) >= 200000000)
					{
						new skin_cont[8] = {149, 59, 5, 3, 149, 287,276,280};

						new id = random(7);


						SetPlayerData(playerid, P_SKIN, skin_cont[id]);
		      			SendClientMessage(playerid, 0xFFFFFFFF, "Поздравляем! Открыв контейнер Вы получили эксклюзивный скин");
						UpdatePlayerDatabaseInt(playerid, "skin", skin_cont[id]);
						GivePlayerMoneyEx(playerid, -200000000, "Открытие контейнера");
						SetPlayerSkin(playerid, skin_cont[id]);
						cont3 -=1;
						SetPlayerSkinInit(playerid);
                    }
					else
				    	return SendClientMessage(playerid, -1, "У вас недостаточно денег!");
				}
				else
				    return SendClientMessage(playerid, -1, "Контейнеров данного типа нету на складе!");
			}
			case DIALOG_CONTENER1:
			{
				if(cont1 >=1)
				{
				    if(GetPlayerMoneyEx(playerid) >= 500000)
					{
						switch(random(4))
						{
							case 0:
							{
	      						SendClientMessage(playerid, 0xFFFFFFFF, "Поздравляем! Открыв контейнер Вы получили 30 аптечек");
								GivePlayerMoneyEx(playerid, -500000, "Открытие контейнера", true, true);
								cont1 -=1;
								AddPlayerData(playerid, P_MED_CHEST, +, 30);
								UpdatePlayerDatabaseInt(playerid, "healme", GetPlayerData(playerid, P_MED_CHEST));
							}
							case 1:
							{
	      						SendClientMessage(playerid, 0xFFFFFFFF, "Поздравляем! Открыв контейнер Вы получили +50 EXP");
								GivePlayerMoneyEx(playerid, -500000, "Открытие контейнера", true, true);
								cont1 -=1;
								AddPlayerData(playerid, P_EXP, +, 50);
								UpdatePlayerDatabaseInt(playerid, "exp", GetPlayerData(playerid, P_EXP));
							}
							case 2:
							{
	      						SendClientMessage(playerid, 0xFFFFFFFF, "Поздравляем! Открыв контейнер Вы получили пачку денег суммой 50.000 руб");
								GivePlayerMoneyEx(playerid, -500000, "Открытие контейнера", true, true);
								GivePlayerMoneyEx(playerid, 50000, "Открытие контейнера", true, true);
								cont1 -=1;
							}
							case 3:
							{
	      						SendClientMessage(playerid, 0xFFFFFFFF, "Поздравляем! Открыв контейнер Вы получили биту");
								GivePlayerMoneyEx(playerid, -500000, "Открытие контейнера", true, true);
								cont1 -=1;
								GivePlayerWeapon(playerid, 5, 5); // Give playerid a sawn-off shotgun with 64 ammo
							}
							case 4:
							{
	      						SendClientMessage(playerid, 0xFFFFFFFF, "Поздравляем! Открыв контейнер Вы получили пачку денег суммой 2.000.000 руб");
								GivePlayerMoneyEx(playerid, -500000, "Открытие контейнера", true, true);
								GivePlayerMoneyEx(playerid, 2000000, "Открытие контейнера", true, true);
								cont1 -=1;
							}
						}
					}
					else
				    	return SendClientMessage(playerid, -1, "У вас недостаточно денег!!");
				}
				else
				    return SendClientMessage(playerid, -1, "Контейнеров данного типа нету на складе!");
			}
			// -----------------------------------------------------------------
			case DIALOG_FUEL_STATION_BUY:
			{
				if(response)
				{
					new stationid = GetPVarInt(playerid, "buy_fuel_st");

					if(IsPlayerInRangeOfPoint(playerid, 15.0, GetFuelStationData(stationid, FS_POS_X), GetFuelStationData(stationid, FS_POS_Y), GetFuelStationData(stationid, FS_POS_Z)))
					{
						if(!IsFuelStationOwned(stationid))
						{
							if(GetPlayerMoneyEx(playerid) >= GetFuelStationData(stationid, FS_PRICE))
							{
								SendClientMessage(playerid, 0xFFFFFFFF, "Поздравляем! Вы купили заправочную станцию");
								BuyPlayerFuelStation(playerid, stationid);

								PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
								Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{3399FF}Новая заправочная станция", "{FFFFFF}Вам нужно заплатить за аренду АЗС в ближайшем отделением банка {FFCD00}(/gps)", "Ок", "");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для покупки этой заправочной станции");
						}
						else
						{
							new fmt_str[75];

							format(fmt_str, sizeof fmt_str, "Эта заправочная станция уже куплена. Владелец: %s", GetFuelStationData(stationid, FS_OWNER_NAME));
							SendClientMessage(playerid, 0xCECECEFF, fmt_str);
						}
					}
				}
				DeletePVar(playerid, "buy_fuel_st");
			}
			case DIALOG_FUEL_STATION_INFO:
			{
				if(response)
				{
					ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_PARAMS);
				}
			}
			case DIALOG_FUEL_STATION_PARAMS:
			{
				if(response)
				{
					ShowPlayerFuelStationDialog(playerid, listitem + 1);
				}
				else callcmd::fuelst(playerid, "");
			}
			case DIALOG_FUEL_STATION_NAME:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						if(3 <= strlen(inputtext) <= 15)
						{
							format(g_fuel_station[stationid][FS_NAME], 20, inputtext, 0);
							UpdateFuelStationLabel(stationid);

							SendClientMessage(playerid, 0x66CC00FF, "Название заправочной станции изменено");
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "Длина названия должна быть от 3-х до 15-ти символов");
							return ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_NEW_NAME);
						}
					}
					ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_PARAMS);
				}
			}
			case DIALOG_FUEL_STATION_PRICE_FUEL:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						new price = strval(inputtext);
						if(2 <= price <= 15 && IsNumeric(inputtext))
						{
							new fmt_str[75];

							SetFuelStationData(stationid, FS_FUEL_PRICE, price);
							UpdateFuelStationLabel(stationid);

							format(fmt_str, sizeof fmt_str, "Теперь топливо на Вашей заправке будет продаваться по %d руб за 1 литр", price);
							SendClientMessage(playerid, 0x66CC00FF, fmt_str);

							format(fmt_str, sizeof fmt_str, "UPDATE fuel_stations SET fuel_price=%d WHERE id=%d LIMIT 1", GetFuelStationData(stationid, FS_FUEL_PRICE), GetFuelStationData(stationid, FS_SQL_ID));
							mysql_query(mysql, fmt_str, false);
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "Укажите отпускную цену от 2 до 15 рублей за 1 литр");
							return ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_FUEL_PRICE);
						}
					}
					ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_PARAMS);
				}
			}
			case DIALOG_FUEL_STATION_BUY_FUEL_PR:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						new price = strval(inputtext);
						if(2 <= price <= 10 && IsNumeric(inputtext))
						{
							new fmt_str[90];
							SetFuelStationData(stationid, FS_BUY_FUEL_PRICE, price);

							format(fmt_str, sizeof fmt_str, "Теперь топливо для Вашей заправки будет закупаться по %d руб за 1 литр", price);
							SendClientMessage(playerid, 0x66CC00FF, fmt_str);

							format(fmt_str, sizeof fmt_str, "UPDATE fuel_stations SET buy_fuel_price=%d WHERE id=%d LIMIT 1", GetFuelStationData(stationid, FS_BUY_FUEL_PRICE), GetFuelStationData(stationid, FS_SQL_ID));
							mysql_query(mysql, fmt_str, false);
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "Укажите закупочную цену от 2 до 10 рублей за 1 литр");
							return ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_BUY_FUEL_PRIC);
						}
					}
					ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_PARAMS);
				}
			}
			case DIALOG_FUEL_STATION_ORDER_FUELS:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						new order_fuels = strval(inputtext);
						new fuel_price = 5;
						new price = order_fuels * fuel_price;

						if(order_fuels > 0 && IsNumeric(inputtext))
						{
							new fmt_str[256];

							new free_fuel_slots = GetFuelStationMaxFuel(stationid) - GetFuelStationData(stationid, FS_FUELS);

							if(free_fuel_slots > 8000)
								free_fuel_slots = 8000;

							if(order_fuels <= free_fuel_slots)
							{
								if(GetFuelStationData(stationid, FS_BALANCE) >= price)
								{
									AddFuelStationData(stationid, FS_BALANCE, -, price);

									format(fmt_str, sizeof fmt_str, "~w~fuel st. bank~n~~r~-$%d", price);

									AddFuelStationData(stationid, FS_FUELS, +, order_fuels);

									GameTextForPlayer(playerid, fmt_str, 4000, 1);

									format(fmt_str, sizeof fmt_str, "UPDATE fuel_stations SET balance=%d,fuels=%d WHERE id=%d LIMIT 1", GetFuelStationData(stationid, FS_BALANCE), GetFuelStationData(stationid, FS_FUELS), GetFuelStationData(stationid, FS_SQL_ID));
									mysql_query(mysql, fmt_str, false);

									format
									(
										fmt_str, sizeof fmt_str,
										"{FFFFFF}Параметры заказа:\n\n"\
										"Количество топлива:\t\t\t%d л\n"\
										"Стоимость 1 литра:\t\t\t$%d\n"\
										"Общая стоимость заказа:\t\t$%d\n"\
										"Топливо было успешно доставлено на АЗС",
										order_fuels,
										fuel_price,
										price
									);
									Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Заказ оформлен", fmt_str, "Закрыть", "");

									return 1;
								}
								else
								{
									format(fmt_str, sizeof fmt_str, "Чтобы оплатить заказ необходимо иметь $%d на счету АЗС", price);
									SendClientMessage(playerid, 0xCECECEFF, fmt_str);
								}
							}
							else
							{
								format(fmt_str, sizeof fmt_str, "Вы не можете заказать более %d литров топлива", free_fuel_slots);
								SendClientMessage(playerid, 0xCECECEFF, fmt_str);
							}
						}
					}
				}
			}
			case DIALOG_FUEL_STATION_ORDER_CANCE:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						new order_id = GetFuelStationData(stationid, FS_ORDER_ID);
						if(order_id != -1 && GetOrderData(order_id, O_SQL_ID) > 0)
						{
							if(!GetOrderData(order_id, O_USED))
							{
								new fmt_str[128];
								new return_money = GetOrderData(order_id, O_AMOUNT) * GetOrderData(order_id, O_PRICE);

								DeleteOrder(order_id);
								AddFuelStationData(stationid, FS_BALANCE, +, return_money);

								format(fmt_str, sizeof fmt_str, "UPDATE fuel_stations SET balance=%d WHERE id=%d LIMIT 1", GetFuelStationData(stationid, FS_BALANCE), GetFuelStationData(stationid, FS_SQL_ID));
								mysql_query(mysql, fmt_str, false);

								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}Вы отменили заказ топлива\n"\
									"На счет заправочной станции было возвращено {00CC00}%d руб",
									return_money
								);
								Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FF9900}Отмена заказа", fmt_str, "Закрыть", "");

								format(fmt_str, sizeof fmt_str, "~w~fuel st. bank~n~~g~+%d rub", return_money);
								GameTextForPlayer(playerid, fmt_str, 4000, 1);

								return 1;
							}
							else SendClientMessage(playerid, 0xFF6600FF, "Ваш заказ выполняется, его нельзя отменить");
						}
					}
					ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_PARAMS);
				}
			}
			case DIALOG_FUEL_STATION_IMPROVEMENT:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						if(0 <= listitem <= sizeof g_fuel_station_improvements - 1)
						{
							new i_level = GetFuelStationData(stationid, FS_IMPROVEMENTS);
							new i_price = g_fuel_station_improvements[listitem][I_PRICE];

							if(i_level < listitem)
							{
								SendClientMessage(playerid, 0xCECECEFF, "Этот уровень улучшений пока недоступен");
							}
							else if(i_level > listitem)
							{
								SendClientMessage(playerid, 0xCECECEFF, "Вы уже купили этот уровень улучшений");
							}
							else if(GetPlayerMoneyEx(playerid) < i_price)
							{
								new fmt_str[64];

								format(fmt_str, sizeof fmt_str, "Для покупки %d уровня улучшений необходимо %d рублей", listitem + 1, i_price);
								SendClientMessage(playerid, 0xCECECEFF, fmt_str);
							}
							else
							{
								new fmt_str[128];

								format(fmt_str, sizeof fmt_str, "UPDATE accounts a, fuel_stations f SET a.money=%d, f.improvements=%d WHERE a.id=%d AND f.id=%d", GetPlayerMoneyEx(playerid)-i_price, i_level + 1, GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID));
								mysql_query(mysql, fmt_str, false);

								if(!mysql_errno())
								{
									GivePlayerMoneyEx(playerid, -i_price, "Покупка улучшений для АЗС", false, true);

									format(fmt_str, sizeof fmt_str, "Вы улучшили свою заправочную станцию до {FFCD00}%s {3399FF}уровня", GetNumericName(listitem + 1));
									SendClientMessage(playerid, 0x3399FFFF, fmt_str);

									AddFuelStationData(stationid, FS_IMPROVEMENTS, +, 1);
									switch(listitem + 1)
									{
										case 1..3:
										{
											format(fmt_str, sizeof fmt_str, "Емкость топливного хранилища увеличена до %d литров", GetFuelStationMaxFuel(stationid));
											SendClientMessage(playerid, 0x66CC00FF, fmt_str);

											SendClientMessage(playerid, 0x999999FF, "Теперь можно меньше заботиться о его наполнении");
										}
										case 4:
										{
											SendClientMessage(playerid, 0x66CC00FF, "Акцизный сбор на бензин больше не распространяется на Вашу заправочную станцию");
											SendClientMessage(playerid, 0x999999FF, "Благодаря этому, плата за аренду территории АЗС уменьшена в 2 раза");
										}
									}
								}
								else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 17)");
							}
						}
					}
					ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_PARAMS);
				}
			}
			case DIALOG_FUEL_STATION_SELL:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						SellFuelStation(playerid);
					}
				}
			}
			case DIALOG_FUEL_STATION_BUY_JERRICA:
			{
				new stationid = GetPVarInt(playerid, "buy_jerrican_in_fuelst");
				DeletePVar(playerid, "buy_jerrican_in_fuelst");

				if(response)
				{
					if(IsPlayerInRangeOfPoint(playerid, 10.0, GetFuelStationData(stationid, FS_POS_X), GetFuelStationData(stationid, FS_POS_Y), GetFuelStationData(stationid, FS_POS_Z)))
					{
						if(!GetPVarInt(playerid, "have_jerrican"))
						{
							new price = GetFuelStationData(stationid, FS_FUEL_PRICE) * 15;
							if(GetPlayerMoneyEx(playerid) >= price)
							{
								new query[150];

								if(IsFuelStationOwned(stationid))
								{
									if(GetFuelStationData(stationid, FS_FUELS) < 15)
										return SendClientMessage(playerid, 0xCECECEFF, "На этой АЗС нет бензина");

									AddFuelStationData(stationid, FS_FUELS, -, 15);
									AddFuelStationData(stationid, FS_BALANCE, +, price);

									format(query, sizeof query, "UPDATE accounts a,fuel_stations f SET a.money=%d,f.fuels=%d,f.balance=%d WHERE a.id=%d AND f.id=%d", GetPlayerMoneyEx(playerid)-price, GetFuelStationData(stationid, FS_FUELS), GetFuelStationData(stationid, FS_BALANCE), GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID));
								}
								else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));

								mysql_query(mysql, query, false);
								if(!mysql_errno())
								{
									new buy_fuel_pay = GetPVarInt(playerid, "buy_fuel_pay_j");
									SetPVarInt(playerid, "buy_fuel_pay_j", buy_fuel_pay + price);

									GivePlayerMoneyEx(playerid, -price, "Покупка канистры на АЗС", false, true);

									SetPVarInt(playerid, "have_jerrican", 1);
								//	SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 1650, A_OBJECT_BONE_LEFT_HAND, 0.15, 0.0, 0.0, 0.0, -90.0, 180.0, 1.0, 1.0, 1.0, 0);

									SendClientMessage(playerid, 0x66CC00FF, "Вы купили канистру с 15 литрами бензина");
									SendClientMessage(playerid, 0x3399FFFF, "Чтобы заправить транспорт, подойдите к нему и нажмите ПКМ");
									SendClientMessage(playerid, 0xCECECEFF, "Примечание: Вы не должны двигаться во время заправки. ПКМ - правая кнопка мышки");
								}
								else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 19)");
							}
							else SendClientMessage(playerid, 0x999999FF, "Недостаточно денег для покупки канистры");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Вы уже купили канистру");
					}
				}
			}
			case DIALOG_FUEL_STATION_BUY_REPAIR:
			{
				new stationid = GetPVarInt(playerid, "buy_jerrican_in_fuelst");
				DeletePVar(playerid, "buy_jerrican_in_fuelst");

				if(response)
				{
					if(IsPlayerInRangeOfPoint(playerid, 10.0, GetFuelStationData(stationid, FS_POS_X), GetFuelStationData(stationid, FS_POS_Y), GetFuelStationData(stationid, FS_POS_Z)))
					{
						new price = 100000;
						if(GetPlayerMoneyEx(playerid) >= price)
						{
							new query[150];

							if(IsFuelStationOwned(stationid))
							{

								AddFuelStationData(stationid, FS_FUELS, -, 15);
								AddFuelStationData(stationid, FS_BALANCE, +, price);

								format(query, sizeof query, "UPDATE accounts a,fuel_stations f SET a.money=%d,f.fuels=%d,f.balance=%d WHERE a.id=%d AND f.id=%d", GetPlayerMoneyEx(playerid)-price, GetFuelStationData(stationid, FS_FUELS), GetFuelStationData(stationid, FS_BALANCE), GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID));
							}
							else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));

							mysql_query(mysql, query, false);
							if(!mysql_errno())
							{
								new buy_fuel_pay = GetPVarInt(playerid, "buy_fuel_pay_j");
								SetPVarInt(playerid, "buy_fuel_pay_j", buy_fuel_pay + price);

								GivePlayerMoneyEx(playerid, -price, "Покупка ремки на АЗС", false, true);
								
								AddPlayerData(playerid, P_REPCARID, +, 1);
								UpdatePlayerDatabaseInt(playerid, "repcarid",GetPlayerData(playerid, P_REPCARID));

							//	SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 1650, A_OBJECT_BONE_LEFT_HAND, 0.15, 0.0, 0.0, 0.0, -90.0, 180.0, 1.0, 1.0, 1.0, 0);

								SendClientMessage(playerid, 0x66CC00FF, "Вы купили рем. комплекс. Используйте /repaircar - чтобы починить траснпорт");
							}
							else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 19)");
						}
						else SendClientMessage(playerid, 0x999999FF, "Недостаточно денег для покупки канистры");
					}
				}
			}
			case DIALOG_FUEL_STATION_BUY_FUEL_M:
			{
				new stationid = GetPVarInt(playerid, "nearest_fuel_st");

				if(response)
				{
					new buy_fuel_count = strval(inputtext);
					new vehicleid = GetPlayerVehicleID(playerid);

					if(GetPlayerJob(playerid) == JOB_MECHANIC && IsPlayerInJob(playerid) && IsPlayerInVehicle(playerid, GetPlayerJobCar(playerid)))
					{
						if(IsPlayerInRangeOfPoint(playerid, 10.0, GetFuelStationData(stationid, FS_POS_X), GetFuelStationData(stationid, FS_POS_Y), GetFuelStationData(stationid, FS_POS_Z)))
						{
							new fmt_str[150];

							if((1 <= buy_fuel_count <= 10_000) && IsNumeric(inputtext))
							{
								if(GetFuelStationData(stationid, FS_FUELS) >= buy_fuel_count)
								{
									if(!(buy_fuel_count % 10))
									{
										if((GetPlayerJobLoadItems(playerid) + buy_fuel_count) <= 50)
										{
											new price = buy_fuel_count * GetFuelStationData(stationid, FS_FUEL_PRICE);
											if(GetPlayerMoneyEx(playerid) >= price)
											{
												if(IsFuelStationOwned(stationid))
												{
													AddFuelStationData(stationid, FS_FUELS, -, buy_fuel_count);
													AddFuelStationData(stationid, FS_BALANCE, +, price);

													format(fmt_str, sizeof fmt_str, "UPDATE accounts a,fuel_stations f SET a.money=%d,f.fuels=%d,f.balance=%d WHERE a.id=%d AND f.id=%d", GetPlayerMoneyEx(playerid)-price, GetFuelStationData(stationid, FS_FUELS), GetFuelStationData(stationid, FS_BALANCE), GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID));
												}
												else format(fmt_str, sizeof fmt_str, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
												mysql_query(mysql, fmt_str, false);

												if(!mysql_errno())
												{
													GivePlayerMoneyEx(playerid, -price, "Покупка топлива на АЗС (/getfuel)", false, true);
													SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + buy_fuel_count);

													new buy_fuel_pay = GetPVarInt(playerid, "buy_fuel_pay_j");
													SetPVarInt(playerid, "buy_fuel_pay_j", buy_fuel_pay + price);

													format(fmt_str, sizeof fmt_str, "Вы купили %d л топлива за %d рублей", buy_fuel_count, price);
													SendClientMessage(playerid, 0x66CC00FF, fmt_str);

													format(fmt_str, sizeof fmt_str, "%s{FFFFFF}Автомеханик\n{999999}Топливо: %d л", GetPlayerData(playerid, P_JOB_SERVICE_NAME), GetPlayerJobLoadItems(playerid));
													UpdateVehicleLabel(vehicleid, 0xCC9900FF, fmt_str);

													return DeletePVar(playerid, "nearest_fuel_st");
												}
												else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 20)");
											}
											else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для закупки такого кол-во топлива");
										}
										else SendClientMessage(playerid, 0xCECECEFF, "Можно загрузить не более 50 л топлива");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Кол-во топлива должно быть кратно 10");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "На АЗС нет такого кол-ва топлива");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Неверное значение");

							format
							(
								fmt_str, sizeof fmt_str,
								"{FFFFFF}Топливо на АЗС:\t\t%d/10000 л\n"\
								"Стоимость 1 литра:\t%d руб\n\n"\
								"Введите кол-во бензина, которое хотите закупить\n"\
								"(число должно быть кратным 10)",
								GetFuelStationData(stationid, FS_FUELS),
								GetFuelStationData(stationid, FS_FUEL_PRICE)
							);
							Dialog(playerid, DIALOG_FUEL_STATION_BUY_FUEL_M, DIALOG_STYLE_INPUT, "{FFCD00}Закупка топлива", fmt_str, "Купить", "Отмена");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться около заправочной станции");
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в рабочем транспорте");
				}
				else DeletePVar(playerid, "nearest_fuel_st");
			}
			// -----------------------------------------------------------------
			case DIALOG_JERRICAN_FILL_CAR:
			{
				new vehicleid = GetPVarInt(playerid, "jerrican_fill_car");
				DeletePVar(playerid, "jerrican_fill_car");

				if(response && vehicleid)
				{
					new Float: x, Float: y, Float: z;
					GetVehiclePos(vehicleid, x, y, z);

					if(IsPlayerInRangeOfPoint(playerid, 2.0, x, y, z))
					{
						if((GetVehicleData(vehicleid, V_FUEL) + 15.0) <= 150.0)
						{
							SetVehicleData(vehicleid, V_FUEL, GetVehicleData(vehicleid, V_FUEL) + 15.0);
							ApplyAnimationEx(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);

							DeletePVar(playerid, "have_jerrican");

						//	RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
							SendClientMessage(playerid, 0x66CC00FF, "Транспорт заправлен");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "В бензобак этого транспорта столько не поместится");
					}
					else SendClientMessage(playerid, 0x999999FF, "Вы находитесь слишком далеко от транспорта");
				}
			}
			case DIALOG_BIZ_SHOP_GUN:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_SHOP_GUN))
						{
							new price;
							new take_prods;

							switch(list_id)
							{
								case 1:
								{
									price = 20000;
									take_prods = 20;

									if(price == 0)
										return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[255];

										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
												//AddBusinessData(businessid, B_BALANCE_DAY, +, price);
											}

											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);

											GivePlayerMoneyEx(playerid, -price, "Покупка оружия", false,true);
											GivePlayerWeapon(playerid,8,1);
										}
										else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "У вас недостаточно денег!");
								}
								case 2:
								{
									price = 100000;
									take_prods = 20;

									if(price == 0)
										return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[255];

										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
												//AddBusinessData(businessid, B_BALANCE_DAY, +, price);
											}

											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);

                                            GivePlayerWeapon(playerid,9,1);
											GivePlayerMoneyEx(playerid, -price, "Покупка оружия", false, true);


										}
										else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "У вас недостаточно денег!");
								}
								case 3:
								{
									price = 20000;
									take_prods = 30;

									if(price == 0)
										return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[255];

										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
												//AddBusinessData(businessid, B_BALANCE_DAY, +, price);
											}

											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);

											GivePlayerMoneyEx(playerid, -price, "Покупка оружия", false, true);
           									GivePlayerWeapon(playerid,4,1);

										}
										else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "У вас недостаточно денег!");
								}
								case 4:
								{
									price = 20000;
									take_prods = 30;

									if(price == 0)
										return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[255];

										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
												//AddBusinessData(businessid, B_BALANCE_DAY, +, price);
											}

											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);

											GivePlayerMoneyEx(playerid, -price, "Покупка оружия", false, true);
           									GivePlayerWeapon(playerid,5,1);

										}
										else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "У вас недостаточно денег!");
								}
								case 5:
								{
									price = 20000;
									take_prods = 30;

									if(price == 0)
										return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[255];

										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
												//AddBusinessData(businessid, B_BALANCE_DAY, +, price);
											}

											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);

											GivePlayerMoneyEx(playerid, -price, "Покупка оружия", false, true);
           									GivePlayerWeapon(playerid,3,1);

										}
										else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "У вас недостаточно денег!");
								}
								case 6:
								{
									price = 20000;
									take_prods = 1;

									if(price == 0)
										return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[255];

										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
												//AddBusinessData(businessid, B_BALANCE_DAY, +, price);
											}

											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);

											GivePlayerMoneyEx(playerid, -price, "Покупка оружия", false, true);
           									GivePlayerWeapon(playerid,1,1);

										}
										else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "У вас не достаточно денег!");
								}
								case 7:
								{
									price = 100000;
									take_prods = 1;

									if(price == 0)
										return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[255];

										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
												//AddBusinessData(businessid, B_BALANCE_DAY, +, price);
											}

											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);

											GivePlayerMoneyEx(playerid, -price, "Покупка оружия", false, true);
           									GivePlayerWeapon(playerid,24,50);

										}
										else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "У вас не достаточно денег!");
								}
								case 8:
								{
									price = 100000;
									take_prods = 1;

									if(price == 0)
										return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[255];

										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
												//AddBusinessData(businessid, B_BALANCE_DAY, +, price);
											}

											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);

											GivePlayerMoneyEx(playerid, -price, "Покупка оружия", false, true);
           									GivePlayerWeapon(playerid,25,50);

										}
										else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "У вас не достаточно денег!");
								}
								case 9:
								{
									price = 100000;
									take_prods = 1;

									if(price == 0)
										return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[255];

										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
												//AddBusinessData(businessid, B_BALANCE_DAY, +, price);
											}

											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);

											GivePlayerMoneyEx(playerid, -price, "Покупка оружия", false, true);
           									GivePlayerWeapon(playerid,29,50);

										}
										else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "У вас не достаточно денег!");
								}
								case 10:
								{
									price = 100000;
									take_prods = 1;

									if(price == 0)
										return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[255];

										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
												//AddBusinessData(businessid, B_BALANCE_DAY, +, price);
											}

											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);

											GivePlayerMoneyEx(playerid, -price, "Покупка оружия", false, true);
           									GivePlayerWeapon(playerid,31,100);

										}
										else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "У вас не достаточно денег!");
								}
								default:
									return 1;
							}
						}
					}
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_BIZ_BUY:
			{
				if(response)
				{
					new businessid = GetPVarInt(playerid, "buy_biz_id");

					if(IsPlayerInRangeOfPoint(playerid, 7.0, GetBusinessData(businessid, B_POS_X), GetBusinessData(businessid, B_POS_Y), GetBusinessData(businessid, B_POS_Z)))
					{
						if(!IsBusinessOwned(businessid))
						{
							if(GetPlayerMoneyEx(playerid) >= GetBusinessData(businessid, B_PRICE))
							{
							   // if(Config[sBuyBiz] == 0)
							    //{
								SendClientMessage(playerid, 0xFFFFFFFF, "Поздравляем! Вы купили бизнес");
								BuyPlayerBusiness(playerid, businessid);

								PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
								Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{3399FF}Новый бизнес", "{FFFFFF}Вам нужно заплатить за аренду бизнеса в ближайшем отделением банка {FFCD00}(/gps)", "Ок", "");
						//	}
							//	else
							//	    return Send(playerid,-1,"В данный момент все бизнесы на сервере не доступны к покупке!");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для покупки этого бизнеса");
						}
						else
						{
							new fmt_str[64];

							format(fmt_str, sizeof fmt_str, "Этот бизнес уже куплен. Владелец: %s", GetBusinessData(businessid, B_OWNER_NAME));
							SendClientMessage(playerid, 0xCECECEFF, fmt_str);
						}
					}
				}
				DeletePVar(playerid, "buy_biz_id");
			}
			case DIALOG_BIZ_INFO:
			{
				if(response)
				{
					ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
				}
			}
			case DIALOG_BIZ_PARAMS:
			{
				if(response)
				{
					ShowPlayerBusinessDialog(playerid, listitem + 1);
				}
				else callcmd::business(playerid, "");
			}
			case DIALOG_BIZ_ENTER_PRICE:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						new price = strval(inputtext);
						if(strlen(inputtext))
						{
							if((0 <= price <= 5000) && IsNumeric(inputtext))
							{
								new query[64 + 1];
								SetBusinessData(businessid, B_ENTER_PRICE, price);

								format(query, sizeof query, "UPDATE business SET enter_price=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_ENTER_PRICE), GetBusinessData(businessid, B_SQL_ID));
								mysql_query(mysql, query, false);

								UpdateBusinessLabel(businessid);
								SendClientMessage(playerid, 0x66CC00FF, "Цена за вход в бизнес изменена");

								return ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Предел цены от 0 до 5000 рублей");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Введите цену за вход в Ваш бизнес");

						ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_ENTER_PRICE);
					}
					else ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
				}
			}
			case DIALOG_BIZ_PROD_PRICE:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						new price = strval(inputtext);
						if(strlen(inputtext) && IsNumeric(inputtext))
						{
							if(25 <= price <= 200)
							{
								new query[64 + 1];
								SetBusinessData(businessid, B_PROD_PRICE, price);

								format(query, sizeof query, "UPDATE business SET prod_price=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_PROD_PRICE), GetBusinessData(businessid, B_SQL_ID));
								mysql_query(mysql, query, false);

								SendClientMessage(playerid, 0x66CC00FF, "Стоимость продукта изменена");
								return ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Укажите стоимость от 25 до 200 рублей");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Введите стоимость продукта");

						ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PROD_PRICE);
					}
					else ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
				}
			}
			case DIALOG_BIZ_ORDER_PRODS:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						new order_prods = strval(inputtext);
						new prod_price = 35;
						new price = order_prods * prod_price;

						if(order_prods > 0 && IsNumeric(inputtext))
						{
							new fmt_str[256];

							new free_prods_slots = GetBusinessMaxProd(businessid) - GetBusinessData(businessid, B_PRODS);

							if(free_prods_slots > 1000)
								free_prods_slots = 1000;

							if(order_prods <= free_prods_slots)
							{
								if(GetBusinessData(businessid, B_BALANCE) >= price)
								{
									AddBusinessData(businessid, B_BALANCE, -, price);
									AddBusinessData(businessid, B_PRODS, +, order_prods);

									format(fmt_str, sizeof fmt_str, "~w~business bank~n~~r~-$%d", price);
									GameTextForPlayer(playerid, fmt_str, 4000, 1);

									format(fmt_str, sizeof fmt_str, "UPDATE business SET balance=%d, products=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_BALANCE), GetBusinessData(businessid, B_PRODS), GetBusinessData(businessid, B_SQL_ID));
									mysql_query(mysql, fmt_str, false);


									format
									(
										fmt_str, sizeof fmt_str,
										"{FFFFFF}Параметры заказа:\n\n"\
										"Количество продуктов:\t\t%d шт.\n"\
										"Стоимость 1 продутка:\t\t$%d\n"\
										"Общая стоимость заказа:\t\t$%d\n\n"\
										"{32a44b}Продукты были успешно доставлены в бизнес",
										order_prods,
										prod_price,
										price
									);
									Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Заказ оформлен", fmt_str, "Закрыть", "");
								}
								else
								{
									format(fmt_str, sizeof fmt_str, "Чтобы оплатить заказ необходимо иметь $%d на счету бизнеса", price);
									SendClientMessage(playerid, 0xCECECEFF, fmt_str);
								}
							}
							else
							{
								format(fmt_str, sizeof fmt_str, "Вы не можете заказать более %d продуктов", free_prods_slots);
								SendClientMessage(playerid, 0xCECECEFF, fmt_str);
							}
						}
						/*}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "Перед тем как оформить заказ, установите стоимость продукта");
							return ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PROD_PRICE);
						}
						ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PROD_ORDER);*/
					}
					else ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
				}
			}
			case DIALOG_BIZ_ORDER_CANCEL:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						new order_id = GetBusinessData(businessid, B_ORDER_ID);
						if(order_id != -1 && GetOrderData(order_id, O_SQL_ID) > 0)
						{
							if(!GetOrderData(order_id, O_USED))
							{
								new fmt_str[128];
								new return_money = GetOrderData(order_id, O_AMOUNT) * GetOrderData(order_id, O_PRICE);

								DeleteOrder(order_id);
								AddBusinessData(businessid, B_BALANCE, +, return_money);

								format(fmt_str, sizeof fmt_str, "UPDATE business SET balance=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_BALANCE), GetBusinessData(businessid, B_SQL_ID));
								mysql_query(mysql, fmt_str, false);

								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}Вы отменили заказ продуктов\n"\
									"На счет бизнеса было возвращено {00CC00}%d руб",
									return_money
								);
								Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FF9900}Отмена заказа", fmt_str, "Закрыть", "");

								format(fmt_str, sizeof fmt_str, "~w~business bank~n~~g~+%d rub", return_money);
								GameTextForPlayer(playerid, fmt_str, 4000, 1);

								return 1;
							}
							else SendClientMessage(playerid, 0xFF6600FF, "Ваш заказ выполняется, его нельзя отменить");
						}
					}
					ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
				}
			}
			case DIALOG_BIZ_IMPROVEMENT:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(IsBusinessNoEnter(businessid))
					return SendClientMessage(playerid, 0xCECECEFF, "Данный тип бизнеса нельзя улучшить.");
				if(businessid != -1)
				{
					if(response)
					{
						if(0 <= listitem <= sizeof g_business_improvements - 1)
						{
							new i_level = GetBusinessData(businessid, B_IMPROVEMENTS);
							new i_price = g_business_improvements[listitem][I_PRICE];

							if(i_level < listitem)
							{
								SendClientMessage(playerid, 0xCECECEFF, "Этот уровень улучшений пока недоступен");
							}
							else if(i_level > listitem)
							{
								SendClientMessage(playerid, 0xCECECEFF, "Вы уже купили этот уровень улучшений");
							}
							else if(GetPlayerMoneyEx(playerid) < i_price)
							{
								new fmt_str[64];

								format(fmt_str, sizeof fmt_str, "Для покупки %d уровня улучшений необходимо %d рублей", listitem + 1, i_price);
								SendClientMessage(playerid, 0xCECECEFF, fmt_str);
							}
							else
							{
								new fmt_str[128];

								format(fmt_str, sizeof fmt_str, "UPDATE accounts a, business b SET a.money=%d, b.improvements=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-i_price, i_level + 1, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
								mysql_query(mysql, fmt_str, false);

								if(!mysql_errno())
								{
									new cur_max_prods = GetBusinessMaxProd(businessid);
									GivePlayerMoneyEx(playerid, -i_price, "Покупка улучшений для Бизнеса", false, true);

									format(fmt_str, sizeof fmt_str, "Вы улучшили свой бизнес до {FFCD00}%s {3399FF}уровня", GetNumericName(listitem + 1));
									SendClientMessage(playerid, 0x3399FFFF, fmt_str);

									AddBusinessData(businessid, B_IMPROVEMENTS, +, 1);
									switch(listitem + 1)
									{
										case 1:
										{
											format(fmt_str, sizeof fmt_str, "Количество слотов для продуктов увеличено с %d до %d", cur_max_prods, GetBusinessMaxProd(businessid));
											SendClientMessage(playerid, 0x66CC00FF, fmt_str);

											SendClientMessage(playerid, 0x999999FF, "Теперь можно намного реже пополнять их запас");
										}
										case 2:
										{
											SendClientMessage(playerid, 0x66CC00FF, "Теперь ваши клиенты смогут пользоваться услугами медпункта на территории бизнеса");
											SendClientMessage(playerid, 0x999999FF, "Доходы от этого будут перечисляться на баланс предприятия");

											BusinessHealthPickupInit(businessid);
										}
										case 3:
										{
											SendClientMessage(playerid, 0x66CC00FF, "Благодаря пониженному налогу, вы будете платить за аренду помещения в 2 раза меньше");
											SendClientMessage(playerid, 0x999999FF, "Благодаря этому, вы сможете получать большую прибыль");
										}
										case 4:
										{
											SendClientMessage(playerid, 0x66CC00FF, "Теперь ваши клиенты будут слышать звук при входе в бизнес");
											SendClientMessage(playerid, 0x999999FF, "Вы также можете поменять или выключить его командой {FF9900}/bizmusic");
										}
										case 5:
										{
											SendClientMessage(playerid, 0x66CC00FF, "В Вашем бизнесе был оборудован дополнительный склад продуктов повышенной вместимости");

											format(fmt_str, sizeof fmt_str, "Количество слотов для продуктов увеличено с %d до %d", cur_max_prods, GetBusinessMaxProd(businessid));
											SendClientMessage(playerid, 0x999999FF, fmt_str);
										}
										case 6:
										{
											format(fmt_str, sizeof fmt_str, "INSERT INTO business_gps (bid,time) VALUES (%d,%d)", businessid, gettime());
											mysql_query(mysql, fmt_str, false);

											g_business_gps_init = false;

											SendClientMessage(playerid, 0x66CC00FF, "Теперь Ваш бизнес можно будет найти в списке бизнесов {FF9900}(/gps > Бизнес)");
											SendClientMessage(playerid, 0x999999FF, "Это позволит привлечь дополнительных клиентов, тем самым повысить доходы предприятия");
										}
									}
								}
								else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 23)");
							}
						}
					}
					ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
				}
			}
			case DIALOG_BIZ_SELL:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						SellBusiness(playerid);
					}
				}
			}
			case DIALOG_BIZ_ENTER_MUSIC:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						if(0 <= listitem <= sizeof g_business_sound)
						{
							new query[64];
							format(query, sizeof query, "UPDATE business SET enter_music=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_ENTER_MUSIC), GetBusinessData(businessid, B_SQL_ID));
							mysql_query(mysql, query, false);

							if(listitem > 0)
								PlayerPlaySound(playerid, g_business_sound[listitem - 1], 0.0, 0.0, 0.0);

							SetBusinessData(businessid, B_ENTER_MUSIC, listitem);
							SendClientMessage(playerid, 0x66CC00FF, "Звук при входе в бизнес изменен");
						}
					}
				}
			}
			case DIALOG_BIZ_ENTER:
			{
				new businessid = GetPVarInt(playerid, "biz_enter") - 1;
				DeletePVar(playerid, "biz_enter");

				if(response && GetPlayerInBiz(playerid) == -1)
				{
					if(businessid != -1 && GetBusinessData(businessid, B_ENTER_PRICE) > 0)
					{
						if(IsBusinessOwned(businessid))
						{
							if(IsPlayerInRangeOfPoint(playerid, 5.0, GetBusinessData(businessid, B_POS_X), GetBusinessData(businessid, B_POS_Y), GetBusinessData(businessid, B_POS_Z)))
							{
								new price = GetBusinessData(businessid, B_ENTER_PRICE);
								new take_prods = GetBusinessEnterProdCount(businessid);

								if(GetPlayerMoneyEx(playerid) >= price)
								{
									new query[255];
									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
									}
									else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
									mysql_query(mysql, query, false);

									if(!mysql_errno())
									{
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											AddBusinessData(businessid, B_PRODS, -, take_prods);
											AddBusinessData(businessid, B_BALANCE, +, price);
										}

										SetPlayerUseListitem(playerid, businessid);
										GivePlayerMoneyEx(playerid, -price, "Оплата за вход в бизнес", false, true);

										EnterPlayerToBiz(playerid, businessid);

										mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
										mysql_query(mysql, query, false);
									}
									else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 22)");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для входа");
							}
						}
					}
				}
			}
			case DIALOG_BIZ_CAR_MARKET:
			{
				if(!response) return 1;

				if((GetPlayerOwnableCars(playerid) + 1) > GetPlayerCarSlots(playerid))
					return SendClientMessage(playerid, 0x3399FFFF, "Все слоты для транспорта заняты. Вы можете увеличить их: {FFFF00}/menu > Дополнительно");

				SetPlayerInBiz(playerid, GetPlayerListitemValue(playerid, 0));

				new biz_id = GetPlayerInBiz(playerid);
				new car_market_id = biz_id - 34;

				if(biz_id == -1 || GetBusinessData(biz_id, B_TYPE) != BUSINESS_TYPE_CAR_MARKET || GetPlayerData(playerid, P_BUY_CAR) != INVALID_VEHICLE_ID) return 1;

				buy_car_select_car[playerid] =
				buy_car_select_color_type[playerid] = 0;

				buy_car_select_color[playerid][0] =
				buy_car_select_color[playerid][1] = 1;

				SetPlayerVirtualWorld(playerid, playerid + 1);
				SetPlayerInterior(playerid, 1);
				SetPlayerPosEx(playerid, 1137.5398,234.6261,995.1235, 0.0, _, _, false);
				TogglePlayerControllable(playerid, false);

				SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(car_market_data[car_market_id][0][0], 1149.8434, 226.0655, 995.1953, 67.6542, 1, 1, 1));

				SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
				LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 1);

				//1145.561035,234.304000,995.266784 | LookAt: 1147.853393,229.894149,995.812988

				SetPlayerCameraPos(playerid, 1145.561035, 234.304000, 995.266784);
				SetPlayerCameraLookAt(playerid, 1147.853393, 229.894149, 995.812988);

				//ShowPlayerSelectPanel(playerid, SELECT_PANEL_TYPE_CAR_MARKET);
				//BuyCarTDsShowForPlayer(playerid);
				CallLocalFunction("BuyCarPTDUpdate", "i", playerid);
				
				CreateAutosalonTextDraws(playerid);
				
				//SelectTextDraw(playerid, 0x00FF00FF);

				return 1;
			}

			case DIALOG_BIZ_CAR_MARKET_BUY_CAR:
			{
				if(!response || GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return 1;

				new biz_id = GetPlayerInBiz(playerid);
				new car_market_id = biz_id - 34;
				if(GetBusinessData(biz_id, B_TYPE) != BUSINESS_TYPE_CAR_MARKET) return 1;

				BuyOwnableCar(playerid, car_market_id, buy_car_select_car[playerid]);

				return 1;
			}

			case DIALOG_BIZ_CAR_MARKET_CAR_INFO:
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				new car_market_id = GetVehicleCarMarketID(vehicleid);

				if(response && 0 <= car_market_id <= 3)
				{
					BuyOwnableCar(playerid, car_market_id, GetVehicleModel(vehicleid) + 1000);
				}

				TogglePlayerControllable(playerid, true);
				RemovePlayerFromVehicle(playerid);
				return 1;
			}
			case DIALOG_BIZ_CAR_TUNING:
			{
				switch(listitem)
				{
					case 0:
					{
						
						new query[255],
						biz_id = GetPlayerInBiz(playerid),
						take_prods = 25;
						if(GetPlayerMoneyEx(playerid) >= 25000)
						{

							format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-25000, GetBusinessData(GetPlayerInBiz(playerid), B_PRODS) > 0 ? GetBusinessData(GetPlayerInBiz(playerid), B_PRODS)-1 : 0, GetBusinessData(GetPlayerInBiz(playerid), B_PRODS) > 0 ? GetBusinessData(GetPlayerInBiz(playerid), B_BALANCE)+25000 : 0, GetPlayerAccountID(playerid), GetBusinessData(GetPlayerInBiz(playerid), B_SQL_ID));
							mysql_query(mysql, query, false);

							if(GetBusinessData(biz_id, B_PRODS) >= take_prods)
							{
								
								new vehicleid = GetPlayerOwnableCar(playerid);

								SetVehicleHealth(vehicleid,1000);
								PlayerPlaySound(playerid, 1133, 0.0,0.0,0.0);


								RepairVehicle(vehicleid);

								AddBusinessData(biz_id, B_PRODS, -, take_prods);
								AddBusinessData(biz_id, B_BALANCE, +, 25000);

								format(query, sizeof query, "UPDATE business SET products=%d, balance=%d WHERE id=%d", GetBusinessData(biz_id, B_PRODS), GetBusinessData(biz_id, B_BALANCE), GetBusinessData(biz_id, B_SQL_ID));
								mysql_query(mysql, query, false);

								mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,25000,%d)", GetBusinessData(biz_id, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), IsBusinessOwned(biz_id));
								mysql_query(mysql, query, false);
							}
							GivePlayerMoneyEx(playerid, -25000, "Починка транспорта");
						}
						else
						SendClientMessage(playerid, -1, "У вас не хватает денег!");
					}
					case 1: ShowVehicleImproveDialog(playerid);
					case 2:
					{
					    g_business_realtor_list = "";
						for(new idx; idx < 128; idx ++)
						{
							format(l_string, 15, "{%06x}%d | ", VehicleColoursTableRGBA[idx]>>> 8, idx);
							strcat(g_business_realtor_list, l_string);
							if(!(idx % 10)) strcat(g_business_realtor_list, "\n");
						}
						strcat(g_business_realtor_list,"\n{FFFFFF}Введите число в окошко ниже \nПример: 10,25");
					    Dialog(playerid, DIALOG_CHANGE_COLOR_CAR, DIALOG_STYLE_INPUT,"Покраска автомобиля",
						g_business_realtor_list,
						"Покрасить", "Отмена");
					}
				}
			}
            case DIALOG_CHANGE_COLOR_CAR:
			{
			    new query[255],
					biz_id = GetPlayerInBiz(playerid),
					take_prods = 25;
						
			    if(response)
			    {
					if(GetPlayerMoneyEx(playerid) >= 250000)
					{
						new color1, color2, fmt_text[256],
						 	idx = GetPVarInt(playerid, "ownablecar_id");

						if(sscanf(inputtext, "P<,>dd", color1, color2))
						{
							SendClientMessage(playerid, 0xCECECEFF, "Некорректный ввод");
							new all_colors_str[1808], color_str[15];

							for(new idxx; idxx < 128; idxx ++)
							{
								format(color_str, sizeof color_str, "{%06x}%d | ", VehicleColoursTableRGBA[idxx]>>> 8, idxx);
								strcat(all_colors_str, color_str);
								if(!(idxx % 10)) strcat(all_colors_str, "\n");
							}
							strcat(all_colors_str,"\n{FFFFFF}Введите число в окошко ниже \nПример: 10,25");
						    Dialog(playerid, DIALOG_CHANGE_COLOR_CAR, DIALOG_STYLE_INPUT,"Покраска автомобиля",
							all_colors_str,
							"Покрасить", "Отмена");

							return 1;
						}
						else
						{
							if(!(-1 <= color1 <= 128))
							{
								SendClientMessage(playerid, 0xCECECEFF, "Цвет транспорт от 0 до 255");
								new all_colors_str[1808], color_str[15];

								for(new idxx; idxx < 128; idxx ++)
								{
									format(color_str, sizeof color_str, "{%06x}%d | ", VehicleColoursTableRGBA[idxx]>>> 8, idxx);
									strcat(all_colors_str, color_str);
									if(!(idxx % 10)) strcat(all_colors_str, "\n");
								}
								strcat(all_colors_str,"\n{FFFFFF}Введите число в окошко ниже \nПример: 10,25");
							    Dialog(playerid, DIALOG_CHANGE_COLOR_CAR, DIALOG_STYLE_INPUT,"Покраска автомобиля",
								all_colors_str,
								"Покрасить", "Отмена");

								return 1;
							}
							if(!(-1 <= color2 <= 128))
							{
								SendClientMessage(playerid, 0xCECECEFF, "Цвет транспорт от 0 до 255");
								new all_colors_str[1808], color_str[15];

								for(new idxx; idxx < 128; idxx ++)
								{
									format(color_str, sizeof color_str, "{%06x}%d | ", VehicleColoursTableRGBA[idxx]>>> 8, idxx);
									strcat(all_colors_str, color_str);
									if(!(idxx % 10)) strcat(all_colors_str, "\n");
								}
								strcat(all_colors_str,"\n{FFFFFF}Введите число в окошко ниже \nПример: 10,25");
							    Dialog(playerid, DIALOG_CHANGE_COLOR_CAR, DIALOG_STYLE_INPUT,"Покраска автомобиля",
								all_colors_str,
								"Покрасить", "Отмена");
								return 1;
							}
							
							format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-25000, GetBusinessData(GetPlayerInBiz(playerid), B_PRODS) > 0 ? GetBusinessData(GetPlayerInBiz(playerid), B_PRODS)-1 : 0, GetBusinessData(GetPlayerInBiz(playerid), B_PRODS) > 0 ? GetBusinessData(GetPlayerInBiz(playerid), B_BALANCE)+250000 : 0, GetPlayerAccountID(playerid), GetBusinessData(GetPlayerInBiz(playerid), B_SQL_ID));
							mysql_query(mysql, query, false);
							
							AddBusinessData(biz_id, B_PRODS, -, take_prods);
							AddBusinessData(biz_id, B_BALANCE, +, 250000);

							format(query, sizeof query, "UPDATE business SET products=%d, balance=%d WHERE id=%d", GetBusinessData(biz_id, B_PRODS), GetBusinessData(biz_id, B_BALANCE), GetBusinessData(biz_id, B_SQL_ID));
							mysql_query(mysql, query, false);

							mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,250000,%d)", GetBusinessData(biz_id, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), IsBusinessOwned(biz_id));
							mysql_query(mysql, query, false);

							SendClientMessage(playerid, 0xffff00FF, "Вы покрасили свой личный транспорт, для того чтобы изменения вступили в силу...");
							SendClientMessage(playerid, 0xffff00FF, "...выгрузите и загрузите свой транспорт, или перезайдите.");

							GivePlayerMoneyEx(playerid, -250000, "Покрасил авто", true);


							mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE ownable_cars SET color_1='%d', color_2='%d'  WHERE id='%d' LIMIT 1", color1, color2, idx);
							mysql_query(mysql, fmt_text, false);

						}
					}
					else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет столько денег: 250.000р");
			    }
			}
			case DIALOG_BIZ_SHOP_24_7:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_SHOP_24_7))
						{
							new price;
							new take_prods;

							switch(listitem + 1)
							{
								case 1:
								{
									price = 300;
									take_prods = 2;

									if(GetPlayerData(playerid, P_MED_CHEST) < 2)
									{
										if(GetPlayerMoneyEx(playerid) >= price)
										{
											new query[255];

											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
											}
											else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
											mysql_query(mysql, query, false);

											if(!mysql_errno())
											{
												if(GetBusinessData(businessid, B_PRODS) >= take_prods)
												{
													AddBusinessData(businessid, B_PRODS, -, take_prods);
													AddBusinessData(businessid, B_BALANCE, +, price);
												}

												mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
												mysql_query(mysql, query, false);

												GivePlayerMoneyEx(playerid, -price, "Покупка аптечки", false, true);

												AddPlayerData(playerid, P_MED_CHEST, +, 2);
												UpdatePlayerDatabaseInt(playerid, "healme", GetPlayerData(playerid, P_MED_CHEST));
												SendClientMessage(playerid, 0x66CC00FF, "Вы купили набор аптечек. Используйте {3399FF}/healme {66CC00}для их использования");

												format(query, sizeof query, "Текущее количество аптечек: %d", GetPlayerData(playerid, P_MED_CHEST));
												SendClientMessage(playerid, 0xDD90FFFF, query);
											}
											else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
										}
										else SendClientMessage(playerid, 0xCECECEFF, "Набор аптечек стоит 300 рублей");
									}
									else SendClientMessage(playerid, 0x999999FF, "Вы не можете купить больше аптечек");
								}
        						case 2:
                                {
                                    price = 2500;
                                    take_prods = 10;

//                                    if(GetPlayerData(playerid, P_PLAY_PLAYER) < 1)
//                                    {
                                    if(GetPlayerMoneyEx(playerid) >= price)
                                    {
                                        new query[255];

                                        if(GetBusinessData(businessid, B_PRODS) >= take_prods)
                                        {
                                            format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
                                        }
                                        else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
                                        mysql_query(mysql, query, false);

                                        if(!mysql_errno())
                                        {
                                            if(GetBusinessData(businessid, B_PRODS) >= take_prods)
                                            {
                                                AddBusinessData(businessid, B_PRODS, -, take_prods);
                                                AddBusinessData(businessid, B_BALANCE, +, price);
                                            }

                                            mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
                                            mysql_query(mysql, query, false);

                                            GivePlayerMoneyEx(playerid, -price, "Покупка наушников в 24/7", false, true);

                                            AddPlayerData(playerid, P_PLAY_PLAYER, +, 1);
                                            UpdatePlayerDatabaseInt(playerid, "player", GetPlayerData(playerid, P_PLAY_PLAYER));

                                            SendClientMessage(playerid, 0x66CC00FF, "Вы купили наушники. Используйте {3399FF}/play {66CC00}для их использования.");

                                        }
                                        else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
                                    }
                                    else SendClientMessage(playerid, 0xCECECEFF, "Наушники стоят 2500 $");
//                                    }
//                                    else SendClientMessage(playerid, 0x999999FF, "Вы не можете купить больше наушников!");
                                }
								case 3:
								{
									price = 200;
									take_prods = 2;

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[255];
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
											}

											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);

											GivePlayerMoneyEx(playerid, -price, "Покупка фотоаппарата", false, true);

											GivePlayerWeapon(playerid, 43, 15);
											SendClientMessage(playerid, 0x66CC00FF, "Вы купили фотоаппарат на 15 снимков");
										}
										else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 29)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Набор фотографа стоит 200 рублей");
								}
								case 4:
								{
									price = 150;
									take_prods = 1;

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[255];
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
											}

											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);

											GivePlayerMoneyEx(playerid, -price, "Покупка букета цветов", false, true);
											GivePlayerWeapon(playerid, WEAPON_FLOWER, 1);

											SendClientMessage(playerid, 0x66CC00FF, "Вы купили букет цветов");
											SendClientMessage(playerid, 0x66CC00FF, "Используйте {FFCD00}/present {66CC00}чтобы подарить их кому нибудь");
										}
										else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 30)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Букет стоит 150 рублей");
								}
								case 5:
								{
									price = 600;
									take_prods = 2;

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[255];
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
											}

											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);

											GivePlayerMoneyEx(playerid, -price, "Покупка трости", false, true);
											GivePlayerWeapon(playerid, WEAPON_CANE, 1);

											SendClientMessage(playerid, 0x66CC00FF, "Вы купили трость");
										}
										else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 31)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Трость стоит 600 рублей");
								}
								case 6:
								{
									price = 800;
									take_prods = 5;

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[255];
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
											}

											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);

											GivePlayerMoneyEx(playerid, -price, "Покупка парашюта", false, true);
											GivePlayerWeapon(playerid, WEAPON_PARACHUTE, 1);

											SendClientMessage(playerid, 0x66CC00FF, "Вы купили парашют");
										}
										else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 31)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Парашют стоит 800 рублей");
								}
								case 7:
								{
									price = 400;
									take_prods = 2;

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[255];
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
											}

											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);

											GivePlayerMoneyEx(playerid, -price, "Покупка лотерейного билета", false, true);
											SetPlayerData(playerid, P_LOTTERY, random(900) + 100);

											CallLocalFunction("ShowPlayerLotteryDialog", "i", playerid);
											SendClientMessage(playerid, 0x66CC00FF, "Вы купили лотерейный билет");
										}
										else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 32)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Лотерейный билет стоит 400 рублей");
								}
								case 8:
								{
									price = 110;
									take_prods = 1;

									if(!GetPlayerData(playerid, P_MASK))
									{
										if(GetPlayerMoneyEx(playerid) >= price)
										{
											new query[255];
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
											}
											else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
											mysql_query(mysql, query, false);

											if(!mysql_errno())
											{
												if(GetBusinessData(businessid, B_PRODS) >= take_prods)
												{
													AddBusinessData(businessid, B_PRODS, -, take_prods);
													AddBusinessData(businessid, B_BALANCE, +, price);
												}

												mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
												mysql_query(mysql, query, false);

												GivePlayerMoneyEx(playerid, -price, "Покупка маски", false, true);
												SetPlayerData(playerid, P_MASK, 1);

												SendClientMessage(playerid, 0x66CC00FF, "Вы купили маску");
												SendClientMessage(playerid, 0x66CC00FF, "Используйте {FFCD00}/mask {66CC00}для скрытия Вашего расположения на карте (на 10 минут)");
											}
											else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 33)");
										}
										else SendClientMessage(playerid, 0xCECECEFF, "Маска стоит 110 рублей");
									}
									else SendClientMessage(playerid, 0x999999FF, "Вы уже приобрели маску");
								}
								case 9:
								{
									price = 5000;
									take_prods = 2;

									if(!GetPlayerPhone(playerid))
									{
										if(GetPlayerMoneyEx(playerid) >= price)
										{
											new query[255];

											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,a.phone=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid) + 1000000, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)-price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
											}
											else format(query, sizeof query, "UPDATE accounts SET money=%d,phone=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid) + 1000000, GetPlayerAccountID(playerid));
											mysql_query(mysql, query, false);

											if(!mysql_errno())
											{
												if(GetBusinessData(businessid, B_PRODS) >= take_prods)
												{
													AddBusinessData(businessid, B_PRODS, -, take_prods);
													AddBusinessData(businessid, B_BALANCE, +, price);
												}

												mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
												mysql_query(mysql, query, false);

												GivePlayerMoneyEx(playerid, -price, "Покупка телефона", false, true);
												SetPlayerData(playerid, P_PHONE, GetPlayerAccountID(playerid) + 1000000);

												SendClientMessage(playerid, 0x66CC00FF, "Используйте {0099FF}/c(/call) или /call [номер телефона] {66CC00}чтобы сделать звонок.");
												SendClientMessage(playerid, 0x66CC00FF, "Для отправки SMS сообщения используйте {0099FF}/sms{66CC00}. Другие команды: {0099FF}/menu > Список команд > Общение");

												format
												(
													query, sizeof query,
													"{FFFFFF}Поздравляем!\n"\
													"Вы купили мобильный телефон. Ваш номер: {0099FF}%d",
													GetPlayerPhone(playerid)
												);
												Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{66CC00}Покупка мобильного телефона", query, "Закрыть", "");

												SendClientMessage(playerid, COR_SERVER, "[Квесты]: "c_b"Вы успешно выполнили квест "c_i"'Без связи некуда'. "c_b"Награда: "c_m"5000000$");
											    GivePlayerMoneyEx(playerid, 5000000, "Выполнение квеста");

											    SetPlayerData(playerid, P_QUEST_2, 1);
											    UpdatePlayerDatabaseInt(playerid, "quest_2", 1);
											    
											    AddPlayerData(playerid, P_TOP_5, +, 1);
												UpdatePlayerDatabaseInt(playerid, "TOP_Quest", GetPlayerData(playerid, P_TOP_5));
											}
											else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 25)");
										}
										else SendClientMessage(playerid, 0xCECECEFF, "Мобильный телефон стоит 5000 рублей");
									}
									else SendClientMessage(playerid, 0x999999FF, "У Вас уже есть мобильный телефон");
								}
								case 10:
								{
									price = 2000;
									if(GetPlayerPhone(playerid))
									{
										if(GetPlayerMoneyEx(playerid) >= price)
										{
											Dialog
											(
												playerid, DIALOG_BIZ_CHANGE_PHONE_NUMBER, DIALOG_STYLE_INPUT,
												"{66CC00}Изменение номера",
												"{FFFFFF}Введите новый номер в поле ниже\n\n"\
												"{FF6633}Примечания:\n"\
												"{FFCD00}- Номер должен быть шестизначным,\n"\
												"например: 284411\n"\
												"- Номер не должен начинаться с 0\n\n"\
												"{FFFFFF}Вы также можете вернуть свой\n"\
												"стандартный номер. Для этого\n"\
												"введите в поле {3399FF}цифру 0",
												"Сменить", "Отмена"
											);

											return 1;
										}
										else SendClientMessage(playerid, 0xCECECEFF, "Для изменение номера телефона необходимо 2000 рублей");
									}
									else SendClientMessage(playerid, 0x999999FF, "Сначала нужно приобрести мобильный телефон");

									callcmd::buy(playerid, "");
								}
								case 11:
								{
									price = 200;
									if(GetPlayerPhone(playerid))
									{
										if(GetPlayerMoneyEx(playerid) >= price)
										{
											Dialog
											(
												playerid, DIALOG_BIZ_CHANGE_PHONE_COLOR, DIALOG_STYLE_LIST,
												"{66CC00}Изменение цвета телефона",
												"1. Карамельный\n"\
												"2. Синий\n"\
												"3. Оранжевый\n"\
												"4. Серебристый\n"\
												"5. Розовый\n"\
												"6. Красный\n"\
												"7. Зеленый\n"\
												"8. Темно-синий\n"\
												"9. Желтый\n"\
												"10. Белый",
												"Поменять", "Отмена"
											);

											return 1;
										}
										else SendClientMessage(playerid, 0xCECECEFF, "Для изменение цвета телефона необходимо 200 рублей");
									}
									else SendClientMessage(playerid, 0x999999FF, "Сначала нужно приобрести мобильный телефон");

									callcmd::buy(playerid, "");
								}
								case 12:
								{
									if(GetPlayerPhone(playerid) != 0)
									{
										Dialog
										(
											playerid, DIALOG_BIZ_PHONE_BALANCE, DIALOG_STYLE_INPUT,
											"{FFCD00}Пополнение мобильного телефона",
											"{FFFFFF}Укажите сумму, на которую хотите пополнить счёт:",
											"Готово", "Назад"
										);

										return 1;
									}
									else SendClientMessage(playerid, 0x999999FF, "У Вас нет телефона. Его можно купить в сотовом салоне");

									callcmd::buy(playerid, "");
								}
								default:
									return 1;
							}
						}
					}
				}
			}
			case DIALOG_BIZ_CELL_SALON:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_CELL_SALON))
						{
							new price;
							new take_prods;

							switch(listitem + 1)
							{
								case 1:
								{
									price = 2100;
									take_prods = 2;

									if(!GetPlayerPhone(playerid))
									{
										if(GetPlayerMoneyEx(playerid) >= price)
										{
											new query[255];

											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,a.phone=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid) + 1000000, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)-price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
											}
											else format(query, sizeof query, "UPDATE accounts SET money=%d,phone=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid) + 1000000, GetPlayerAccountID(playerid));
											mysql_query(mysql, query, false);

											if(!mysql_errno())
											{
												if(GetBusinessData(businessid, B_PRODS) >= take_prods)
												{
													AddBusinessData(businessid, B_PRODS, -, take_prods);
													AddBusinessData(businessid, B_BALANCE, +, price);
												}

												mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
												mysql_query(mysql, query, false);

												GivePlayerMoneyEx(playerid, -price, "Покупка телефона", false, true);
												SetPlayerData(playerid, P_PHONE, GetPlayerAccountID(playerid) + 1000000);

												SendClientMessage(playerid, 0x66CC00FF, "Используйте {0099FF}/c(/call) или /call [номер телефона] {66CC00}чтобы сделать звонок.");
												SendClientMessage(playerid, 0x66CC00FF, "Для отправки SMS сообщения используйте {0099FF}/sms{66CC00}. Другие команды: {0099FF}/menu > Список команд > Общение");

												format
												(
													query, sizeof query,
													"{FFFFFF}Поздравляем!\n"\
													"Вы купили мобильный телефон. Ваш номер: {0099FF}%d",
													GetPlayerPhone(playerid)
												);
												Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{66CC00}Покупка мобильного телефона", query, "Закрыть", "");

												SendClientMessage(playerid, COR_SERVER, "[Квесты]: "c_b"Вы успешно выполнили квест "c_i"'Без связи некуда'. "c_b"Награда: "c_m"5000000$");
											    GivePlayerMoneyEx(playerid, 5000000, "Выполнение квеста");

											    SetPlayerData(playerid, P_QUEST_2, 1);
											    UpdatePlayerDatabaseInt(playerid, "quest_2", 1);
											    
											    AddPlayerData(playerid, P_TOP_5, +, 1);
												UpdatePlayerDatabaseInt(playerid, "TOP_Quest", GetPlayerData(playerid, P_TOP_5));
											}
											else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 25)");
										}
										else SendClientMessage(playerid, 0xCECECEFF, "Мобильный телефон стоит 170 рублей");
									}
									else SendClientMessage(playerid, 0x999999FF, "У Вас уже есть мобильный телефон");
								}
								case 2:
								{
									price = 450;
									if(GetPlayerPhone(playerid))
									{
										if(GetPlayerMoneyEx(playerid) >= price)
										{
											Dialog
											(
												playerid, DIALOG_BIZ_CHANGE_PHONE_NUMBER, DIALOG_STYLE_INPUT,
												"{66CC00}Изменение номера",
												"{FFFFFF}Введите новый номер в поле ниже\n\n"\
												"{FF6633}Примечания:\n"\
												"{FFCD00}- Номер должен быть шестизначным,\n"\
												"например: 284411\n"\
												"- Номер не должен начинаться с 0\n\n"\
												"{FFFFFF}Вы также можете вернуть свой\n"\
												"стандартный номер. Для этого\n"\
												"введите в поле {3399FF}цифру 0",
												"Сменить", "Отмена"
											);

											return 1;
										}
										else SendClientMessage(playerid, 0xCECECEFF, "Для изменение номера телефона необходимо 450 рублей");
									}
									else SendClientMessage(playerid, 0x999999FF, "Сначала нужно приобрести мобильный телефон");

									callcmd::buy(playerid, "");
								}
								case 3:
								{
									price = 200;
									if(GetPlayerPhone(playerid))
									{
										if(GetPlayerMoneyEx(playerid) >= price)
										{
											Dialog
											(
												playerid, DIALOG_BIZ_CHANGE_PHONE_COLOR, DIALOG_STYLE_LIST,
												"{66CC00}Изменение цвета телефона",
												"1. Карамельный\n"\
												"2. Синий\n"\
												"3. Оранжевый\n"\
												"4. Серебристый\n"\
												"5. Розовый\n"\
												"6. Красный\n"\
												"7. Зеленый\n"\
												"8. Темно-синий\n"\
												"9. Желтый\n"\
												"10. Белый",
												"Поменять", "Отмена"
											);

											return 1;
										}
										else SendClientMessage(playerid, 0xCECECEFF, "Для изменение цвета телефона необходимо 200 рублей");
									}
									else SendClientMessage(playerid, 0x999999FF, "Сначала нужно приобрести мобильный телефон");

									callcmd::buy(playerid, "");
								}
								case 4:
								{
									if(GetPlayerPhone(playerid) != 0)
									{
										Dialog
										(
											playerid, DIALOG_BIZ_PHONE_BALANCE, DIALOG_STYLE_INPUT,
											"{FFCD00}Пополнение мобильного телефона",
											"{FFFFFF}Укажите сумму, на которую хотите пополнить счёт:",
											"Готово", "Назад"
										);

										return 1;
									}
									else SendClientMessage(playerid, 0x999999FF, "У Вас нет телефона. Его можно купить в сотовом салоне");

									callcmd::buy(playerid, "");
								}
								default:
									return 1;
							}
						}
					}
				}
			}
			case DIALOG_BIZ_PHONE_BALANCE:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_SHOP_24_7))
					{
						if(response)
						{
							new sum = strval(inputtext);
							if(sum > 0 && IsNumeric(inputtext))
							{
								if(GetPlayerMoneyEx(playerid) >= sum)
								{
									new query[128];

									format(query, sizeof query, "UPDATE accounts SET money=%d,phone_balance=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-sum, GetPlayerData(playerid, P_PHONE_BALANCE)+sum, GetPlayerAccountID(playerid));
									mysql_query(mysql, query, false);

									if(!mysql_errno())
									{
										GivePlayerMoneyEx(playerid, -sum, "Пополнение счета телефона", false, true);
										AddPlayerData(playerid, P_PHONE_BALANCE, +, sum);

										format(query, sizeof query, "Вы пополнили счет мобильного телефона на {FF9900}%d руб", sum);
										SendClientMessage(playerid, 0x66CC00FF, query);

										format(query, sizeof query, "Сейчас на счету %d руб", GetPlayerData(playerid, P_PHONE_BALANCE));
										SendClientMessage(playerid, 0x66CC00FF, query);

										return 1;
									}
									else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 15)");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "У Вас не хватает денег");
							}

							Dialog
							(
								playerid, DIALOG_BIZ_PHONE_BALANCE, DIALOG_STYLE_INPUT,
								"{FFCD00}Пополнение мобильного телефона",
								"{FFFFFF}Укажите сумму, на которую хотите пополнить счёт:",
								"Готово", "Назад"
							);
						}
						else callcmd::buy(playerid, "");
					}
				}
			}
			case DIALOG_BIZ_CHANGE_PHONE_NUMBER:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_SHOP_24_7))
					{
						if(response)
						{
							new buffer = strlen(inputtext);
							if((1 <= buffer <= 10) && IsNumeric(inputtext))
							{
								new fmt_str[255];
								new number = strval(inputtext);

								new price = 450;
								new take_prods = 3;

								if(number > 0)
								{
									if(inputtext[0] != '0' && buffer == 6)
									{
										new Cache: result;
										buffer = 0;

										format(fmt_str, sizeof fmt_str, "SELECT id FROM accounts WHERE phone=%d LIMIT 1", number);
										result = mysql_query(mysql, fmt_str, true);

										buffer = cache_num_rows();
										cache_delete(result);

										if(!buffer)
										{
											if(GetPlayerMoneyEx(playerid) >= price)
											{
												if(GetBusinessData(businessid, B_PRODS) >= take_prods)
												{
													format(fmt_str, sizeof fmt_str, "UPDATE accounts a,business b SET a.money=%d,a.phone=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, number, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
												}
												else format(fmt_str, sizeof fmt_str, "UPDATE accounts SET money=%d,phone=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, number, GetPlayerAccountID(playerid));
												mysql_query(mysql, fmt_str, false);

												if(!mysql_errno())
												{
													if(GetBusinessData(businessid, B_PRODS) >= take_prods)
													{
														AddBusinessData(businessid, B_PRODS, -, take_prods);
														AddBusinessData(businessid, B_BALANCE, +, price);
													}

													mysql_format(mysql, fmt_str, sizeof fmt_str, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
													mysql_query(mysql, fmt_str, false);

													GivePlayerMoneyEx(playerid, -price, "Смена номера телефона[1]", false, true);
													SetPlayerData(playerid, P_PHONE, number);

													format
													(
														fmt_str, sizeof fmt_str,
														"{FFFFFF}Номер телефона изменен\n"\
														"Теперь с Вами  можно связаться по номеру {0099FF}%d",
														GetPlayerPhone(playerid)
													);
													return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{66CC00}Номер изменен", fmt_str, "Закрыть", "");
												}
												else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 26)");
											}
											else
											{
												return SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег");
											}
										}
										else SendClientMessage(playerid, 0xFF6600FF, "Введенный Вами номер уже занят");
									}
									else SendClientMessage(playerid, 0xFF6600FF, "Номер введен некорректно. Повторите попытку");
								}
								else
								{
									if(GetPlayerMoneyEx(playerid) >= price)
									{
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(fmt_str, sizeof fmt_str, "UPDATE accounts a,business b SET a.money=%d,a.phone=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid) + 1000000, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(fmt_str, sizeof fmt_str, "UPDATE accounts SET money=%d,phone=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid) + 1000000, GetPlayerAccountID(playerid));
										mysql_query(mysql, fmt_str, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
											}

											mysql_format(mysql, fmt_str, sizeof fmt_str, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, fmt_str, false);

											GivePlayerMoneyEx(playerid, -price, "Смена номера телефона[2]", false, true);
											SetPlayerData(playerid, P_PHONE, GetPlayerAccountID(playerid) + 1000000);

											format(fmt_str, sizeof fmt_str, "{FFFFFF}Установлен Ваш стандартный номер: {0099FF}%d", GetPlayerPhone(playerid));
											return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{66CC00}Номер изменен", fmt_str, "Закрыть", "");
										}
										else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 26)");
									}
									else
									{
										return SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег");
									}
								}
							}

							Dialog
							(
								playerid, DIALOG_BIZ_CHANGE_PHONE_NUMBER, DIALOG_STYLE_INPUT,
								"{66CC00}Изменение номера",
								"{FFFFFF}Введите новый номер в поле ниже\n\n"\
								"{FF6633}Примечания:\n"\
								"{FFCD00}- Номер должен быть шестизначным,\n"\
								"например: 284411\n"\
								"- Номер не должен начинаться с 0\n\n"\
								"{FFFFFF}Вы также можете вернуть свой\n"\
								"стандартный номер. Для этого\n"\
								"введите в поле {3399FF}цифру 0",
								"Сменить", "Отмена"
							);
						}
						else callcmd::buy(playerid, "");
					}
				}
			}
			case DIALOG_BIZ_CHANGE_PHONE_COLOR:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_SHOP_24_7))
					{
						if(response)
						{
							if(0 <= listitem <= 9)
							{
								new price = 200;
								new take_prods = 1;

								if(GetPlayerMoneyEx(playerid) >= price)
								{
									new query[255];

									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,a.phone_color=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, listitem, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
									}
									else format(query, sizeof query, "UPDATE accounts SET money=%d,phone_color=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, listitem, GetPlayerAccountID(playerid));
									mysql_query(mysql, query, false);

									if(!mysql_errno())
									{
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											AddBusinessData(businessid, B_PRODS, -, take_prods);
											AddBusinessData(businessid, B_BALANCE, +, price);
										}

										mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
										mysql_query(mysql, query, false);

										GivePlayerMoneyEx(playerid, -price, "Смена цвета телефона", false, true);

										SetPlayerData(playerid, P_PHONE_COLOR, listitem);
										SendClientMessage(playerid, 0x3399FFFF, "Вы изменили цвет своего мобильного телефона");
									}
									else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 27)");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Для изменение цвета телефона необходимо 200 рублей");
							}
						}
						else callcmd::buy(playerid, "");
					}
				}
			}
			case DIALOG_BIZ_LOTTERY:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_SHOP_24_7))
					{
						if(response)
						{
							if(strlen(inputtext))
							{
								new number = strval(inputtext);
								if(100 <= number <= 999 && IsNumeric(inputtext))
								{
									new fmt_str[64];
									SetPlayerData(playerid, P_LOTTERY, number);

									format(fmt_str, sizeof fmt_str, "Счастливое число изменено на {00CCCC}%d", number);
									SendClientMessage(playerid, 0x66CC00FF, fmt_str);
								}
								else SendClientMessage(playerid, 0xFF6600FF, "Счастливое число не было изменено, т.к. было введено неверно");
							}
						}
					}
				}
			}
			case DIALOG_BIZ_CLUB:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_CLUB, 15.0)
					|| IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_CASINO, 15.0))
					{
						if(response)
						{
							if(0 <= listitem <= 9)
							{
								new const
									item_price[10] = {60, 100, 200, 270, 300, 450, 630, 750, 50, 80};

								if(GetPlayerMoneyEx(playerid) >= item_price[listitem])
								{
									new query[255];
									new take_prods = 1;

									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-item_price[listitem], GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+item_price[listitem], GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
									}
									else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-item_price[listitem], GetPlayerAccountID(playerid));
									mysql_query(mysql, query, false);

									if(!mysql_errno())
									{
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											AddBusinessData(businessid, B_PRODS, -, take_prods);
											AddBusinessData(businessid, B_BALANCE, +, item_price[listitem]);
										}
										GivePlayerMoneyEx(playerid, -item_price[listitem], "Покупка в клубе/казино", false, true);
										GivePlayerDrinkItem(playerid, listitem);

										mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), item_price[listitem], IsBusinessOwned(businessid));
										mysql_query(mysql, query, false);

										switch(listitem+1)
										{
											case 1: Action(playerid, "купил(а) банку лимонада", 	15.0, false);
											case 2: Action(playerid, "купил(а) бутылку пива", 		15.0, false);
											case 3: Action(playerid, "купил(а) бутылку вина", 		15.0, false);
											case 4: Action(playerid, "купил(а) бутылку шампанского",15.0, false);
											case 5: Action(playerid, "купил(а) бутылку водки", 		15.0, false);
											case 6: Action(playerid, "купил(а) бутылку коньяка",	15.0, false);
											case 7: Action(playerid, "купил(а) бутылку виски", 		15.0, false);
											case 8: Action(playerid, "купил(а) бутылку абсента", 	15.0, false);
											case 9: Action(playerid, "купил(а) закуску", 			15.0, false);
											case 10:Action(playerid, "купил(а) сигару", 			15.0, false);
										}
									}
									else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 22)");
								}
								else SendClientMessage(playerid, 0x999999FF, "У Вас не хватает денег");
							}
						}
					}
				}
			}
			case DIALOG_BIZ_REALTOR_BIZ_LIST:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_REALTOR_BIZ, 15.0))
					{
						if(response)
						{
							if(0 <= listitem <= MAX_BUSINESS-1)
							{
								new price = 70; //

								if(GetPlayerMoneyEx(playerid) >= price)
								{
									new fmt_str[300];
									GivePlayerMoneyEx(playerid, -price, "Просмотр инфо о бизнесе (управление статистики)", true, true);

									businessid = g_business_realtor_list_idx[listitem];
									SetPlayerUseListitem(playerid, businessid);
									new city[MAX_ZONES_NAME + 1], area[MAX_ZONES_NAME + 1];
									GetCityName(GetBusinessData(businessid, B_POS_X), GetBusinessData(businessid, B_POS_Y), city);
									GetAreaName(GetBusinessData(businessid, B_POS_X), GetBusinessData(businessid, B_POS_Y), area);
									format
									(
										fmt_str, sizeof fmt_str,
										"{FFFFFF}Название:\t\t\t%s\n"\
										"Номер бизнеса:\t\t%d\n"\
										"Город / область:\t\t%s\n"\
										"Район:\t\t\t\t%s\n"\
										"Стоимость:\t\t\t%d\n\n"\
										"{FFFFFF}Вы также можете посмотреть фотографию бизнеса.\n"\
										"Для этого нажмите кнопку \"Фото\". {FFCD00}Услуга стоит 290 руб",
										GetBusinessData(businessid, B_NAME),
										businessid,
										city,
										area,
										GetBusinessData(businessid, B_PRICE)
									);
									Dialog(playerid, DIALOG_BIZ_REALTOR_BIZ_INFO, DIALOG_STYLE_MSGBOX, "{CC9900}Информация о выбранном бизнесе", fmt_str, "Фото", "Закрыть");
								}
								else SendClientMessage(playerid, 0x999999FF, "Недостаточно денег");
							}
						}
					}
				}
			}
			case DIALOG_BIZ_REALTOR_BIZ_INFO:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_REALTOR_BIZ, 15.0))
					{
						if(response)
						{
							new price = 290; //

							businessid = GetPlayerUseListitem(playerid);
							if(GetPlayerMoneyEx(playerid) >= price)
							{
								GivePlayerMoneyEx(playerid, -price, "Просмотр фото бизнеса (управление статистики)", true, true);

								TogglePlayerSpectating(playerid, true);
								//ShowPlayerWaitPanel(playerid);

								SetPlayerVirtualWorld(playerid, playerid + 50);
								SendClientMessage(playerid, 0xFFFFFFFF, "Используйте {99CC00}~k~~PED_SPRINT~ {FFFFFF}для выхода");

								SetPlayerData(playerid, P_REALTOR_TYPE, REALTOR_TYPE_BIZ);
								SetTimerEx("SetRealtorMakePhoto", 1000, false, "iii", playerid, REALTOR_TYPE_BIZ, businessid);
							}
							else SendClientMessage(playerid, 0x999999FF, "Недостаточно денег");
						}
					}
				}
			}
			case DIALOG_BIZ_REALTOR_HOME_GET:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_REALTOR_HOME, 15.0))
					{
						if(response)
						{
							new price = 50;
							new houseid = strval(inputtext);

							if(strlen(inputtext) && IsNumeric(inputtext) && (0 <= houseid <= g_house_loaded-1))
							{
								if(GetPlayerMoneyEx(playerid) >= price)
								{
									GivePlayerMoneyEx(playerid, -price, "Просмотр инфо о доме (риелторское агенство)", true, true);

									new fmt_str[512];
									new city[MAX_ZONES_NAME + 1], area[MAX_ZONES_NAME + 1];
									new type = GetHouseData(houseid, H_TYPE);
									new entranceid = GetHouseData(houseid, H_ENTRACE);

									SetPlayerUseListitem(playerid, houseid);
									if(entranceid != -1)
									{
										GetCityName(GetEntranceData(entranceid, E_POS_X), GetEntranceData(entranceid, E_POS_Y), city);
										GetAreaName(GetEntranceData(entranceid, E_POS_X), GetEntranceData(entranceid, E_POS_Y), area);
										format
										(
											fmt_str, sizeof fmt_str,
											"{FFFFFF}Тип / название:\t\t%s\n"\
											"Номер квартиры:\t\t%d\n"\
											"Номер подъезда:\t\t%d\n"\
											"Город / область:\t\t%s\n"\
											"Район:\t\t\t\t%s\n"\
											"Стоимость:\t\t\t%d\n"\
											"Количество комнат:\t\t%d\n"\
											"Статус:\t\t\t\t%s\n\n"\
											"{FFFFFF}Вы можете посмотреть как выглядит подъезд этой квартиры\n"\
											"Для этого нажмите кнопку \"Фото\". {FFCD00}Услуга стоит 250 рублей",
											GetHouseData(houseid, H_NAME),
											GetHouseData(houseid, H_FLAT_ID) + 1,
											entranceid + 1,
											city,
											area,
											GetHouseData(houseid, H_PRICE),
											GetHouseTypeInfo(type, HT_ROOMS),
											IsHouseOwned(houseid) ? ("{FF6600}Квартира занята") : ("{00CC33}Квартира свободна")
										);
									}
									else
									{
										GetCityName(GetHouseData(houseid, H_POS_X), GetHouseData(houseid, H_POS_Y), city);
										GetAreaName(GetHouseData(houseid, H_POS_X), GetHouseData(houseid, H_POS_Y), area);
										format
										(
											fmt_str, sizeof fmt_str,
											"{FFFFFF}Тип / название:\t\t%s\n"\
											"Номер дома:\t\t\t%d\n"\
											"Город / область:\t\t%s\n"\
											"Район:\t\t\t\t%s\n"\
											"Стоимость:\t\t\t%d\n"\
											"Количество комнат:\t\t%d\n"\
											"Статус:\t\t\t\t%s\n\n"\
											"{FFFFFF}Вы также можете посмотреть как выглядит этот дом снаружи.\n"\
											"Для этого нажмите кнопку \"Фото\". {FFCD00}Услуга стоит 250 рублей",
											GetHouseData(houseid, H_NAME),
											houseid,
											city,
											area,
											GetHouseData(houseid, H_PRICE),
											GetHouseTypeInfo(type, HT_ROOMS),
											IsHouseOwned(houseid) ? ("{FF6600}Дом занят") : ("{00CC33}Дом свободен")
										);
									}
									Dialog(playerid, DIALOG_BIZ_REALTOR_HOME_INFO, DIALOG_STYLE_MSGBOX, "{FF9933}Информация о выбранном доме", fmt_str, "Фото", "Назад");
								}
								else SendClientMessage(playerid, 0x999999FF, "Недостаточно денег");
							}
							else
							{
								if(!(0 <= houseid <= g_house_loaded-1))
									SendClientMessage(playerid, 0xCECECEFF, "Этот дом еще не построили");

								ShowPlayerRealtorHomeDialog(playerid);
							}
						}
					}
				}
			}
			case DIALOG_BIZ_REALTOR_HOME_INFO:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_REALTOR_HOME, 15.0))
					{
						if(response)
						{
							new price = 250; //

							if(GetPlayerMoneyEx(playerid) >= price)
							{
								GivePlayerMoneyEx(playerid, -price, "Просмотр фото дома (риелторское агенство)", true, true);

								TogglePlayerSpectating(playerid, true);
								//ShowPlayerWaitPanel(playerid);

								SetPlayerVirtualWorld(playerid, playerid + 3000);
								SendClientMessage(playerid, 0xFFFFFFFF, "Используйте {00CC99}~k~~PED_SPRINT~ {FFFFFF}для выхода");

								SetPlayerData(playerid, P_REALTOR_TYPE, REALTOR_TYPE_HOUSE);
								SetTimerEx("SetRealtorMakePhoto", 1000, false, "iii", playerid, REALTOR_TYPE_HOUSE, GetPlayerUseListitem(playerid));
							}
							else SendClientMessage(playerid, 0x999999FF, "Недостаточно денег");
						}
						else ShowPlayerRealtorHomeDialog(playerid);
					}
				}
			}
			case DIALOG_BIZ_CLOTHING_BUY:
			{
				new businessid = GetPlayerInBiz(playerid);
				print("ч");
				if(businessid != -1)
				{
						if(response)
						{
							new select_skin = GetPlayerSelectSkin(playerid);
							if(select_skin != -1)
							{
								new price = g_business_clothing_skins[GetPlayerSex(playerid)][select_skin][1];
								new skinid = g_business_clothing_skins[GetPlayerSex(playerid)][select_skin][0];

								new take_prods = random(8) + 6;
								new biz_price = price * 20 / 100;

								if(GetPlayerMoneyEx(playerid) >= price)
								{
									new query[255];
									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										format(query, sizeof query, "UPDATE accounts a,business b SET a.skin=%d,a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", skinid, GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+biz_price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
									}
									else format(query, sizeof query, "UPDATE accounts SET skin=%d,money=%d WHERE id=%d LIMIT 1", skinid, GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
									mysql_query(mysql, query, false);

									if(!mysql_errno())
									{
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											AddBusinessData(businessid, B_PRODS, -, take_prods);
											AddBusinessData(businessid, B_BALANCE, +, biz_price);
										}
										GivePlayerMoneyEx(playerid, -price, "Покупка скина (магазин одежды)", false, true);
										SetPlayerData(playerid, P_SKIN, skinid);

										ExitPlayerClothingShopPanel(playerid);
										SendClientMessage(playerid, 0x66CC00FF, "Поздравляем с покупкой новой одежды!");

										mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
										mysql_query(mysql, query, false);

										AddPlayerData(playerid, P_QUEST_EXP_6, +, 1);
										UpdatePlayerDatabaseInt(playerid, "quest_exp_6", GetPlayerData(playerid, P_QUEST_EXP_6));

										if(GetPlayerData(playerid, P_QUEST_EXP_6) == 1)
										{
										    SendClientMessage(playerid, COR_SERVER, "[Квесты]: "c_b"Вы успешно выполнили квест "c_i"'Пора приодеться'. "c_b"Награда: "c_m"5000000$");
										    GivePlayerMoneyEx(playerid, 5000000, "Выполнение квеста");

										    SetPlayerData(playerid, P_QUEST_6, 1);
										    UpdatePlayerDatabaseInt(playerid, "quest_6", 1);
										    
										    AddPlayerData(playerid, P_TOP_5, +, 1);
											UpdatePlayerDatabaseInt(playerid, "TOP_Quest", GetPlayerData(playerid, P_TOP_5));
										}
									}
									else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 36)");
								}
								else SendClientMessage(playerid, 0x999999FF, "Недостаточно денег");
							}
						}
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_HOUSE_BUY:
			{
				new houseid = GetPlayerUseListitem(playerid);

				if(houseid >= 0 && response)
				{
					if(GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) == -1)
					{
						if(GetPlayerHouse(playerid) == -1)
						{
							if(IsPlayerInRangeOfHouse(playerid, houseid, 5.0))
							{
								if(!IsHouseOwned(houseid))
								{
									if(GetPlayerMoneyEx(playerid) >= GetHouseData(houseid, H_PRICE))
									{
									    //if(Config[sBuyBiz] == 0)
							    		//{
										SendClientMessage(playerid, 0xFFFFFFFF, "Поздравляем! Вы приобрели дом");
										BuyPlayerHouse(playerid, houseid);

										EnterPlayerToHouse(playerid, houseid);
										PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);

										GameTextForPlayer(playerid, "~b~welcome ~g~to~n~~y~new ~w~home!", 4000, 1);
										Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{3399FF}Новый дом", "{FFFFFF}Вам нужно заплатить за дом в ближайшем отделением банка {FFCD00}(/gps)", "Ок", "");
								//	}
									//	else
								    	//	return Send(playerid,-1,"В данный момент все дома на сервере не доступны к покупке!");
								    
									}
									else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для покупки этого дома");
								}
								else
								{
									new fmt_str[64];

									format(fmt_str, sizeof fmt_str, "Этот дом уже куплен. Владелец: %s", GetHouseData(houseid, H_OWNER_NAME));
									SendClientMessage(playerid, 0xCECECEFF, fmt_str);
								}
							}
						}
						else SendClientMessage(playerid, 0xCECECEFF, "У Вас уже есть дом. Чтобы купить новый - необходимо продать старый");
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Вы снимаете номер в гостинице. Нужно выселиться перед покупкой дома");
				}
			}
			case DIALOG_HOUSE_SELL:
			{
				new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
				if(houseid != -1)
				{
					if(response)
					{
						SellHouse(playerid);
					}
				}
			}
			case DIALOG_HOUSE_INFO:
			{
				if(response)
				{
					new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
					if(houseid != -1)
					{
						ShowPlayerHouseDialog(playerid, HOUSE_OPERATION_PARAMS);
					}
				}
			}
			case DIALOG_HOUSE_PARAMS:
			{
				new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
				if(houseid != -1)
				{
					if(response)
					{
						ShowPlayerHouseDialog(playerid, listitem + 1);
					}
					else callcmd::home(playerid, "");
				}
			}
			case DIALOG_HOUSE_IMPROVEMENTS:
			{
				new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
				if(houseid != -1)
				{
					if(response)
					{
						if(0 <= listitem <= sizeof g_house_improvements - 1)
						{
							new i_level = GetHouseData(houseid, H_IMPROVEMENTS);
							new i_price = g_house_improvements[listitem][I_PRICE];

							if(i_level >= sizeof g_house_improvements)
							{
								SendClientMessage(playerid, 0x999999FF, "Вы уже приобрели все доступные улучшения для дома");
							}
							else if(i_level < listitem)
							{
								SendClientMessage(playerid, 0xCECECEFF, "Этот уровень улучшений пока недоступен");
							}
							else if(i_level > listitem)
							{
								SendClientMessage(playerid, 0xCECECEFF, "Вы уже купили этот уровень улучшений");
							}
							else if(GetPlayerMoneyEx(playerid) < i_price)
							{
								new fmt_str[64];

								format(fmt_str, sizeof fmt_str, "Для покупки %d уровня улучшений необходимо %d рублей", listitem + 1, i_price);
								SendClientMessage(playerid, 0xCECECEFF, fmt_str);
							}
							else if(i_level == 6 && GetHouseData(houseid, H_ENTRACE) != -1)
							{
								SendClientMessage(playerid, 0xCECECEFF, "Недоступно для квартир");
							}
							else
							{
								new fmt_str[128];

								format(fmt_str, sizeof fmt_str, "UPDATE accounts a, houses h SET a.money=%d, h.improvements=%d WHERE a.id=%d AND h.id=%d", GetPlayerMoneyEx(playerid)-i_price, i_level + 1, GetPlayerAccountID(playerid), GetHouseData(houseid, H_SQL_ID));
								mysql_query(mysql, fmt_str, false);

								if(!mysql_errno())
								{
									GivePlayerMoneyEx(playerid, -i_price, "Покупка улучшений для дома", false, true);

									format(fmt_str, sizeof fmt_str, "Вы улучшили свой дом до {FFCD00}%s {3399FF}уровня", GetNumericName(listitem + 1));
									SendClientMessage(playerid, 0x3399FFFF, fmt_str);

									AddHouseData(houseid, H_IMPROVEMENTS, +, 1);
									switch(listitem + 1)
									{
										case 1:
										{
											SendClientMessage(playerid, 0x66CC00FF, "Теперь чтобы выйти из дома достаточно нажать {FF9900}~k~~SNEAK_ABOUT~{66CC00}, стоя у двери");
											SendClientMessage(playerid, 0x999999FF, "Автоматические двери облегчат жизнь в Вашем доме");
										}
										case 2:
										{
											SendClientMessage(playerid, 0x66CC00FF, "Теперь в доме всегда будет доступна аптечка");
											SendClientMessage(playerid, 0x999999FF, "Вы и ваши гости в любой момент можете использовать ее");

											HouseHealthInit(houseid);
										}
										case 3:
										{
											SendClientMessage(playerid, 0x66CC00FF, "Вы можете разрешить людям проживать в Вашем доме с помощью команды {FF9900}/live");
											SendClientMessage(playerid, 0x999999FF, "В доме могут разместиться столько гостей, сколько в нем комнат");
										}
										case 4:
										{
											SendClientMessage(playerid, 0x66CC00FF, "На Ваше имя была оформлена субсидия, которая дает право платить пониженную квартплату");
											SendClientMessage(playerid, 0x999999FF, "Благодаря этому, ежедневная квартплата уменьшена в 2 раза");
										}
										case 5:
										{
											SendClientMessage(playerid, 0x66CC00FF, "Используйте {3399FF}/makestore {66CC00}для размещения шкафа. В нем можно будет хранить различные вещи");
											SendClientMessage(playerid, 0x999999FF, "В любой момент можно перенести шкаф на другое место. Для открытия шкафа напишите {3399FF}/use");

											HouseStoreInit(houseid);
										}
										/*
										case 6:
										{
											// сейф
										}
										case 7:
										{
											// сигнализация
										}
										*/
									}
								}
								else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 35)");
							}
						}
					}
					ShowPlayerHouseDialog(playerid, HOUSE_OPERATION_PARAMS);
				}
			}
			case DIALOG_HOUSE_RENTERS:
			{
				new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
				if(houseid != -1)
				{
					if(response)
					{
						if(0 <= listitem <= MAX_HOUSE_ROOMS-1)
						{
							new room = GetPlayerListitemValue(playerid, listitem);
							ShowHouseRenterInfo(playerid, houseid, room);
						}
					}
					else ShowPlayerHouseDialog(playerid, HOUSE_OPERATION_PARAMS);
				}
			}
			case DIALOG_HOUSE_RENTER_INFO:
			{
				new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
				if(houseid != -1)
				{
					if(response)
					{
						new room = GetPlayerUseListitem(playerid);
						if(IsHouseRoomOwned(houseid, room))
						{
							switch(listitem + 1)
							{
								case 4:
								{
									new fmt_str[95];
									format
									(
										fmt_str, sizeof fmt_str,
										"{FFFFFF}Вы действительно хотите выселить {FFCD00}%s {FFFFFF}из своего дома?",
										GetHouseRenterInfo(houseid, room, HR_OWNER_NAME)
									);
									return Dialog(playerid, DIALOG_HOUSE_RENTER_EVICT, DIALOG_STYLE_MSGBOX, "{33AACC}Выселение арендатора", fmt_str, "Да", "Нет");
								}
							}
							ShowHouseRenterInfo(playerid, houseid, room);
						}
						else SendClientMessage(playerid, 0x999999FF, "В этой комнате уже никто не проживает");
					}
					else ShowPlayerHouseDialog(playerid, HOUSE_OPERATION_PARAMS);
				}
			}
			case DIALOG_HOUSE_RENTER_EVICT:
			{
				new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
				if(houseid != -1)
				{
					if(response)
					{
						new room = GetPlayerUseListitem(playerid);
						if(IsHouseRoomOwned(houseid, room))
						{
							new fmt_str[64],
								renter_id = GetPlayerID(GetHouseRenterInfo(houseid, room, HR_OWNER_NAME));

							format(fmt_str, sizeof fmt_str, "Вы выселили %s из своего дома", GetHouseRenterInfo(houseid, room, HR_OWNER_NAME));
							SendClientMessage(playerid, 0x66CC00FF, fmt_str);

							EvictHouseRenter(houseid, room, renter_id, playerid);
						}
						else SendClientMessage(playerid, 0x999999FF, "В этой комнате уже никто не проживает");
					}
					else ShowPlayerHouseDialog(playerid, HOUSE_OPERATION_PARAMS);
				}
			}
			case DIALOG_HOUSE_EVICT:
			{
				new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_ROOM);
				if(houseid != -1)
				{
					if(response)
					{
						new roomid = GetPlayerData(playerid, P_HOUSE_ROOM);
						new owner_id = GetPlayerID(GetHouseData(houseid, H_OWNER_NAME));

						EvictHouseRenter(houseid, roomid, playerid);

						if(owner_id != INVALID_PLAYER_ID)
						{
							new fmt_str[45 + 1];

							format(fmt_str, sizeof fmt_str, "%s выселился из Вашего дома", GetPlayerNameEx(playerid));
							SendClientMessage(owner_id, 0x66CC00FF, fmt_str);
						}
						SendClientMessage(playerid, 0x66CC00FF, "Вы выселились из дома");
					}
				}
			}
			case DIALOG_HOUSE_MOVE_STORE:
			{
				new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
				if(houseid != -1)
				{
					if(response)
					{
						if(GetPlayerInHouse(playerid) == houseid)
						{
							if(GetHouseData(houseid, H_IMPROVEMENTS) >= 5)
							{
								new type = GetHouseData(houseid, H_TYPE);
								if(IsPlayerInRangeOfPoint(playerid, 50.0, GetHouseTypeInfo(type, HT_ENTER_POS_X), GetHouseTypeInfo(type, HT_ENTER_POS_Y), GetHouseTypeInfo(type, HT_ENTER_POS_Z)))
								{
									if(GetHouseData(houseid, H_STORE_LABEL) != Text3D:-1)
									{
										new query[128];

										new Float: pos_x, Float: pos_y, Float: pos_z;
										GetPlayerPos(playerid, pos_x, pos_y, pos_z);

										SetHouseData(houseid, H_STORE_X, pos_x);
										SetHouseData(houseid, H_STORE_Y, pos_y);
										SetHouseData(houseid, H_STORE_Z, pos_z);

										DestroyDynamic3DTextLabel(GetHouseData(houseid, H_STORE_LABEL));
										SetHouseData(houseid, H_STORE_LABEL, Text3D:-1);

										HouseStoreInit(houseid);

										format(query, sizeof query, "UPDATE houses SET store_x=%f,store_y=%f,store_z=%f WHERE id=%d LIMIT 1", pos_x, pos_y, pos_z, GetHouseData(houseid, H_SQL_ID));
										mysql_tquery(mysql, query, "", "");
									}
								}
							}
						}
					}
				}
			}
			case DIALOG_HOUSE_STORE:
			{
				if(response)
				{
					new house_id = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);

					new item_name[2][10] = {"металл", "наркотики"},
							title[32];

					if(0 <= listitem <= 1)
					{
						format(title, sizeof title, "{FFCD00}Положить %s", item_name[listitem]);

						Dialog
						(
							playerid, DIALOG_HOUSE_STORE_PUT, DIALOG_STYLE_INPUT,
							title,
							"{FFFFFF}Введите количество, которое Вы хотите {FFCD00}положить:",
							"Положить", "Отмена"
						);

						SetPVarInt(playerid, "store_index", listitem);
					}
					else if(4 <= listitem <= 5)
					{
						format(title, sizeof title, "{FFCD00}Взять %s", item_name[listitem - 4]);

						Dialog
						(
							playerid, DIALOG_HOUSE_STORE_TAKE, DIALOG_STYLE_INPUT,
							title,
							"{FFFFFF}Введите количество, которое Вы хотите {FFCD00}взять:",
							"Взять", "Отмена"
						);

						SetPVarInt(playerid, "store_index", listitem - 4);
					}
					else
					{
						new query[80];

						switch(listitem)
						{
							case 2:
							{
								if(GetHouseData(house_id, H_STORE_WEAPON))
									SendClientMessage(playerid, 0x999999FF, "Место в шкафу уже занято другим оружием");

								else
								{
									new weapon_id = GetPlayerWeapon(playerid),
										weapon_ammo = GetPlayerAmmo(playerid);

									if(!weapon_id)
										SendClientMessage(playerid, 0x999999FF, "У Вас в руках нет оружия");

									else
									{
										if(weapon_ammo > 3000)
											SendClientMessage(playerid, 0x999999FF, "В шкаф не вместится такое количество патронов");

										else
										{
											if(weapon_id == 23 || weapon_id == 24
											|| weapon_id == 25 || weapon_id == 29
											|| weapon_id == 30 || weapon_id == 31
											|| weapon_id == 33 || weapon_id == 34)
											{
												SetHouseData(house_id, H_STORE_WEAPON, 	weapon_id);
												SetHouseData(house_id, H_STORE_AMMO, 	weapon_ammo);

												SetPlayerAmmo(playerid, weapon_id, 0);

												mysql_format(mysql, query, sizeof query, "UPDATE houses SET store_weapon=%d, store_ammo=%d WHERE id=%d",
												weapon_id, weapon_ammo, GetHouseData(house_id, H_SQL_ID));
												mysql_query(mysql, query, false);

												format(query, sizeof query, "Вы положили %s в шкаф", GetWeaponName(weapon_id));
												SendClientMessage(playerid, 0x3399FFFF, query);
											}
											else SendClientMessage(playerid, 0x999999FF, "Вы не можете класть этот тип оружия в шкаф");
										}
									}
								}
							}
							case 3:
							{
								if(!GetPlayerTeamEx(playerid))
								{
									if(GetHouseData(house_id, H_STORE_SKIN))
										SendClientMessage(playerid, 0x999999FF, "Место в шкафу уже занято другой одеждой");

									else
									{
										SetHouseData(house_id, H_STORE_SKIN, GetPlayerData(playerid, P_SKIN));

										mysql_format(mysql, query, sizeof query, "UPDATE houses SET store_skin=%d WHERE id=%d",
										GetPlayerSkinEx(playerid), GetHouseData(house_id, H_SQL_ID));
										mysql_query(mysql, query, false);

										SetPlayerData(playerid, P_SKIN, 97);
										UpdatePlayerDatabaseInt(playerid, "skin", 97);

										SetPlayerSkin(playerid, 97);

										SendClientMessage(playerid, 0x3399FFFF, "Вы положили свою одежду в шкаф");
									}
								}
								else SendClientMessage(playerid, 0x999999FF, "Вы не можете хранить в шкафу одежду организации");
							}
							case 6:
							{
								if(!GetHouseData(house_id, H_STORE_WEAPON))
									SendClientMessage(playerid, 0x999999FF, "В шкафу нет оружия");

								else
								{
									new weapon_id = GetHouseData(house_id, H_STORE_WEAPON),
										weapon_ammo = GetHouseData(house_id, H_STORE_AMMO);

									GivePlayerWeapon(playerid, weapon_id, weapon_ammo);

									SetHouseData(house_id, H_STORE_WEAPON, 	0);
									SetHouseData(house_id, H_STORE_AMMO, 	0);

									mysql_format(mysql, query, sizeof query, "UPDATE houses SET store_weapon=0, store_ammo=0 WHERE id=%d",
									GetHouseData(house_id, H_SQL_ID));
									mysql_query(mysql, query, false);

									format(query, sizeof query, "Вы достали из шкафа %s и %d патр.", GetWeaponName(weapon_id), weapon_ammo);
									SendClientMessage(playerid, 0x3399FFFF, query);
								}
							}
							case 7:
							{
								if(!GetPlayerTeamEx(playerid))
								{
									if(!GetHouseData(house_id, H_STORE_SKIN))
										SendClientMessage(playerid, 0x999999FF, "В шкафу нет одежды");

									else
									{
										SetPlayerData(playerid, P_SKIN, GetHouseData(house_id, H_STORE_SKIN));
										UpdatePlayerDatabaseInt(playerid, "skin", GetHouseData(house_id, H_STORE_SKIN));

										SetPlayerSkin(playerid, GetPlayerSkinEx(playerid));

										SetHouseData(house_id, H_STORE_SKIN, 	0);

										mysql_format(mysql, query, sizeof query, "UPDATE houses SET store_skin=0 WHERE id=%d",
										GetHouseData(house_id, H_SQL_ID));
										mysql_query(mysql, query, false);

										SendClientMessage(playerid, 0x3399FFFF, "Вы переоделись в одежду из шкафа");
									}
								}
								else SendClientMessage(playerid, 0x999999FF, "Вы не можете переодеться, находясь в организации");
							}
						}

						UpdateHouseStore(house_id);

						callcmd::use(playerid, "");
					}
				}
			}
			case DIALOG_HOUSE_STORE_TAKE:
			{
				if(response)
				{
					new value = strval(inputtext),
						house_id = GetPlayerHouse(playerid, HOUSE_TYPE_HOME),
						query[55];

					if(value < 1)
						SendClientMessage(playerid, 0x999999FF, "Некорректное значение");

					else
					{
						switch(GetPVarInt(playerid, "store_index"))
						{
							case 0:
							{
								if(value > GetHouseData(house_id, H_STORE_METALL))
									SendClientMessage(playerid, 0x999999FF, "В шкафу нет такого количества металла");

								else
								{
									if(GetPlayerData(playerid, P_METALL) + value > GetPlayerMaxStorage(playerid, STORAGE_METALL))
										SendClientMessage(playerid, 0xCECECEFF, "Вы не сможете унести с собой такое количество металла");

									else
									{
										AddPlayerData(playerid, P_METALL, +, value);
										UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_METALL));

										SetHouseData(house_id, H_STORE_METALL, GetHouseData(house_id, H_STORE_METALL) - value);

										mysql_format(mysql, query, sizeof query, "UPDATE houses SET store_metall=%d WHERE id=%d",
										GetHouseData(house_id, H_STORE_METALL), GetHouseData(house_id, H_SQL_ID));
										mysql_query(mysql, query, false);

										format(query, sizeof query, "Вы достали из шкафа %d кг металла", value);
										SendClientMessage(playerid, 0x3399FFFF, query);
									}
								}
							}
							case 1:
							{
								if(value > GetHouseData(house_id, H_STORE_DRUGS))
									SendClientMessage(playerid, 0x999999FF, "В шкафу нет такого количества наркотиков");

								else
								{
									if(GetPlayerData(playerid, P_DRUGS) + value > GetPlayerMaxStorage(playerid, STORAGE_DRUGS))
										SendClientMessage(playerid, 0xCECECEFF, "Вы не сможете унести с собой такое количество наркотиков");

									else
									{
										AddPlayerData(playerid, P_DRUGS, +, value);
										UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_DRUGS));

										SetHouseData(house_id, H_STORE_DRUGS, GetHouseData(house_id, H_STORE_DRUGS) - value);

										mysql_format(mysql, query, sizeof query, "UPDATE houses SET store_drugs=%d WHERE id=%d",
										GetHouseData(house_id, H_STORE_DRUGS), GetHouseData(house_id, H_SQL_ID));
										mysql_query(mysql, query, false);

										format(query, sizeof query, "Вы достали из шкафа %d г наркотиков", value);
										SendClientMessage(playerid, 0x3399FFFF, query);
									}
								}
							}
						}

						UpdateHouseStore(house_id);
					}
				}

				callcmd::use(playerid, "");
			}
			case DIALOG_HOUSE_STORE_PUT:
			{
				if(response)
				{
					new value = strval(inputtext),
						house_id = GetPlayerHouse(playerid, HOUSE_TYPE_HOME),
						query[55];

					if(value < 1)
						SendClientMessage(playerid, 0x999999FF, "Некорректное значение");

					else
					{
						switch(GetPVarInt(playerid, "store_index"))
						{
							case 0:
							{
								if(value > GetPlayerData(playerid, P_METALL))
									SendClientMessage(playerid, 0x999999FF, "У Вас нет такого количества металла");

								else
								{
									if(GetHouseData(house_id, H_STORE_METALL) + value > 700)
										SendClientMessage(playerid, 0x999999FF, "В шкафу не хватает места");

									else
									{
										AddPlayerData(playerid, P_METALL, -, value);
										UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_METALL));

										SetHouseData(house_id, H_STORE_METALL, GetHouseData(house_id, H_STORE_METALL) + value);

										mysql_format(mysql, query, sizeof query, "UPDATE houses SET store_metall=%d WHERE id=%d",
										GetHouseData(house_id, H_STORE_METALL), GetHouseData(house_id, H_SQL_ID));
										mysql_query(mysql, query, false);

										format(query, sizeof query, "Вы положили в шкаф %d кг металла", value);
										SendClientMessage(playerid, 0x3399FFFF, query);
									}
								}
							}
							case 1:
							{
								if(value > GetPlayerData(playerid, P_DRUGS))
									SendClientMessage(playerid, 0x999999FF, "У Вас нет такого количества наркотиков");

								else
								{
									AddPlayerData(playerid, P_DRUGS, -, value);
									UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_DRUGS));

									SetHouseData(house_id, H_STORE_DRUGS, GetHouseData(house_id, H_STORE_DRUGS) + value);

									mysql_format(mysql, query, sizeof query, "UPDATE houses SET store_drugs=%d WHERE id=%d",
									GetHouseData(house_id, H_STORE_DRUGS), GetHouseData(house_id, H_SQL_ID));
									mysql_query(mysql, query, false);

									format(query, sizeof query, "Вы положили в шкаф %d г наркотиков", value);
									SendClientMessage(playerid, 0x3399FFFF, query);
								}
							}
						}

						UpdateHouseStore(house_id);
					}
				}

				callcmd::use(playerid, "");
			}

			case DIALOG_HOUSE_ENTER:
			{
				new houseid = GetPlayerUseListitem(playerid);

				if(houseid >= 0 && response)
				{
					if(GetPlayerInHouse(playerid) == -1)
					{
						if(!GetHouseData(houseid, H_LOCK_STATUS) || GetPlayerHouse(playerid, HOUSE_TYPE_HOME) == houseid)
						{
							EnterPlayerToHouse(playerid, houseid);
						}
						else GameTextForPlayer(playerid, "~r~Closed", 3000, 1);
					}
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_ENTRANCE_LIFT:
			{
				if(response)
				{
					new entranceid = GetPlayerInEntrance(playerid);
					if(entranceid != -1)
					{
						new floor = GetPlayerInEntranceFloor(playerid);
						if(floor != -1)
						{
							if(0 <= listitem <= MAX_ENTRANCE_FLOORS-1)
							{
								new to_floor = GetPlayerListitemValue(playerid, listitem);
								if(!to_floor)
								{
									SetPlayerPosEx(playerid, 560.7483,23.6653,1049.2731, -180.0, 1, entranceid + 2500);
								}
								else SetPlayerPosEx(playerid, 560.7483,23.6653,1049.2731, -180.0, 1, to_floor + 1);

								SetPlayerInEntranceFloor(playerid, to_floor);
							}
						}
					}
				}
			}
			/*case DIALOG_ENTRANCE_LIFT:
			{
				if(response)
				{
					new entranceid = GetPlayerInEntrance(playerid);
					if(entranceid != -1)
					{
						new floor = GetPlayerInEntranceFloor(playerid);
						if(floor != -1)
						{
							if(0 <= listitem <= MAX_ENTRANCE_FLOORS-1)
							{
								new to_floor = GetPlayerListitemValue(playerid, listitem);
								if(!to_floor)
								{
									SetPlayerPosEx(playerid, 560.7483,23.6653,1049.2731, -180.0, 1, entranceid + 2500);
								}
								else SetPlayerPosEx(playerid, 560.7483,23.6653,1049.2731, -180.0, 1, (entranceid * 100) + to_floor);

								SetPlayerInEntranceFloor(playerid, to_floor);
							}
						}
					}
				}
			}
			*/
			// -----------------------------------------------------------------
			case DIALOG_HOTEL:
			{
				if(response)
				{
					new hotel_id = GetPlayerInHotelID(playerid);
					if(hotel_id != -1)
					{
						switch(listitem + 1)
						{
							case 1:
							{
								ShowPlayerHotelFloorsInfo(playerid, hotel_id);
							}
							case 2:
							{
								if(GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) == -1)
								{
									new free_room = GetHotelFreeRoom(hotel_id);
									if(free_room != -1)
									{
										SetPlayerUseListitem(playerid, free_room);

										new fmt_str[128];
										format
										(
											fmt_str, sizeof fmt_str,
											"{FFFFFF}Мы предлагаем Вам поселиться в номере %d на %d этаже\n"\
											"Регистрация стоит 1000 рублей. Вы уверены?",
											(free_room % 12) + 1,
											(free_room / 12) + 1
										);
										Dialog(playerid, DIALOG_HOTEL_REG_ROOM, DIALOG_STYLE_MSGBOX, "{66CC99}Подтверждение регистрации", fmt_str, "Выбрать", "Назад");
									}
									else
									{
										Dialog
										(
											playerid, DIALOG_HOTEL_FLOOR_INFO, DIALOG_STYLE_MSGBOX,
											"{66CC99}Свободные номера",
											"{FFFFFF}В этой гостинице нет свободных номеров",
											"Назад", "Закрыть"
										);
									}
								}
								else
								{
									Dialog
									(
										playerid, DIALOG_HOTEL_FLOOR_INFO, DIALOG_STYLE_MSGBOX,
										"{66CC99}Регистрация",
										"{FFFFFF}Вы уже снимаете номер в гостинице",
										"Назад", "Закрыть"
									);
								}
							}
							case 3:
							{
								ShowPlayerHotelClientMenu(playerid, hotel_id);
							}
						}
					}
				}
			}
			case DIALOG_HOTEL_FLOOR_SELECT:
			{
				new hotel_id = GetPlayerInHotelID(playerid);
				if(hotel_id != -1)
				{
					if(response)
					{
						ShowPlayerHotelFloorInfo(playerid, hotel_id, listitem);
					}
					else ShowPlayerHotelDialog(playerid);
				}
			}
			case DIALOG_HOTEL_FLOOR_INFO:
			{
				if(response)
				{
					ShowPlayerHotelDialog(playerid);
				}
			}
			case DIALOG_HOTEL_FLOOR_LIFT:
			{
				if(response)
				{
					new hotel_id = GetPlayerInHotelID(playerid);
					if(hotel_id != -1)
					{
						new max_floors = g_hotel_rooms_loaded[hotel_id] / 12;
						if(0 <= listitem <= max_floors-1)
						{
							new to_floor = GetPlayerListitemValue(playerid, listitem);

							if(!to_floor)
							{
								new businessid = GetPlayerInBiz(playerid);
								new type = GetBusinessData(businessid, B_INTERIOR);

								SetPlayerPosEx(playerid, 730.1479, 599.7930, 1002.9598, 89.9507, GetBusinessInteriorInfo(type, BT_ENTER_INTERIOR), businessid + 255);
							}
							else SetPlayerPosEx(playerid, 1276.0446, -773.2361, 1202.7220, 360.0, to_floor, ((hotel_id + 1) * 200) + (to_floor + 1000));

							SetPlayerData(playerid, P_IN_HOTEL_FLOOR, to_floor);
						}
					}
				}
			}
			case DIALOG_HOTEL_REG_ROOM:
			{
				new hotel_id = GetPlayerInHotelID(playerid);
				if(hotel_id != -1)
				{
					if(response)
					{
						new room_id = GetPlayerUseListitem(playerid);
						new businessid = GetPlayerInBiz(playerid);

						if(GetPlayerHouse(playerid) == -1)
						{
							if(!IsHotelRoomOwned(hotel_id, room_id))
							{
								new price = 1000;
								new take_prods = 2;

								if(GetPlayerMoneyEx(playerid) >= price)
								{
									new query[300];
									new time = gettime();
									new rent_time = (time - (time % 86400)) + 86400;

									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										format(query, sizeof query, "UPDATE accounts a,hotels h,business b SET a.money=%d,a.house_type=%d,a.house_room=%d,a.house=%d,h.owner_id=%d,h.rent_time=%d,h.status=0,b.products=%d,b.balance=%d WHERE a.id=%d AND h.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, HOUSE_TYPE_HOTEL, room_id, hotel_id, GetPlayerAccountID(playerid), rent_time, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetHotelData(hotel_id, room_id, H_SQL_ID),GetBusinessData(businessid, B_SQL_ID));
									}
									else format(query, sizeof query, "UPDATE accounts a, hotels h SET a.money=%d,a.house_type=%d,a.house_room=%d,a.house=%d,h.owner_id=%d,h.rent_time=%d,h.status=0 WHERE a.id=%d AND h.id=%d", GetPlayerMoneyEx(playerid)-price, HOUSE_TYPE_HOTEL, room_id, hotel_id, GetPlayerAccountID(playerid), rent_time, GetPlayerAccountID(playerid), GetHotelData(hotel_id, room_id, H_SQL_ID));
									mysql_query(mysql, query, false);

									if(!mysql_errno())
									{
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											AddBusinessData(businessid, B_PRODS, -, take_prods);
											AddBusinessData(businessid, B_BALANCE, +, price);
										}
										SetPlayerData(playerid, P_HOUSE, hotel_id);
										SetPlayerData(playerid, P_HOUSE_ROOM, room_id);
										SetPlayerData(playerid, P_HOUSE_TYPE, HOUSE_TYPE_HOTEL);

										SetHotelData(hotel_id, room_id, H_OWNER_ID, GetPlayerAccountID(playerid));
										SetHotelData(hotel_id, room_id, H_RENT_DATE, 	rent_time);
										SetHotelData(hotel_id, room_id, H_STATUS, 		false);

										format(g_hotel[hotel_id][room_id][H_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);

										GivePlayerMoneyEx(playerid, -price, "Покупка номера в отеле", false, true);
										EnterPlayerToHotelRoom(playerid, hotel_id, room_id);

										SendClientMessage(playerid, 0x3399FFFF, "Вы сняли номер в гостинице");
										SendClientMessage(playerid, 0x66CC00FF, "Подсказка: оплатить проживание можно на первом этаже у регистрационной стойки");
										SendClientMessage(playerid, 0xFFFFFFFF, "Нажмите {66CC99}~k~~SNEAK_ABOUT~ {FFFFFF}для выхода из номера");

										mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
										mysql_query(mysql, query, false);
									}
									else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 37)");
								}
								else SendClientMessage(playerid, 0x999999FF, "У Вас недостаточно денег чтобы снять этот номер");
							}
							else SendClientMessage(playerid, 0xFF6600FF, "Извините, но этот номер уже занят");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "У Вас есть жилье. Нужно продать его перед покупкой номера");
					}
					else ShowPlayerHotelDialog(playerid);
				}
			}
			case DIALOG_HOTEL_CLIENT_MENU:
			{
				new hotel_id = GetPlayerInHotelID(playerid);
				if(hotel_id == GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL))
				{
					if(response)
					{
						switch(listitem + 1)
						{
							case 1: // Оплатить проживание
							{
								ShowPlayerHotelRoomPayForRent(playerid);
							}
							case 2: // Информация о транспорте
							{
								new vehicleid = GetPlayerOwnableCar(playerid);
								if(vehicleid != INVALID_VEHICLE_ID)
								{
									new model_id = GetVehicleData(vehicleid, V_MODELID);
									if(model_id)
									{
										new fmt_str[64];
										new index = GetVehicleData(vehicleid, V_ACTION_ID);

										format(fmt_str, sizeof fmt_str, "Модель: %s (номер модели %d)", GetVehicleName(vehicleid), model_id);
										SendClientMessage(playerid, 0x99FF66FF, fmt_str);

										if(!(GetOwnableCarData(index, OC_COLOR_1) == -1 || GetOwnableCarData(index, OC_COLOR_2) == -1))
										{
											format(fmt_str, sizeof fmt_str, "Цвет 1: ID %d   Цвет 2: ID %d", GetOwnableCarData(index, OC_COLOR_1), GetOwnableCarData(index, OC_COLOR_2));
											SendClientMessage(playerid, 0x99FF66FF, fmt_str);
										}
										else SendClientMessage(playerid, 0x99FF66FF, "Цвета транспорта: случайные");

										format(fmt_str, sizeof fmt_str, "Гос. стоимость: %d руб", GetVehicleInfo(model_id - 400, VI_PRICE));
										SendClientMessage(playerid, 0x99FF66FF, fmt_str);
									}
								}
								else
								{
									if(GetPlayerOwnableCars(playerid) == 0)
										SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
									else
										SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
								}
							}
							case 3: // Отметить транспорт на GPS
							{
								callcmd::getmycar(playerid, "");
							}
							case 4: // Подогнать транспорт к отелю (1000 руб)
							{
								new vehicleid = GetPlayerOwnableCar(playerid);
								if(vehicleid != INVALID_VEHICLE_ID)
								{
									if(!SetVehicleToHotelRespawn(hotel_id, vehicleid))
									{
										SendClientMessage(playerid, 0xCECECEFF, "В данный момент Вы не можете использовать эту функцию");
									}
								}
								else
								{
									if(GetPlayerOwnableCars(playerid) == 0)
										SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
									else
										SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
								}
							}
							case 5: // Продать транспорт
							{
								callcmd::sellcar(playerid, "");
							}
							case 6: // Выселиться из отеля
							{
								Dialog
								(
									playerid, DIALOG_HOTEL_OUT, DIALOG_STYLE_MSGBOX,
									"{66CC99}Выселение",
									"{FFFFFF}Вы уверены что хотите выселиться из отеля?",
									"Да", "Нет"
								);
							}
							default:
								return 1;
						}
					}
					else ShowPlayerHotelDialog(playerid);
				}
			}
			case DIALOG_HOTEL_PAY_FOR_ROOM:
			{
				new hotel_id = GetPlayerInHotelID(playerid);
				new room_id = GetPlayerData(playerid, P_HOUSE_ROOM);

				if(hotel_id == GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL))
				{
					if(response)
					{
						new days = strval(inputtext);
						if(days > 0 && IsNumeric(inputtext))
						{
							new fmt_str[128 + 1];

							new time = gettime();
							new rent_time = GetHotelData(hotel_id, room_id, H_RENT_DATE);

							new rent_days = GetElapsedTime(rent_time, time, CONVERT_TIME_TO_DAYS);
							new total_price = days * 1000;

							if((rent_days + days) <= 30)
							{
								if(GetPlayerBankMoney(playerid) >= total_price)
								{
									rent_time = (rent_time - (rent_time % 86400)) + (days * 86400);

									format(fmt_str, sizeof fmt_str, "UPDATE accounts a, hotels h SET a.bank=%d,h.rent_time=%d WHERE a.id=%d AND h.id=%d", GetPlayerBankMoney(playerid)-total_price, rent_time, GetPlayerAccountID(playerid), GetHotelData(hotel_id, room_id, H_SQL_ID));
									mysql_query(mysql, fmt_str, false);

									if(!mysql_errno())
									{
										AddPlayerData(playerid, P_BANK, -, total_price);
										SetHotelData(hotel_id, room_id, H_RENT_DATE, rent_time);

										format(fmt_str, sizeof fmt_str, "С банковского счета снято {3399FF}%d руб", total_price);
										SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

										format(fmt_str, sizeof fmt_str, "Вы успешно проживание в отеле еще на {3399FF}%d дней", days);
										SendClientMessage(playerid, 0x66CC00FF, fmt_str);
									}
								}
								else
								{
									SendClientMessage(playerid, 0xB5B500FF, "На основном банковском счету не хватает денег для оплаты");

									format(fmt_str, sizeof fmt_str, "Для продления аренды на %d дней необходимо %d руб", days, total_price);
									SendClientMessage(playerid, 0x999999FF, fmt_str);
								}
							}
							else SendClientMessage(playerid, 0xB5B500FF, "Вы не можете оплатить за аренду больше чем на 30 дней");
						}
						ShowPlayerHotelRoomPayForRent(playerid);
					}
					else ShowPlayerHotelClientMenu(playerid, hotel_id);
				}
			}
			case DIALOG_HOTEL_OUT:
			{
				new hotel_id = GetPlayerInHotelID(playerid);
				new room_id = GetPlayerData(playerid, P_HOUSE_ROOM);

				if(hotel_id == GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL))
				{
					if(response)
					{
						new query[155];

						format(query, sizeof query, "UPDATE accounts a,hotels h SET a.house_type=-1,a.house_room=-1,a.house=-1,h.owner_id=0,h.rent_time=0 WHERE a.id=%d AND h.id=%d", GetPlayerAccountID(playerid), GetHotelData(hotel_id, room_id, H_SQL_ID));
						mysql_query(mysql, query, false);

						if(!mysql_errno())
						{
							SetPlayerData(playerid, P_HOUSE, 		-1);
							SetPlayerData(playerid, P_HOUSE_ROOM, 	-1);
							SetPlayerData(playerid, P_HOUSE_TYPE, 	-1);

							SetHotelData(hotel_id, room_id, H_OWNER_ID, 0);
							SetHotelData(hotel_id, room_id, H_RENT_DATE, 	0);
							SetHotelData(hotel_id, room_id, H_STATUS, 		false);

							SendClientMessage(playerid, 0x3399FFFF, "Вы выселились из отеля");
						}
					}
					else ShowPlayerHotelClientMenu(playerid, hotel_id);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_OWNABLE_CAR:
			{
				if(response)
				{
					new vehicleid = GetPlayerOwnableCar(playerid);
					if(vehicleid != INVALID_VEHICLE_ID)
					{
						switch(listitem + 1)
						{
							case 1: // Открыть / закрыть
							{
								callcmd::lock(playerid, "1");
							}
							case 2: // Вставить / вытащить ключи
							{
								callcmd::key(playerid, "");
							}
							case 3: // Отметить транспорт на GPS
							{
								callcmd::getmycar(playerid, "");
							}
							case 4: // Содержимое багажника
							{
								ShowTrunkDialog(playerid, vehicleid, true);
							}
							case 5: // Документы на транспорт
							{
								ShowOwnableCarPass(playerid, vehicleid);
							}
							case 6: // Припарковать транспорт
							{
								callcmd::park(playerid, "");
							}
							case 7: // Выгрузить транспорт
							{
								if(UnloadPlayerOwnableCar(playerid))
									SendClientMessage(playerid, 0x66CC33FF, "Ваш транспорт успешно выгружен!");
								else
									SendClientMessage(playerid, 0x999999FF, "С момента загрузки данного транспорта еще не прошло 5 минут");
       						}
       						case 9:
							{
							    ShowVehicleImproveDialog(playerid);
							}
							default:
								return 1;
						}
						//callcmd::car(playerid, "");
					}
				}
			}
			case DIALOG_OWNABLE_CAR_LOAD:
			{
				if(response)
				{
					new idx = GetPVarInt(playerid, "ownablecar_id"),
						Float: x,
						Float: y,
						Float: z,
						Cache: result,
						query[100];

					mysql_format(mysql, query, sizeof query, "SELECT pos_x, pos_y, pos_z FROM ownable_cars WHERE id='%d'", idx);
					result = mysql_query(mysql, query, true);

					if(cache_num_rows())
					{
						x = cache_get_row_float(0, 0);
						y = cache_get_row_float(0, 1);
						z = cache_get_row_float(0, 2);
					}

					cache_delete(result);

					switch(listitem + 1)
					{
						case 1:
						{
							if(GetPlayerGPSInfo(playerid, G_ENABLED) == GPS_STATUS_OFF)
							{
								if(GetPlayerMoneyEx(playerid) >= 300)
								{
									GivePlayerMoneyEx(playerid, -300, "Метка ТС на GPS", true, true);

									EnablePlayerGPS(playerid, 55, x, y, z, "Местоположение Вашего транспорта отмечено на GPS");
									return 1;
								}
								else SendClientMessage(playerid, 0x999999FF, "Недостаточно денег");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "На Вашем GPS уже отмечено место");
						}
						case 2:
						{
							if(GetPlayerOwnableCar(playerid) != INVALID_VEHICLE_ID)
							{
								SendClientMessage(playerid, 0x999999FF, "Системная ошибка. Транспорт уже загружен.");
								return 1;
							}

//							if(!IsPlayerInRangeOfPoint(playerid, 45.0, x, y, z))
//							{
//								SendClientMessage(playerid, 0x999999FF, "Вы слишком далеко от места, где припаркован Ваш транспорт");
//							}
							else
							{
								if(LoadOwnableCar(idx) != -1)
								{
									PlayerOwnableCarInit(playerid);
									SendClientMessage(playerid, 0x66CC33FF, "Ваш транспорт успешно загружен!");
								}
								else SendClientMessage(playerid, 0x999999FF, "Ошибка при загрузке личного транспорта");
							}
						}
					}
				}
				else
				{
					if(GetPVarInt(playerid, "show_menu"))
					{
						DeletePVar(playerid, "show_menu");
						callcmd::car(playerid, "");
					}
				}
				
				return 1;
			}
			case DIALOG_OWNABLE_CAR_LIST:
			{
				if(response)
				{
					new idx = GetPlayerListitemValue(playerid, listitem);

					ShowOwnableCarLoadDialog(playerid, idx, true);
				}
			}
			case DIALOG_FAMILY_CAR_SELL:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					/*if(vehicleid != INVALID_VEHICLE_ID)
					{*/
					new model_id = GetVehicleData(vehicleid, V_MODELID);

					if(DestroyFamilyCar(vehicleid))
					{
					    new money = GetPlayerMoneyEx(playerid);
					    new fmt_str[128];

						new car_price = GetVehicleInfo(model_id-400, VI_PRICE);
						new percent = car_price * 20 / 100;
						new price = car_price - percent;
					    
					    format(fmt_str, sizeof fmt_str, "UPDATE accounts a,family f SET a.money=%d,f.money=f.money + %d WHERE a.id=%d AND f.id=%d", money, price, GetPlayerAccountID(playerid), GetPlayerData(playerid, P_FAMILY) + 1);
                    	mysql_query(mysql, fmt_str, false);
						
						AddFamilyData(GetPlayerData(playerid, P_FAMILY), F_MONEY, +, price);

						format(fmt_str, sizeof fmt_str, "~g~+%d rub", price);
						GameTextForPlayer(playerid, fmt_str, 4000, 1);
						
						new fam_id = GetPlayerData(playerid, P_FAMILY) + 1;
						new fmt_text[120];

						AddFamilyData(fam_id,F_FAMILY_CARS,-,1);

						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET family_cars='%d' WHERE id='%d' LIMIT 1", GetFamilyData(fam_id, F_FAMILY_CARS), fam_id);
					 	mysql_query(mysql, fmt_text, false);
					//	}
					}
				}
			}
			case DIALOG_OWNABLE_CAR_SELL:
			{
				if(response)
				{
					new vehicleid = GetPlayerOwnableCar(playerid);
					if(vehicleid != INVALID_VEHICLE_ID)
					{
						new model_id = GetVehicleData(vehicleid, V_MODELID);

						if(DestroyOwnableCar(vehicleid))
						{
							new fmt_str[128];

							new car_price = GetVehicleInfo(model_id-400, VI_PRICE);
							new percent = car_price * 20 / 100;
							new price = car_price - percent;

							SetPlayerData(playerid, P_OWNABLE_CAR, INVALID_VEHICLE_ID);
							AddPlayerData(playerid, P_BANK, +, price);

							BankLog(playerid, price, "Продажа личного транспорта");

							format(fmt_str, sizeof fmt_str, "UPDATE accounts SET bank=%d WHERE id=%d LIMIT 1", GetPlayerBankMoney(playerid), GetPlayerAccountID(playerid));
							mysql_query(mysql, fmt_str, false);

							SendClientMessage(playerid, 0x3399FFFF, "Вы продали личный транспорт");

							format(fmt_str, sizeof fmt_str, "Налоговый сбор составляет 20 процентов от его стоимости {FF9900}(%d руб)", percent);
							SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

							format(fmt_str, sizeof fmt_str, "На основной банковский счет переведено {FFFF00}%d руб", price);
							SendClientMessage(playerid, 0x66CC00FF, fmt_str);

							format(fmt_str, sizeof fmt_str, "~g~+%d rub", price);
							GameTextForPlayer(playerid, fmt_str, 4000, 1);
						}
					}
				}
			}
			case DIALOG_OWNABLE_CAR_NUMBER:
			{
				if(response)
				{
					new vehicleid = GetPlayerOwnableCar(playerid);

					if(vehicleid != INVALID_VEHICLE_ID)
					{
						if(GetPlayerMoney(playerid) >= 5000)
						{
							new fmt_text[100],
								index;

							index = GetVehicleData(vehicleid, V_ACTION_ID);

							format(g_ownable_car[index][OC_NUMBER], 7, GenerateCarNumber());

							UpdateVehicleLabel(vehicleid, 0xFFFF00EE, GetOwnableCarData(index, OC_NUMBER));

							format(fmt_text, sizeof fmt_text, "Вы купили номера формата: {ffcd00}\"%s\" {66cc33}за 5000 руб", GetOwnableCarData(index, OC_NUMBER));
							SendClientMessage(playerid, 0x66CC33FF, fmt_text);

							GivePlayerMoneyEx(playerid, -5000, "Покупка номеров", true, true);

							mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE ownable_cars SET number='%s' WHERE id='%d' LIMIT 1", GetOwnableCarData(index, OC_NUMBER), GetOwnableCarData(index, OC_SQL_ID));
							mysql_query(mysql, fmt_text, false);
						}
						else
						{
							SendClientMessage(playerid, 0x999999FF, "Недостаточно денег для покупки номеров");
						}
					}
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_VEHICLE_TRUNK:
			{
				new vehicleid = GetPlayerUseTrunk(playerid);

				if(response && vehicleid != INVALID_VEHICLE_ID)
				{
					if(GetPlayerListitemValue(playerid, listitem) == -1) // Положить
					{
						Dialog
						(
							playerid, DIALOG_VEHICLE_TRUNK_PUT, DIALOG_STYLE_LIST,
							"{3399FF}Содержимое багажника",
							"\
							1. Положить деньги\n\
							2. Положить канистру\n\
							3. Положить аптечку\n\
							4. Положить металл\n\
							5. Положить патроны\n\
							6. Положить наркотики\
							",
							"Положить", "Назад"
						);
					}
					else
					{
						if(0 <= listitem <= MAX_VEHICLE_TRUNK_SLOTS)
						{
							new desc[64] = "{66CC33}",
								type = GetTrunkData(vehicleid, listitem, VT_ITEM_TYPE);

							if(type == ITEM_TYPE_JERRICAN)
							{
								if(TakeTrunkItem(vehicleid, type, 15))
								{
									if(!GetPVarInt(playerid, "have_jerrican"))
									{
										SetPVarInt(playerid, "have_jerrican", 1);
								//		SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 1650, A_OBJECT_BONE_LEFT_HAND, 0.15, 0.0, 0.0, 0.0, -90.0, 180.0, 1.0, 1.0, 1.0, 0);

										SendClientMessage(playerid, 0x3399FFFF, "Вы достали из багажника \"Канистра\" в количестве: 15 л");
									}
									else
									{
										SendClientMessage(playerid, 0xCECECEFF, "У Вас уже есть канистра");
										AddTrunkItem(vehicleid, type, 15);
									}
								}
								else
								{
									SendClientMessage(playerid, 0x999999FF, "В багажнике нет канистры");
								}
							}
							else
							{
								if(type == ITEM_TYPE_NONE) type++;

								strcat(desc, GetItemInfo(type, I_NAME));

								SetPVarInt(playerid, "trunk_slot", type);

								Dialog
								(
									playerid, DIALOG_VEHICLE_TRUNK_TAKE, DIALOG_STYLE_INPUT,
									desc,
									"{FFFFFF}Введите количество, которое Вы хотите {ffcd00}достать:",
									"Достать", "Назад"
								);
							}
						}
					}
				}
			}
			case DIALOG_VEHICLE_TRUNK_PUT:
			{
				new vehicleid = GetPlayerUseTrunk(playerid),
					slot = listitem + 1;

				if(response && vehicleid != INVALID_VEHICLE_ID)
				{
					if(slot == ITEM_TYPE_JERRICAN)
					{
						if(!GetPVarInt(playerid, "have_jerrican"))
						{
							SendClientMessage(playerid, 0x999999FF, "У Вас с собой нет канистры");
						}
						else
						{
							DeletePVar(playerid, "have_jerrican");
						//	RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);

							if(AddTrunkItem(vehicleid, ITEM_TYPE_JERRICAN, 15) != -1)
							{
								SendClientMessage(playerid, 0x3399FFFF, "Вы положили в багажник \"Канистра\" в количестве: 15 л");
							}
							else
							{
								SendClientMessage(playerid, 0xCECECEFF, "В багажнике недостаточно места");
							}
						}
					}
					else
					{
						new desc[32] = "{ff6600}";

						strcat(desc, GetItemInfo(slot, I_NAME));

						Dialog
						(
							playerid, DIALOG_VEHICLE_TRUNK_PUT_ITEM, DIALOG_STYLE_INPUT,
							desc,
							"{FFFFFF}Введите количество, которое Вы хотите {ffcd00}положить:",
							"Положить", "Назад"
						);

						SetPVarInt(playerid, "trunk_slot", slot);
					}
				}
				else ShowTrunkDialog(playerid, vehicleid, false);
			}
			case DIALOG_VEHICLE_TRUNK_PUT_ITEM:
			{
				new vehicleid = GetPlayerUseTrunk(playerid),
					amount = strval(inputtext),
					slot = GetPVarInt(playerid, "trunk_slot");

				if(vehicleid == INVALID_VEHICLE_ID)
					return 1;

				if(response)
				{
					if(amount > 0)
					{
						if(AddTrunkItem(vehicleid, slot, amount))
						{
							switch(slot)
							{
								case ITEM_TYPE_MONEY:
								{
									if(GetPlayerMoneyEx(playerid) >= amount)
									{
										GivePlayerMoneyEx(playerid, -amount, "Положил в багажник", true);
									}
									else
									{
										SendClientMessage(playerid, 0x999999FF, "У Вас нет такого количества денег");
										TakeTrunkItem(vehicleid, slot, amount);

										return 1;
									}
								}
								case ITEM_TYPE_MED:
								{
									if(GetPlayerData(playerid, P_MED_CHEST) >= amount)
									{
										AddPlayerData(playerid, P_MED_CHEST, -, amount);
										UpdatePlayerDatabaseInt(playerid, "healme", GetPlayerData(playerid, P_MED_CHEST));
									}
									else
									{
										SendClientMessage(playerid, 0x999999FF, "У Вас нет такого количества аптечек");
										TakeTrunkItem(vehicleid, slot, amount);

										return 1;
									}
								}
								case ITEM_TYPE_METALL:
								{
									if(GetPlayerData(playerid, P_METALL) >= amount)
									{
										AddPlayerData(playerid, P_METALL, -, amount);
									}
									else
									{
										SendClientMessage(playerid, 0x999999FF, "У Вас нет такого количества металла");
										TakeTrunkItem(vehicleid, slot, amount);

										return 1;
									}
								}
								case ITEM_TYPE_AMMO:
								{
									if(GetPlayerData(playerid, P_AMMO) >= amount)
									{
										AddPlayerData(playerid, P_AMMO, -, amount);
									}
									else
									{
										SendClientMessage(playerid, 0x999999FF, "У Вас нет такого количества патронов");
										TakeTrunkItem(vehicleid, slot, amount);

										return 1;
									}
								}
								case ITEM_TYPE_DRUGS:
								{
									if(GetPlayerData(playerid, P_DRUGS) >= amount)
									{
										AddPlayerData(playerid, P_DRUGS, -, amount);
									}
									else
									{
										SendClientMessage(playerid, 0x999999FF, "У Вас нет такого количества наркотиков");
										TakeTrunkItem(vehicleid, slot, amount);

										return 1;
									}
								}
							}
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "В багажнике недостаточно места");
							return 1;
						}

						new fmt_text[128];

						format(fmt_text, sizeof fmt_text, "Вы положили в багажник \"%s\" в количестве: %d %s", GetItemInfo(slot, I_NAME), amount, GetItemInfo(slot, I_NAME_COUNT));
						SendClientMessage(playerid, 0x3399FFFF, fmt_text);
					}
					else SendClientMessage(playerid, 0x999999FF, "Неверное количество");
				}
				else
				{
					ShowTrunkDialog(playerid, vehicleid, false);
				}
			}
			case DIALOG_VEHICLE_TRUNK_TAKE:
			{
				new vehicleid = GetPlayerUseTrunk(playerid),
					amount = strval(inputtext),
					slot = GetPVarInt(playerid, "trunk_slot");

				if(vehicleid == INVALID_VEHICLE_ID)
					return 1;

				if(response)
				{
					if(amount > 0)
					{
						if(TakeTrunkItem(vehicleid, slot, amount) != -1)
						{
							switch(slot)
							{
								case ITEM_TYPE_MONEY:
								{
									GivePlayerMoneyEx(playerid, amount, "Достал из багажника", true);
								}
								case ITEM_TYPE_MED:
								{
									if((GetPlayerData(playerid, P_MED_CHEST) + amount) < 3)
									{
										AddPlayerData(playerid, P_MED_CHEST, +, amount);
										UpdatePlayerDatabaseInt(playerid, "healme", GetPlayerData(playerid, P_MED_CHEST));
									}
									else
									{
										SendClientMessage(playerid, 0x999999FF, "Вы не можете носить с собой больше 3-х аптечек");
										AddTrunkItem(vehicleid, slot, amount);

										return 1;
									}
								}
								case ITEM_TYPE_METALL:
								{
									if((GetPlayerData(playerid, P_METALL) + amount) < GetPlayerMaxStorage(playerid, STORAGE_METALL))
									{
										AddPlayerData(playerid, P_METALL, +, amount);
									}
									else
									{
										SendClientMessage(playerid, 0x999999FF, "Вы не можете унести с собой больше металла");
										AddTrunkItem(vehicleid, slot, amount);

										return 1;
									}
								}
								case ITEM_TYPE_AMMO:
								{
									if((GetPlayerData(playerid, P_AMMO) + amount) < GetPlayerMaxStorage(playerid, STORAGE_AMMO))
									{
										AddPlayerData(playerid, P_AMMO, +, amount);
									}
									else
									{
										SendClientMessage(playerid, 0x999999FF, "Вы не можете унести с собой больше патронов");
										AddTrunkItem(vehicleid, slot, amount);

										return 1;
									}
								}
								case ITEM_TYPE_DRUGS:
								{
									if((GetPlayerData(playerid, P_DRUGS) + amount) < GetPlayerMaxStorage(playerid, STORAGE_DRUGS))
									{
										AddPlayerData(playerid, P_DRUGS, +, amount);
									}
									else
									{
										SendClientMessage(playerid, 0x999999FF, "У Вас нет такого количества наркотиков");
										AddTrunkItem(vehicleid, slot, amount);

										return 1;
									}
								}
							}

							new fmt_text[128];

							format(fmt_text, sizeof fmt_text, "Вы достали из багажника \"%s\" в количестве: %d %s", GetItemInfo(slot, I_NAME), amount, GetItemInfo(slot, I_NAME_COUNT));
							SendClientMessage(playerid, 0x3399FFFF, fmt_text);
						}
						else
						{
							SendClientMessage(playerid, 0x999999FF, "В багажнике нет такого количества предмета");
							ShowTrunkDialog(playerid, vehicleid, false);
						}
					}
				}
				else ShowTrunkDialog(playerid, vehicleid, false);
			}
			// -----------------------------------------------------------------
			case DIALOG_SET_SPAWN:
			{
				if(response)
				{
					new fam_id = GetPlayerData(playerid, P_FAMILY);

					switch(listitem)
					{
						case 1: if(GetPlayerHouse(playerid, HOUSE_TYPE_HOME) == -1) return SendClientMessage(playerid, 0x999999FF, "У Вас нет дома");
						case 2: if(GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) == -1) return SendClientMessage(playerid, 0x999999FF, "Вы не проживаете в гостиничном номере");
						case 3: if(!GetPlayerTeamEx(playerid)) return SendClientMessage(playerid, 0x999999FF, "Вы не состоите в организации");
						case 4: if(GetPlayerHouse(playerid, HOUSE_TYPE_ROOM) == -1) return SendClientMessage(playerid, 0x999999FF, "Вы не проживаете ни у кого в гостях");
                        case 5: if(!fam_id && g_family[fam_id][F_SPAWN_POSITION][0] == 0.0) return SendClientMessage(playerid, 0x999999FF, "Вы не состоите в семье, или позиция не установлена.");
					}

					SetPlayerData(playerid, P_SPAWN, listitem);
					UpdatePlayerDatabaseInt(playerid, "setting_spawn", listitem);

					SendClientMessage(playerid, 0x3399FFFF, "Место появления в игре изменено");
				}
			}
			// -----------------------------------------------------------------
			
			case DIALOG_DONATE_VIP_HELP:
			{
			    if(!response) return 1;
			    
			    new fmt_text[200];
				
				format(fmt_text, sizeof fmt_text,
				"{FFFF00}1{CD7F32} Bronze VIP ( %d RUB )\n\
				{FFFF00}2{C0C0C0} Silver VIP ( %d RUB )\n\
			    {FFFF00}3{FFD700} Gold VIP ( %d RUB )",
				GetDonatePrice(DONATE_PRICE_BRONSE),
				GetDonatePrice(DONATE_PRICE_SILVER),
				GetDonatePrice(DONATE_PRICE_GOLD));

				Dialog(playerid, DIALOG_DONATE_PREMIUM, DIALOG_STYLE_LIST, "VIP Аккаунты", fmt_text, "Купить", "Отмена");
			}
			case DIALOG_DONATE_PREMIUM:
			{
				if(response)
			    {
				    new prem_day,prem_month,prem_year,premium = GetPlayerPremium(playerid),
				    fmt_text[128];
			        switch(list_id)
					{
	    				case 1:
						{
					        if(GetPlayerCurrentDonate(playerid) >= GetDonatePrice(DONATE_PRICE_BRONSE))
					        {
						        if(!premium)
						        {
									SetPlayerData(playerid, P_PREMIUM, 1);
						            SetPlayerData(playerid, P_PREMIUM_DATE, gettime() + 30 * 86400);
								}
								else
								{
								    AddPlayerData(playerid, P_PREMIUM_DATE, +, 30 * 86400);
								}


								timestamp_to_date(GetPlayerData(playerid, P_PREMIUM_DATE), prem_year, prem_month, prem_day);

								format(fmt_text, sizeof fmt_text, "Вы успешно оплатили {EC174F}VIP Bronse{FFFFFF}до {EC174F}%02d.%02d.%d", prem_day, prem_month, prem_year);
								SendClientMessage(playerid, -1, fmt_text);

								UpdatePlayerDatabaseInt(playerid, "premium", 1);
								UpdatePlayerDatabaseInt(playerid, "premium_date", GetPlayerData(playerid, P_PREMIUM_DATE));

								GivePlayerDonate(playerid, -GetDonatePrice(DONATE_PRICE_BRONSE), "Покупка подписки "SERVER_NAME"+");
				    		}
						    else
						    {
						        format(fmt_text, sizeof fmt_text, "Для покупки подписки VIP Bronse необходимо иметь на счету %d. Рублей",
								GetDonatePrice(DONATE_PRICE_BRONSE));
						    }
						}
						case 2:
							{
						        if(GetPlayerCurrentDonate(playerid) >= GetDonatePrice(DONATE_PRICE_SILVER))
						        {
							        if(!premium)
							        {
							            AddPlayerData(playerid, P_CAR_SLOTS, +, 1);
										SetPlayerData(playerid, P_PREMIUM, 2);
							            SetPlayerData(playerid, P_PREMIUM_DATE, gettime() + 30 * 86400);
									}
									else
									{
									    AddPlayerData(playerid, P_PREMIUM_DATE, +, 30 * 86400);
									}


									timestamp_to_date(GetPlayerData(playerid, P_PREMIUM_DATE), prem_year, prem_month, prem_day);


									format(fmt_text, sizeof fmt_text, "Вы успешно оплатили {EC174F}VIP Silver{FFFFFF}до {EC174F}%02d.%02d.%d", prem_day, prem_month, prem_year);
									SendClientMessage(playerid, -1, fmt_text);

									UpdatePlayerDatabaseInt(playerid, "premium", 2);
									UpdatePlayerDatabaseInt(playerid, "premium_date", GetPlayerData(playerid, P_PREMIUM_DATE));

									GivePlayerDonate(playerid, -GetDonatePrice(DONATE_PRICE_BRONSE), "Покупка подписки "SERVER_NAME"+");
					    		}
							    else
							    {
							        format(fmt_text, sizeof fmt_text, "Для покупки подписки VIP Silver необходимо иметь на счету %d. Рублей",
									GetDonatePrice(DONATE_PRICE_SILVER));
							    }
						    }
		    			case 3:
							{
						        if(GetPlayerCurrentDonate(playerid) >= GetDonatePrice(DONATE_PRICE_GOLD))
						        {
							        if(!premium)
							        {
										AddPlayerData(playerid, P_CAR_SLOTS, +, 2);
										SetPlayerData(playerid, P_PREMIUM, 3);
							            SetPlayerData(playerid, P_PREMIUM_DATE, gettime() + 30 * 86400);
									}
									else
									{
									    AddPlayerData(playerid, P_PREMIUM_DATE, +, 30 * 86400);
									}


									timestamp_to_date(GetPlayerData(playerid, P_PREMIUM_DATE), prem_year, prem_month, prem_day);



									format(fmt_text, sizeof fmt_text, "Вы успешно оплатили {EC174F}VIP Gold{FFFFFF}до {EC174F}%02d.%02d.%d", prem_day, prem_month, prem_year);
									SendClientMessage(playerid, -1, fmt_text);

									UpdatePlayerDatabaseInt(playerid, "premium", 3);
									UpdatePlayerDatabaseInt(playerid, "premium_date", GetPlayerData(playerid, P_PREMIUM_DATE));

									GivePlayerDonate(playerid, -GetDonatePrice(DONATE_PRICE_BRONSE), "Покупка подписки "SERVER_NAME"+");
					    		}
							    else
							    {
							        format(fmt_text, sizeof fmt_text, "Для покупки подписки VIP Gold необходимо иметь на счету %d. Рублей",
									GetDonatePrice(DONATE_PRICE_GOLD));
							    }
							}
					    }
					}

			    ShowPlayerDonateMenu(playerid);
			}
			/*case DIALOG_DONATE_SKIN: // Скины сюда
			{
			    if(response)
			    {
                    new list_id = listitem + 1;

					//new str_len = strval(inputtext);
					if(GetPlayerDonateRub(playerid) >= GetDonatePrice(DONATE_PRICE_SKIN))
			        {
			            GivePlayerDonateRub(playerid, -GetDonatePrice(DONATE_PRICE_SKIN), "Покупка unical skin");
			            SetPlayerSkin(playerid,g_skin_donate[list_id-1]);
			            UpdatePlayerDatabaseInt(playerid, "skin", g_skin_donate[list_id-1]);
			            SetPlayerData(playerid, P_SKIN, g_skin_donate[list_id-1]);
			            SendClientMessage(playerid, -1, "{1E90FF}[Информация]{FFFFFF} Поздравляем вас с покупкой уникального скина!");
					}
					else
	    			{
						new fmt_text[128];
	    				format(fmt_text, sizeof fmt_text, "Для покупки уникального скина необходимо иметь на счету %d. Рублей",
						GetDonatePrice(DONATE_PRICE_SKIN));
						SendClientMessage(playerid,-1,fmt_text);
		    		}
                }
			}*/

			// -----------------------------------------------------------------
			
			case DIALOG_DONATE_ENROLLMENT:
			{
				if(!response) return true;

				new donate_money = GetPVarInt(playerid, "donate_money"),
					donate_money_with_action = GetPVarInt(playerid, "donate_money_with_action"),
					fmt_text[248];

				mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE `unitpay_payments` SET status=0 WHERE account='%s'", GetPlayerNameEx(playerid));
				mysql_query(mysql, fmt_text, false);

				if(!mysql_errno())
				{
					GivePlayerDonate(playerid, donate_money_with_action, "Пополнение счёта");

					format
					(
						fmt_text, sizeof fmt_text,
						"{FFFFFF}\
						Сумма была зачислена на Ваш аккаунт\n\
						Вы успешно пополнили счёт на {66cc99}%d.00 руб\n\
						{FFFFFF}С учётом акции было зачислено {33cc66}%d.00 руб\n\n\
						{FFFFFF}Используйте: {ffcc00}/menu > Дополнительно\
						",
						donate_money, donate_money_with_action
					);

					Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{00cc33}Счёт пополнен", fmt_text, "Закрыть", "");
				}
				else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 48)");
			}

   			case DIALOG_DONATE_MENU:
			{
				if(!response) return 1;

				if(response && GetPlayerCurrentDonate(playerid) <= 0) return callcmd::mm(playerid, "");

				switch(listitem)
				{
					case 0: ShowPlayerDonations(playerid, GetPlayerAccountID(playerid));
					case 1: ShowPlayerConvertDialog(playerid);
					case 2:
					{
						Dialog
						(
							playerid, DIALOG_DONATE_CHANGE_NAME, DIALOG_STYLE_INPUT,
							"{FFCD00}Изменение имени",
							"{FFFFFF}Введите новое имя в поле ниже:",
							"Изменить", "Закрыть"
						);
					}
					case 3:
					{
						if(GetPlayerData(playerid, P_WARN))
						{
							if(GetPlayerCurrentDonate(playerid) >= GetDonatePrice(DONATE_PRICE_WARNS))
							{
								SetPlayerData(playerid, P_WARN, 		0);
								SetPlayerData(playerid, P_WARN_TIME, 	0);

								UpdatePlayerDatabaseInt(playerid, "warn", 		0);
								UpdatePlayerDatabaseInt(playerid, "warn_time", 	0);

								GivePlayerDonate(playerid, -GetDonatePrice(DONATE_PRICE_WARNS), "Снятие предупреждений");

								SendClientMessage(playerid, 0x66CC33FF, "Все предупреждения успешно сняты");
								SendClientMessage(playerid, 0xFFFF00FF, "Теперь Вы можете устроиться в организацию");
							}
							else
							{
								new fmt_text[80];

								format(fmt_text, sizeof fmt_text, "Для снятия всех предупреждений необходимо иметь на счету %d.00 руб",
								GetDonatePrice(DONATE_PRICE_WARNS));

								SendClientMessage(playerid, -1, fmt_text);
							}
						}
						else SendClientMessage(playerid, 0x999999FF, "На Вашем аккаунте нет предупреждений");

						ShowPlayerDonateMenu(playerid);
					}
					case 4:
					{
						new fmt_text[80];

						if(GetPlayerCurrentDonate(playerid) >= GetDonatePrice(DONATE_PRICE_DRUGS))
						{
							AddPlayerData(playerid, P_DRUGS, +, 8);
							UpdatePlayerDatabaseInt(playerid, "drugs", GetPlayerData(playerid, P_DRUGS));

							format(fmt_text, sizeof fmt_text, "Вы приобрели 8 доз наркотика ЛСД за %d.00 руб",
							GetDonatePrice(DONATE_PRICE_DRUGS));
							SendClientMessage(playerid, 0x66CC33FF, fmt_text);
							SendClientMessage(playerid, 0xFFFF00FF, "Вы можете использовать их {3399FF}/drugs");

							GivePlayerDonate(playerid, -GetDonatePrice(DONATE_PRICE_DRUGS), "Покупка наркотиков");
						}
						else
						{
							format(fmt_text, sizeof fmt_text, "Для покупки наркотиков необходимо иметь на счету %d.00 руб",
							GetDonatePrice(DONATE_PRICE_DRUGS));

							SendClientMessage(playerid, -1, fmt_text);
						}

						ShowPlayerDonateMenu(playerid);
					}
					case 5:
					{
						new fmt_text[80];

						if(GetPlayerCurrentDonate(playerid) >= GetDonatePrice(DONATE_PRICE_LAW_ABIDING))
						{
							AddPlayerData(playerid, P_LAW_ABIDING, +, 10);
							UpdatePlayerDatabaseInt(playerid, "law_abiding", GetPlayerData(playerid, P_LAW_ABIDING));

							SendClientMessage(playerid, 0x66CC33FF, "Документы удалось подделать");

							GivePlayerDonate(playerid, -GetDonatePrice(DONATE_PRICE_LAW_ABIDING), "Подделка документов");
						}
						else
						{
							format(fmt_text, sizeof fmt_text, "Для подделки документов необходимо иметь на счету %d.00 руб",
							GetDonatePrice(DONATE_PRICE_LAW_ABIDING));

							SendClientMessage(playerid, -1, fmt_text);
						}

						ShowPlayerDonateMenu(playerid);
					}
					case 6:
					{
						if(GetPlayerCurrentDonate(playerid) >= GetDonatePrice(DONATE_PRICE_PHONE_NUMBER))
						{
							Dialog
							(
								playerid, DIALOG_DONATE_BUY_NUMBER, DIALOG_STYLE_INPUT,
								"{FFCD00}Покупка 4-х значного номера телефона",
								"{FFFFFF}Введите номер, который\n"\
								"Вы хотели бы приобрести:",
								"Далее", "Отмена"
							);

							return 1;
						}
						else
						{
							new fmt_text[85];

							format(fmt_text, sizeof fmt_text, "Для покупки 4-х значного номера телефона необходимо иметь на счету %d.00 руб",
							GetDonatePrice(DONATE_PRICE_PHONE_NUMBER));

							SendClientMessage(playerid, -1, fmt_text);
						}

						ShowPlayerDonateMenu(playerid);
					}
					case 7:
					{
						new fmt_text[400];

						format
						(
							fmt_text, sizeof fmt_text,
							"1. Сила\t\t%d%%\n"\
							"2. Colt 45\t%d%%\n"\
							"3. SD Pistol\t%d%%\n"\
							"4. Desert Eagle\t%d%%\n"\
							"5. Shotgun\t%d%%\n"\
							"6. MP5\t\t%d%%\n"\
							"7. AK47\t\t%d%%\n"\
							"8. M4\t\t%d%%\n"\
							"9. Sniper Rifle\t%d%%\n"\
							"10. Sawnoff\t%d%%\n"\
							"11. Combat SG\t%d%%\n"\
							"12. Micro Uzi\t%d%%",
							GetPlayerData(playerid, P_POWER),
							GetPlayerData(playerid, P_SKILL_COLT),
							GetPlayerData(playerid, P_SKILL_SDPISTOL),
							GetPlayerData(playerid, P_SKILL_DEAGLE),
							GetPlayerData(playerid, P_SKILL_SHOTGUN),
							GetPlayerData(playerid, P_SKILL_MP5),
							GetPlayerData(playerid, P_SKILL_AK47),
							GetPlayerData(playerid, P_SKILL_M4),
							GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE),
							GetPlayerData(playerid, P_SKILL_SAWNOFF),
							GetPlayerData(playerid, P_SKILL_COMBAT_SG),
							GetPlayerData(playerid, P_SKILL_MICRO_UZI)
						);

						Dialog(playerid, DIALOG_DONATE_SKILLS, DIALOG_STYLE_LIST, "{FFCD00}Выберите навык", fmt_text, "Выбор", "Отмена");
					}
					case 8:
					{
						if(GetPlayerOwnableCar(playerid) == INVALID_VEHICLE_ID)
						{
							if(GetPlayerOwnableCars(playerid) == 0)
								return SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
							else
								return SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
						}

						Dialog
						(
							playerid, DIALOG_DONATE_BUY_CAR_NUMBER, DIALOG_STYLE_INPUT,
							"{ffcd00}Введите номер для личного ТС",
							"{FFFFFF}\
							Введите номер, который\n\
							Вы хотите установить на личный транспорт\n\n\
							- Разрешено использовать цифры, а так же буквы: A, B, E, K, M, H, O, P, C, T, X\n\
							- Чем больше одинаковых букв/цифр встречается в номере - тем он дороже\n\
							- Номер должен быть в формате CNNNCC; Где C - буква, где N - цифра\n\n\
							{888888}Например: B713EC\
							",
							"Далее", "Отмена"
						);
					}
					case 9:
					{
						new fmt_text[80];

						if(GetPlayerCurrentDonate(playerid) < GetDonatePrice(DONATE_PRICE_CAR_SLOT))
						{
							format(fmt_text, sizeof fmt_text, "Для покупки слота для транспорта необходимо иметь на счету %d.00 руб",
							GetDonatePrice(DONATE_PRICE_CAR_SLOT));

							SendClientMessage(playerid, -1, fmt_text);
						}
						else
						{
							AddPlayerData(playerid, P_CAR_SLOTS, +, 1);
							UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));

							GivePlayerDonate(playerid, -GetDonatePrice(DONATE_PRICE_CAR_SLOT), "Покупка слота для транспорта", true);

							format(fmt_text, sizeof fmt_text, "Вы увеличили количество слотов для транспорта. Текущее количество слотов: %d",
							GetPlayerData(playerid, P_CAR_SLOTS));

							SendClientMessage(playerid, 0x66CC00FF, fmt_text);
						}
					}
					case 10:
					{
						if(GetPlayerData(playerid, P_DRIVING_LIC) == 2 && GetPlayerData(playerid, P_WEAPON_LIC) == 1)
							SendClientMessage(playerid, 0x999999FF, "У Вас уже есть все лицензии");

						else
						{
							if(GetPlayerCurrentDonate(playerid) >= GetDonatePrice(DONATE_PRICE_LIC_PACK))
							{
								SetPlayerData(playerid, P_DRIVING_LIC,	2);
								SetPlayerData(playerid, P_WEAPON_LIC,	1);

								UpdatePlayerDatabaseInt(playerid, "driving_lic", 2);
								UpdatePlayerDatabaseInt(playerid, "weapon_lic", 1);

								GivePlayerDonate(playerid, -GetDonatePrice(DONATE_PRICE_LIC_PACK), "Покупка пакета лицензий", true);

								SendClientMessage(playerid, 0x66CC33FF, "Вы приобрели пакет лицензий. Используйте: {FFCD00}/lic");
							}
							else
							{
								new fmt_text[65];

								format(fmt_text, sizeof fmt_text, "Для покупки всех лицензий необходимо иметь на счету %d.00 руб",
								GetDonatePrice(DONATE_PRICE_LIC_PACK));
							}
						}

						ShowPlayerDonateMenu(playerid);
					}
					/*
					case 11:
					{
						if(0 <= GetPlayerAdminEx(playerid) <= 3)
						{
							new fmt_text[144];

							if(GetPlayerCurrentDonate(playerid) >= GetDonatePrice(DONATE_PRICE_ADMIN_LVL))
							{
								AddPlayerData(playerid, P_ADMIN, +, 1);

								new current_lvl = GetPlayerAdminEx(playerid);

								UpdatePlayerDatabaseInt(playerid, "admin", current_lvl);

								format(fmt_text, sizeof fmt_text, "Покупка %d уровня адм", current_lvl);

								GivePlayerDonate(playerid, -GetDonatePrice(DONATE_PRICE_ADMIN_LVL), fmt_text, true, true);

								format(fmt_text, sizeof fmt_text, "Вы увеличили свой уровень администратора. Текущий уровень: %d", current_lvl);
								SendClientMessage(playerid, 0x66CC33FF, fmt_text);
							}
							else
							{
								format(fmt_text, sizeof fmt_text, "Для покупки %d уровня администратора необходимо иметь на счету %d.00 руб",
								GetPlayerAdminEx(playerid) + 1, GetDonatePrice(DONATE_PRICE_ADMIN_LVL));

								SendClientMessage(playerid, 0x999999FF, fmt_text);
							}
						}
						else
							SendClientMessage(playerid, 0x999999FF, "Вы не можете повысить свой уровень администратора");

						ShowPlayerDonateMenu(playerid);
					}
					*/
				}
			}
			case DIALOG_DONATE_CONVERT:
			{
				if(!response) return ShowPlayerDonateMenu(playerid);

				new fmt_text[256],
					money_amount = strval(inputtext);

				if(!(1 <= money_amount <= GetPlayerCurrentDonate(playerid)))
				{
					if(money_amount > GetPlayerCurrentDonate(playerid))
					{
						format(fmt_text, sizeof fmt_text, "Недостаточно средств. Сейчас на Вашем счету %d Рублей", GetPlayerCurrentDonate(playerid));
						SendClientMessage(playerid, 0xCECECEFF, fmt_text);
					}

					ShowPlayerConvertDialog(playerid);

					return 1;
				}

				new donate_price = g_doubling[DOUBLING_DONATE] ? GetDonatePrice(DONATE_PRICE_MONEY) * 2 : GetDonatePrice(DONATE_PRICE_MONEY);

				format(fmt_text, sizeof fmt_text, "Вы сконвертировали {009900}%d. доната {1E90FF}в {009900}%d вирт", money_amount, money_amount * donate_price);
				SendClientMessage(playerid, 0xFFFF00FF, fmt_text);
				AddPlayerData(playerid, P_DONATE_MONEY, -, money_amount);
				UpdatePlayerDatabaseInt(playerid, "donate_current", GetPlayerData(playerid, P_DONATE_MONEY));
				format(fmt_text, sizeof fmt_text, "~g~+$%d~n~~y~-$%d", money_amount * donate_price, money_amount);
				GameTextForPlayer(playerid, fmt_text, 4000, 1);

				format(fmt_text, sizeof fmt_text, "Конвертация доната %d в игровую валюту", money_amount);

				GivePlayerMoneyEx(playerid, money_amount * donate_price, fmt_text, true, true);

				return 1;
			}
            case DIALOG_DONATE_GET_MONEY:
            {
                if(!response)
                {
                    DeletePVar(playerid, "donate_convert_count");
                    return ShowPlayerDonateMenu(playerid);
                }

                new money_count;
                money_count = GetPVarInt(playerid, "donate_convert_count");

                new fmt_text[128];

                format(fmt_text, sizeof fmt_text, "Вы сконвертировали {66cc00}%d.00 доната {ffff00}в {66cc00}%d игр.$.", money_count, money_count * GetDonatePrice(DONATE_PRICE_MONEY));
                SendClientMessage(playerid, 0xFFFF00FF, fmt_text);

                format(fmt_text, sizeof fmt_text, "~g~+%d $~n~~y~-%d $", money_count * GetDonatePrice(DONATE_PRICE_MONEY), money_count);
                GameTextForPlayer(playerid, fmt_text, 4000, 1);

                format(fmt_text, sizeof fmt_text, "Конвертация %d $. в игровую валюту", money_count);
                GivePlayerDonate(playerid, -money_count, fmt_text, true);

                GivePlayerMoneyEx(playerid, money_count * GetDonatePrice(DONATE_PRICE_MONEY), fmt_text, false, true);

                DeletePVar(playerid, "donate_convert_count");

                return 1;
            }
			case DIALOG_DONATE_BUY_CAR_NUMBER:
			{
				if(response)
				{
					if(IsACarNumber(inputtext))
					{
						new fmt_text[105],
							number_price = GetCarNumberPrice(inputtext),
							Cache: result,
							rows;

						mysql_format(mysql, fmt_text, sizeof fmt_text, "SELECT * FROM ownable_cars WHERE number='%s'", inputtext);
						result = mysql_query(mysql, fmt_text, true);

						rows = cache_num_rows();

						cache_delete(result);

						if(rows)
							SendClientMessage(playerid, 0x999999FF, "Данный номер уже занят");

						else
						{
							SetPVarString(playerid, "car_number", inputtext);
							SetPVarInt(playerid, "car_number_price", number_price);

							format(fmt_text, sizeof fmt_text, "{FFFFFF}Вы действительно хотите купить номер {66CC66}%s {FFFFFF}за {ffcd00}%d руб{FFFFFF}?", inputtext, number_price);
							Dialog(playerid, DIALOG_DONATE_ACCEPT_CAR_NUM, DIALOG_STYLE_MSGBOX, "{ffcd00}Покупка номера", fmt_text, "Купить", "Назад");

							return 1;
						}
					}
					else
					{
						SendClientMessage(playerid, 0x999999FF, "Введенный Вами номер не соответствует формату CNNNCC");

						ShowPlayerDonateMenu(playerid);
					}
				}
				else ShowPlayerDonateMenu(playerid);
				return 1;
			}
			case DIALOG_DONATE_ACCEPT_CAR_NUM:
			{
				if(response)
				{
					new number_price = GetPVarInt(playerid, "car_number_price"),
						fmt_text[100];

					if(GetPlayerCurrentDonate(playerid) >= number_price)
					{
						new car_number[7],
							vehicleid,
							index;

						GetPVarString(playerid, "car_number", car_number, sizeof car_number);

						vehicleid = GetPlayerOwnableCar(playerid);

						if(vehicleid != INVALID_VEHICLE_ID)
						{
							index = GetVehicleData(vehicleid, V_ACTION_ID);

							format(g_ownable_car[index][OC_NUMBER], 7, car_number);

							UpdateVehicleLabel(vehicleid, 0xFFFF00EE, GetOwnableCarData(index, OC_NUMBER));

							format(fmt_text, sizeof fmt_text, "Вы купили номера формата: {ffcd00}\"%s\" {66cc33}за %d руб", GetOwnableCarData(index, OC_NUMBER), number_price);
							SendClientMessage(playerid, 0x66CC33FF, fmt_text);

							mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE ownable_cars SET number='%s' WHERE id='%d' LIMIT 1", GetOwnableCarData(index, OC_NUMBER), GetOwnableCarData(index, OC_SQL_ID));
							mysql_query(mysql, fmt_text, false);

							GivePlayerDonate(playerid, -number_price, "Покупка номеров", true);
						}
						else
						{
							if(GetPlayerOwnableCars(playerid) == 0)
								SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
							else
								SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
						}
					}
					else
					{
						format(fmt_text, sizeof fmt_text, "Для покупки номера необходимо иметь на счету %d.00 руб.", number_price);
						SendClientMessage(playerid, -1, fmt_text);
					}
				}

				ShowPlayerDonateMenu(playerid);
			}
			case DIALOG_DONATE_CHANGE_NAME:
			{
				if(response)
				{
					new len = strlen(inputtext);
					if(4 <= len <= 20)
					{
						new bool: valid_name = true;
						for(new idx; idx < len; idx ++)
						{
							switch(inputtext[idx])
							{
								case 'a'..'z', 'A'..'Z', '[', ']', '_': continue;
								default:
									valid_name = false;
							}
						}

						if(!strcmp(GetPlayerNameEx(playerid), inputtext, true))
						{
							SendClientMessage(playerid, 0xFF6600FF, "Вы уже используете это имя");
						}
						else if(valid_name)
						{
							new query[128];
							new Cache: result, rows;

							mysql_format(mysql, query, sizeof query, "SELECT id FROM accounts WHERE name='%e' LIMIT 1", inputtext);
							result = mysql_query(mysql, query, true);

							rows = cache_num_rows();
							cache_delete(result);

							if(!rows)
							{

								if(ChangePlayerName(playerid, inputtext, false))
								{
									Dialog
									(
										playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
										"{FFCD00}Имя изменено",
										"{66FF00}Ваше имя успешно изменено.\n\n"\
										"{FFFFFF}В следующий раз при входе в игру используйте свое новое имя. Для\n"\
										"этого нужно изменить его в окне клиента CRMP. Рекомендуем прямо\n"\
										"сейчас свернуть игру и сделать это.",
										"Ок", ""
									);

									GivePlayerDonate(playerid, -GetDonatePrice(DONATE_PRICE_NAME), "Смена имени", true);

									return 1;
								}
								else SendClientMessage(playerid, 0xFF6600FF, "При смене ника произошла ошибка");

							}
							else SendClientMessage(playerid, 0xFF6600FF, "Введенное Вами имя уже используется");

						}
						else
						{
							SendClientMessage(playerid, 0xFF6600FF, "Имя уже используется или содержит недопустимые символы");
							SendClientMessage(playerid, 0xFFFFFFFF, "Используйте латинские буквы a-z A-Z, а также символы [ ] _");
						}
					}
					else SendClientMessage(playerid, 0xFF6600FF, "Недопустимый формат ввода");
				}

				ShowPlayerDonateMenu(playerid);
			}
			case DIALOG_DONATE_BUY_NUMBER:
			{
				if(response)
				{
					if(strlen(inputtext) == 4 && (1000 <= strval(inputtext) <= 9999))
					{
						new number = strval(inputtext),
							query[102],
							rows,
							Cache: result;

						mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE phone=%d", number);
						result = mysql_query(mysql, query, true);

						rows = cache_num_rows();

						cache_delete(result);

						if(rows)
							SendClientMessage(playerid, 0x999999FF, "Введенный Вами номер уже занят");

						else
						{
							SetPlayerData(playerid, P_PHONE, number);
							UpdatePlayerDatabaseInt(playerid, "phone", number);

							GivePlayerDonate(playerid, -GetDonatePrice(DONATE_PRICE_PHONE_NUMBER), "Смена номера телефона");

							format
							(
								query, sizeof query,
								"{FFFFFF}Номер телефона изменен\n"\
								"Теперь с Вами  можно связаться по номеру {0099FF}%d",
								GetPlayerPhone(playerid)
							);
							return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{66CC00}Номер изменен", query, "Закрыть", "");
						}
					}
					else SendClientMessage(playerid, 0x999999FF, "Недопустимый формат ввода");
				}

				ShowPlayerDonateMenu(playerid);
			}
			case DIALOG_DONATE_SKILLS:
			{
				if(response)
				{
					SetPVarInt(playerid, "skill_index", listitem);

					new skill_amount = GetPlayerSkillAmount(playerid, listitem);

					new title[48],
						fmt_text[200];

					format(title, sizeof title, "{FFCD00}Прокачать навык: %s", skill_name[listitem]);

					format
					(
						fmt_text, sizeof fmt_text,
						"{FFCD00}%s:\t\t\t{FFFFFF}%d%%\n\n"\
						"Стоимость 1 ед.:\t{6699cc}%d руб.\n"\
						"{FFFFFF}Введите количество единиц, на которое\n"\
						"Вы хотите прокачать Ваш навык:",
						skill_name[listitem],
						skill_amount,
						GetDonatePrice(DONATE_PRICE_SKILLS)
					);

					Dialog(playerid, DIALOG_DONATE_SKILL_BUY, DIALOG_STYLE_INPUT, title, fmt_text, "Далее", "Отмена");
				}
				else ShowPlayerDonateMenu(playerid);
			}
			case DIALOG_DONATE_SKILL_BUY:
			{
				if(response)
				{
					new skill_index = GetPVarInt(playerid, "skill_index"),
						skill_amount = strval(inputtext);

					if(!(0 <= skill_index <= 11))
						return SendClientMessage(playerid, 0xFF5533FF, "Ошибка, попробуйте снова");

					if(skill_amount > 0 && IsNumeric(inputtext))
					{
						new skill_max = 100 - GetPlayerSkillAmount(playerid, skill_index);

						new fmt_text[90];

						if(skill_amount <= skill_max)
						{
							new skill_price = GetDonatePrice(DONATE_PRICE_SKILLS) * skill_amount;

							if(GetPlayerCurrentDonate(playerid) >= skill_price)
							{
								GivePlayerDonate(playerid, -skill_price, "Прокачка навыков", true);

								SetPlayerSkillAmount(playerid, skill_index, GetPlayerSkillAmount(playerid, skill_index) + skill_amount);

								new skill_db_name[12][20] =
								{
									"power",
									"skill_colt",
									"skill_sdpistol",
									"skill_deagle",
									"skill_shotgun",
									"skill_mp5",
									"skill_ak47",
									"skill_m4",
									"skill_sniper_rifle",
									"skill_sawnoff",
									"skill_combat_sg",
									"skill_micro_uzi"
								};

								UpdatePlayerDatabaseInt(playerid, skill_db_name[skill_index], GetPlayerSkillAmount(playerid, skill_index));

								format(fmt_text, sizeof fmt_text, "Вы прокачали навык %s на %d ед. Текущее значение: %d ед.",
								skill_name[skill_index], skill_amount, GetPlayerSkillAmount(playerid, skill_index));

								SendClientMessage(playerid, 0x66CC33FF, fmt_text);
							}
							else
							{
								format(fmt_text, sizeof fmt_text, "Для прокачки %d ед. навыка требуется %d.00 руб. на счету", skill_amount, skill_price);
								SendClientMessage(playerid, -1, fmt_text);
							}
						}
						else
						{
							format(fmt_text, sizeof fmt_text, "Максимальное значение навыка: 100 ед., Вы можете прокачать еще %d ед.", skill_max);
							SendClientMessage(playerid, -1, fmt_text);
						}
					}
					else SendClientMessage(playerid, 0xFF5533FF, "Введите корректное значение");
				}

				ShowPlayerDonateMenu(playerid);
			}
			// -----------------------------------------------------------------
			case DIALOG_TEAM_CHANGE_SKIN:
			{
				if(!response || !(0 <= listitem <= 9)) return 1;

				new to_player = GetPVarInt(playerid, "change_team_skin_playerid");
				new team_id = GetPlayerTeamEx(playerid);

				if(!(1 <= team_id < MAX_ORG) || !(9 <= GetPlayerJob(playerid) <= 10)) return 1;
				if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || team_id != GetPlayerTeamEx(to_player)) return 1;
				if(GetPlayerSex(to_player)) return 1;

				new index = GetPlayerListitemValue(playerid, listitem);

				SetPlayerData(to_player, P_OSKIN, GetTeamData(team_id, O_SKINS)[index]);

				new query[85];
				mysql_format(mysql, query, sizeof query, "UPDATE accounts SET org_skin=%d WHERE id=%d", GetPlayerData(to_player, P_OSKIN), GetPlayerAccountID(to_player));
				mysql_query(mysql, query, false);

				ResetSkin(to_player);

				format(query, sizeof query, "Ваша внешность была изменена %s организации %s[%d]", GetPlayerJob(playerid) >= 10 ? ("лидером") : ("заместителем"), GetPlayerNameEx(playerid), playerid);
				SendClientMessage(to_player, 0x3399FFFF, query);

				format(query, sizeof query, "Вы изменили внешность %s[%d]", GetPlayerNameEx(to_player), to_player);
				SendClientMessage(playerid, 0x3399FFFF, query);

				return 1;
			}
			case DIALOG_TEAM_LEAVE:
			{
				if(response)
				{
					new fmt_text[110];

					format(fmt_text, sizeof fmt_text, "%s %s[%d] покинул организацию по собственному желанию",
					GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid);

					SendMessageToTeam(GetPlayerTeamEx(playerid), fmt_text, 0x3399FFFF, playerid);

					format(fmt_text, sizeof fmt_text, "Вы покинули организацию \"%s\"", GetTeamName(GetPlayerTeamEx(playerid)));
					SendClientMessage(playerid, 0xFFFF00FF, fmt_text);

					UnInvite(playerid, playerid);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_DEBTORLIST:
			{
				if(!response) return 1;
				if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) < 4) return 1;

				if(0 <= listitem <= 2)
				{
					ShowDebtorListDialog(playerid, listitem);
				}

				return 1;
			}

			case DIALOG_DEBTORLIST_HOUSE..DIALOG_DEBTORLIST_FUEL_ST:
			{
				if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) < 4) return 1;
				if(!response) return callcmd::debtorlist(playerid, "");
				if(!(0 <= listitem <= 19)) return 1;

				new type = dialogid - DIALOG_DEBTORLIST_HOUSE;
				new buffer = GetPlayerListitemValue(playerid, listitem);

				switch(type)
				{
					case 0:
					{
						if(!GetHouseData(buffer, H_TYPE))
						{
							EnablePlayerGPS(playerid, 35, GetHouseData(buffer, H_POS_X), GetHouseData(buffer, H_POS_Y), GetHouseData(buffer, H_POS_Z), "Дом должника отмечен у Вас на GPS");
						}
						else
						{
							new ent_id = GetHouseData(buffer, H_ENTRACE);

							EnablePlayerGPS(playerid, 35, GetEntranceData(ent_id, E_POS_X), GetEntranceData(ent_id, E_POS_Y), GetEntranceData(ent_id, E_POS_Z), "Подъезд квартиры должника отмечена у Вас на GPS");
						}
					}
					case 1: EnablePlayerGPS(playerid, 35, GetBusinessData(buffer, B_POS_X), GetBusinessData(buffer, B_POS_Y), GetBusinessData(buffer, B_POS_Z), "Предприятие должника отмечено у Вас на GPS");
					case 2: EnablePlayerGPS(playerid, 35, GetFuelStationData(buffer, FS_POS_X), GetFuelStationData(buffer, FS_POS_Y), GetFuelStationData(buffer, FS_POS_Z), "АЗС должника отмечена у Вас на GPS");
					default: return -1;
				}

				return 1;
			}

			case DIALOG_DEBTOR_SELL_LIST:
			{
				if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) < 7) return 1;
				//if(!response) return callcmd::debtorsell(playerid, "");
				if(!response) return 1;

				switch(listitem)
				{
					case 0:
					{
						Dialog
						(
							playerid, DIALOG_DEBTOR_SELL_HOUSE, DIALOG_STYLE_INPUT,
							"{99CC00}Акт выселения из жилого помещения",
							"Заполните акт выселения из жилого помещения\n\n\
							{FFFFFF}Укажите через пробел:\n\n\
							{FFCC00}1. Номер дома/квартиры\n\
							2. ID первого понятого\n\
							3. ID второго понятого\n\n\
							{FFFFFF}Когда закончите составление документа, подпишите его\n\
							Сразу после подписания акта должник будет выселен",
							"Подписать", "Назад"
						);

						// 0x3399FFFF > Должник был выселен из дома/квартиры. На оформление документов потребуется время
						// 0x3399FFFF > Вы получаете премию 1000 руб.

					}
					case 1:
					{
						Dialog
						(
							playerid, DIALOG_DEBTOR_SELL_BIZ, DIALOG_STYLE_INPUT,
							"{99CC00}Акт изъятия предпрятия",
							"Заполните акт изъятия предприятия у должника\n\n\
							{FFFFFF}Укажите через пробел:\n\n\
							{FFCC00}1. Номер предприятия\n\
							2. ID первого понятого\n\
							3. ID второго понятого\n\n\
							{FFFFFF}Когда закончите составление документа, подпишите его\n\
							Сразу после подписания акта предприятие станет собственностью государства",
							"Подписать", "Назад"
						);

						// 0x3399FFFF > Предприятие должника было изъято в пользу государства. На оформление документов потребуется время
						// 0x3399FFFF > Вы получаете премию 1000 руб.
					}
					case 2:
					{
						Dialog
						(
							playerid, DIALOG_DEBTOR_SELL_FUEL_ST, DIALOG_STYLE_INPUT,
							"{99CC00}Акт изъятия АЗС",
							"Заполните акт изъятия АЗС у должника\n\n\
							{FFFFFF}Укажите через пробел:\n\n\
							{FFCC00}1. Номер АЗС\n\
							2. ID первого понятого\n\
							3. ID второго понятого\n\n\
							{FFFFFF}Когда закончите составление документа, подпишите его\n\
							Сразу после подписания акта АЗС станет собственностью государства",
							"Подписать", "Назад"
						);
					}
					default: return -1;
				}

				return 1;
			}

			case DIALOG_DEBTOR_SELL_HOUSE:
			{
				if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) < 4) return 1;

				if(!response) return callcmd::debtorsell(playerid, "");

				new sell_houseid = -1, worker_id[2] = {-1, -1};
				sscanf(inputtext, "ddd", sell_houseid, worker_id[0], worker_id[1]);

				if(strlen(inputtext) > 0)
				{
					if(!(0 <= sell_houseid <= g_house_loaded-1))
						SendClientMessage(playerid, 0xBBBB00FF, "Укажите номер дома/квартиры");

					else if(!IsPlayerInRangeOfPoint(playerid, 7.0, GetHouseData(sell_houseid, H_POS_X), GetHouseData(sell_houseid, H_POS_Y), GetHouseData(sell_houseid, H_POS_Z)))
						SendClientMessage(playerid, 0xBBBB00FF, "Вы находитесь далеко от дома/квартиры должника");

					else if(!IsPlayerConnected(worker_id[0]) || !IsPlayerLogged(worker_id[0]) || worker_id[0] == playerid)
						SendClientMessage(playerid, 0xBBBB00FF, "Укажите ID первого понятого");

					else if(!IsPlayerConnected(worker_id[1]) || !IsPlayerLogged(worker_id[1]) || worker_id[1] == playerid || worker_id[0] == worker_id[1])
						SendClientMessage(playerid, 0xBBBB00FF, "Укажите ID второго понятого");

					else if(GetPlayerTeamEx(worker_id[0]) != TEAM_GOVERNMENT && GetPlayerJob(worker_id[0]) < 3 || GetPlayerTeamEx(worker_id[1]) != TEAM_GOVERNMENT && GetPlayerJob(worker_id[1]) < 3)
						SendClientMessage(playerid, 0xBBBB00FF, "Один из понятых не является сотрудником правительства 3 ранга");

					else if(!IsPlayerInRangeOfPoint(worker_id[0], 7.0, GetHouseData(sell_houseid, H_POS_X), GetHouseData(sell_houseid, H_POS_Y), GetHouseData(sell_houseid, H_POS_Z)) || !IsPlayerInRangeOfPoint(worker_id[1], 7.0, GetHouseData(sell_houseid, H_POS_X), GetHouseData(sell_houseid, H_POS_Y), GetHouseData(sell_houseid, H_POS_Z)))
						SendClientMessage(playerid, 0xBBBB00FF, "Один из понятых находится далеко от дома/квартиры должника");

					else if((((GetHouseData(sell_houseid, H_RENT_DATE) - gettime()) / 86400) + 1) > 0)
						SendClientMessage(playerid, 0xBBBB00FF, "У владельца этого дома/квартиры нет задолжности за неуплату услуг");

					else if(GetHouseData(sell_houseid, H_EVICTION))
						SendClientMessage(playerid, 0xBBBB00FF, "Акт выселения из этого жилого помещения уже подписан");

					else
					{
						SendClientMessage(playerid, 0x3399FFFF, "Должник был выселен из дома/квартиры. На оформление документов потребуется время");
						SendClientMessage(playerid, 0x3399FFFF, "Вы получаете премию 1000 руб.");

						SetPlayerChatBubble(playerid, "+1000 руб", 0x3399FFFF, 5.0, 3000);
						GameTextForPlayer(playerid, "~b~~h~+1000 rub", 4000, 1);
						AddPlayerData(playerid, P_WAGE, +, 1000);
						UpdatePlayerDatabaseInt(playerid, "wage", GetPlayerData(playerid, P_WAGE));

						for(new i; i < 2; i ++)
						{
							SendClientMessage(worker_id[i], 0x3399FFFF, "Вы получили премию 500 руб.");
							SetPlayerChatBubble(worker_id[i], "+500 руб", 0x3399FFFF, 5.0, 3000);
							GameTextForPlayer(worker_id[i], "~b~~h~+500 rub", 4000, 1);
							AddPlayerData(worker_id[i], P_WAGE, +, 500);
							UpdatePlayerDatabaseInt(worker_id[i], "wage", GetPlayerData(worker_id[i], P_WAGE));
						}

						new query[90];

						mysql_format(mysql, query, sizeof query, "UPDATE accounts SET house_type=-1,house_room=-1,house=-1 WHERE id=%d", GetHouseData(sell_houseid, H_OWNER_ID));
						mysql_query(mysql, query, false);

						new owner_player = GetPlayerIDBySqlID(GetHouseData(sell_houseid, H_OWNER_ID));
						if(IsPlayerConnected(owner_player) && IsPlayerLogged(owner_player))
						{
							/*if(GetPlayerHouse(owner_player, HOUSE_TYPE_HOME) == sell_houseid)
							{*/
							SetPlayerData(owner_player, P_HOUSE, -1);
							SendClientMessage(owner_player, 0xFF6600FF, "Вы были выселены из дома/квартиры за неуплату услуг");
							//}
						}
						SetHouseData(sell_houseid, H_OWNER_ID, 0);
						SetHouseData(sell_houseid, H_IMPROVEMENTS,		0);

						SetHouseData(sell_houseid, H_RENT_DATE,		0);
						SetHouseData(sell_houseid, H_LOCK_STATUS,		false);
						//SetHouseData(sell_houseid, H_RENT_DATE, gettime() + (random(169200) + 3600));
						SetHouseData(sell_houseid, H_EVICTION, 1);

						mysql_format(mysql, query, sizeof query, "UPDATE houses SET eviction=1, rent_time=%d WHERE id=%d LIMIT 1", GetHouseData(sell_houseid, H_RENT_DATE), GetHouseData(sell_houseid, H_SQL_ID));
						mysql_query(mysql, query, false);

						return 1;
					}
				}

				Dialog
				(
					playerid, DIALOG_DEBTOR_SELL_HOUSE, DIALOG_STYLE_INPUT,
					"{99CC00}Акт выселения из жилого помещения",
					"Заполните акт выселения из жилого помещения\n\n\
					{FFFFFF}Укажите через пробел:\n\n\
					{FFCC00}1. Номер дома/квартиры\n\
					2. ID первого понятого\n\
					3. ID второго понятого\n\n\
					{FFFFFF}Когда закончите составление документа, подпишите его.\n\
					Сразу после подписания акта должник будет выселен.",
					"Подписать", "Назад"
				);
				return 1;
			}

			case DIALOG_DEBTOR_SELL_BIZ:
			{
				if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) < 4) return 1;

				if(!response) return callcmd::debtorsell(playerid, "");

				new sell_biz_id = -1, worker_id[2] = {-1, -1};
				sscanf(inputtext, "ddd", sell_biz_id, worker_id[0], worker_id[1]);

				if(strlen(inputtext) > 0)
				{
					if(!(0 <= sell_biz_id <= g_business_loaded-1))
						SendClientMessage(playerid, 0xBBBB00FF, "Укажите номер предприятия");

					else if(!IsPlayerInRangeOfPoint(playerid, 7.0, GetBusinessData(sell_biz_id, B_POS_X), GetBusinessData(sell_biz_id, B_POS_Y), GetBusinessData(sell_biz_id, B_POS_Z)))
						SendClientMessage(playerid, 0xBBBB00FF, "Вы находитесь далеко от предприятия должника");

					else if(!IsPlayerConnected(worker_id[0]) || !IsPlayerLogged(worker_id[0]) || worker_id[0] == playerid)
						SendClientMessage(playerid, 0xBBBB00FF, "Укажите ID первого понятого");

					else if(!IsPlayerConnected(worker_id[1]) || !IsPlayerLogged(worker_id[1]) || worker_id[1] == playerid || worker_id[0] == worker_id[1])
						SendClientMessage(playerid, 0xBBBB00FF, "Укажите ID второго понятого");

					else if(GetPlayerTeamEx(worker_id[0]) != TEAM_GOVERNMENT && GetPlayerJob(worker_id[0]) < 3 || GetPlayerTeamEx(worker_id[1]) != TEAM_GOVERNMENT && GetPlayerJob(worker_id[1]) < 3)
						SendClientMessage(playerid, 0xBBBB00FF, "Один из понятых не является сотрудником правительства 3 ранга");

					else if(!IsPlayerInRangeOfPoint(worker_id[0], 7.0, GetBusinessData(sell_biz_id, B_POS_X), GetBusinessData(sell_biz_id, B_POS_Y), GetBusinessData(sell_biz_id, B_POS_Z)) || !IsPlayerInRangeOfPoint(worker_id[1], 7.0, GetBusinessData(sell_biz_id, B_POS_X), GetBusinessData(sell_biz_id, B_POS_Y), GetBusinessData(sell_biz_id, B_POS_Z)))
						SendClientMessage(playerid, 0xBBBB00FF, "Один из понятых находится далеко от предприятия должника");

					else if((((GetBusinessData(sell_biz_id, B_RENT_DATE) - gettime()) / 86400) + 1) > 0)
						SendClientMessage(playerid, 0xBBBB00FF, "У владельца этого предприятия нет задолжности за неуплату услуг");

					else if(GetBusinessData(sell_biz_id, B_EVICTION))
						SendClientMessage(playerid, 0xBBBB00FF, "Акт изъятия этого предприятия уже подписан");

					else
					{
						// 0x3399FFFF > Предприятие должника было изъято в пользу государства. На оформление документов потребуется время
						// 0x3399FFFF > Вы получаете премию 1000 руб.

						SendClientMessage(playerid, 0x3399FFFF, "Предприятие должника было изъято в пользу государства. На оформление документов потребуется время");
						SendClientMessage(playerid, 0x3399FFFF, "Вы получаете премию 1000 руб.");

						SetPlayerChatBubble(playerid, "+1000 руб", 0x3399FFFF, 5.0, 3000);
						GameTextForPlayer(playerid, "~b~~h~+1000 rub", 4000, 1);
						AddPlayerData(playerid, P_WAGE, +, 1000);
						UpdatePlayerDatabaseInt(playerid, "wage", GetPlayerData(playerid, P_WAGE));

						for(new i; i < 2; i ++)
						{
							SendClientMessage(worker_id[i], 0x3399FFFF, "Вы получили премию 500 руб.");
							SetPlayerChatBubble(worker_id[i], "+500 руб", 0x3399FFFF, 5.0, 3000);
							GameTextForPlayer(worker_id[i], "~b~~h~+500 rub", 4000, 1);
							AddPlayerData(worker_id[i], P_WAGE, +, 500);
							UpdatePlayerDatabaseInt(worker_id[i], "wage", GetPlayerData(worker_id[i], P_WAGE));
						}

						new query[90];

						mysql_format(mysql, query, sizeof query, "UPDATE accounts SET business=-1 WHERE id=%d", GetBusinessData(sell_biz_id, B_OWNER_ID));
						mysql_query(mysql, query, false);

						new owner_player = GetPlayerIDBySqlID(GetBusinessData(sell_biz_id, B_OWNER_ID));
						if(IsPlayerConnected(owner_player) && IsPlayerLogged(owner_player))
						{
							/*if(GetPlayerBusiness(owner_player) == sell_biz_id)
							{*/
							SetPlayerData(owner_player, P_BUSINESS, -1);
							SendClientMessage(owner_player, 0xFF6600FF, "Ваше предприятие было изъято государством за неуплату налогов");
							//}
						}
						SetBusinessData(sell_biz_id, B_OWNER_ID, 0);
						SetBusinessData(sell_biz_id, B_IMPROVEMENTS, 		0);

						SetBusinessData(sell_biz_id, B_PRODS, 			0);
						SetBusinessData(sell_biz_id, B_PROD_PRICE,		0);

						SetBusinessData(sell_biz_id, B_BALANCE,			0);
						SetBusinessData(sell_biz_id, B_RENT_DATE,			0);
						SetBusinessData(sell_biz_id, B_ENTER_MUSIC,		0);
						SetBusinessData(sell_biz_id, B_LOCK_STATUS,		false);
						//SetBusinessData(sell_biz_id, B_RENT_DATE, gettime() + (random(169200) + 3600));
						SetBusinessData(sell_biz_id, B_EVICTION, 1);

						mysql_format(mysql, query, sizeof query, "UPDATE business SET eviction=1, rent_time=%d WHERE id=%d LIMIT 1", GetBusinessData(sell_biz_id, B_RENT_DATE), GetBusinessData(sell_biz_id, B_SQL_ID));
						mysql_query(mysql, query, false);

						return 1;
					}
				}

				Dialog
				(
					playerid, DIALOG_DEBTOR_SELL_BIZ, DIALOG_STYLE_INPUT,
					"{99CC00}Акт изъятия предприятия",
					"Заполните акт изъятия предприятия у должника\n\n\
					{FFFFFF}Укажите через пробел:\n\n\
					{FFCC00}1. Номер предприятия\n\
					2. ID первого понятого\n\
					3. ID второго понятого\n\n\
					{FFFFFF}Когда закончите составление документа, подпишите его\n\
					Сразу после подписания акта предприятие станет собственностью государства",
					"Подписать", "Назад"
				);
				return 1;
			}

			case DIALOG_DEBTOR_SELL_FUEL_ST:
			{
				if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) < 4) return 1;

				if(!response) return callcmd::debtorsell(playerid, "");

				new sell_fs_id = -1, worker_id[2] = {-1, -1};
				sscanf(inputtext, "ddd", sell_fs_id, worker_id[0], worker_id[1]);

				if(strlen(inputtext) > 0)
				{
					if(!(0 <= sell_fs_id <= g_fuel_station_loaded-1))
						SendClientMessage(playerid, 0xBBBB00FF, "Укажите номер предприятия");

					else if(!IsPlayerInRangeOfPoint(playerid, 7.0, GetFuelStationData(sell_fs_id, FS_POS_X), GetFuelStationData(sell_fs_id, FS_POS_Y), GetFuelStationData(sell_fs_id, FS_POS_Z)))
						SendClientMessage(playerid, 0xBBBB00FF, "Вы находитесь далеко от предприятия должника");

					else if(!IsPlayerConnected(worker_id[0]) || !IsPlayerLogged(worker_id[0]) || worker_id[0] == playerid)
						SendClientMessage(playerid, 0xBBBB00FF, "Укажите ID первого понятого");

					else if(!IsPlayerConnected(worker_id[1]) || !IsPlayerLogged(worker_id[1]) || worker_id[1] == playerid || worker_id[0] == worker_id[1])
						SendClientMessage(playerid, 0xBBBB00FF, "Укажите ID второго понятого");

					else if(GetPlayerTeamEx(worker_id[0]) != TEAM_GOVERNMENT && GetPlayerJob(worker_id[0]) < 3 || GetPlayerTeamEx(worker_id[1]) != TEAM_GOVERNMENT && GetPlayerJob(worker_id[1]) < 3)
						SendClientMessage(playerid, 0xBBBB00FF, "Один из понятых не является сотрудником правительства 3 ранга");

					else if(!IsPlayerInRangeOfPoint(worker_id[0], 7.0, GetFuelStationData(sell_fs_id, FS_POS_X), GetFuelStationData(sell_fs_id, FS_POS_Y), GetFuelStationData(sell_fs_id, FS_POS_Z)) || !IsPlayerInRangeOfPoint(worker_id[1], 7.0, GetFuelStationData(sell_fs_id, FS_POS_X), GetFuelStationData(sell_fs_id, FS_POS_Y), GetFuelStationData(sell_fs_id, FS_POS_Z)))
						SendClientMessage(playerid, 0xBBBB00FF, "Один из понятых находится далеко от предприятия должника");

					else if((((GetFuelStationData(sell_fs_id, FS_RENT_DATE) - gettime()) / 86400) + 1) > 0)
						SendClientMessage(playerid, 0xBBBB00FF, "У владельца этого предприятия нет задолжности за неуплату услуг");

					else if(GetFuelStationData(sell_fs_id, FS_EVICTION))
						SendClientMessage(playerid, 0xBBBB00FF, "Акт изъятия этого предприятия уже подписан");

					else
					{
						// 0x3399FFFF > АЗС должника была изъята в пользу государства. На оформление документов потребуется время
						// 0x3399FFFF > Вы получаете премию 1000 руб.

						SendClientMessage(playerid, 0x3399FFFF, "АЗС должника была изъята в пользу государства. На оформление документов потребуется время");
						SendClientMessage(playerid, 0x3399FFFF, "Вы получаете премию 1000 руб.");

						SetPlayerChatBubble(playerid, "+1000 руб", 0x3399FFFF, 5.0, 3000);
						GameTextForPlayer(playerid, "~b~~h~+1000 rub", 4000, 1);
						AddPlayerData(playerid, P_WAGE, +, 1000);
						UpdatePlayerDatabaseInt(playerid, "wage", GetPlayerData(playerid, P_WAGE));

						for(new i; i < 2; i ++)
						{
							SendClientMessage(worker_id[i], 0x3399FFFF, "Вы получили премию 500 руб.");
							SetPlayerChatBubble(worker_id[i], "+500 руб", 0x3399FFFF, 5.0, 3000);
							GameTextForPlayer(worker_id[i], "~b~~h~+500 rub", 4000, 1);
							AddPlayerData(worker_id[i], P_WAGE, +, 500);
							UpdatePlayerDatabaseInt(worker_id[i], "wage", GetPlayerData(worker_id[i], P_WAGE));
						}

						new query[90];

						mysql_format(mysql, query, sizeof query, "UPDATE accounts SET eviction=1, fuel_st = -1 WHERE id=%d", GetFuelStationData(sell_fs_id, FS_OWNER_ID));
						mysql_query(mysql, query, false);

						new owner_player = GetPlayerIDBySqlID(GetFuelStationData(sell_fs_id, FS_OWNER_ID));
						if(IsPlayerConnected(owner_player) && IsPlayerLogged(owner_player))
						{
							/*if(GetPlayerFuelStation(owner_player) == sell_fs_id)
							{*/
							SetPlayerData(owner_player, P_FUEL_ST, -1);
							SendClientMessage(owner_player, 0xFF6600FF, "Ваше предприятие было изъято государством за неуплату налогов");
							//}
						}
						SetFuelStationData(sell_fs_id, FS_IMPROVEMENTS, 0);

						SetFuelStationData(sell_fs_id, FS_FUELS, 		1000);
						SetFuelStationData(sell_fs_id, FS_FUEL_PRICE,	3);
						SetFuelStationData(sell_fs_id, FS_BUY_FUEL_PRICE,0);

						SetFuelStationData(sell_fs_id, FS_BALANCE,		0);
						SetFuelStationData(sell_fs_id, FS_RENT_DATE,		0);
						SetFuelStationData(sell_fs_id, FS_LOCK_STATUS,	false);
						//SetFuelStationData(sell_fs_id, FS_RENT_DATE, gettime() + (random(169200) + 3600));
						SetFuelStationData(sell_fs_id, FS_EVICTION, 1);

						mysql_format(mysql, query, sizeof query, "UPDATE fuel_stations SET rent_time=%d WHERE id=%d LIMIT 1", GetFuelStationData(sell_fs_id, FS_RENT_DATE), GetFuelStationData(sell_fs_id, FS_SQL_ID));
						mysql_query(mysql, query, false);

						UpdateFuelStationLabel(sell_fs_id);

						return 1;
					}
				}

				Dialog
				(
					playerid, DIALOG_DEBTOR_SELL_FUEL_ST, DIALOG_STYLE_INPUT,
					"{99CC00}Акт изъятия АЗС",
					"Заполните акт изъятия АЗС у должника\n\n\
					{FFFFFF}Укажите через пробел:\n\n\
					{FFCC00}1. Номер АЗС\n\
					2. ID первого понятого\n\
					3. ID второго понятого\n\n\
					{FFFFFF}Когда закончите составление документа, подпишите его\n\
					Сразу после подписания акта АЗС станет собственностью государства",
					"Подписать", "Назад"
				);
				return 1;
			}

			case DIALOG_ADVISOR_MENU:
			{
				if(!response) return 1;

				if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) != 5) return 1;

				switch(listitem)
				{
					case 0:
					{
						if(!IsValidDynamic3DTextLabel(g_player[playerid][P_ADVISOR_LABEL]))
						{
							g_player[playerid][P_ADVISOR_LABEL] = CreateDynamic3DTextLabel("Советник", 0xFFCC33FF, 0.0, 0.0, 0.3, 10.0, playerid);
							Attach3DTextLabelToPlayer(g_player[playerid][P_ADVISOR_LABEL], playerid, 0.0, 0.0, -0.8);

							SendClientMessage(playerid, 0x3399FFFF, "Вы надели бейджик");
						}
						else
						{
							DestroyDynamic3DTextLabel(g_player[playerid][P_ADVISOR_LABEL]);
							g_player[playerid][P_ADVISOR_LABEL] = Text3D: -1;

							SendClientMessage(playerid, 0x3399FFFF, "Вы сняли бейджик");
						}
					}
					case 1:
					{
						if(GetPlayerData(playerid, P_ADVISOR_BLOCK_CHAT))
						{
							SetPlayerData(playerid, P_ADVISOR_BLOCK_CHAT, false);
							SendClientMessage(playerid, 0x66CC00FF, "Вы включили отображение рации организации");
						}
						else
						{
							SetPlayerData(playerid, P_ADVISOR_BLOCK_CHAT, true);
							SendClientMessage(playerid, 0xFF6600FF, "Вы отключили отображение рации организации");
						}
					}
					case 2:
					{
						if(GetPlayerJob(playerid) != 5)
						{
							SendClientMessage(playerid, 0x999999FF, "Функция доступна советникам по гос. организациям");
						}
						else
						{
							Dialog
							(
								playerid, DIALOG_ADVISOR_TEAM_STRUCTURE, DIALOG_STYLE_LIST,
								"{33CC66}Выберите организацию",
								"1. Правительство области\n\
								2. Воинская часть\n\
								3. Городская больница\n\
								4. ГТРК «Ритм»\n\
								5. Отдел полиции №1 (ГИБДД)\n\
								6. Отдел полиции №2 (УМВД)\n\
								7. ФСБ",
								"Выбрать", "Отмена"
							);
							return 1;
						}
					}
					default: return -1;
				}

				callcmd::smenu(playerid, "");
				return 1;
			}

			case DIALOG_ADVISOR_TEAM_STRUCTURE:
			{
				if(!response) return 1;
				if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) != 5) return 1;

				if(0 <= listitem <= 6)
				{
					ShowTeamStructureDialog(playerid, (listitem + 1));
				}

				return 1;
			}

			// -----------------------------------------------------------------
			case DIALOG_ADMINCALL_MENU:
            {
                switch(listitem)
                {
                    case 0: ShowPlayerReportDialog(playerid);
                    case 1: ShowPlayerAskDialog(playerid);
                }
            }
			case DIALOG_ADMIN_PANEL:
			{
				if(!response) return 1;

				new fmt_text[128],
					text[1440],
					Cache: result,
					rows;

				switch(listitem)
				{
					case 0: // Список администрации
					{
						result = mysql_query(mysql, "SELECT * FROM accounts WHERE admin != 0 ORDER BY admin DESC", true);
						rows = cache_num_rows();

						format(text, sizeof text, "{3399FF}№ акк.\tИмя\t\t\tАдм.ранг\tВ игре сегодня{FFFFFF}");

						for(new i = 0; i < rows; i++)
						{
							new name[21],
								user_id = cache_get_field_content_int(i, "id"),
								lvl = cache_get_field_content_int(i, "admin"),
								game_for_day = cache_get_field_content_int(i, "game_for_day"),
								game_for_day_text[32];

							cache_get_field_content(i, "name", name);
							format(game_for_day_text, sizeof game_for_day_text, "%d ч %d мин", ConvertUnixTime(game_for_day, CONVERT_TIME_TO_HOURS), ConvertUnixTime(game_for_day, CONVERT_TIME_TO_MINUTES));

							format(fmt_text, sizeof fmt_text, "\n%d.\t%s%s%d\t\t%s", user_id, name, strlen(name) > 14 ? "\t" : "\t\t", lvl, game_for_day_text);
							strcat(text, fmt_text);
							SetPlayerListitemValue(playerid, i+1, user_id);
						}

						cache_delete(result);

						Dialog(playerid, DIALOG_ADMINS, DIALOG_STYLE_LIST, "{FFCC00}Список администрации", text, "Выбрать", "Отмена");
					}

					case 1: // Список лидеров
					{
						result = mysql_query(mysql, "SELECT * FROM accounts WHERE job=10 ORDER BY team ASC", true);
						rows = cache_num_rows();

						format(text, sizeof text, "{3399FF}№ акк.\tИмя\t\t\tФракция\tВ игре сегодня{FFFFFF}");

						for(new i = 0; i < rows; i++)
						{
							new name[21],
								user_id = cache_get_field_content_int(i, "id"),
								team = cache_get_field_content_int(i, "team"),
								game_for_day = cache_get_field_content_int(i, "game_for_day"),
								game_for_day_text[32];

							cache_get_field_content(i, "name", name);
							format(game_for_day_text, sizeof game_for_day_text, "%d ч %d мин", ConvertUnixTime(game_for_day, CONVERT_TIME_TO_HOURS), ConvertUnixTime(game_for_day, CONVERT_TIME_TO_MINUTES));

							format(fmt_text, sizeof fmt_text, "\n%d.\t%s%s%d\t\t%s", user_id, name, strlen(name) > 14 ? "\t" : "\t\t", team, game_for_day_text);
							strcat(text, fmt_text);
							SetPlayerListitemValue(playerid, i+1, user_id);
						}

						cache_delete(result);

						Dialog(playerid, DIALOG_LEADERS, DIALOG_STYLE_LIST, "{FFCC00}Список лидеров", text, "Выбрать", "Отмена");
					}
					case 4:
					{
						if(FD(playerid))
						{
			             	ShowSetAndLogsPanel(playerid);
						}
					}
					case 5:
					{
						if(FD(playerid))
						{
							format
							(
								str, sizeof(str),
								"Цена на админку %d\n\
								Цена на хелперку %d\n\
								Раздача каждый час %d Руб\n\
								Множитель Доната Х%d\n\
								Выдача монет каждый час %d\n\
								Бонус (деньги) %d\n\
								Бонус (донат) %d\n\
								Бонус (уровень) %d\n\
								%s",
								Config[admin_price],
								Config[helper_price],
								Config[sDistRub],
								Config[sDonPower],
								Config[sGiveCoins],
								Config[sBonusMoney],
								Config[sBonusDonate],
								Config[sBonusLevel],
								Config[sBuyBiz] ? ("{32CD32}Разрешить покупать бизнесы и дома") : ("{F81414}Запретить покупать бизнесы дома")
							);
							Dialog
							(
								playerid, DIALOG_SERVER_SETTINGS, DIALOG_STYLE_LIST,
								"Управление сервером",
								str,
								"Далее", "Отмена"
							);
						}
					}
					case 6:
					{
						Dialog_Show::A_UPONLINE(playerid);
					}
				}
				return 1;
			}
			case DIALOG_HELPADM:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case 1: callcmd::cmdadm(playerid, "");
						case 2: callcmd::anak(playerid, "");
						case 3: callcmd::aprav(playerid, "");
						case 4: callcmd::licsog(playerid, "");
						default:
							return 1;
					}
				}
			}
			case DIALOG_SERVER_SETTINGS:
			{
				if(response)
				{
					switch(listitem)
					{
						case 0:
						{
							Dialog
							(
								playerid, DIALOG_SERVER_SETTINGS_ADM, DIALOG_STYLE_INPUT,
								"Управление сервером",
								"Введите новую цену на админку\n\
								\tПримечание: Нельзя меньше 40 и больше 200!",
								"Далее", "Отмена"
							);
						}
						case 1:
						{
							Dialog
							(
								playerid, DIALOG_SERVER_SETTINGS_HELP, DIALOG_STYLE_INPUT,
								"Управление сервером",
								"Введите новую цену на хелперку\n\
								\tПримечание: Нельзя меньше 40 и больше 200!",
								"Далее", "Отмена"
							);
						}
						case 2:
						{
							Dialog
							(
								playerid, DIALOG_SERVER_SETTINGS_RUB, DIALOG_STYLE_INPUT,
								"Управление сервером",
								"Введите новую cумму раздачи рублей каждый час\n\
								\tПримечание: Нельзя меньше 1 и больше 5!",
								"Далее", "Отмена"
							);
						}
						case 3:
						{
							Dialog
							(
								playerid, DIALOG_SERVER_SETTINGS_DON, DIALOG_STYLE_INPUT,
								"Управление сервером",
								"Введите новый множитель доната\n\
								\tПримечание: Нельзя меньше 1 и больше 3!",
								"Далее", "Отмена"
							);
						}
						case 4:
						{
							Dialog
							(
								playerid, DIALOG_SERVER_SETTINGS_COINS, DIALOG_STYLE_INPUT,
								"Управление сервером",
								"Введите количество монет которое будет выдаваться каждый час\n\
								\tПримечание: Нельзя меньше 1 и больше 3!",
								"Далее", "Отмена"
							);
						}
						case 5:
						{
							Dialog
							(
								playerid, DIALOG_SERVER_SETTINGS_BONUSM, DIALOG_STYLE_INPUT,
								"Управление сервером",
								"Введите количество денег которое будет выдаваться при регистрации\n\
								\tПримечание: Нельзя меньше 100 и больше 100кк!",
								"Далее", "Отмена"
							);
						}
						case 6:
						{
							Dialog
							(
								playerid, DIALOG_SERVER_SETTINGS_BONUSD, DIALOG_STYLE_INPUT,
								"Управление сервером",
								"Введите количество доната которое будет выдаваться при регистрации\n\
								\tПримечание: Нельзя меньше 0 и больше 20000!",
								"Далее", "Отмена"
							);
						}
						case 7:
						{
							Dialog
							(
								playerid, DIALOG_SERVER_SETTINGS_BONUSL, DIALOG_STYLE_INPUT,
								"Управление сервером",
								"Введите уровень который будет выдаваться при регистрации\n\
								\tПримечание: Нельзя меньше 1 и больше 20!",
								"Далее", "Отмена"
							);
						}
						case 8:
						{
							if(Config[sBuyBiz] == 0)
						    {
								Dialog
								(
									playerid, DIALOG_BUYBIZ_CLOSE, DIALOG_STYLE_MSGBOX,
									"Запрет на покупку бизнеса",
									""c_b"Вы уверены, что хотите запретить покупать бизнесы на сервере?",
									"Далее", "Отмена"
								);
							}

							if(Config[sBuyBiz] == 1)
						    {
								Dialog
								(
									playerid, DIALOG_BUYBIZ_OPEN, DIALOG_STYLE_MSGBOX,
									"Разрешение на покупку бизнесов",
									""c_b"Вы уверены, что хотите разрешить покупать бизнесы на сервере?",
									"Далее", "Отмена"
								);
							}
						}
					}
				}
			}
			case DIALOG_BUYBIZ_OPEN: //===
			{
		        //new str[180];
				//new fmt_text[100];

				Send(playerid,-1,"Успешно");

                Config[sBuyBiz] = 0;//===

                mysql_format(mysql, str, 256, "UPDATE server_settings SET BuyBiz = 0");//===
                mysql_query(mysql, str);

                return 1;
			}
			case DIALOG_BUYBIZ_CLOSE: //===
			{
		        //new str[180];
				//new fmt_text[200];

				Send(playerid,-1,"Успешно");

                Config[sBuyBiz] = 1;//===

                mysql_format(mysql, str, 256, "UPDATE server_settings SET BuyBiz = 1");//===
                mysql_query(mysql, str);

                return 1;
			}
			case DIALOG_SERVER_SETTINGS_ADM:
			{
				if(response)
	            {
	                new price = strval(inputtext);
	                if(price && IsNumeric(inputtext))
	                {
	                    if(price > 40)
	                    {

	                        Config[admin_price] = price;
	                        mysql_format(mysql, str, 256, "UPDATE server_settings SET admin_price = %d",price);
	                        mysql_query(mysql, str);
	                        return 1;
	                    }
	                    SendClientMessage(playerid, -1, "Ниже 40 руб нельзя!");
	                }
	            }
			}
			case DIALOG_SERVER_SETTINGS_COINS:
			{
				if(response)
	            {
	                new price = strval(inputtext);
	                if(price && IsNumeric(inputtext))
	                {
	                    if(1 <= price <= 3)
	                    {

	                        Config[sGiveCoins] = price;
	                        mysql_format(mysql, str, 256, "UPDATE server_settings SET GiveCoins = %d",price);
	                        mysql_query(mysql, str);
	                        return 1;
	                    }
	                    SendClientMessage(playerid, -1, "Ниже 1 и выше 3 монеты нельзя!");
	                }
	            }
			}
			case DIALOG_SERVER_SETTINGS_BONUSM:
			{
				if(response)
	            {
	                new price = strval(inputtext);
	                if(price && IsNumeric(inputtext))
	                {
	                    if(100 <= price <= 100000000)
	                    {

	                        Config[sBonusMoney] = price;
	                        mysql_format(mysql, str, 256, "UPDATE server_settings SET BonusMoney = %d",price);
	                        mysql_query(mysql, str);
	                        return 1;
	                    }
	                    SendClientMessage(playerid, -1, "Ниже 100 и выше 100кк нельзя!");
	                }
	            }
			}
			case DIALOG_SERVER_SETTINGS_BONUSD:
			{
				if(response)
	            {
	                new price = strval(inputtext);
	                if(price && IsNumeric(inputtext))
	                {
	                    if(0 <= price <= 20000)
	                    {

	                        Config[sBonusDonate] = price;
	                        mysql_format(mysql, str, 256, "UPDATE server_settings SET BonusDonate = %d",price);
	                        mysql_query(mysql, str);
	                        return 1;
	                    }
	                    SendClientMessage(playerid, -1, "Ниже 0 и выше 20000 доната нельзя!");
	                }
	            }
			}
			case DIALOG_SERVER_SETTINGS_BONUSL:
			{
				if(response)
	            {
	                new price = strval(inputtext);
	                if(price && IsNumeric(inputtext))
	                {
	                    if(1 <= price <= 20)
	                    {

	                        Config[sBonusLevel] = price;
	                        mysql_format(mysql, str, 256, "UPDATE server_settings SET BonusLevel = %d",price);
	                        mysql_query(mysql, str);
	                        return 1;
	                    }
	                    SendClientMessage(playerid, -1, "Ниже 1 и выше 20 лвл нельзя!");
	                }
	            }
			}
			case DIALOG_SERVER_SETTINGS_HELP:
			{
				if(response)
	            {
	                new price = strval(inputtext);
	                if(price && IsNumeric(inputtext))
	                {
	                    if(price > 20)
	                    {

	                        Config[helper_price] = price;
	                        mysql_format(mysql, str, 256, "UPDATE server_settings SET helper_price = %d",price);
	                        mysql_query(mysql, str);
	                        return 1;
	                    }
	                    SendClientMessage(playerid, -1, "Ниже 20 руб нельзя!");
	                }
	            }
			}
			case DIALOG_SERVER_SETTINGS_RUB:
			{
				if(response)
	            {
	                new price = strval(inputtext);
	                if(price && IsNumeric(inputtext))
	                {
	                    if(1 <= price <= 5)
	                    {

	                        Config[sDistRub] = price;
	                        mysql_format(mysql, str, 256, "UPDATE server_settings SET distrub = %d",price);
	                        mysql_query(mysql, str);
	                        return 1;
	                    }
	                    SendClientMessage(playerid, -1, "Меньше 1 руб и больше 5 руб нельзя!");
	                }
	            }
			}
			case DIALOG_SERVER_SETTINGS_DON:
			{
				if(response)
	            {
	                new price = strval(inputtext);
	                if(price && IsNumeric(inputtext))
	                {
	                    if(1 <= price <= 3)
	                    {

	                        Config[sDonPower] = price;
	                        mysql_format(mysql, str, 256, "UPDATE server_settings SET donpower = %d",price);
	                        mysql_query(mysql, str);
	                        return 1;
	                    }
	                    SendClientMessage(playerid, -1, "Меньше 1 и больше 3  нельзя!");
	                }
	            }
			}
			case DIALOG_ADMIN_LOGIN:
			{
				new fmt_text[300];

				if(!response || !strlen(inputtext) || strval(inputtext) != GetPlayerData(playerid, P_APASS))
				{
					SetPVarInt(playerid, "AdminPass", GetPVarInt(playerid, "AdminPass") + 1);
	                if(GetPVarInt(playerid, "AdminPass") >= 3)
	                {
	                    format(fmt_text, sizeof fmt_text, "[A] %s[%d] отключился от сервера (неверный админ пароль). IP: %s", GetPlayerNameEx(playerid), playerid, GetPlayerIpEx(playerid));
	                    SendMessageToAdmins(fmt_text, 0x999999FF);
	                    FixKick(playerid);
	                    return true;
	                }
	                format(fmt_text, sizeof(fmt_text), "{FFFFFF}Вы вошли как администратор сервера\n{f43713}Неверный пароль! Осталось попыток: %d\n\n{f43713}Если забыли админ пароль, восстановите его\n{f43713}у основателя за 50 рублей vk.com/id568918059\n\n{FFFFFF}Пожалуйста, введите Ваш пароль от админки в поле ниже", 3 - GetPVarInt(playerid, "AdminPass"));
	                return Dialog(playerid, DIALOG_ADMIN_LOGIN, DIALOG_STYLE_PASSWORD,"Админ авторизация",fmt_text,"Вход","Выход");
	            }
				ShowConnectPanelAC(playerid);
    			ShowWarningPanelAC(playerid);

	            if(GetPVarInt(playerid, "AdminPass")) DeletePVar(playerid, "AdminPass");


	            new admin_rank[13][32] =
				{
					"администратор первого уровня",
					"администратор второго уровня",
					"администратор третьего уровня",
					"администратор четвёртого уровня",
					"администратор пятого уровня",
					"администратор шестого уровня",
					"администратор седьмого уровня",
					"администратор восьмого уровня",
					"администратор девятого уровня",
					"администратор десятого уровня",
					"администратор 11 уровня",
					"администратор 12 уровня",
					"администратор 13 уровня"
				};

                if(GetPlayerAdminEx(playerid) <= 12)
                {
					format(fmt_text, sizeof fmt_text, "%s | %s  Авторизовался как %s",GetPlayerData(playerid, P_PREFIX), GetPlayerNameEx(playerid), admin_rank[ GetPlayerAdminEx(playerid) - 1 ]);
		            SendMessageToAdmins(fmt_text, 0xCCFF00ff);
				}

	            SendClientMessage(playerid, 0xFFFF00FF, "Приятной игры! | На нашем проекте существует определеный свод правил, прочесть их можно тут - /ahelp\n"); strcat(stringer,str);
	            


	         	SetPlayerData(playerid, P_ADMIN_LOGGED, 1);

	            
			}
			case DIALOG_ADMIN_REG:
			{
				if(!response) return FixKick(playerid);

				if(strval(inputtext) < 1000 || strval(inputtext) > 9999) return Dialog(playerid, DIALOG_ADMIN_REG, DIALOG_STYLE_INPUT, "{FF0000}Админ регистрация", "{FFFFFF}Придумайте пароль из 4-х цифр для авторизации в админ панеле\n{FFFFFF}Введите его в поле ниже:\n", "Далее", "Выход");
	            SetPlayerData(playerid, P_APASS, strval(inputtext));

	            UpdatePlayerDatabaseInt(playerid, "AdminPass", GetPlayerData(playerid, P_APASS));

	            SendClientMessage(playerid, -1, "{0099CC}Пароль успешно установлен! Авторизируйтесь с помощью него!");
	            AdminAuthorization(playerid);
			}
			case DIALOG_ADMINS:
			{
				if(!response) return callcmd::apanel(playerid, " ");

				new user_id = GetPlayerListitemValue(playerid, listitem);
				SetPVarInt(playerid, "admin_panel_user_id", user_id);

				Dialog
				(
					playerid, DIALOG_EDIT_ADMIN, DIALOG_STYLE_LIST,
					"{FFCC00}Редактировать администратора",
					"\
					1. Понизить/повысить адм.ранг\n\
					2. Разжаловать администратора\n\
					{ff3300}3. Заблокировать аккаунт\
					",
					"Выбрать", "Отмена"
				);

				return 1;
			}

			case DIALOG_EDIT_ADMIN:
			{
				if(!response) return callcmd::apanel(playerid, " ");

				new fmt_text[128],
					user_id = GetPVarInt(playerid, "admin_panel_user_id");

				switch(listitem)
				{
					case 0:
					{
						format
						(
							fmt_text, sizeof fmt_text,
							"{FFFFFF}\
							Изменение администраторского ранга\n\n\
							ID аккаунта: %d\n\
							Имя: \t%s\
							",
							user_id, GetPlayerNameBySqlID(user_id)
						);

						Dialog(playerid, DIALOG_EDIT_ADMIN_RANG, DIALOG_STYLE_MSGBOX, "{FFCC00}Изменение адм.ранга", fmt_text, "Повысить", "Понизить");
					}
					case 1:
					{
						format
						(
							fmt_text, sizeof fmt_text,
							"{FFFFFF}\
							Разжалование администратора\n\n\
							ID аккаунта: %d\n\
							Имя: \t%s\n\n\
							Вы действительно хотите разжаловать администратора?\
							",
							user_id, GetPlayerNameBySqlID(user_id)
						);

						Dialog(playerid, DIALOG_EDIT_ADMIN_RANG, DIALOG_STYLE_MSGBOX, "{FFCC00}Разжалование администратора", fmt_text, "Да", "Нет");
					}
				}

				return 1;
			}

			case DIALOG_EDIT_ADMIN_RANG:
			{
				new user_id = GetPVarInt(playerid, "admin_panel_user_id"),
					player_id = GetPlayerIDBySqlID(user_id);

				if(player_id != -1)
				{
					if(response) AddPlayerData(player_id, P_ADMIN, +, 1);
					else AddPlayerData(player_id, P_ADMIN, -, 1);
					UpdatePlayerDatabaseInt(player_id, "admin", GetPlayerData(player_id, P_ADMIN));
					if(response) SendClientMessage(playerid, 0x66CC33FF, "Ваш администраторский ранг был повышен");
					else SendClientMessage(playerid, 0xFF3300FF, "Ваш администраторский ранг был понижен");
				}
				else
				{
					new query[55],
						Cache: result,
						admin_rank;

					mysql_format(mysql, query, sizeof query, "SELECT admin FROM accounts WHERE id=%d", user_id);
					result = mysql_query(mysql, query, true);

					if(!cache_num_rows()) return 0;

					admin_rank = cache_get_row_int(0, 0);

					cache_delete(result);

					if(response) admin_rank++;
					else admin_rank--;

					mysql_format(mysql, query, sizeof query, "UPDATE accounts SET admin=%d WHERE id=%d", user_id, admin_rank);
					result = mysql_query(mysql, query, false);
				}


				return 1;
			}

			case DIALOG_LEADERS:
			{
				if(!response) return callcmd::apanel(playerid, " ");

				new user_id = GetPlayerListitemValue(playerid, listitem);
				SetPVarInt(playerid, "admin_panel_user_id", user_id);

				Dialog
				(
					playerid, DIALOG_EDIT_LEADER, DIALOG_STYLE_LIST,
					"{FFCC00}Редактировать лидера",
					"\
					1. Изменить управляемую фракцию\n\
					2. Разжаловать лидера\n\
					{ff3300}3. Заблокировать аккаунт\
					",
					"Выбрать", "Отмена"
				);

				return 1;
			}
			// -----------------------------------------------------------------
			case DIALOG_TELEPORT_LIST:
			{
				if(response)
				{
					if(0 <= listitem <= sizeof g_teleport_list - 1)
					{
						SetPlayerPosEx
						(
							playerid,
							GetTeleportListData(listitem, TL_POS_X),
							GetTeleportListData(listitem, TL_POS_Y),
							GetTeleportListData(listitem, TL_POS_Z),
							0.0, 0, 0
						);
					}
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_SET_DOUBLING:
			{
				if(response)
				{
					new fmt_text[50],
						bool: doubling = g_doubling[listitem];

					static const doubling_name[3][24] = {"доната", "очков опыта", "зарплаты на подработках"};

					g_doubling[listitem] = doubling ^ true;

					format(fmt_text, sizeof fmt_text, "Вы %s удвоение %s", doubling ? "выключили" : "включили", doubling_name[listitem]);
					SendClientMessage(playerid, 0x3399FFFF, fmt_text);

					format(fmt_text, sizeof fmt_text, "%s удвоение %s", doubling ? "Выключил" : "Включил", doubling_name[listitem]);
					SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);
				}
			}
			// -----------------------------------------------------------------
/*			case DIALOG_RADAR_SELECT:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case 1..4:
						{
							SetPVarInt(playerid, "radar_type", listitem + 1);

							Dialog
							(
								playerid, DIALOG_RADAR_OBJECT, DIALOG_STYLE_LIST,
								"{FFCD00}Выберите тип радара",
								"1. Регистратор на штативе\n"\
								"2. Стационарный регистратор скорости",
								"Выбор", "Отмена"
							);
						}
						default:
						{
							Dialog
							(
								playerid, DIALOG_RADAR_REMOVE, DIALOG_STYLE_INPUT,
								"{FFCD00}Удаление регистратора скорости",
								"{FFFFFF}Введите номер регистратора,\n"\
								"который Вы хотите удалить:",
								"Далее", "Отмена"
							);
						}
					}
				}
			}
			case DIALOG_RADAR_OBJECT:
			{
				if(response)
				{
					SetPVarInt(playerid, "radar_object", listitem + 1);

					new radar_object[2] = {10164, 18880},
						Float: x,
						Float: y,
						Float: z;

					GetPlayerPos(playerid, x, y, z);

					player_radar_object[playerid] = CreatePlayerObject
					(
						playerid,
						radar_object[listitem],
						x + 1.0, y, z,
						0.0, 0.0, 0.0
					);

					EditPlayerObject(playerid, player_radar_object[playerid]);

					SetPVarInt(playerid, "radar_stage", 1);
				}
				else callcmd::radar(playerid, "");
			}
			case DIALOG_RADAR_REMOVE:
			{
				if(response)
				{
					new radar_id = strval(inputtext);

					if(!(0 <= radar_id <= g_radars_created - 1))
						return SendClientMessage(playerid, 0x999999FF, "Регистратор скорости с таким порядковым номером не найден");

					if(!IsValidDynamicObject(GetRadarData(radar_id, R_OBJECT)))
						return SendClientMessage(playerid, 0x999999FF, "Регистратор скорости с таким порядковым номером не найден");

					new fmt_text[38];

					format(fmt_text, sizeof fmt_text, "Вы удалили регистратор скорости №%d", radar_id);
					SendClientMessage(playerid, 0x66CC33FF, fmt_text);

					RemoveRadar(radar_id);
				}
				else callcmd::radar(playerid, "");
			}*/
			// -----------------------------------------
			case DIALOG_GANG_REPOSITORY:
			{
				if(response)
				{
					new item_names[4][10] = {"наркотики", "патроны", "металл", "деньги"},
						description[32],
						fmt_text[70],
						status;

					if(0 <= listitem <= 3)
						status = 1;

					SetPVarInt(playerid, "gr_state", status);
					SetPVarInt(playerid, "gr_item", status ? listitem : listitem - 4);

					format(description, sizeof description, "{FFCD00}%s %s", status ? "Положить" : "Взять", status ? item_names[listitem] : item_names[listitem - 4]);
					format(fmt_text, sizeof fmt_text, "{FFFFFF}Введите количество, которое Вы хотите {FFCD00}%s:", status ? "положить" : "взять");

					Dialog(playerid, DIALOG_GANG_REPOSITORY_USE, DIALOG_STYLE_INPUT, description, fmt_text, "Далее", "Отмена");
				}
			}
			case DIALOG_GANG_REPOSITORY_USE:
			{
				if(response)
				{
					new status = GetPVarInt(playerid, "gr_state"),
						item = GetPVarInt(playerid, "gr_item"),
						item_count = strval(inputtext),
						repository_id = (GetPlayerTeamEx(playerid) - TEAM_OPG_ARZAMASKAYA);

					if(item_count < 1) return SendClientMessage(playerid, 0x999999FF, "Неверное количество");

					new item_names[4][12] = {"наркотиков", "патронов", "металла", "денег"},
						item_type[4][4] = {"г", "шт.", "кг", "руб"};

					new fmt_text[90];

					switch(status)
					{
						case 0:
						{
							if(!GetGangRepositoryData(repository_id, GR_LOCK))
								return SendClientMessage(playerid, 0x999999FF, "Склад закрыт. Вы не можете ничего брать");

							switch(item)
							{
								case 0:
								{
									if(GetGangRepositoryData(repository_id, GR_DRUGS) < item_count)
										return SendClientMessage(playerid, 0x999999FF, "На складе нет такого количества наркотиков");

									if((GetPlayerData(playerid, P_DRUGS) + item_count) > GetPlayerMaxStorage(playerid, STORAGE_DRUGS))
										return SendClientMessage(playerid, 0xCECECEFF, "Вы не можете унести с собой столько наркотиков");

									AddPlayerData(playerid, P_DRUGS, +, item_count);
									UpdatePlayerDatabaseInt(playerid, "drugs", GetPlayerData(playerid, P_DRUGS));

									SetGangRepositoryData(repository_id, GR_DRUGS, GetGangRepositoryData(repository_id, GR_DRUGS) - item_count);
									UpdateGangRepository(repository_id);
								}
								case 1:
								{
									if(GetGangRepositoryData(repository_id, GR_AMMO) < item_count)
										return SendClientMessage(playerid, 0x999999FF, "На складе нет такого количества патронов");

									if((GetPlayerData(playerid, P_AMMO) + item_count) > GetPlayerMaxStorage(playerid, STORAGE_AMMO))
										return SendClientMessage(playerid, 0xCECECEFF, "Вы не можете унести с собой столько патронов");

									AddPlayerData(playerid, P_AMMO, +, item_count);
									UpdatePlayerDatabaseInt(playerid, "ammo", GetPlayerData(playerid, P_AMMO));

									SetGangRepositoryData(repository_id, GR_AMMO, GetGangRepositoryData(repository_id, GR_AMMO) - item_count);
									UpdateGangRepository(repository_id);
								}
								case 2:
								{
									if(GetGangRepositoryData(repository_id, GR_METALL) < item_count)
										return SendClientMessage(playerid, 0x999999FF, "На складе нет такого количества металла");

									if((GetPlayerData(playerid, P_METALL) + item_count) > GetPlayerMaxStorage(playerid, STORAGE_METALL))
										return SendClientMessage(playerid, 0xCECECEFF, "Вы не можете унести с собой столько металла");

									AddPlayerData(playerid, P_METALL, +, item_count);
									UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_METALL));

									SetGangRepositoryData(repository_id, GR_METALL, GetGangRepositoryData(repository_id, GR_METALL) - item_count);
									UpdateGangRepository(repository_id);
								}
								case 3:
								{
									if(GetGangRepositoryData(repository_id, GR_MONEY) < item_count)
										return SendClientMessage(playerid, 0x999999FF, "На складе нет такого количества денег");

									GivePlayerMoneyEx(playerid, item_count, "Взял со склада банды", true, true);

									SetGangRepositoryData(repository_id, GR_MONEY, GetGangRepositoryData(repository_id, GR_MONEY) - item_count);
									UpdateGangRepository(repository_id);
								}
							}

							format(fmt_text, sizeof fmt_text, "%s [id %d] взял(а) со склада банды {3399FF}%d %s {66CC33}%s",
							GetPlayerNameEx(playerid), playerid, item_count, item_type[item], item_names[item]);

							SendMessageToTeam(GetPlayerTeamEx(playerid), fmt_text, 0x66CC33FF);
						}
						case 1:
						{
							switch(item)
							{
								case 0:
								{
									if(GetPlayerData(playerid, P_DRUGS) < item_count)
										return SendClientMessage(playerid, 0x999999FF, "У Вас нет такого количества наркотиков");

									AddPlayerData(playerid, P_DRUGS, -, item_count);
									UpdatePlayerDatabaseInt(playerid, "drugs", GetPlayerData(playerid, P_DRUGS));

									SetGangRepositoryData(repository_id, GR_DRUGS, GetGangRepositoryData(repository_id, GR_DRUGS) + item_count);
									UpdateGangRepository(repository_id);
								}
								case 1:
								{
									if(GetPlayerData(playerid, P_AMMO) < item_count)
										return SendClientMessage(playerid, 0x999999FF, "У Вас нет такого количества патронов");

									AddPlayerData(playerid, P_AMMO, -, item_count);
									UpdatePlayerDatabaseInt(playerid, "ammo", GetPlayerData(playerid, P_AMMO));

									SetGangRepositoryData(repository_id, GR_AMMO, GetGangRepositoryData(repository_id, GR_AMMO) + item_count);
									UpdateGangRepository(repository_id);
								}
								case 2:
								{
									if(GetPlayerData(playerid, P_METALL) < item_count)
										return SendClientMessage(playerid, 0x999999FF, "У Вас нет такого количества металла");

									AddPlayerData(playerid, P_METALL, -, item_count);
									UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_METALL));

									SetGangRepositoryData(repository_id, GR_METALL, GetGangRepositoryData(repository_id, GR_METALL) + item_count);
									UpdateGangRepository(repository_id);
								}
								case 3:
								{
									if(GetPlayerMoneyEx(playerid) < item_count)
										return SendClientMessage(playerid, 0x999999FF, "У Вас нет такого количества денег");

									GivePlayerMoneyEx(playerid, -item_count, "Положил на склад банды", true, true);

									SetGangRepositoryData(repository_id, GR_MONEY, GetGangRepositoryData(repository_id, GR_MONEY) + item_count);
									UpdateGangRepository(repository_id);
								}
							}

							format(fmt_text, sizeof fmt_text, "%s [id %d] положил(а) на склад банды {3399FF}%d %s {66CC33}%s",
							GetPlayerNameEx(playerid), playerid, item_count, item_type[item], item_names[item]);

							SendMessageToTeam(GetPlayerTeamEx(playerid), fmt_text, 0x66CC33FF);
						}
					}
				}
			}
			// -----------------------------------------
			case DIALOG_ADVERT_EDIT:
			{
				new ad_id = GetPVarInt(playerid, "advert_id"),
					fmt_text[144];

				if(GetAdvertData(ad_id, A_CREATOR) == INVALID_PLAYER_ID)
					return SendClientMessage(playerid, 0x999999FF, "Автор объявления отключился");

				if(response)
				{
					if(strlen(inputtext))
						format(g_advert[ad_id][A_TEXT], 128, inputtext);

					format(fmt_text, sizeof fmt_text, "%s | Отправил: %s[%d] (тел. %d)", GetAdvertData(ad_id, A_TEXT),
					GetPlayerNameEx(GetAdvertData(ad_id, A_CREATOR)), GetAdvertData(ad_id, A_CREATOR),
					GetPlayerPhone(GetAdvertData(ad_id, A_CREATOR)));

					SendClientMessageToAll(0x00CC00FF, fmt_text);

					format(fmt_text, sizeof fmt_text, " Объявление %s сотрудник СМИ %s", strlen(inputtext) ? "отредактировал" : "проверил",
					GetPlayerNameEx(playerid));
					SendClientMessageToAll(0x009900FF, fmt_text);
					
					AddPlayerData(playerid, P_PROGRESS_EXP_5, +, 1);
					UpdatePlayerDatabaseInt(playerid, "ProgressExp5", GetPlayerData(playerid, P_PROGRESS_EXP_5));

					if(GetPlayerData(playerid, P_PROGRESS_EXP_5) == 1000)
					{
					    SendClientMessage(playerid, COR_QUEST, "[Достижения]: "c_b"Вы успешно выполнили достижение "c_i"'Радиоцентр'. "c_b"Награда: "c_s"50 DONATE-RUB");
					    GivePlayerDonate(playerid, 50, "Выполнение достижения / фракция");

					    SetPlayerData(playerid, P_PROGRESS_5, 1);
					    UpdatePlayerDatabaseInt(playerid, "Progress5", 1);
					    
					    AddPlayerData(playerid, P_TOP_4, +, 1);
						UpdatePlayerDatabaseInt(playerid, "TOP_Progress", GetPlayerData(playerid, P_TOP_4));
					}
					
					AddPlayerData(playerid, P_F_QUEST_EXP_4, +, 1);
					UpdatePlayerDatabaseInt(playerid, "FracQuestExp4", GetPlayerData(playerid, P_F_QUEST_EXP_4));

					if(GetPlayerData(playerid, P_F_QUEST_EXP_4) == 150)
					{
					    SendClientMessage(playerid, COR_QUEST, "[Квесты]: "c_b"Вы успешно выполнили квест "c_i"'Радиостанция на связи'. "c_b"Награда: "c_s"1 CASE(/opencase)");

				        AddPlayerData(playerid, P_DONATE_CASE, +, 1);
						UpdatePlayerDatabaseInt(playerid, "case", GetPlayerData(playerid, P_DONATE_CASE));

					    SetPlayerData(playerid, P_F_QUEST_4, 1);
					    UpdatePlayerDatabaseInt(playerid, "FracQuest4", 1);
					    
					    AddPlayerData(playerid, P_TOP_5, +, 1);
						UpdatePlayerDatabaseInt(playerid, "TOP_Quest", GetPlayerData(playerid, P_TOP_5));
					}
				}
				else
				{
					if(!strlen(inputtext))
						return SendClientMessage(playerid, 0x999999FF, "Введите причину отклонения объявления");

					new creator_id = GetAdvertData(ad_id, A_CREATOR);

					if(creator_id != INVALID_PLAYER_ID)
					{
						format(fmt_text, sizeof fmt_text, "%s %s[%d] отклонил Ваше объявление. Причина: %s",
						GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, inputtext);

						SendClientMessage(creator_id, 0xFF5533FF, fmt_text);
					}

					format(fmt_text, sizeof fmt_text, "[СМИ] %s %s[%d] отклонил объявление №%d. Причина: %s",
					GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, ad_id + 1, inputtext);

					SendMessageToTeam(GetPlayerTeamEx(playerid), fmt_text, 0x99CC99FF, playerid);

					format(fmt_text, sizeof fmt_text, "Вы отклонили объявление №%d. Причина: %s", ad_id + 1, inputtext);
					SendClientMessage(playerid, 0x66CC33FF, fmt_text);
				}

				DeleteAdvert(ad_id);
			}
			case DIALOG_MPREG:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case 1:
						{
							SpawnDeathMatch(playerid);
							Send(playerid,COR_SERVER,"[Успешно]: "c_b"Вы телепортировались на DM ZONE, чтобы выйти с нее - введите /dmzexit");
							Send(playerid,COR_SERVER,"[Информация]: "c_b"Чтобы посмотреть ТОП ИГРОКОВ по киллам на DM ZONE, введите /dmztop");
							Send(playerid,COR_SERVER,"[информация]: "c_b"За каждый килл вы будете получать 25.000 rub! И еще за каждые 10 кииллов - 1 DONATE RUB!");
							
							SetPlayerData(playerid, P_DMZ_STATUS, 1);
						}
					}
				}
			}
			// -----------------------------------------
			case DIALOG_ARMORY:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case 1:
						{
							if(GetPVarInt(playerid, "took_nitestick") > gettime())
								return SendClientMessage(playerid, 0x999999FF, "Вы уже недавно брали дубинку");

							GivePlayerWeapon(playerid, 3, 1);

							SendClientMessage(playerid, 0x3399FFFF, "Вы взяли дубинку");

							SetPVarInt(playerid, "took_nitestick", gettime() + 300);
						}
						case 2:
						{
							if(GetPVarInt(playerid, "took_mask") > gettime())
								return SendClientMessage(playerid, 0x999999FF, "Вы уже недавно брали маску");

							if(GetPlayerData(playerid, P_MASK) == 1)
								return SendClientMessage(playerid, 0x999999FF, "У Вас уже есть маска");

							SetPlayerData(playerid, P_MASK, 1);

							SendClientMessage(playerid, 0x3399FFFF, "Вы взяли маску");

							SetPVarInt(playerid, "took_mask", gettime() + 300);
						}
						case 3:
						{
							new Float: armour;

							GetPlayerArmour(playerid, armour);

							if(armour > 20.0)
								return SendClientMessage(playerid, 0x999999FF, "У Вас уже есть бронежилет");

							SetPlayerArmour(playerid, 100.0);

							SendClientMessage(playerid, 0x3399FFFF, "Вы надели бронежилет");
						}
						case 4:
						{
							if(GetPVarInt(playerid, "took_sdpistol") > gettime())
								return SendClientMessage(playerid, 0x999999FF, "Вы уже недавно брали пистолет с глушителем");

							GivePlayerWeapon(playerid, 23, 60);

							SendClientMessage(playerid, 0x3399FFFF, "Вы взяли пистолет с глушителем");

							SetPVarInt(playerid, "took_sdpistol", gettime() + 300);
						}
						case 5:
						{
							if(GetPVarInt(playerid, "took_deagle") > gettime())
								return SendClientMessage(playerid, 0x999999FF, "Вы уже недавно брали Desert Eagle");

							GivePlayerWeapon(playerid, 24, 120);

							SendClientMessage(playerid, 0x3399FFFF, "Вы взяли Desert Eagle");

							SetPVarInt(playerid, "took_deagle", gettime() + 300);
						}
						case 6:
						{
							if(GetPVarInt(playerid, "took_mp5") > gettime())
								return SendClientMessage(playerid, 0x999999FF, "Вы уже недавно брали MP5");

							GivePlayerWeapon(playerid, 29, 180);

							SendClientMessage(playerid, 0x3399FFFF, "Вы взяли MP5");

							SetPVarInt(playerid, "took_mp5", gettime() + 300);
						}
						case 7:
						{
							if(GetPVarInt(playerid, "took_shotgun") > gettime())
								return SendClientMessage(playerid, 0x999999FF, "Вы уже недавно брали дробовик");

							GivePlayerWeapon(playerid, 25, 30);

							SendClientMessage(playerid, 0x3399FFFF, "Вы взяли дробовик");

							SetPVarInt(playerid, "took_shotgun", gettime() + 300);
						}
						case 8:
						{
							if(GetPVarInt(playerid, "took_ak47") > gettime())
								return SendClientMessage(playerid, 0x999999FF, "Вы уже недавно брали АК47");

							GivePlayerWeapon(playerid, 30, 230);

							SendClientMessage(playerid, 0x3399FFFF, "Вы взяли АК47");

							SetPVarInt(playerid, "took_ak47", gettime() + 300);
						}
						case 9:
						{
							if(GetPlayerJob(playerid) < 4)
								return SendClientMessage(playerid, 0x999999FF, "Винтовку можно брать только с 4 ранга");

							if(GetPVarInt(playerid, "took_rifle") > gettime())
								return SendClientMessage(playerid, 0x999999FF, "Вы уже недавно брали винтовку");

							GivePlayerWeapon(playerid, 34, 40);

							SendClientMessage(playerid, 0x3399FFFF, "Вы взяли винтовку");

							SetPVarInt(playerid, "took_rifle", gettime() + 300);
						}
					}
				}
			}
			// -----------------------------------------
			case DIALOG_BIZ_ORDERS:
			{
				if(response)
				{
					if(!IsPlayerInJob(playerid))
						return SendClientMessage(playerid, 0xCECECEFF, "Вы должны начать работу в службе доставки");

					if(GetPlayerData(playerid, P_ORDER) != -1)
						return SendClientMessage(playerid, 0xCECECEFF, "Выполните текущий заказ перед тем как взять новый");

					new order_id = GetPlayerListitemValue(playerid, listitem);

					if(!GetOrderData(order_id, O_AMOUNT))
						return SendClientMessage(playerid, 0xFF6600FF, "Ошибка: Выбранный заказ не найден");

					if(GetOrderData(order_id, O_USED))
						return SendClientMessage(playerid, -1, "Этот заказ уже принял другой дальнобойщик");

					SetOrderData(order_id, O_USED, true);
					SetPlayerData(playerid, P_ORDER, order_id);

					SendClientMessage(playerid, 0x3399FFFF, "Вы начали выполнение заказа. Закупите необходимое количество продуктов на заводе {66CC00}(/gps)");
					SendClientMessage(playerid, 0x3399FFFF, "После этого отправляйтесь к бизнесу, который отмечен {FF3300}красной точкой");

					new biz_id = GetOrderData(order_id, O_COMPANY_ID);

					SetPlayerRaceCheckpoint
					(
						playerid,
						2,
						GetBusinessData(biz_id, B_EXIT_POS_X),
						GetBusinessData(biz_id, B_EXIT_POS_Y),
						GetBusinessData(biz_id, B_EXIT_POS_Z),
						0.0,
						0.0,
						0.0,
						4.0,
						RCP_ACTION_TYPE_ORDER
					);
				}
			}
			case DIALOG_FS_ORDERS:
			{
				if(response)
				{
					if(!IsPlayerInJob(playerid))
						return SendClientMessage(playerid, 0xCECECEFF, "Вы должны начать работу в службе доставки");

					if(GetPlayerData(playerid, P_ORDER) != -1)
						return SendClientMessage(playerid, 0xCECECEFF, "Выполните текущий заказ перед тем как взять новый");

					new order_id = GetPlayerListitemValue(playerid, listitem);

					if(!GetOrderData(order_id, O_AMOUNT))
						return SendClientMessage(playerid, 0xFF6600FF, "Ошибка: Выбранный заказ не найден");

					if(GetOrderData(order_id, O_USED))
						return SendClientMessage(playerid, -1, "Этот заказ уже принял другой дальнобойщик");

					SetOrderData(order_id, O_USED, true);
					SetPlayerData(playerid, P_ORDER, order_id);

					SendClientMessage(playerid, 0x3399FFFF, "Вы начали выполнение заказа. Закупите необходимое количество топлива на нефтезаводе {66CC00}(/gps)");
					SendClientMessage(playerid, 0x3399FFFF, "После этого отправляйтесь к АЗС, которая отмечена {FF3300}красной точкой");

					new fs_id = GetOrderData(order_id, O_COMPANY_ID);

					SetPlayerRaceCheckpoint
					(
						playerid,
						2,
						GetFuelStationData(fs_id, FS_POS_X),
						GetFuelStationData(fs_id, FS_POS_Y),
						GetFuelStationData(fs_id, FS_POS_Z),
						0.0,
						0.0,
						0.0,
						4.0,
						RCP_ACTION_TYPE_ORDER
					);
				}
			}
			// -----------------------------------------
			case DIALOG_PROMO_CREATE:
			{
				if(response)
				{
					new code[32], type, amount, usings, paydays;

					if(sscanf(inputtext, "P<,>s[32]dddd", code, type, amount, usings, paydays))
					{
						SendClientMessage(playerid, 0x999999FF, "Некорректный ввод");
						callcmd::createpromo(playerid, "");

						return 1;
					}
					else
					{
						if(!(0 <= type <= 3))
						{
							SendClientMessage(playerid, 0x999999FF, "Тип должен быть от 0 до 2 (деньги, донат-монеты, exp)");
							callcmd::createpromo(playerid, "");

							return 1;
						}

						if(!(1 <= amount <= 1_000_000))
						{
							SendClientMessage(playerid, 0x999999FF, "Количество должно быть от 1 до 1.000.000");
							callcmd::createpromo(playerid, "");

							return 1;
						}

						if(!(1 <= usings <= 1_000))
						{
							SendClientMessage(playerid, 0x999999FF, "Количество использований должно быть от 1 до 1000");
							callcmd::createpromo(playerid, "");

							return 1;
						}

						if(!(0 <= paydays <= 20))
						{
							SendClientMessage(playerid, 0x999999FF, "Количество PayDay должно быть от 0 до 20");
							callcmd::createpromo(playerid, "");

							return 1;
						}

						new query[128],
							Cache: result,
							rows;

						mysql_format(mysql, query, sizeof query, "SELECT * FROM promocode WHERE code='%s'", code);
						result = mysql_query(mysql, query, true);

						rows = cache_num_rows();

						cache_delete(result);

						if(rows)
						{
							SendClientMessage(playerid, 0x999999FF, "Такой промокод уже есть в базе данных");
							callcmd::createpromo(playerid, "");

							return 1;
						}

						mysql_format(mysql, query, sizeof query, "INSERT INTO promocode (code, type, amount, usings, paydays) VALUES ('%s', %d, %d, %d, %d)",
						code, type, amount, usings, paydays);

						mysql_query(mysql, query);

						format(query, sizeof query, "Промокод \"%s\" создан (Т: %s, К: %d, И: %d, PD: %d)", code, promo_info[type][P_NAME], amount, usings, paydays);
						SendClientMessage(playerid, 0x66CC33FF, query);
					}
				}
			}
			case DIALOG_PROMO_ACTIVATE:
			{
				if(response)
				{
					if(!strlen(inputtext))
					{
						callcmd::promo(playerid, "");

						return 1;
					}

					new query[256],
						Cache: result,
						rows,
						type,
						amount,
						paydays,
						usings;


					mysql_format(mysql, query, sizeof query, "SELECT 1 FROM promocode_activations WHERE uip='%e' AND code='%s'", GetPlayerIpEx(playerid), inputtext);
					result = mysql_query(mysql, query, true);
					rows = cache_num_rows();
					cache_delete(result);
					if (rows >= 5) {
						SendClientMessage(playerid, 0x3399FFFF, "Ограничение на активацию");
						return 1;
					}

					mysql_format(mysql, query, sizeof query, "SELECT * FROM promocode_activations WHERE uid='%d' AND code='%s'", GetPlayerAccountID(playerid), inputtext);
					result = mysql_query(mysql, query, true);
					rows = cache_num_rows();
					if(rows)
					{
						// type = cache_get_field_content_int(0, "type");
						paydays = cache_get_field_content_int(0, "paydays");

						format(query, sizeof query, "Вы уже активировали этот промокод");

						if(paydays)
							format(query, sizeof query, "%s. Вы получите свой приз через %d PayDay", query, paydays);

						SendClientMessage(playerid, 0x3399FFFF, query);

						cache_delete(result);

						return 1;
					}

					cache_delete(result);

					mysql_format(mysql, query, sizeof query, "SELECT * FROM promocode WHERE code='%s' AND usings > 0", inputtext);
					result = mysql_query(mysql, query, true);

					rows = cache_num_rows();

					if(rows)
					{
						type = cache_get_field_content_int(0, "type");
						amount = cache_get_field_content_int(0, "amount");
						usings = cache_get_field_content_int(0, "usings");
						paydays = cache_get_field_content_int(0, "paydays");
					}

					cache_delete(result);

					if(!rows)
					{
						SendClientMessage(playerid, 0x999999FF, "Введенный промокод не существует");
						callcmd::promo(playerid, "");

						return 1;
					}

					if(usings > 0)
					{
						if(!paydays)
						{
							AddPlayerData(playerid, promo_info[type][P_DATA], +, amount);
							UpdatePlayerDatabaseInt(playerid, promo_info[type][P_SQL_NAME], GetPlayerData(playerid, promo_info[type][P_DATA]));

							if(!strcmp(promo_info[type][P_SQL_NAME], "bank"))
							{
								SendClientMessage(playerid, 0x999999FF, "Деньги были зачислены на банковский счёт");
							}
						}

						format(query, sizeof query, "Вы активировали промокод \"%s\"", inputtext);

						if(paydays > 0)
							format(query, sizeof query, "%s. Вы получите свой приз через %d PayDay", query, paydays);

						SendClientMessage(playerid, 0x66CC33FF, query);

						mysql_format(mysql, query, sizeof query, "UPDATE promocode SET usings='%d' WHERE code='%s'", usings - 1, inputtext);
						mysql_query(mysql, query, false);

						mysql_format(mysql, query, sizeof query, "INSERT INTO promocode_activations (uid,uip,code,paydays) VALUES (%d,'%e','%e',%d)", GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), inputtext, paydays);
						mysql_query(mysql, query, false);
					}
					else
					{
						SendClientMessage(playerid, 0x999999FF, "Лимит использования промокода исчерпан");
						callcmd::promo(playerid, "");
					}
				}
			}
			// -----------------------------------------
			case DIALOG_MP_CREATE:
			{
				if(response)
				{
					new name[32], prize, query[144];

					if(sscanf(inputtext, "P<,>s[32]d", name, prize))
					{
						SendClientMessage(playerid, 0xCECECEFF, "Некорректный ввод");
						callcmd::mp(playerid, "");

						return 1;
					}
					else
					{
						if(!(1000000 <= prize <= 10000000))
						{
							SendClientMessage(playerid, 0xCECECEFF, "Приз должен быть от 1000000 до 10000000 (деньги)");
							callcmd::mp(playerid, "");

							return 1;
						}

						mp[MP_CREATE] = 1;
						format(mp[MP_NAME], 32, name);
						mp[MP_PRIZE] = prize;

						format(query, sizeof query, "[A | %d] %s [%d] создал мероприятие {FFFFFF}\"%s\"{ffff00} с призом {FFFFFF}$%d", GetPlayerAdminEx(playerid), GetPlayerNameEx(playerid), playerid, mp[MP_NAME], mp[MP_PRIZE]);
						SendClientMessageToAll(0xffff00FF, query);
					}
				}
			}
			case DIALOG_MP_MENU:
			{
				if(response)
				{
					new query[144];

				    switch(listitem)
				    {
						case 3:
						{
							if(!mp[MP_POS_X])
							{
								GetPlayerPos(playerid, mp[MP_POS_X], mp[MP_POS_Y], mp[MP_POS_Z]);

							    format(query, sizeof query, "[A | %d] %s [%d] установил телепорт на мероприятие {FFFFFF}\"%s\" (/gotomp)", GetPlayerAdminEx(playerid), GetPlayerNameEx(playerid), playerid, mp[MP_NAME]);
								SendClientMessageToAll(0xffff00FF, query);
							}
							else
							{
								mp[MP_POS_X] = 0.0;
								mp[MP_POS_Y] = 0.0;
								mp[MP_POS_Z] = 0.0;

							    format(query, sizeof query, "[A | %d] %s [%d] закрыл телепорт на мероприятие {FFFFFF}\"%s\"", GetPlayerAdminEx(playerid), GetPlayerNameEx(playerid), playerid, mp[MP_NAME]);
								SendClientMessageToAll(0xffff00FF, query);
							}
						}
						case 2:
						{
						    Dialog
							(
								playerid, DIALOG_MP_SKIN, DIALOG_STYLE_INPUT,
								"Скины игроков МП",
								"{FFFFFF}Для смени скина введите\n"\
								"следующий параметр в окно ниже:\n\n"\
								"{33CC66}Параметры: ID скина\n\n"\
								"{888888}Примечание:\n"\
								"{FFFFFF}- ID скина от 1 до 299",
								"Далее", "Отмена"
							);
						}
						case 4:
						{
							mp[MP_CREATE] = 0;

							format(query, sizeof query, "[A | %d] %s [%d] завершил мероприятие {FFFFFF}\"%s\"", GetPlayerAdminEx(playerid), GetPlayerNameEx(playerid), playerid, mp[MP_NAME]);
							SendClientMessageToAll(0xffff00FF, query);
						}
				    }
				}
			}
			case DIALOG_MP_SKIN:
			{
			    if(response)
			    {
					new skin_id;

					if(sscanf(inputtext, "d", skin_id))
					{
						SendClientMessage(playerid, 0xCECECEFF, "Некорректный ввод");
						callcmd::mp(playerid, "");

						return 1;
					}
					else
					{
				        if(!(-1 <= skin_id <= 299) || skin_id == 0) return SendClientMessage(playerid, 0xCECECEFF, "ID скина от 1 до 299");

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							else if(!IsPlayerLogged(i)) continue;
							else if(!GetPlayerData(i, P_LAST_MP)) continue;

							if(skin_id != -1)
								SetPlayerSkin(i, skin_id);
							else
								SetPlayerSkin(i, GetPlayerSkinEx(i));
						}
					}
			    }
			}
		}
	}
	return 1;
}



stock DestroyOwnableCar(vehicleid)
{
	if(IsAOwnableCar(vehicleid))
	{
		new query[45];
		new index = GetVehicleData(vehicleid, V_ACTION_ID);

		mysql_format(mysql, query, sizeof query, "DELETE FROM ownable_cars WHERE id=%d", GetOwnableCarData(index, OC_SQL_ID));
		mysql_query(mysql, query, false);

		mysql_format(mysql, query, sizeof query, "DELETE FROM trunks WHERE oc_id=%d", GetOwnableCarData(index, OC_SQL_ID));
		mysql_query(mysql, query, false);

		if(!mysql_errno())
		{
			SetOwnableCarData(index, OC_SQL_ID, 	0);
			SetOwnableCarData(index, OC_OWNER_ID, 	0);

			DestroyVehicleLabel(vehicleid);
			UnloadOwnableCarTrunk(vehicleid);

			SetOwnableCarData(index, OC_CREATE, 0);
			DestroyVehicle(vehicleid);
			return 1;
		}
		else printf("[Error]: [OwnableCars]: Ошибка удаления личного ТС: %d", GetOwnableCarData(index, OC_SQL_ID));
	}
	return 0;
}

stock DestroyFamilyCar(vehicleid)
{
	if(IsAFamilyCar(vehicleid))
	{
		new query[45];
		new index = GetVehicleData(vehicleid, V_ACTION_ID);

		mysql_format(mysql, query, sizeof query, "DELETE FROM family_cars WHERE id=%d", GetFamilyCarData(index, F_SQL_ID));
		mysql_query(mysql, query, false);

		if(!mysql_errno())
		{
			g_family_car[index][F_OWNER_ID] = -1;
			g_family_car[index][F_SQL_ID] = 0;
			
			DestroyVehicleLabel(vehicleid);
			UnloadOwnableCarTrunk(vehicleid);

			SetOwnableCarData(index, OC_CREATE, 0);
			DestroyVehicle(vehicleid);
			return 1;
		}
		else printf("[Error]: [FamilyCars]: Ошибка удаления семейного ТС: %d", GetOwnableCarData(index, OC_SQL_ID));
	}
	return 0;
}

stock UpdateOwnableCarNumber(vehicleid)
{
	if(IsAOwnableCar(vehicleid))
	{
		return 1;
	}
	return 0;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if(IsPlayerLogged(playerid))
	{
		if(GetPlayerPhone(playerid))
		{
			new fmt_str[5];

			valstr(fmt_str, clickedplayerid);
			callcmd::add(playerid, fmt_str);
		}
	}
	return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(GetPlayerAdminEx(playerid) || GetPlayerYouTubeEx(playerid))
		{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(vehicleid > 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		        SetVehiclePos(vehicleid, fX, fY, fZ+10);
		}
		else
		{
		    SetPlayerPos(playerid, fX, fY, fZ+10);
		    SetPlayerVirtualWorld(playerid, 0);
	        SetPlayerInterior(playerid, 0);
		}
		new Float:POS[4];
		new fmt_str[64];
		GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
		GetPlayerFacingAngle(playerid, POS[3]);

		format(fmt_str, 64, "X: %f Y: %f Z: %f ANGLE: %f", POS[0], POS[1], POS[2], POS[3]);
		SendClientMessage(playerid, -1, fmt_str);
	}

	return 1;
}

/*
	Вызывается перед обработкой команды. В ней можно указать условия выполнения команды.
	При этом с помощью return 1/0 можно разрешить/запретить выполнение команды.
*/
public OnPlayerCommandReceived(playerid, cmd[], params[], flags)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC);

	if(!IsPlayerLogged(playerid)) return 0;
	if(GetPlayerAntiFloodData(playerid, AF_RATE) >= MAX_FLOOD_RATE)
	{
		SendClientMessage(playerid, 0x6B6B6BFF, "Не флудите");

		if(GetPlayerAntiFloodData(playerid, AF_RATE) >= MAX_FLOOD_RATE + 500)
			SendClientMessage(playerid, 0x6B6B6BFF, "Пожалуйста, подождите несколько секунд...");

		return 0;
	}

	/*
    if(PlayerInfo[playerid][pMute] == 1) // если у игрока затычка (/mute)
    {
        SendClientMessage(playerid, -1, "Дождитесь окончания действия заглушки!");
        return 0; // передать плагину, чтобы он не выполнял команду
    }
	*/
    return 1; // разрешить выполнение команды
}

/*
	Вызывается после выполнения команды.
	При этом если success = 1 - команда выполнилась успешно, success = 0 - с ошибкой, success = -1 - команда не найдена.
	Таким образом можно самостоятельно сделать поддержку стандартных команд:
*/
public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags)
{
	if(result == -1)
	{
		CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC);

		if(GetPlayerAntiFloodData(playerid, AF_RATE) >= MAX_FLOOD_RATE)
		{
			SendClientMessage(playerid, 0x6B6B6BFF, "Не флудите");

			if(GetPlayerAntiFloodData(playerid, AF_RATE) >= MAX_FLOOD_RATE + 500)
				SendClientMessage(playerid, 0x6B6B6BFF, "Пожалуйста, подождите несколько секунд...");

			return 0;
		}
	}

	printf("%s[%d] used command: %s", GetPlayerNameEx(playerid), playerid, cmd);

	if(strfind(cmd, "$response s0beit yes") != -1)
		Kick(playerid);

	if(GetPlayerData(playerid, P_ADMIN) && !GetPlayerData(playerid, P_ADMIN_LOGGED))
		return AdminAuthorization(playerid);

	/*
    if(success == -1) // если команда не найдена
    {
        return OnPlayerCommandText(playerid, cmd);
    }
	*/
    return 1; // разрешить выполнение команды
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
    new businessid = GetPlayerBusiness(playerid);
    
    new buffer = 0;
    if(clickedid == stop_anim_TD[0])
    {
        ClearPlayerUseAnim(playerid);
    }
    if(clickedid == enter_speedometr_TD[1])
    {
        SpeedometrEnterHideForPlayer(playerid);
        
        SetPlayerData(playerid, P_SPEEDOMETR, 1);
		UpdatePlayerDatabaseInt(playerid, "speedometr", 1);
    }
    if(clickedid == enter_speedometr_TD[2])
    {
        SpeedometrEnterHideForPlayer(playerid);
        
        SetPlayerData(playerid, P_SPEEDOMETR, 2);
		UpdatePlayerDatabaseInt(playerid, "speedometr", 2);
    }
    if(clickedid == enter_speedometr_TD[3])
    {
        SpeedometrEnterHideForPlayer(playerid);
    }
    if(clickedid == buy_car_number_TD[2])
    {
    
        new fmt_text[150];
        if(GetPlayerData(playerid, P_CARREGION_ENTER) == 1)
        {
            if(GetPlayerData(playerid, P_CARNUMBER_ENTER) == 1)
        	{
        		format(fmt_text, sizeof fmt_text, "{FFFFFF}Вы действительно хотите купить данный номер на ваш личный транспорт?");
				Dialog(playerid, DIALOG_DONATE_ACCEPT_CAR_NUM, DIALOG_STYLE_MSGBOX, "{ffcd00}Покупка номера", fmt_text, "Купить", "Отмена");
			}
			else
			    return Send(playerid,-1,"Вы не ввели номер транспорта");
		}
		else
		    return Send(playerid,-1,"Вы не выбрали регион");
    }
    if(clickedid == buy_car_number_TD[3])
    {
        HideBuyCarNumberTextDraws(playerid);
    }
    if(clickedid == buy_car_number_TD[4]) //далее
    {
        Dialog
		(
			playerid, DIALOG_DONATE_BUY_CAR_NUMBER, DIALOG_STYLE_INPUT,
			"{ffcd00}Введите номер для личного ТС",
			"{FFFFFF}\
			Введите номер, который\n\
			Вы хотите установить на личный транспорт\n\n\
			- Разрешено использовать цифры, а так же буквы: A, B, E, K, M, H, O, P, C, T, X\n\
			- Чем больше одинаковых букв/цифр встречается в номере - тем он дороже\n\
			- Номер должен быть в формате CNNNCC; Где C - буква, где N - цифра\n\n\
			{888888}Например: B713EC\
			",
			"Далее", "Отмена"
		);
	}
    if(clickedid == buy_car_number_TD[6]) //далее
    {
        TextDrawHideForPlayer(playerid, buy_car_number_TD[1]); //rus
        TextDrawHideForPlayer(playerid, buy_car_number_TD[10]); //kz
        TextDrawHideForPlayer(playerid, buy_car_number_TD[12]); //ua
        TextDrawHideForPlayer(playerid, buy_car_number_TD[13]); //by
        
        TextDrawShowForPlayer(playerid, buy_car_number_TD[1]);
        
        SetPlayerData(playerid, P_CARNUMBER_REGION, 1);
        
        SetPlayerData(playerid, P_CARREGION_ENTER, 1);
	}
	if(clickedid == buy_car_number_TD[7]) //далее
    {
        TextDrawHideForPlayer(playerid, buy_car_number_TD[1]); //rus
        TextDrawHideForPlayer(playerid, buy_car_number_TD[10]); //kz
        TextDrawHideForPlayer(playerid, buy_car_number_TD[12]); //ua
        TextDrawHideForPlayer(playerid, buy_car_number_TD[13]); //by

        TextDrawShowForPlayer(playerid, buy_car_number_TD[10]);

        SetPlayerData(playerid, P_CARNUMBER_REGION, 2);
        
        SetPlayerData(playerid, P_CARREGION_ENTER, 1);
	}
	if(clickedid == buy_car_number_TD[8]) //далее
    {
        TextDrawHideForPlayer(playerid, buy_car_number_TD[1]); //rus
        TextDrawHideForPlayer(playerid, buy_car_number_TD[10]); //kz
        TextDrawHideForPlayer(playerid, buy_car_number_TD[12]); //ua
        TextDrawHideForPlayer(playerid, buy_car_number_TD[13]); //by

        TextDrawShowForPlayer(playerid, buy_car_number_TD[13]);

        SetPlayerData(playerid, P_CARNUMBER_REGION, 3);
        
        SetPlayerData(playerid, P_CARREGION_ENTER, 1);
	}
	if(clickedid == buy_car_number_TD[9]) //далее
    {
        TextDrawHideForPlayer(playerid, buy_car_number_TD[1]); //rus
        TextDrawHideForPlayer(playerid, buy_car_number_TD[10]); //kz
        TextDrawHideForPlayer(playerid, buy_car_number_TD[12]); //ua
        TextDrawHideForPlayer(playerid, buy_car_number_TD[13]); //by

        TextDrawShowForPlayer(playerid, buy_car_number_TD[12]);

        SetPlayerData(playerid, P_CARNUMBER_REGION, 4);
        
        SetPlayerData(playerid, P_CARREGION_ENTER, 1);
	}
    if(clickedid == shop_clothes_TD[1]) //далее
    {
        
        buffer = GetPlayerSelectSkin(playerid);
		if(!(0 <= ++buffer <= sizeof g_business_clothing_skins[] - 1))
		{
			buffer = 0;
		}
		SetPlayerSelectClothingSkin(playerid, buffer);
		
		CallLocalFunction("BuySkinPTDUpdate", "i", playerid);
		
		
	}
	if(clickedid == shop_clothes_TD[2]) //назад
    {

		
		buffer = GetPlayerSelectSkin(playerid);
		if(!(0 <= --buffer <= sizeof g_business_clothing_skins[] - 1))
		{
			buffer = sizeof g_business_clothing_skins[] - 1;
		}
		SetPlayerSelectClothingSkin(playerid, buffer);
		
		CallLocalFunction("BuySkinPTDUpdate", "i", playerid);
	}
	if(clickedid == shop_clothes_TD[3]) //покупка
    {
        buffer = GetPlayerSelectSkin(playerid);
		if(buffer != -1)
		{
			Dialog
			(
				playerid, DIALOG_BIZ_CLOTHING_BUY, DIALOG_STYLE_MSGBOX,
				"{FFCD00}Магазин одежды",
				"{FFFFFF}Вы действительно хотите приобрести этот набор одежды?",
				"Да", "Нет"
			);
		}
	}
	if(clickedid == shop_clothes_TD[4]) //выход
    {
        buffer = GetPlayerSelectSkin(playerid);
		if(buffer != -1)
		{
            ExitPlayerClothingShopPanel(playerid);
		}
	}
    if(clickedid == business_menu_TD[1])
    {
        if(businessid != -1)
		{
        	ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
        	
        	HideBusinessMenuTextDraws(playerid);
		}
		else
		    return Send(playerid, -1, "У вас нету бизнеса");
	}
	if(clickedid == business_menu_TD[2])
    {
        if(businessid != -1)
		{
        	ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PROFIT_STATS);
        	
        	HideBusinessMenuTextDraws(playerid);
		}
		else
		    return Send(playerid, -1, "У вас нету бизнеса");
	}
	if(clickedid == business_menu_TD[3])
    {
        HideBusinessMenuTextDraws(playerid);
	}
 	if(clickedid == autosalon_select_TD[1])
    {
    	if(GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return 1;
		CarMarketShowNextCar(playerid, '-');
	}
	if(clickedid == autosalon_select_TD[2])
    {
        if(GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return 1;

		CarMarketShowNextCar(playerid, '+');
	}
	if(clickedid == autosalon_price_TD[1])
    {
        if(GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return 1;

	    ShowBuyCarFamilyAndOwnable(playerid);
	}
    if(clickedid == autosalon_price_TD[2])
    {
        if(GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return 1;

        ExitPlayerBuyCarMarket(playerid);
	}
	if(clickedid == autosalon_color_TD[1])
    {
        if(GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return 1;

	    SetPlayerData(playerid, P_AUTOSALON_COLOR, 3);
	    CallLocalFunction("BuyCarPTDUpdate", "i", playerid);
	}
	if(clickedid == autosalon_color_TD[2])
    {
        if(GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return 1;

	    SetPlayerData(playerid, P_AUTOSALON_COLOR, 86);
	    CallLocalFunction("BuyCarPTDUpdate", "i", playerid);
	}
	if(clickedid == autosalon_color_TD[3])
    {
        if(GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return 1;

	    SetPlayerData(playerid, P_AUTOSALON_COLOR, 2);
	    CallLocalFunction("BuyCarPTDUpdate", "i", playerid);
	}
	if(clickedid == autosalon_color_TD[4])
    {
        if(GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return 1;

	    SetPlayerData(playerid, P_AUTOSALON_COLOR, 5);
	    CallLocalFunction("BuyCarPTDUpdate", "i", playerid);
	}
	if(clickedid == autosalon_color_TD[5])
    {
        if(GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return 1;

	    SetPlayerData(playerid, P_AUTOSALON_COLOR, 0);
	    CallLocalFunction("BuyCarPTDUpdate", "i", playerid);
	}
	if(clickedid == autosalon_color_TD[6])
    {
        if(GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return 1;

	    SetPlayerData(playerid, P_AUTOSALON_COLOR, 1);
	    CallLocalFunction("BuyCarPTDUpdate", "i", playerid);
	}
	if(clickedid == autosalon_color_TD[7])
    {
        if(GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return 1;

	    SetPlayerData(playerid, P_AUTOSALON_COLOR, 13);
	    CallLocalFunction("BuyCarPTDUpdate", "i", playerid);
	}
	if(clickedid == autosalon_color_TD[8])
    {
        if(GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return 1;

	    SetPlayerData(playerid, P_AUTOSALON_COLOR, 6);
	    CallLocalFunction("BuyCarPTDUpdate", "i", playerid);
	}
	if(clickedid == Text:INVALID_TEXT_DRAW)
	{
		if(GetPlayerPinCodeState(playerid) != PIN_CODE_STATE_NONE)
		{
			HidePlayerPinCodePTD(playerid);
			if(!IsPlayerLogged(playerid))
			{
				Kick:(playerid);
			}
		}
		switch(GetPlayerData(playerid, P_USE_SELECT_PANEL))
		{
			case SELECT_PANEL_TYPE_CLOTHING:
			{
				ExitPlayerClothingShopPanel(playerid);
			}
			case SELECT_PANEL_TYPE_REG_SKIN:
			{
				if(!IsPlayerLogged(playerid))
				{
					if(GetPlayerData(playerid, P_ACCOUNT_STATE) == ACCOUNT_STATE_REG_SKIN)
					{
						SelectTextDraw(playerid, 0x009900FF);
					}
				}
			}
			case SELECT_PANEL_TYPE_CAR_MARKET:
			{
				SelectTextDraw(playerid, 0x00FF00FF);
			}
		}
	}
	if(select_TD[0] <= clickedid <= select_TD[3])
	{
		new use_type = GetPlayerData(playerid, P_USE_SELECT_PANEL);
		if(use_type != SELECT_PANEL_TYPE_NONE)
		{
			buffer = 0;
			new index = _:(clickedid - select_TD[0]);


			switch(index)
			{
				case 2: // выбрать
				{
					switch(use_type)
					{
						case SELECT_PANEL_TYPE_CLOTHING:
						{
							buffer = GetPlayerSelectSkin(playerid);
							if(buffer != -1)
							{
								Dialog
								(
									playerid, DIALOG_BIZ_CLOTHING_BUY, DIALOG_STYLE_MSGBOX,
									"{FFCD00}Магазин одежды",
									"{FFFFFF}Вы действительно хотите приобрести этот набор одежды?",
									"Да", "Нет"
								);
							}
						}
						case SELECT_PANEL_TYPE_REG_SKIN:
						{
							if(!IsPlayerLogged(playerid))
							{
								if(GetPlayerData(playerid, P_ACCOUNT_STATE) == ACCOUNT_STATE_REG_SKIN)
								{
									new sex = GetPlayerSex(playerid);

									buffer = GetPlayerSelectSkin(playerid);

									if(buffer != -1)
									{
										SetPlayerData(playerid, P_SKIN, reg_skin_data[sex][buffer]);

										new query[90];
										mysql_format(mysql, query, sizeof query, "UPDATE accounts SET skin=%d,last_login=%d WHERE id=%d LIMIT 1", GetPlayerSkinEx(playerid), gettime(), GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
										    
											SetPlayerData(playerid, P_MONEY, 1000); //БОНУС ПРИ РЕГИСТРАЦИИ
											UpdatePlayerDatabaseInt(playerid, "money", 1000);

											SetPlayerData(playerid, P_SELECT_SKIN, -1);

											SetPlayerData(playerid, P_DRIVING_LIC, 2);
											UpdatePlayerDatabaseInt(playerid, "driving_lic", 2);

											SetPlayerData(playerid, P_DONATE_MONEY, 0);
											UpdatePlayerDatabaseInt(playerid, "donate_current", 0);

											SetPlayerData(playerid, P_LEVEL, 3);
											UpdatePlayerDatabaseInt(playerid, "level", 3);

											HidePlayerSelectPanel(playerid);
											HidePlayerSelectPanelPrice(playerid);
											
											/*new fmt_str[180];
											
											format(fmt_str, sizeof fmt_str, "[S.INFO]: "c_b"На сервере зарегистрировался новый игрок "c_server"(%s)", GetPlayerNameEx(playerid));
											SendMessageToAdmins(fmt_str, COR_SERVER);*/

											SetPlayerSpawnInit(playerid);
											SpawnPlayer(playerid);

										//	RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_FOREARM);
											SetPlayerInit(playerid);

										    
											SendClientMessage(playerid, 0xFFFF00FF, "Рекомендуем прочитать раздел {FF3300}Помощь по игре.{FFFF00} Он находится рядом с вами!");
											SendClientMessage(playerid, 0xFFFF00FF, "В нем Вы найдете всю интересующую Вас информацию. Удачи и приятной игры!");

											return 1;
										}
										else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 01)");
									}
								}
							}
						}
						case SELECT_PANEL_TYPE_CAR_MARKET:
						{
							if(GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return 1;
							
							ShowBuyCarFamilyAndOwnable(playerid);

						/*	Dialog
							(
								playerid, DIALOG_BIZ_CAR_MARKET_BUY_CAR, DIALOG_STYLE_MSGBOX,
								"{FFCC00}Автосалон",
								"{FFFFFF}Вы действительно хотите приобрести этот транспорт?",
								"Да", "Нет"
							);*/
						}
					}
				}
				case 1: // вправо
				{
					switch(use_type)
					{
						case SELECT_PANEL_TYPE_CLOTHING:
						{
							buffer = GetPlayerSelectSkin(playerid);
							if(!(0 <= ++buffer <= sizeof g_business_clothing_skins[] - 1))
							{
								buffer = 0;
							}
							SetPlayerSelectClothingSkin(playerid, buffer);
						}
						case SELECT_PANEL_TYPE_REG_SKIN:
						{
							if(!IsPlayerLogged(playerid))
							{
								if(GetPlayerData(playerid, P_ACCOUNT_STATE) == ACCOUNT_STATE_REG_SKIN)
								{
									new sex = GetPlayerSex(playerid);
									buffer = GetPlayerSelectSkin(playerid);

									if(!(0 <= ++buffer <= sizeof(reg_skin_data[])-1))
									{
										buffer = 0;
									}
									else if(!reg_skin_data[sex][buffer])
									{
										buffer = 0;
									}
									SetPlayerSelectSkin(playerid, buffer, reg_skin_data[sex][buffer]);
								}
							}
						}
						case SELECT_PANEL_TYPE_CAR_MARKET:
						{
							if(GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return 1;
							CarMarketShowNextCar(playerid, '+');
						}
					}
				}
				case 0: // влево
				{
					switch(use_type)
					{
						case SELECT_PANEL_TYPE_CLOTHING:
						{
							buffer = GetPlayerSelectSkin(playerid);
							if(!(0 <= --buffer <= sizeof g_business_clothing_skins[] - 1))
							{
								buffer = sizeof g_business_clothing_skins[] - 1;
							}
							SetPlayerSelectClothingSkin(playerid, buffer);
						}
						case SELECT_PANEL_TYPE_REG_SKIN:
						{
							if(!IsPlayerLogged(playerid))
							{
								if(GetPlayerData(playerid, P_ACCOUNT_STATE) == ACCOUNT_STATE_REG_SKIN)
								{
									new sex = GetPlayerSex(playerid);
									buffer = GetPlayerSelectSkin(playerid);

									if(!(0 <= --buffer <= sizeof(reg_skin_data[])-1))
									{
										buffer = sizeof(reg_skin_data[])-1;
										if(!sex)
											buffer -= 2;
									}
									SetPlayerSelectSkin(playerid, buffer, reg_skin_data[sex][buffer]);
								}
							}
						}
						case SELECT_PANEL_TYPE_CAR_MARKET:
						{
							if(GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return 1;
							CarMarketShowNextCar(playerid, '-');
						}
					}
				}
				case 3: // закрыть
				{
					switch(use_type)
					{
						case SELECT_PANEL_TYPE_CLOTHING:
						{
							ExitPlayerClothingShopPanel(playerid);
						}
						case SELECT_PANEL_TYPE_CAR_MARKET:
						{
							ExitPlayerBuyCarMarket(playerid);
						}
					}
				}
			}
		}
	}

    return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if(pin_code_PTD[playerid][0] <= playertextid <= pin_code_PTD[playerid][9])
	{
		new pc_state = GetPlayerPinCodeState(playerid);
		new index = _:(playertextid - pin_code_PTD[playerid][0]);

		if(pc_state != PIN_CODE_STATE_NONE && 0 <= index <= 9)
		{
			new ch[2];
			valstr(ch, GetPlayerPinCodeValue(playerid, index));
			strcat(pin_code_input[playerid], ch);

			if(strlen(pin_code_input[playerid]) >= 4)
			{
				if(pc_state == PIN_CODE_STATE_CHECK)
				{
					HidePlayerPinCodePTD(playerid, false);
				}
				else HidePlayerPinCodePTD(playerid);

				switch(pc_state)
				{
					case PIN_CODE_STATE_SET,PIN_CODE_STATE_CHANGE:
					{
						new query[75];

						mysql_format(mysql, query, sizeof query, "UPDATE accounts SET setting_pin_code='%e' WHERE id=%d LIMIT 1", pin_code_input[playerid], GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);

						if(!mysql_errno())
						{
							format(g_player[playerid][P_SETTING_PIN], 5, "%s", pin_code_input[playerid]);

							mysql_format(mysql, query, sizeof query, "PIN-код %s: {FFFF00}%s", pc_state == PIN_CODE_STATE_SET ? ("успешно установлен") : ("изменен на"), GetPlayerData(playerid, P_SETTING_PIN));

							SendClientMessage(playerid, 0x66CC00FF, query);
							SendClientMessage(playerid, 0x66CC00FF, "Запомните или запишите это число");

							ShowPlayerSecuritySettings(playerid);
						}
						else
						{
							SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 04)");
							ShowPlayerPinCodePTD(playerid, pc_state);
						}
					}
					case PIN_CODE_STATE_CHECK:
					{
						if(strcmp(pin_code_input[playerid], GetPlayerData(playerid, P_SETTING_PIN)) != 0)
						{
							SendClientMessage(playerid, 0xFF6600FF, "PIN-код введен неверно");
							ShowPlayerSecuritySettings(playerid);
						}
						else ShowPlayerPinCodePTD(playerid, PIN_CODE_STATE_CHANGE);
					}
					case PIN_CODE_STATE_LOGIN_CHECK:
					{
						if(!IsPlayerLogged(playerid))
						{
							if(GetPlayerData(playerid, P_ACCOUNT_STATE) == ACCOUNT_STATE_LOGIN)
							{
								new step = GetPlayerData(playerid, P_ACCOUNT_STEP_STATE);
								new bool: wrong_pass = false;

								if
								(
									!strlen(GetPlayerData(playerid, P_SETTING_PIN))
									|| strcmp(GetPlayerData(playerid, P_SETTING_PIN), pin_code_input[playerid]) != 0
								)
								{
									wrong_pass = true;
									step --;
								}
								ShowPlayerLoginDialog(playerid, step + 1, wrong_pass);
							}
						}
					}
				}
				pin_code_input[playerid][0] = 0;
			}
		}
	}
	if(GetPlayerData(playerid, P_USE_SELECT_PANEL) == SELECT_PANEL_TYPE_CAR_MARKET)
	{
		if(playertextid == buy_car_PTD[playerid][2]) // кнопка переключения типа цвета 1/2
		{
			new type = buy_car_select_color_type[playerid];
			buy_car_select_color_type[playerid] = type ? 0 : 1;

			CallLocalFunction("BuyCarPTDUpdate", "i", playerid);
		}
		else if(playertextid == buy_car_PTD[playerid][3]) // цвет влево
		{
		//	new type = buy_car_select_color_type[playerid];

			//if(-- buy_car_select_color[playerid][type] < 0)
			//	buy_car_select_color[playerid][type] = sizeof rgb_array - 1;

			CallLocalFunction("BuyCarPTDUpdate", "i", playerid);
		}
		else if(playertextid == buy_car_PTD[playerid][5]) // цвет вправо
		{
		//	new type = buy_car_select_color_type[playerid];

			//if(++ buy_car_select_color[playerid][type] > sizeof rgb_array - 1)
			//	buy_car_select_color[playerid][type] = 0;

			CallLocalFunction("BuyCarPTDUpdate", "i", playerid);
		}
	}
    return 1;
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	if (s_autorace_Main_CPID == checkpointid) {

		new
			AutoRaceType:ar_type = s_autorace_Server_Type;

		if (ar_type == t_AutoRaceNone) {
			SendClientMessage(playerid, 0xCECECEFF, "Регистрация закрыта");
			return 1;
		}
		if (s_autorace_Server_Stage == s_AutoRaceNone) {
			SendClientMessage(playerid, 0xCECECEFF, "Вы опоздали на гонку");
			return 1;
		}
		if (s_autorace_Server_Count[_:ar_type] >= s_autorace_Vehicle_Amount[_:ar_type]) {
			SendClientMessage(playerid, 0xCECECEFF, "Слишком много участников");
			return 1;
		}
		if ((p_autorace_Player_Type[playerid] != t_AutoRaceNone)
			&& (p_autorace_Player_State[playerid] != AUTORACE_STATE_NONE)) {
			SendClientMessage(playerid, 0xCECECEFF, "Вы уже зарегестрированы на гонку");
		} else {
			Dialog_Show::P_AUTORACE(playerid);
		}
		return 1;
	}

	//if(help_info_CP[0] <= checkpointid <= help_info_CP[sizeof help_info_CP - 1])
	if(checkpointid == markerhelp)
	{
		callcmd::help(playerid, "");
	}
	if(checkpointid == markerhelp1)
	{
		callcmd::help(playerid, "");
	}
	else if(checkpointid == driving_exam_CP)
	{
		Dialog
		(
			playerid, DIALOG_DRIVING_EXAM_INFO, DIALOG_STYLE_MSGBOX,
			"{FFCD00}Экзамен по вождению",
			"{FFFFFF}Здравствуйте!\n"\
			"Вы готовы приступить к экзамену? Тогда начнем.\n"\
			"Экзамен будет состоять из теоретической и практической части\n"\
			"В теории вам нужно будет ответить на вопросы из вашего экзаменационного билета,\n"\
			"а в практике применить полученные знания за рулем учебного автомобиля.\n\n"\
			"{CC9900}Сдача на права стоит 600 рублей и в случае провала деньги не будут возвращены!\n"\
			"Поэтому перед сдачей внимательно прочитайте обучающий раздел",
			"Начать", "Отмена"
		);
	}
	else if(factory_desk[0][FD_CHEK_ID] <= checkpointid <= factory_desk[sizeof(factory_desk)-1][FD_CHEK_ID])
	{
		new index = checkpointid - factory_desk[0][FD_CHEK_ID];
		SetPlayerFactoryDeskUse(playerid, index, true);
	}
	else if(checkpointid == GetBusinessInteriorInfo(BUSINESS_INTERIOR_CLUB, BT_BUY_CHECK_ID))
	{
		new businessid = GetPlayerInBiz(playerid);
		if(businessid != -1)
		{
			new type = GetBusinessData(businessid, B_TYPE);
			if(type == BUSINESS_TYPE_CLUB)
			{
				if(IsPlayerInJob(playerid) || GetPlayerTempJob(playerid) != TEMP_JOB_NONE)
					return SendClientMessage(playerid, 0xCECECEFF, "Перед посещением бара необходимо завершить рабочий день");

				Dialog
				(
					playerid, DIALOG_BIZ_CLUB, DIALOG_STYLE_LIST,
					GetBusinessData(businessid, B_NAME),
					"1. Лимонад\t\t{00CC00}60 руб\n"\
					"2. Пиво\t\t\t{00CC00}100 руб\n"\
					"3. Вино\t\t\t{00CC00}200 руб\n"\
					"4. Шампанское\t\t{00CC00}270 руб\n"\
					"5. Водка\t\t{00CC00}300 руб\n"\
					"6. Коньяк\t\t{00CC00}450 руб\n"\
					"7. Виски\t\t{00CC00}630 руб\n"\
					"8. Абсент\t\t{00CC00}750 руб\n"\
					"{CC9900}9. Закуска\t\t{00CC00}50 руб\n"\
					"{CC9900}10. Сигара\t\t{00CC00}80 руб",
					"Купить", "Отмена"
				);
			}
		}
	}
	else if(checkpointid == GetBusinessInteriorInfo(BUSINESS_INTERIOR_CASINO, BT_BUY_CHECK_ID))
	{
		new businessid = GetPlayerInBiz(playerid);
		if(businessid != -1)
		{
			new type = GetBusinessData(businessid, B_TYPE);
			if(type == BUSINESS_TYPE_CASINO)
			{
				if(IsPlayerInJob(playerid) || GetPlayerTempJob(playerid) != TEMP_JOB_NONE)
					return SendClientMessage(playerid, 0xCECECEFF, "Перед посещением бара необходимо завершить рабочий день");

				Dialog
				(
					playerid, DIALOG_BIZ_CLUB, DIALOG_STYLE_LIST,
					GetBusinessData(businessid, B_NAME),
					"1. Лимонад\t\t{00CC00}60 руб\n"\
					"2. Пиво\t\t\t{00CC00}100 руб\n"\
					"3. Вино\t\t\t{00CC00}200 руб\n"\
					"4. Шампанское\t\t{00CC00}270 руб\n"\
					"5. Водка\t\t{00CC00}300 руб\n"\
					"6. Коньяк\t\t{00CC00}450 руб\n"\
					"7. Виски\t\t{00CC00}630 руб\n"\
					"8. Абсент\t\t{00CC00}750 руб\n"\
					"{CC9900}9. Закуска\t\t{00CC00}50 руб\n"\
					"{CC9900}10. Сигара\t\t{00CC00}80 руб",
					"Купить", "Отмена"
				);
			}
		}
	}
	else if(checkpointid == GetBusinessInteriorInfo(BUSINESS_INTERIOR_REALTOR_BIZ, BT_BUY_CHECK_ID))
	{
		new businessid = GetPlayerInBiz(playerid);
		if(businessid != -1)
		{
			new type = GetBusinessData(businessid, B_TYPE);
			if(type == BUSINESS_TYPE_REALTOR_BIZ)
			{
				Dialog
				(
					playerid, DIALOG_BIZ_REALTOR_BIZ_LIST, DIALOG_STYLE_LIST,
					"{66FF99}Номера свободных бизнесов",
					g_business_realtor_list,
					"Инфо 70р", "Закрыть"
				);
			}
		}
	}
	else if(checkpointid == GetBusinessInteriorInfo(BUSINESS_INTERIOR_REALTOR_HOME, BT_BUY_CHECK_ID))
	{
		new businessid = GetPlayerInBiz(playerid);
		if(businessid != -1)
		{
			new type = GetBusinessData(businessid, B_TYPE);
			if(type == BUSINESS_TYPE_REALTOR_HOME)
			{
				ShowPlayerRealtorHomeDialog(playerid);
			}
		}
	}
	else if(checkpointid == GetBusinessInteriorInfo(BUSINESS_INTERIOR_HOTEL, BT_BUY_CHECK_ID))
	{
		ShowPlayerHotelDialog(playerid);
	}
	else if(g_hotel_lift_CP[0] <= checkpointid <= g_hotel_lift_CP[1])
	{
		new hotel_id = GetPlayerInHotelID(playerid);
		if(hotel_id != -1)
		{
			new floor_id = GetPlayerData(playerid, P_IN_HOTEL_FLOOR);
			ShowPlayerHotelFloorsLift(playerid, hotel_id, floor_id);
		}
	}
	else if(checkpointid == army_ammo_CP)
	{
		SetPVarInt(playerid, "player_in_ammo_cp", 1);
	}
/*	else if(miner_job_load_cp[0] <= checkpointid <= sizeof miner_job_load_cp - 1)
	{
		SetPlayerMinerJobLoadCP(playerid);

		if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER && GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_MINER_LOAD)
		{
			ApplyAnimationEx(playerid, "BASEBALL", "Bat_4", 3.1, 1, 1, 1, 0, 0, 0, USE_ANIM_TYPE_NONE - 1);
			SetTimerEx("SetPlayerMinerJobTakeOre", 15_000, false, "ii", playerid, 1);
		}
	}*/
	return 1;
}

public: CreateFactoryProd(playerid)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY)
	{
		if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_FACTORY_CREATED)
		{
		//	RemovePlayerAttachedObjectEx(playerid, A_OBJECT_SLOT_HAND, A_OBJECT_SLOT_HAND + 1);

			new skill = GetPVarInt(playerid, "factory_skill");
			if(!(random(5) + skill == 1))
			{
				if(random(6) == 1)
				{
					new fmt_str[80];

					SetPVarInt(playerid, "factory_skill", skill + 1);

					format(fmt_str, sizeof fmt_str, "Рабочий навык увеличен. Теперь шанс создать бракованый продукт 1 из %d", skill + 5);
					SendClientMessage(playerid, 0x66CC00FF, fmt_str);
				}

				ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 1, 1, 1, 1, 1, 0, USE_ANIM_TYPE_NONE - 1);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

				SetPlayerChatBubble(playerid, "+ 1 продукт", 0x66CC00FF, 10.0, 1500);

			//	SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_FOREARM, 1279, A_OBJECT_BONE_LEFT_FOREARM, 0.4, -0.09, -0.2, 85.0, 0.0, 90.0, 1.0, 1.0, 1.0, 0);
				GameTextForPlayer(playerid, "~g~~h~SUCCESS", 4000, 1);

				SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_PUT_PROD);
				SetPlayerTempJobCheckAnim(playerid, true);
			}
			else FactoryPlayerDrop(playerid);

			SetPlayerFactoryDeskUse(playerid, GetPlayerData(playerid, P_FACTORY_USE_DESK), false);
		}
	}
}

public OnPlayerLeaveDynamicCP(playerid, checkpointid)
{
	if(checkpointid == army_ammo_CP)
		DeletePVar(playerid, "player_in_ammo_cp");
	return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
    foreach(Player, i)
	{
	    if(GetPVarType(i, "BBArea"))
	    {
	        if(areaid == GetPVarInt(i, "BBArea"))
	        {
	            new station[256];
	            GetPVarString(i, "BBStation", station, sizeof(station));
	            if(!isnull(station))
				{
					PlayStream(playerid, station, GetPVarFloat(i, "BBX"), GetPVarFloat(i, "BBY"), GetPVarFloat(i, "BBZ"), 30.0, 1);
				 	SendClientMessage(playerid, -1, "Вы вошли в зону бумбокса");
	            }
				return 1;
	        }
	    }
	}
	if(g_green_zones[0][GZ_AREA] <= areaid <= g_green_zones[sizeof g_green_zones - 1][GZ_AREA])
	{
		new green_zone_id = areaid - g_green_zones[0][GZ_AREA];

		ShowPlayerGreenZoneText(playerid);

		SetPVarInt(playerid, "player_in_green_zone", green_zone_id + 1);
	}

	if(GetFuelStationData(0, FS_AREA) <= areaid <= GetFuelStationData(g_fuel_station_loaded - 1, FS_AREA))
	{
		SetPVarInt(playerid, "buy_fuel_count", 	0);
		SetPVarInt(playerid, "buy_fuel_pay_j",	0);
		SetPVarInt(playerid, "buy_fuel_pay", 	0);
	}
	else if(GetGangZoneData(0, GZ_AREA) <= areaid <= GetGangZoneData(g_gang_zones_loaded - 1, GZ_AREA))
	{
		if(TEAM_OPG_ARZAMASKAYA <= GetPlayerTeamEx(playerid) <= TEAM_OPG_LYTKARINSKAYA)
		{
			new gangzoneid = GetGangZoneData(areaid - GetGangZoneData(0, GZ_AREA), GZ_ZONE);

			UpdateGangZone(gangzoneid);
		}
	}
	else if(areaid == factory_put_zone)
	{
		if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY)
		{
			if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_FACTORY_PUT_PROD)
			{
			//	new objectid;
				new items = GetPlayerJobLoadItems(playerid);
				new Float: x, Float: y, Float: z, Float: angle;

				SetPlayerTempJobCheckAnim(playerid, false);

				ApplyAnimationEx(playerid, "CARRY", "PUTDWN", 4.0, 0, 0, 0, 0, 0, 0, USE_ANIM_TYPE_NONE);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

				TogglePlayerFactoryCP(playerid, true);
				SetPlayerJobLoadItems(playerid, items + 1);

				AddPlayerData(playerid, P_JOB_WAGE, +, random(20)+40);
				SendClientMessage(playerid, 0xFFFF00FF, "Продукт доставлен на склад");

			//	RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_FOREARM);
				SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_TAKE_MET);

				GetPlayerPos(playerid, x, y, z);
				GetPlayerFacingAngle(playerid, angle);

//				objectid = CreateDynamicObject(1279, x, -200.81883, 1006.51978, 0.9, 0.0, angle);
//				MoveDynamicObject(objectid, 263.8, -200.81880, 1006.51978, 2.0, 0.9, 0.0, angle);

//				Streamer_SetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, OBJECT_TYPE_FACTORY);
			}
		}
	}

	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
    foreach(Player, i)
	{
	    if(GetPVarType(i, "BBArea"))
	    {
	        if(areaid == GetPVarInt(i, "BBArea"))
	        {
	            StopStream(playerid);
	            SendClientMessage(playerid, -1, "Вы покинули зону бумбокса");
				return 1;
	        }
	    }
	}
	new player_last_pickup = GetPlayerData(playerid, P_LAST_PICKUP);

	if(player_last_pickup != -1 && GetPickupInfo(player_last_pickup, P_DYNAMIC_ZONE) == areaid)
	{
		SetPlayerData(playerid, P_LAST_PICKUP, -1);
	}

	if(g_green_zones[0][GZ_AREA] <= areaid <= g_green_zones[sizeof g_green_zones - 1][GZ_AREA])
	{
		HidePlayerGreenZoneText(playerid);

		SetPVarInt(playerid, "player_in_green_zone", 0);
	}

	if(!GetPlayerData(playerid, P_BLOCK_LEAVE_AREA))
	{
		if(areaid == miner_job_area)
		{
			EndPlayerTempJob(playerid, TEMP_JOB_MINER, true);
		}
		else if(areaid == factory_job_area)
		{
			EndPlayerTempJob(playerid, TEMP_JOB_FACTORY, true);
		}
		else if(GetFuelStationData(0, FS_AREA) <= areaid <= GetFuelStationData(g_fuel_station_loaded - 1, FS_AREA))
		{
			new buy_fuel_pay = GetPVarInt(playerid, "buy_fuel_pay") + GetPVarInt(playerid, "buy_fuel_pay_j");

			DeletePVar(playerid, "buy_fuel_count");
			DeletePVar(playerid, "buy_fuel_pay_j");
			DeletePVar(playerid, "buy_fuel_pay");

			new stationid = areaid - GetFuelStationData(0, FS_AREA);
			if(buy_fuel_pay > 0)
			{
				new query[155];

				mysql_format(mysql, query, sizeof query, "INSERT INTO fuel_stations_profit (fid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetFuelStationData(stationid, FS_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), buy_fuel_pay, IsFuelStationOwned(stationid) ? 1 : 0);
				mysql_query(mysql, query, false);
			}
		}
	}
	else SetPlayerData(playerid, P_BLOCK_LEAVE_AREA, false);

	return 1;
}

/*public OnDynamicObjectMoved(objectid)
{
	new type = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID);
	switch(type)
	{
		case OBJECT_TYPE_FACTORY:
		{
			//DestroyDynamicObject(objectid);
			type = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD, R_AMOUNT);

			SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD, R_AMOUNT, type + 1);
			UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD);
		}
		case OBJECT_TYPE_CARRIAGE:
		{
			miner_carriage[0][MC_IN_MOVE] = false;

			MinerCarriageSetState(0);
		}
		case OBJECT_TYPE_WOOD:
		{
			new Float: object_x,
				Float: object_y,
				Float: object_z,
				index;

			GetDynamicObjectPos(objectid, object_x, object_y, object_z);
			DestroyDynamicObject(objectid);

			index = object_x == 2399.2898 ? 0 : 1;

			if(index)
			{
			//	new object = CreateDynamicObject(1448, object_x, object_y, object_z, 0.0, 0.0, 0.0);
			//	MoveDynamicObject(object, 2399.2898, object_y, object_z, 2.0, 0.0, 0.0, 0.0);
			}
			else
			{
				type = GetRepositoryData(REPOSITORY_TYPE_SAWMILL, REPOSITORY_ACTION_SAWMILL_WOOD, R_AMOUNT);

				SetRepositoryData(REPOSITORY_TYPE_SAWMILL, REPOSITORY_ACTION_SAWMILL_WOOD, R_AMOUNT, type + 1);
				UpdateRepository(REPOSITORY_TYPE_SAWMILL, REPOSITORY_ACTION_SAWMILL_WOOD);
			}
		}
		case OBJECT_TYPE_TRAIN:
		{
			if(train_objects_status)
			{
				for(new idx; idx < sizeof train_objects; idx ++)
					MoveDynamicObject(train_objects[idx][T_OBJECT_ID], train_objects[idx][T_POS_X], train_objects[idx][T_POS_Y], train_objects[idx][T_POS_Z], TRAIN_MOVE_SPEED);
			}
			else
			{
				for(new idx; idx < sizeof train_objects; idx ++)
					MoveDynamicObject(train_objects[idx][T_OBJECT_ID], train_objects[idx][T_POS_X] - 13.6841, train_objects[idx][T_POS_Y] - 184.81617, train_objects[idx][T_POS_Z], TRAIN_MOVE_SPEED);
			}

			train_objects_status = train_objects_status ^ true;
		}
	}*/

//	return 1;
//	}
//}

/*public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if(objectid == player_radar_object[playerid] && response != 2)
	{
		DestroyPlayerObject(playerid, objectid);
		player_radar_object[playerid] = INVALID_OBJECT_ID;

		if(response == 1)
		{
			switch(GetPVarInt(playerid, "radar_stage"))
			{
				case 1:
				{
					player_radar_position[playerid][0] = x;
					player_radar_position[playerid][1] = y;
					player_radar_position[playerid][2] = z;
					player_radar_position[playerid][3] = rx;
					player_radar_position[playerid][4] = ry;
					player_radar_position[playerid][5] = rz;

					printf("stage 1: %f %f %f %f %f %f", x, y, z, rx, ry, rz);

					player_radar_object[playerid] = CreatePlayerObject
					(
						playerid,
						1239,
						x + 1.0, y, z,
						0.0, 0.0, 0.0
					);

					EditPlayerObject(playerid, player_radar_object[playerid]);

					SetPVarInt(playerid, "radar_stage", 2);

					SendClientMessage(playerid, 0x66CC33FF, "Позиция радара установлена");
					SendClientMessage(playerid, 0xFFCD00FF, "Установите место на дороге, куда будет направлена камера радара");
				}
				case 2:
				{
					player_radar_position[playerid][6] = x;
					player_radar_position[playerid][7] = y;
					player_radar_position[playerid][8] = z;

					new limiter[4] = {20, 60, 90, 110},
						radar_object[2] = {10164, 18880};

					CreateRadar
					(
						playerid,
						player_radar_position[playerid][0],
						player_radar_position[playerid][1],
						player_radar_position[playerid][2],
						player_radar_position[playerid][3],
						player_radar_position[playerid][4],
						player_radar_position[playerid][5],
						player_radar_position[playerid][6],
						player_radar_position[playerid][7],
						player_radar_position[playerid][8],
						limiter[ GetPVarInt(playerid, "radar_type") - 1 ],
						radar_object[ GetPVarInt(playerid, "radar_object") - 1 ]
					);

					printf("createradar(%d, %f, %f, %f, %f, %f, %f, %f, %f, %f, %d, %d)",
						playerid,
						player_radar_position[playerid][0],
						player_radar_position[playerid][1],
						player_radar_position[playerid][2],
						player_radar_position[playerid][3],
						player_radar_position[playerid][4],
						player_radar_position[playerid][5],
						player_radar_position[playerid][6],
						player_radar_position[playerid][7],
						player_radar_position[playerid][8],
						limiter[ GetPVarInt(playerid, "radar_type") - 1 ],
						radar_object[ GetPVarInt(playerid, "radar_object") - 1 ]);

					SendClientMessage(playerid, 0x66CC33FF, "Регистратор скорости установлен");
				}
			}
		}
	}
}

public Streamer_OnPluginError(const error[])
{
	print("- Streamer_OnPluginError -");
	print(error);
	print("- Streamer_OnPluginError -\n");

	return 1;
}

public OnPlayerPressButton(playerid, buttonid)
{
	if(IsGateButtonID(buttonid))
	{
		new index = buttonid - g_gate_button[0][0];
		new gateid = g_gate_button[index][1];

		new bool: gate_status = GetGateData(gateid, G_STATUS);
		if(gate_status == GATE_STATUS_CLOSE)
		{
			SetPlayerChatBubble(playerid, "Открывает шлагбаум", 0x00CC00FF, 15.0, 2000);
		}
		else SetPlayerChatBubble(playerid, "Закрывает шлагбаум", 0xFF3333FF, 15.0, 2000);

		SetGateStatus(gateid, gate_status ^ GATE_STATUS_OPEN, -1);
	}
	return 0;
}*/

// ------------------------------------------
public: LoadGangZones()
{
	new idx;
	new Cache: result, rows;

	result = mysql_query(mysql, "SELECT * FROM gang_zones", true);
	rows = cache_num_rows();

	if(rows > MAX_GZ)
	{
		rows = MAX_GZ;
		print("[GangZones]: DB rows > MAX_GZ");
	}

	for(idx = 0; idx < rows; idx ++)
	{
		SetGangZoneData(idx, GZ_MIN_X,	cache_get_field_content_float(idx, "min_x"));
		SetGangZoneData(idx, GZ_MIN_Y,	cache_get_field_content_float(idx, "min_y"));
		SetGangZoneData(idx, GZ_MAX_X,	cache_get_field_content_float(idx, "max_x"));
		SetGangZoneData(idx, GZ_MAX_Y,	cache_get_field_content_float(idx, "max_y"));

		SetGangZoneData(idx, GZ_GANG,	cache_get_field_content_int(idx, "fraction"));

		// ----------------------------------------------------------------------------------
		g_gang_zone[idx][GZ_ZONE] = GangZoneCreate
		(
			GetGangZoneData(idx, GZ_MIN_X),
			GetGangZoneData(idx, GZ_MIN_Y),
			GetGangZoneData(idx, GZ_MAX_X),
			GetGangZoneData(idx, GZ_MAX_Y)
		);

		// ----------------------------------------------------------------------------------
		g_gang_zone[idx][GZ_AREA] = CreateDynamicRectangle
		(
			GetGangZoneData(idx, GZ_MIN_X),
			GetGangZoneData(idx, GZ_MIN_Y),
			GetGangZoneData(idx, GZ_MAX_X),
			GetGangZoneData(idx, GZ_MAX_Y)
		);
	}

	g_gang_zones_loaded = rows;
	cache_delete(result);

	printf("[GangZones]: Гангзон загружено: %d", g_gang_zones_loaded);
}

stock ShowGangZonesForPlayer(playerid)
{
	for(new idx; idx < sizeof g_gang_zone; idx ++)
	{
		GangZoneShowForPlayer(playerid, GetGangZoneData(idx, GZ_ZONE), gang_zone_colors[ GetGangZoneData(idx, GZ_GANG) ]);
	}

	if(g_capture[C_STATUS])
		GangZoneFlashForPlayer(playerid, GetGangZoneData(g_capture[C_GANG_ZONE], GZ_ZONE), gang_zone_colors[ g_capture[C_ATTACK_TEAM] ]);
}

stock UpdateGangZone(idx)
{
	if(!GetGangZoneData(idx, GZ_GANG))
	{
		new area_players[3];

		foreach(new i : Player)
		{
			if(!IsPlayerConnected(i)) continue;
			else if(!IsPlayerLogged(i)) continue;
			else if(!IsPlayerInDynamicArea(i, GetGangZoneData(idx, GZ_AREA))) continue;
			else if(!(TEAM_OPG_ARZAMASKAYA <= GetPlayerTeamEx(i) <= TEAM_OPG_LYTKARINSKAYA)) continue;

			area_players[ GetPlayerTeamEx(i) - TEAM_OPG_ARZAMASKAYA ] ++;
		}

		for(new i; i < 3; i++)
		{
			if(area_players[i] < MIN_PLAYERS_FOR_CAPTURE) continue;

			SetGangZoneData(idx, GZ_GANG, i + 1);
			SaveGangZone(idx + 1);

			GangZoneShowForAll(GetGangZoneData(idx, GZ_ZONE), gang_zone_colors[i + 1]);

			new fmt_text[50];

			format(fmt_text, sizeof fmt_text, "%s захватили новую территорию", GetTeamName(i + TEAM_OPG_ARZAMASKAYA));
			SendMessageToGang(fmt_text, 0xFF5533FF);

			UpdateGangRepository(i);

			break;
		}
	}
}

stock SaveGangZone(idx)
{
	new query[65];

	mysql_format(mysql, query, sizeof query, "UPDATE gang_zones SET fraction=%d WHERE id=%d", GetGangZoneData(idx, GZ_GANG), idx);
	mysql_query(mysql, query, false);
}

stock GetGangZonesCount(team)
{
	new count;

	for(new idx; idx < g_gang_zones_loaded; idx ++)
	{
		if(GetGangZoneData(idx, GZ_GANG) != team) continue;

		count ++;
	}

	return count;
}

// ------------------------------------------
public: LoadGangRepositories()
{
	new idx;
	new Cache: result, rows;

	result = mysql_query(mysql, "SELECT * FROM gang_repositories", true);
	rows = cache_num_rows();

	if(rows > MAX_GZ)
	{
		rows = MAX_GZ;
		print("[GangRepositories]: DB rows > MAX_GANG_REPOSITORIES");
	}

	for(idx = 0; idx < rows; idx ++)
	{
		SetGangRepositoryData(idx, GR_GANG, 		cache_get_field_content_int(idx, "id"));
		SetGangRepositoryData(idx, GR_METALL, 		cache_get_field_content_int(idx, "metall"));
		SetGangRepositoryData(idx, GR_AMMO, 		cache_get_field_content_int(idx, "ammo"));
		SetGangRepositoryData(idx, GR_DRUGS, 		cache_get_field_content_int(idx, "drugs"));
		SetGangRepositoryData(idx, GR_MONEY, 		cache_get_field_content_int(idx, "money"));

		SetGangRepositoryData(idx, GR_LOCK, 		bool: cache_get_field_content_int(idx, "lock"));

		new fmt_text[330],
			gang_id = GetGangRepositoryData(idx, GR_GANG);

		format
		(
			fmt_text, sizeof fmt_text,
			"Количество\n\
			территорий: {99FF99}%d\n\n\n\n\
			{%06x}Склад\n\
			%s\n\n\
			{FFFFFF}Наркотики: {ff9900}%d из 20000 г\n\
			{FFFFFF}Патроны: {ff9900}%d из 50000 шт\n\
			{FFFFFF}Металл: {ff9900}%d из 6000 кг\n\
			{FFFFFF}Деньги: {3366FF}%d руб\n\n\
			%s\
			",
			GetGangZonesCount(gang_id + 1),
			gang_zone_colors[gang_id] >>> 8,
			GetTeamName(idx + TEAM_OPG_ARZAMASKAYA),
			GetGangRepositoryData(idx, GR_DRUGS),
			GetGangRepositoryData(idx, GR_AMMO),
			GetGangRepositoryData(idx, GR_METALL),
			GetGangRepositoryData(idx, GR_MONEY),
			GetGangRepositoryData(idx, GR_LOCK) ? "{66CC33}Открыт" : "{FF3300}Закрыт"
		);

		g_gang_repository[idx][GR_LABEL] = CreateDynamic3DTextLabel
		(
			fmt_text,
			0xFFFFFFFF,
			GetTeamData(idx + TEAM_OPG_ARZAMASKAYA, O_REPOSITORY_POS)[0],
			GetTeamData(idx + TEAM_OPG_ARZAMASKAYA, O_REPOSITORY_POS)[1],
			GetTeamData(idx + TEAM_OPG_ARZAMASKAYA, O_REPOSITORY_POS)[2] + 1.5,
			10.0
		);

		g_gang_repository[idx][GR_PICKUP] = CreatePickup
		(
			1239,
			23,
			GetTeamData(idx + TEAM_OPG_ARZAMASKAYA, O_REPOSITORY_POS)[0],
			GetTeamData(idx + TEAM_OPG_ARZAMASKAYA, O_REPOSITORY_POS)[1],
			GetTeamData(idx + TEAM_OPG_ARZAMASKAYA, O_REPOSITORY_POS)[2],
			-1,
			PICKUP_ACTION_TYPE_GANG_REPOSIT,
			gang_id
		);
	}

	cache_delete(result);

	printf("[GangRepositories]: Склады банд загружены");
}

stock UpdateGangRepository(idx)
{
	new fmt_text[330],
		gang_id = GetGangRepositoryData(idx, GR_GANG);

	format
	(
		fmt_text, sizeof fmt_text,
		"Количество\n\
		территорий: {99FF99}%d\n\n\n\n\
		{%06x}Склад\n\
		%s\n\n\
		{FFFFFF}Наркотики: {ff9900}%d из 20000 г\n\
		{FFFFFF}Патроны: {ff9900}%d из 50000 шт\n\
		{FFFFFF}Металл: {ff9900}%d из 6000 кг\n\
		{FFFFFF}Деньги: {3366FF}%d руб\n\n\
		%s\
		",
		GetGangZonesCount(gang_id),
		gang_zone_colors[gang_id] >>> 8,
		GetTeamName(idx + TEAM_OPG_ARZAMASKAYA),
		GetGangRepositoryData(idx, GR_DRUGS),
		GetGangRepositoryData(idx, GR_AMMO),
		GetGangRepositoryData(idx, GR_METALL),
		GetGangRepositoryData(idx, GR_MONEY),
		GetGangRepositoryData(idx, GR_LOCK) ? "{66CC33}Открыт" : "{FF3300}Закрыт"
	);

	UpdateDynamic3DTextLabelText(GetGangRepositoryData(idx, GR_LABEL), 0xFFFFFFFF, fmt_text);
}

// ------------------------------------------
public: LoadEntrances()
{
	new idx, j, k;
	new query[85];
	new Cache: result, rows;

	result = mysql_query(mysql, "SELECT * FROM entrances", true);
	rows = cache_num_rows();

	if(rows > MAX_ENTRANCES)
	{
		rows = MAX_ENTRANCES;
		print("[Entrances]: DB rows > MAX_ENTRANCES");
	}

	for(idx = 0; idx < rows; idx ++)
	{
		SetEntranceData(idx, E_SQL_ID, 	cache_get_field_content_int(idx, "id"));

		SetEntranceData(idx, E_FLOORS,	cache_get_field_content_int(idx, "floors"));

		SetEntranceData(idx, E_POS_X, 	cache_get_field_content_float(idx, "pos_x"));
		SetEntranceData(idx, E_POS_Y, 	cache_get_field_content_float(idx, "pos_y"));
		SetEntranceData(idx, E_POS_Z, 	cache_get_field_content_float(idx, "pos_z"));

		SetEntranceData(idx, E_EXIT_POS_X, 	cache_get_field_content_float(idx, "exit_x"));
		SetEntranceData(idx, E_EXIT_POS_Y, 	cache_get_field_content_float(idx, "exit_y"));
		SetEntranceData(idx, E_EXIT_POS_Z, 	cache_get_field_content_float(idx, "exit_z"));
		SetEntranceData(idx, E_EXIT_ANGLE, 	cache_get_field_content_float(idx, "exit_angle"));


		// ----------------------------------------------------------------------------------
		SetEntranceData(idx, E_STATUS, -1);

		SetEntranceData(idx, E_PICKUP_ID, CreatePickup(1273, 23, GetEntranceData(idx, E_POS_X), GetEntranceData(idx, E_POS_Y), GetEntranceData(idx, E_POS_Z), 0, PICKUP_ACTION_TYPE_ENTRANCE_ENT, idx));
		SetEntranceData(idx, E_MAP_ICON, CreateDynamicMapIcon(GetEntranceData(idx, E_POS_X), GetEntranceData(idx, E_POS_Y), GetEntranceData(idx, E_POS_Z), 31, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL));

		format(query, sizeof query, "- Подъезд -\n{FFFFFF}Номер подъезда: %d", idx + 1);
		SetEntranceData(idx, E_LABEL, CreateDynamic3DTextLabel(query, 0x3399FFFF, GetEntranceData(idx, E_POS_X), GetEntranceData(idx, E_POS_Y), GetEntranceData(idx, E_POS_Z) + 1.0, 15.0));

		for(j = 0; j < MAX_ENTRANCE_FLOORS; j ++)
		{
			for(k = 0; k < 4; k ++)
			{
				g_entrance_flat[idx][j][k] = -1;
			}
		}
	}
	g_entrance_loaded = rows;
	cache_delete(result);

	// инициализация инта подъезда
	CreatePickup(1318, 23, 558.4183, 22.0849, 1049.2656, -1, PICKUP_ACTION_TYPE_ENTRANCE_EXI); // выход из подъезда

	CreatePickup(1318, 23, 560.7483, 23.6653, 1049.2731, -1, PICKUP_ACTION_TYPE_ENTRANCE_LIF); // лифт на 0 этаже
	//CreatePickup(1318, 23, 11.1776, 1377.5216, 1508.4163, -1, PICKUP_ACTION_TYPE_ENTRANCE_LIF); // лифт на этаже выше 0

	CreateDynamic3DTextLabel("- Подъезд -\n{FFFFFF}Используйте: {FF9900}/lift", 0x3399FFFF, 560.7483, 23.6653, 1049.2731 + 1.0, 8.0); // лифт
	//CreateDynamic3DTextLabel("- Подъезд -\n{FFFFFF}Используйте: {FF9900}/lift", 0x3399FFFF, 11.1776, 1377.5216, 1508.4163 + 1.0, 8.0); // лифт

	for(idx = 0, k = 0; idx < MAX_ENTRANCE_FLOORS; idx ++)
	{
		format(query, sizeof query, "Этаж: %d", idx + 1);
		CreateDynamic3DTextLabel(query, 0xFFCD00FFF, 9.6966, 1376.0, 1508.4100 + 0.7, 8.0, _, _, _, _, idx + 2);

		for(j = 0; j < 4; j ++)
		{
			format(query, sizeof query, "Квартира\n{FFFFFF}Номер: %d", k + 1);
			CreateDynamic3DTextLabel(query, 0x3399FFFF, g_entrance_flat_pos[j][0], g_entrance_flat_pos[j][1], g_entrance_flat_pos[j][2] + 1.6, 6.0, _, _, _, _, idx + 2);

			k ++;
		}
	}
	for(idx = 0; idx < 4; idx ++)
	{
		CreatePickup(1318, 23, g_entrance_flat_pos[idx][0], g_entrance_flat_pos[idx][1], g_entrance_flat_pos[idx][2], -1, PICKUP_ACTION_TYPE_ENTRANCE_FLA, idx);
	}
	printf("[Entrances]: Подъездов загружено: %d", g_entrance_loaded);
}

public: EntranceStatusInit(entranceid)
{
	new e_houses = 0;
	for(new idx; idx < g_house_loaded; idx ++)
	{
		if(GetHouseData(idx, H_ENTRACE) != entranceid) continue;
		if(!IsHouseOwned(idx)) continue;

		e_houses ++;
	}
	UpdateEntrance(entranceid, e_houses);
}

public: LoadOwnableCars()
{
	new rows, vehicleid;
	new Cache: result;

	result = mysql_query(mysql, "SELECT oc.*, IFNULL(a.name, 'None') AS owner_name FROM ownable_cars oc LEFT JOIN accounts a ON a.id = oc.owner_id", true);
	rows = cache_num_rows();

	if(rows > MAX_OWNABLE_CARS)
	{
		rows = MAX_OWNABLE_CARS;
		print("[OwnableCars]: DB rows > MAX_OWNABLE_CARS");
	}
	for(new idx; idx < rows; idx ++)
	{
		SetOwnableCarData(idx, OC_SQL_ID, 		cache_get_field_content_int(idx, "id"));
		SetOwnableCarData(idx, OC_OWNER_ID, 	cache_get_field_content_int(idx, "owner_id"));

		SetOwnableCarData(idx, OC_MODEL_ID, 	cache_get_field_content_int(idx, "model_id"));
		SetOwnableCarData(idx, OC_COLOR_1, 		cache_get_field_content_int(idx, "color_1"));
		SetOwnableCarData(idx, OC_COLOR_2, 		cache_get_field_content_int(idx, "color_2"));

		SetOwnableCarData(idx, OC_POS_X, 		cache_get_field_content_float(idx, "pos_x"));
		SetOwnableCarData(idx, OC_POS_Y, 		cache_get_field_content_float(idx, "pos_y"));
		SetOwnableCarData(idx, OC_POS_Z, 		cache_get_field_content_float(idx, "pos_z"));
		SetOwnableCarData(idx, OC_ANGLE, 		cache_get_field_content_float(idx, "angle"));

		cache_get_field_content(idx, "number", g_ownable_car[idx][OC_NUMBER], mysql, 8);

		SetOwnableCarData(idx, OC_ALARM, 		bool: cache_get_field_content_int(idx, "alarm"));
		SetOwnableCarData(idx, OC_KEY_IN, 		bool: cache_get_field_content_int(idx, "key_in"));

		SetOwnableCarData(idx, OC_CREATE, 		cache_get_field_content_int(idx, "create_time"));
		SetOwnableCarData(idx, OC_VINILCAR, 		cache_get_field_content_int(idx, "vinilcar"));
		
		SetOwnableCarData(idx, OC_PT_ENGINE, 	cache_get_field_content_int(0, "pt_engine"));
		SetOwnableCarData(idx, OC_PT_BRAKE, 	cache_get_field_content_int(0, "pt_brake"));
		SetOwnableCarData(idx, OC_PT_STABILITY, cache_get_field_content_int(0, "pt_stability"));

		// cache_get_field_content(idx, "owner_name", g_ownable_car[idx][OC_OWNER_NAME], mysql, 21);
		// ----------------------------------------------------------------------------------------

		if(strlen(GetOwnableCarData(idx, OC_NUMBER)) != 6)
			strmid(g_ownable_car[idx][OC_NUMBER], "------", 0, 8, 8);

		vehicleid = CreateVehicle
		(
			GetOwnableCarData(idx, OC_MODEL_ID),
			GetOwnableCarData(idx, OC_POS_X),
			GetOwnableCarData(idx, OC_POS_Y),
			GetOwnableCarData(idx, OC_POS_Z),
			GetOwnableCarData(idx, OC_ANGLE),
			GetOwnableCarData(idx, OC_COLOR_1),
			GetOwnableCarData(idx, OC_COLOR_2),
			-1,
			0,
			VEHICLE_ACTION_TYPE_OWNABLE_CAR,
			idx
		);
		if(vehicleid != INVALID_VEHICLE_ID)
		{
			CreateVehicleLabel(vehicleid, GetOwnableCarData(idx, OC_NUMBER), 0xFFFF00EE, 0.0, 0.0, 1.3, 20.0);
			SetVehicleParam(vehicleid, V_LOCK, bool: cache_get_field_content_int(idx, "status"));

			SetVehicleData(vehicleid, V_MILEAGE, cache_get_field_content_float(idx, "mileage"));
		}
	}
	g_ownable_car_loaded = rows;
	cache_delete(result);

	printf("[OwnableCars]: Личных авто загружено: %d", g_ownable_car_loaded);
}

public: LoadOwnableCar(oc_id)
{
	if(g_ownable_car_loaded + 1 > MAX_OWNABLE_CARS)
	{
		print("[OwnableCars]: Ошибка в загрузке. Превышен лимит личного транспорта (MAX_OWNABLE_CARS)");
		return -1;
	}

	new query[55],
		Cache: result,
		vehicleid;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM ownable_cars WHERE id='%d' LIMIT 1", oc_id);
	result = mysql_query(mysql, query, true);

	new idx = GetFreeOwnableCarID();

	SetOwnableCarData(idx, OC_SQL_ID, 		cache_get_field_content_int(0, "id"));
	SetOwnableCarData(idx, OC_OWNER_ID, 	cache_get_field_content_int(0, "owner_id"));

	SetOwnableCarData(idx, OC_MODEL_ID, 	cache_get_field_content_int(0, "model_id"));
	SetOwnableCarData(idx, OC_COLOR_1, 		cache_get_field_content_int(0, "color_1"));
	SetOwnableCarData(idx, OC_COLOR_2, 		cache_get_field_content_int(0, "color_2"));

	SetOwnableCarData(idx, OC_POS_X, 		cache_get_field_content_float(0, "pos_x"));
	SetOwnableCarData(idx, OC_POS_Y, 		cache_get_field_content_float(0, "pos_y"));
	SetOwnableCarData(idx, OC_POS_Z, 		cache_get_field_content_float(0, "pos_z"));
	SetOwnableCarData(idx, OC_ANGLE, 		cache_get_field_content_float(0, "angle"));

	cache_get_field_content(0, "number", g_ownable_car[idx][OC_NUMBER], mysql, 8);

	SetOwnableCarData(idx, OC_ALARM, 		bool: cache_get_field_content_int(0, "alarm"));
	SetOwnableCarData(idx, OC_KEY_IN, 		bool: cache_get_field_content_int(0, "key_in"));

	SetOwnableCarData(idx, OC_CREATE, 		cache_get_field_content_int(0, "create_time"));
	SetOwnableCarData(idx, OC_VINILCAR, 		cache_get_field_content_int(0, "vinilcar"));

	SetOwnableCarData(idx, OC_PT_BRAKE, 		cache_get_field_content_int(0, "pt_brake"));
	SetOwnableCarData(idx, OC_PT_STABILITY, 	cache_get_field_content_int(0, "pt_stability"));
	SetOwnableCarData(idx, OC_PT_ENGINE, 		cache_get_field_content_int(0, "pt_engine"));

	// cache_get_field_content(0, "owner_name", g_ownable_car[idx][OC_OWNER_NAME], mysql, 21);

	// ----------------------------------------------------------------------------------------

	if(strlen(GetOwnableCarData(idx, OC_NUMBER)) != 6)
		strmid(g_ownable_car[idx][OC_NUMBER], "------", 0, 8, 8);

	vehicleid = CreateVehicle
	(
		GetOwnableCarData(idx, OC_MODEL_ID),
		GetOwnableCarData(idx, OC_POS_X),
		GetOwnableCarData(idx, OC_POS_Y),
		GetOwnableCarData(idx, OC_POS_Z),
		GetOwnableCarData(idx, OC_ANGLE),
		GetOwnableCarData(idx, OC_COLOR_1),
		GetOwnableCarData(idx, OC_COLOR_2),
		-1,
		0,
		VEHICLE_ACTION_TYPE_OWNABLE_CAR,
		idx
	);
	if(vehicleid != INVALID_VEHICLE_ID)
	{
		CreateVehicleLabel(vehicleid, GetOwnableCarData(idx, OC_NUMBER), 0xFFFF00EE, 0.0, 0.0, 1.3, 20.0);
		SetVehicleParam(vehicleid, V_LOCK, bool: cache_get_field_content_int(0, "status"));

		SetVehicleData(vehicleid, V_MILEAGE, cache_get_field_content_float(0, "mileage"));

		SetVehicleData(vehicleid, V_LAST_LOAD_TIME, gettime());
		
		ChangeVehiclePaintjob(vehicleid, GetOwnableCarData(idx, OC_VINILCAR));

		SetVehicleData(vehicleid, V_HEALTH, 1000);

		SetVehicleHealth(vehicleid, 1000);
	}

	cache_delete(result);

	LoadOwnableCarTrunk(vehicleid);

	return 1;
}

stock GetFreeOwnableCarID()
{
	for(new idx; idx < sizeof g_ownable_car; idx ++)
	{
		if(GetOwnableCarData(idx, OC_CREATE)) continue;

		return idx;
	}

	return -1;
}

stock UnloadPlayerOwnableCar(playerid, bool: ignore_time = false)
{
	new vehicleid = GetPlayerOwnableCar(playerid);

	if(vehicleid == INVALID_VEHICLE_ID)
	{
		return -1;
	}

	if((GetVehicleData(vehicleid, V_LAST_LOAD_TIME) > gettime() - 300) && !ignore_time)
	{
		return 0;
	}

	new index = GetVehicleData(vehicleid, V_ACTION_ID);

	DestroyVehicleLabel(vehicleid);

	SetOwnableCarData(index, OC_CREATE, 0);
	DestroyVehicle(vehicleid);
	UnloadOwnableCarTrunk(vehicleid);

	SetVehicleData(vehicleid, V_LAST_LOAD_TIME, 0);

	SetPlayerData(playerid, P_OWNABLE_CAR, INVALID_VEHICLE_ID);

	foreach(new idx : Player)
	{
		if(!IsPlayerLogged(idx)) continue;
		else if(GetPlayerAllowedCar(idx) != vehicleid) continue;

		if(ignore_time)
			SendClientMessage(idx, 0xFF5533FF, "Владелец доверенного Вам транспорта отключился. Транспорт выгружен с сервера");
		else
			SendClientMessage(idx, 0xFF5533FF, "Владелец доверенного Вам транспорта выгрузил транспорт с сервера");

		SetPlayerData(idx, P_ALLOWED_CAR, INVALID_VEHICLE_ID);
	}

	return 1;
}

public: LoadTrunks()
{
	new Cache: result, rows;
	new vehicleid, slot, buffer;

	result = mysql_query(mysql, "SELECT * FROM trunks ORDER BY owner_id ASC, id ASC", true);
	rows = cache_num_rows();

	for(new idx; idx < rows; idx ++)
	{
		vehicleid = GetOwnableCarBySqlID(cache_get_field_content_int(idx, "owner_id"));
		if(vehicleid != INVALID_VEHICLE_ID)
		{
			for(slot = 0; slot < MAX_VEHICLE_TRUNK_SLOTS; slot ++)
			{
				if(GetTrunkData(vehicleid, slot, VT_SQL_ID)) continue;

				SetTrunkData(vehicleid, slot, VT_SQL_ID,		cache_get_field_content_int(idx, "id"));
				SetTrunkData(vehicleid, slot, VT_ITEM_TYPE, 	cache_get_field_content_int(idx, "item_id"));
				SetTrunkData(vehicleid, slot, VT_ITEM_AMOUNT, 	cache_get_field_content_int(idx, "amount"));
				SetTrunkData(vehicleid, slot, VT_ITEM_VALUE,	cache_get_field_content_int(idx, "value"));
			}
			buffer ++;
		}
	}

	cache_delete(result);
	printf("[Trunks]: Предметов загружено: %d", buffer);
}

public: LoadOwnableCarTrunk(vehicleid)
{
	new query[60],
		slot,
		index,
		rows,
		Cache: result;

	index = GetVehicleData(vehicleid, V_ACTION_ID);

	mysql_format(mysql, query, sizeof query, "SELECT * FROM trunks WHERE oc_id='%d' ORDER BY id ASC", index);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	if(rows > MAX_VEHICLE_TRUNK_SLOTS)
		rows = MAX_VEHICLE_TRUNK_SLOTS;

	for(slot = 0; slot < rows; slot ++)
	{
		if(GetTrunkData(vehicleid, slot, VT_SQL_ID)) continue;

		SetTrunkData(vehicleid, slot, VT_SQL_ID,		cache_get_field_content_int(slot, "id"));
		SetTrunkData(vehicleid, slot, VT_ITEM_TYPE, 	cache_get_field_content_int(slot, "item_id"));
		SetTrunkData(vehicleid, slot, VT_ITEM_AMOUNT, 	cache_get_field_content_int(slot, "amount"));
		SetTrunkData(vehicleid, slot, VT_ITEM_VALUE,	cache_get_field_content_int(slot, "value"));
	}

	cache_delete(result);
}

stock UnloadOwnableCarTrunk(vehicleid)
{
	for(new slot = 0; slot < MAX_VEHICLE_TRUNK_SLOTS; slot ++)
	{
		RemoveTrunkItem(vehicleid, slot);
	}
}

public: LoadHotels()
{
	new query[64], idx;
	new Cache: result, rows;
	new hotel_id, room_id;

	result = mysql_query(mysql, "SELECT h.*, IFNULL(a.name, 'None') AS owner_name FROM hotels h LEFT JOIN accounts a ON a.id = h.owner_id ORDER BY h.hotel_id ASC, h.id ASC", true);
	rows = cache_num_rows();

	if(rows > MAX_HOTELS * MAX_HOTEL_ROOMS)
	{
		rows = MAX_HOTELS * MAX_HOTEL_ROOMS;
		print("[Hotels]: DB rows > MAX_HOTELS * MAX_HOTEL_ROOMS");
	}

	for(idx = 0; idx < rows; idx ++)
	{
		hotel_id = cache_get_field_content_int(idx, "hotel_id");
		if(0 <= hotel_id <= MAX_HOTELS-1)
		{
			room_id = g_hotel_rooms_loaded[hotel_id];
			if(0 <= room_id <= MAX_HOTEL_ROOMS-1)
			{
				SetHotelData(hotel_id, room_id, H_SQL_ID, 		cache_get_field_content_int(idx, "id"));
				SetHotelData(hotel_id, room_id, H_OWNER_ID, cache_get_field_content_int(idx, "owner_id"));
				SetHotelData(hotel_id, room_id, H_RENT_DATE, 	cache_get_field_content_int(idx, "rent_time"));
				SetHotelData(hotel_id, room_id, H_STATUS, 		bool: cache_get_field_content_int(idx, "status"));

				cache_get_field_content(idx, "owner_name", g_hotel[hotel_id][room_id][H_OWNER_NAME], mysql, 21);

				// ----------------------------------------------------------------------------------------------
				if(IsHotelRoomOwned(hotel_id, room_id) && !strcmp(GetHotelData(hotel_id, room_id, H_OWNER_NAME), "None", true))
				{
					SetHotelData(hotel_id, room_id, H_OWNER_ID, 0);

					mysql_format(mysql, query, sizeof query, "UPDATE hotels SET owner_id=0 WHERE id=%d LIMIT 1", GetHotelData(hotel_id, room_id, H_SQL_ID));
					mysql_query(mysql, query, false);
				}

				if(!IsHotelRoomOwned(hotel_id, room_id))
				{
					SetHotelData(hotel_id, room_id, H_STATUS, false);
				}
				g_hotel_rooms_loaded[hotel_id] ++;
			}
		}
	}
	cache_delete(result);

	// ----------------------------------
	CreatePickup(1318, 23, 733.0804, 599.6274, 1002.9598, -1);
	CreatePickup(1318, 23, 1276.0054, -776.3987, 1202.7220, -1);

	g_hotel_lift_CP[0] = CreateDynamicCP(733.0804, 599.6274, 1002.9598, 1.0, _, _, _, 5.0);
	g_hotel_lift_CP[1] = CreateDynamicCP(1276.0054, -776.3987, 1202.722, 1.0, _, _, _, 5.0);

	// ----------------------------------
	new
		Float: p_pos_x = 1273.2,
		Float: p_pos_y = -778.3146,
		Float: p_pos_z = 1202.7220;

	for(idx = 0; idx < 12; idx ++)
	{
		if(!(idx & 1))
		{
			p_pos_y += 4.0,
			p_pos_x += 5.7;
		}
		else p_pos_x -= 5.7;

		CreatePickup(19197, 23, p_pos_x, p_pos_y, p_pos_z, -1, PICKUP_ACTION_TYPE_HOTEL_ROOM, idx);

		format(query, sizeof query, "Комната\n{FFFFFF}Номер: %d", idx + 1);
		CreateDynamic3DTextLabel(query, 0x3399FFFF, p_pos_x, p_pos_y, p_pos_z + 1.4, 6.0);
	}

	for(idx = 0; idx < MAX_HOTEL_FLOORS; idx ++)
	{
		format(query, sizeof query, "Этаж: %d", idx + 1);
		CreateDynamic3DTextLabel(query, 0xFFCD00FF, 1276.0054, -776.3987, 1202.722 + 1.7, 8.0, _, _, _, _, idx + 1);
	}

	// ----------------------------------
	for(idx = 0; idx < MAX_HOTELS; idx ++)
	{
		if(g_hotel_rooms_loaded[idx])
		{
			g_hotel_loaded ++;
		}
	}
	printf("[Hotels]: Отелей загружено: %d / Номеров: %d", g_hotel_loaded, rows);
}

public: LoadLeaderList()
{
	new idx, frac_id;
	new Cache: result, rows;

	result = mysql_query(mysql, "SELECT * FROM `leaders`", true);
	rows = cache_num_rows();

	if(rows > MAX_ORG)
	{
		rows = MAX_ORG;
		print("[Leader List]: DB rows > MAX_ORG");
	}

	for(idx = 0; idx < rows; idx ++)
	{
		frac_id = cache_get_field_content_int(idx, "frac_id");
		cache_get_field_content(idx, "name", g_organization[frac_id][O_LEADER], mysql, 64);

		// -------------------------
	}
	printf("[Leader List]: Лидеров загружено: %d", rows);
	cache_delete(result);
}

public: LoadGift()
{
	new idx;
	//new query[85];
	new Cache: result, rows;

	result = mysql_query(mysql, "SELECT * FROM gift", true);
	rows = cache_num_rows();

	if(rows > MAX_GIFT)
	{
		rows = MAX_GIFT;
		print("[Gift]: DB rows > MAX_GIFT");
	}


	for(idx = 0; idx < rows; idx ++)
	{
		SetGiftData(idx, G_SQL_ID, 		cache_get_field_content_int(idx, "id"));

		SetGiftData(idx, G_POS_X,		cache_get_field_content_float(idx, "x"));
		SetGiftData(idx, G_POS_Y,		cache_get_field_content_float(idx, "y"));
		SetGiftData(idx, G_POS_Z,		cache_get_field_content_float(idx, "z"));

	 	CreatePickup
		(
			1279,
			23,
			g_gift[idx][G_POS_X], g_gift[idx][G_POS_Y], g_gift[idx][G_POS_Z],
			-1,
			PICKUP_ACTION_TYPE_GIFT,
			idx
		);
	}


	g_gift_loaded = rows;
	cache_delete(result);

    printf("[Gift]: Подарки: %d", g_gift_loaded);
}

public: LoadHouses()
{
	new idx;
	new query[85], buffer[2];
	new Cache: result, rows;

	// result = mysql_query(mysql, "SELECT h.*, IFNULL(a.name, 'None') owner_name FROM houses h LEFT JOIN accounts a ON a.id = h.owner_id ORDER BY h.id ASC, h.entrance ASC", true);
	result = mysql_query(mysql, "SELECT h.*, IFNULL(a.name, 'None') owner_name FROM houses h LEFT JOIN accounts a ON a.id=h.owner_id", true);
	rows = cache_num_rows();

	if(rows > MAX_HOUSES)
	{
		rows = MAX_HOUSES;
		print("[Houses]: DB rows > MAX_HOUSES");
	}

	for(idx = 0; idx < rows; idx ++)
	{
		SetHouseData(idx, H_SQL_ID, 		cache_get_field_content_int(idx, "id"));
		SetHouseData(idx, H_OWNER_ID, cache_get_field_content_int(idx, "owner_id"));

		cache_get_field_content(idx, "name", g_house[idx][H_NAME], mysql, 20);

		SetHouseData(idx, H_IMPROVEMENTS,	cache_get_field_content_int(idx, "improvements"));

		SetHouseData(idx, H_RENT_DATE,		cache_get_field_content_int(idx, "rent_time"));
		SetHouseData(idx, H_PRICE,			cache_get_field_content_int(idx, "price"));
		SetHouseData(idx, H_RENT_PRICE,		cache_get_field_content_int(idx, "rent_price"));
		SetHouseData(idx, H_TYPE,			cache_get_field_content_int(idx, "type"));
		SetHouseData(idx, H_ENTRACE,		cache_get_field_content_int(idx, "entrance"));
		SetHouseData(idx, H_LOCK_STATUS,	bool: cache_get_field_content_int(idx, "lock"));

		SetHouseData(idx, H_POS_X,			cache_get_field_content_float(idx, "x"));
		SetHouseData(idx, H_POS_Y,			cache_get_field_content_float(idx, "y"));
		SetHouseData(idx, H_POS_Z,			cache_get_field_content_float(idx, "z"));

		SetHouseData(idx, H_EXIT_POS_X,		cache_get_field_content_float(idx, "exit_x"));
		SetHouseData(idx, H_EXIT_POS_Y,		cache_get_field_content_float(idx, "exit_y"));
		SetHouseData(idx, H_EXIT_POS_Z,		cache_get_field_content_float(idx, "exit_z"));
		SetHouseData(idx, H_EXIT_ANGLE,		cache_get_field_content_float(idx, "exit_angle"));

		SetHouseData(idx, H_CAR_POS_X,		cache_get_field_content_float(idx, "car_x"));
		SetHouseData(idx, H_CAR_POS_Y,		cache_get_field_content_float(idx, "car_y"));
		SetHouseData(idx, H_CAR_POS_Z,		cache_get_field_content_float(idx, "car_z"));
		SetHouseData(idx, H_CAR_ANGLE,		cache_get_field_content_float(idx, "car_angle"));

		SetHouseData(idx, H_STORE_X,		cache_get_field_content_float(idx, "store_x"));
		SetHouseData(idx, H_STORE_Y,		cache_get_field_content_float(idx, "store_y"));
		SetHouseData(idx, H_STORE_Z,		cache_get_field_content_float(idx, "store_z"));

		SetHouseData(idx, H_EVICTION,		cache_get_field_content_int(idx, "eviction"));

		SetHouseData(idx, H_STORE_METALL,	cache_get_field_content_int(idx, "store_metall"));
		SetHouseData(idx, H_STORE_DRUGS,	cache_get_field_content_int(idx, "store_drugs"));
		SetHouseData(idx, H_STORE_WEAPON,	cache_get_field_content_int(idx, "store_weapon"));
		SetHouseData(idx, H_STORE_AMMO,		cache_get_field_content_int(idx, "store_ammo"));
		SetHouseData(idx, H_STORE_SKIN,		cache_get_field_content_int(idx, "store_skin"));

		cache_get_field_content(idx, "owner_name", g_house[idx][H_OWNER_NAME], mysql, 21);

		// -------------------------
		SetHouseData(idx, H_STORE_LABEL, Text3D:-1);

		buffer[0] = GetHouseData(idx, H_TYPE);
		if(!strlen(GetHouseData(idx, H_NAME)))
			format(g_house[idx][H_NAME], 20, GetHouseTypeInfo(buffer[0], HT_NAME), 0);

		if(IsHouseOwned(idx) && !strcmp(GetHouseData(idx, H_OWNER_NAME), "None", true))
		{
			mysql_format(mysql, query, sizeof query, "UPDATE accounts SET `house`=-1,`house_room`=-1,`house_type`=-1 WHERE `id`=%d LIMIT 1", GetHouseData(idx, H_OWNER_ID));
			mysql_query(mysql, query, false);

			SetHouseData(idx, H_OWNER_ID, 0);

			mysql_format(mysql, query, sizeof query, "UPDATE houses SET owner_id=0,improvements=0 WHERE id=%d", GetHouseData(idx, H_SQL_ID));
			mysql_query(mysql, query, false);
		}

		if(!IsHouseOwned(idx))
		{
			SetHouseData(idx, H_IMPROVEMENTS, 	0);
			SetHouseData(idx, H_LOCK_STATUS, 	false);
		}
		UpdateHouse(idx);

		HouseHealthInit(idx);
		HouseStoreInit(idx);

		buffer[0] = GetHouseData(idx, H_ENTRACE);
		if(buffer[0] != -1)
		{
			buffer[1] = g_entrance_flats_loaded[buffer[0]];

			g_entrance_flats_loaded[buffer[0]] ++;
			g_entrance_flat[buffer[0]][buffer[1] / 4][buffer[1] % 4] = idx;

			SetHouseData(idx, H_FLAT_ID, buffer[1]);
		}
	}
	g_house_loaded = rows;
	cache_delete(result);

	for(new i = 0; i < sizeof(g_house_type); i++)
	{
		CreateDynamic3DTextLabel("Выход\nКлавиша: {0095FF}'ALT' (Комманда /exit)", -1, g_house_type[i][HT_ENTER_POS_X], g_house_type[i][HT_ENTER_POS_Y], g_house_type[i][HT_ENTER_POS_Z], 9.0);
	}

	CreateDynamic3DTextLabel("Выход\nКлавиша: {0095FF}'ALT' (Комманда /exit)", -1, 1.2011, 1994.7356, 1554.2031, 9.0, _, _, _, -1, -1);
	CreateDynamic3DTextLabel("Выход\nКлавиша: {0095FF}'ГУДОК'", -1, -0.2940,2006.1187,1554.2031, 9.0, _, _, _, -1, -1);
	printf("[Houses]: Домов загружено: %d", g_house_loaded);
}

public: LoadSettings()
{
	new Cache: result;

	result = mysql_query(mysql, "SELECT * FROM `server_settings`", true);

	Config[admin_price] = cache_get_field_content_int(0, "admin_price", mysql);
    Config[helper_price] = cache_get_field_content_int(0, "helper_price", mysql);

    printf("%d odmen_price", Config[admin_price]);

    Config[sDistRub] = cache_get_field_content_int(0, "distrub", mysql);
    Config[sDonPower] = cache_get_field_content_int(0, "donpower", mysql);
    Config[sGiveCoins] = cache_get_field_content_int(0, "GiveCoins", mysql);
    Config[sBonusMoney] = cache_get_field_content_int(0, "BonusMoney", mysql);
    Config[sBonusDonate] = cache_get_field_content_int(0, "BonusDonate", mysql);
    Config[sBonusLevel] = cache_get_field_content_int(0, "BonusLevel", mysql);
    Config[sBuyBiz] = cache_get_field_content_int(0, "BuyBiz", mysql);


	cache_delete(result);

	printf("[CONFIG]: Настройки сервера загружены!");
}

public: LoadHousesRenters()
{
	new sql_id;
	new owner_id;
	new house_id;
	new room_id;
	new rent_time;
	new time;
	new owner_name[21];

	new Cache: result, rows;

	result = mysql_query(mysql, "SELECT h.*, IFNULL(a.name, 'None') owner_name FROM houses_renters h LEFT JOIN accounts a ON a.id=h.owner_id", true);
	rows = cache_num_rows();

	for(new idx; idx < rows; idx ++)
	{
		sql_id = 	cache_get_field_content_int(idx, "id");

		owner_id = 	cache_get_field_content_int(idx, "owner_id");
		house_id = 	cache_get_field_content_int(idx, "house_id");
		room_id =	cache_get_field_content_int(idx, "room_id");
		rent_time =	cache_get_field_content_int(idx, "rent_time");
		time = 		cache_get_field_content_int(idx, "time");

		cache_get_field_content(idx, "owner_name", owner_name, mysql, 21);
		if(!strlen(owner_name))
			owner_name[0] = '\1';

		CallLocalFunction("HouseRenterInit", "iiiiiis", sql_id, owner_id, house_id, room_id, rent_time, time, owner_name);
	}
	cache_delete(result);

	printf("[Houses]: Арендаторов загружено: %d", rows);
}

public: HouseRenterInit(id, owner_id, house_id, room_id, rent_time, time, owner_name[])
{
	new houseid = GetHouseIndexBySQLID(house_id);
	if(houseid != -1)
	{
		if(0 <= room_id <= MAX_HOUSE_ROOMS-1)
		{
			SetHouseRenterInfo(houseid, room_id, HR_SQL_ID, id);
			SetHouseRenterInfo(houseid, room_id, HR_OWNER_ID, owner_id);
			SetHouseRenterInfo(houseid, room_id, HR_RENT_DATE, rent_time);
			SetHouseRenterInfo(houseid, room_id, HR_RENT_TIME, time);

			format(g_house_renters[houseid][room_id][HR_OWNER_NAME], 21, owner_name, 0);

			AddHouseRentersCount(houseid, +, 1);
		}
	}
}

public: ShowPlayerHouseInfo(playerid, houseid)
{
	if(0 <= houseid <= g_house_loaded-1)
	{
		if(GetPlayerInHouse(playerid) == -1)
		{
			SetPlayerUseListitem(playerid, houseid);

			new fmt_str[60];
			new string[256];
			new type = GetHouseData(houseid, H_TYPE);

			if(IsHouseOwned(houseid))
			{
				if(!GetHouseData(houseid, H_EVICTION))
				{
					format(fmt_str, sizeof fmt_str, "{FFFFFF}Владелец:\t\t\t{33CCFF}%s\n\n", GetHouseData(houseid, H_OWNER_NAME));
					strcat(string, fmt_str);
				}
				else
				{
					strcat(string, "{FFFFFF}Владелец:\t\t\t{33CCFF}Выселен\n\n");
				}
			}

			format(fmt_str, sizeof fmt_str, "{FFFFFF}Тип:\t\t\t\t%s\n", GetHouseData(houseid, H_NAME));
			strcat(string, fmt_str);

			if(GetHouseData(houseid, H_ENTRACE) != -1)
			{
				print("OkeySSS");
				//format(fmt_str, sizeof fmt_str, "Этаж:\t\t\t\t%d\n", GetHouseData(houseid, H_FLAT_ID) / 4 + 1);
				//strcat(string, fmt_str);

				format(fmt_str, sizeof fmt_str, "Номер квартиры:\t\t%d\n", GetHouseData(houseid, H_FLAT_ID) + 1);
				strcat(string, fmt_str);

				if(!IsHouseOwned(houseid)) strcat(string, "\n");

				format(fmt_str, sizeof fmt_str, "Номер подъезда:\t\t%d\n", GetHouseData(houseid, H_ENTRACE) + 1);
				strcat(string, fmt_str);
			}
			else
			{
				format(fmt_str, sizeof fmt_str, "Номер дома:\t\t\t%d\n", houseid);
				strcat(string, fmt_str);

				if(!IsHouseOwned(houseid)) strcat(string, "\n");
			}

			format(fmt_str, sizeof fmt_str, "Количество комнат:\t\t%d\n", GetHouseTypeInfo(type, HT_ROOMS));
			strcat(string, fmt_str);

			format(fmt_str, sizeof fmt_str, "Стоимость:\t\t\t%d руб\n", GetHouseData(houseid, H_PRICE));
			strcat(string, fmt_str);

			format(fmt_str, sizeof fmt_str, "Ежедневная квартплата:\t%d руб", GetHouseData(houseid, H_RENT_PRICE));
			strcat(string, fmt_str);

			if(IsHouseOwned(houseid))
			{
				if(GetHouseData(houseid, H_IMPROVEMENTS) >= 4)
				{
					format(fmt_str, sizeof fmt_str, " {33CC99}(%d руб)", GetHouseData(houseid, H_RENT_PRICE) / 2);
					strcat(string, fmt_str);
				}
				Dialog(playerid, DIALOG_HOUSE_ENTER, DIALOG_STYLE_MSGBOX, "{FF9900}Дом занят", string, "Войти", "Отмена");
			}
			else Dialog(playerid, DIALOG_HOUSE_BUY, DIALOG_STYLE_MSGBOX, "{33CC00}Дом свободен", string, "Купить", "Отмена");
		}
	}
	return 1;
}

public: ShowPlayerHouseDialog(playerid, operationid)
{
	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
	if(houseid != -1)
	{
		if(GetHouseData(houseid, H_ENTRACE) != -1)
		{
			if(operationid >= HOUSE_OPERATION_CAR_DELIVERY)
			{
				operationid ++;
			}
		}
		switch(operationid)
		{
			case HOUSE_OPERATION_PARAMS:
			{
				if(GetHouseData(houseid, H_ENTRACE) != -1)
				{
					Dialog
					(
						playerid, DIALOG_HOUSE_PARAMS, DIALOG_STYLE_LIST,
						"{33AACC}Изменение параметров дома",
						"1. {669966}Открыть {FFFFFF}или {CC3333}закрыть {FFFFFF}дом\n"\
						"2. Улучшить дом\n"\
						"3. Отметить транспорт на GPS\n"\
						"4. Список арендаторов",
						"Выбрать", "Назад"
					);
				}
				else
				{
					Dialog
					(
						playerid, DIALOG_HOUSE_PARAMS, DIALOG_STYLE_LIST,
						"{33AACC}Изменение параметров дома",
						"1. {669966}Открыть {FFFFFF}или {CC3333}закрыть {FFFFFF}дом\n"\
						"2. Улучшить дом\n"\
						"3. Доставить транспорт к дому {FF6600}(550 руб)\n"\
						"4. Отметить транспорт на GPS\n"\
						"5. Список арендаторов",
						"Выбрать", "Назад"
					);
				}
			}
			case HOUSE_OPERATION_LOCK:
			{
				if(GetHouseData(houseid, H_LOCK_STATUS))
				{
					SetHouseData(houseid, H_LOCK_STATUS, false);
					SendClientMessage(playerid, 0x66CC00FF, "Дом открыт");
				}
				else
				{
					SetHouseData(houseid, H_LOCK_STATUS, true);
					SendClientMessage(playerid, 0xFF6600FF, "Дом закрыт");
				}

				new query[75];
				mysql_format(mysql, query, sizeof query, "UPDATE `houses` SET `lock`=%d WHERE `id`=%d LIMIT 1", GetHouseData(houseid, H_LOCK_STATUS), GetHouseData(houseid, H_SQL_ID));
				mysql_query(mysql, query, false);

				CallLocalFunction("ShowPlayerHouseDialog", "ii", playerid, HOUSE_OPERATION_PARAMS);
			}
			case HOUSE_OPERATION_IMPROVEMENTS:
			{
				new fmt_str[75];
				new string[512];

				new str_numeric[14 + 1];
				new i_level = GetHouseData(houseid, H_IMPROVEMENTS);

				for(new idx; idx < sizeof(g_house_improvements); idx ++)
				{
					format(fmt_str, sizeof fmt_str, "%d уровень:\t%s\t\t", idx + 1, g_house_improvements[idx][I_NAME]);

					switch(idx)
					{
						case 1,4,5:
							strcat(fmt_str, "\t");

						case 6:
							strcat(fmt_str, "\t\t");
					}

					if(i_level > idx)
					{
						strins(fmt_str, "{2277AA}", 0, sizeof fmt_str);
						strcat(fmt_str, "Куплено");
					}
					else
					{
						if(i_level < idx)
						{
							strins(fmt_str, "{CC3344}", 0, sizeof fmt_str);
						}
						strcat(string, fmt_str);

						valfmt(str_numeric, g_house_improvements[idx][I_PRICE]);
						format(fmt_str, sizeof fmt_str, "%s руб", str_numeric);

						if(i_level == idx)
							strins(fmt_str, "{66CC33}", 0, sizeof fmt_str);
					}
					strcat(fmt_str, "\n");
					strcat(string, fmt_str);
				}
				Dialog(playerid, DIALOG_HOUSE_IMPROVEMENTS, DIALOG_STYLE_LIST, "{33AADD}Улучшения для дома", string, "Купить", "Назад");
			}
			case HOUSE_OPERATION_CAR_DELIVERY:
			{
				if(GetHouseData(houseid, H_ENTRACE) == -1)
				{
					new vehicleid = GetPlayerOwnableCar(playerid);
					if(vehicleid != INVALID_VEHICLE_ID)
					{
						if(GetHouseData(houseid, H_IMPROVEMENTS) == 6)
						{	
							new price = 550;
							if(GetPlayerMoneyEx(playerid) >= price)
							{
								GivePlayerMoneyEx(playerid, -price, "Доставка ТС к дому (/home)", true, true);

								SetVehiclePos
								(
									vehicleid,
									-0.3530,
									2001.3107,
									1553.8632
								);

								SetVehicleZAngle(vehicleid, GetHouseData(houseid, H_CAR_ANGLE));
								SetVehicleParam(vehicleid, V_ENGINE, IsABike(vehicleid) ? VEHICLE_PARAM_ON : VEHICLE_PARAM_OFF);

								new type = GetHouseData(houseid, H_TYPE);

								LinkVehicleToInterior(vehicleid, GetHouseTypeInfo(type, HT_INTERIOR));
								SetVehicleVirtualWorld(vehicleid, houseid + 2000);

								return SendClientMessage(playerid, 0x3399FFFF, "Транспорт был доставлен к Вашему дому");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "У вас нет гаража");
					}
					else
					{
						if(GetPlayerOwnableCars(playerid) == 0)
							SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
						else
							SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
					}
				}
				else SendClientMessage(playerid, 0xCECECEFF, "Функция доступна владельцам домов");

				CallLocalFunction("ShowPlayerHouseDialog", "ii", playerid, HOUSE_OPERATION_PARAMS);
			}
			case HOUSE_OPERATION_CAR_GPS:
			{
				if(!callcmd::getmycar(playerid, ""))
				{
					CallLocalFunction("ShowPlayerHouseDialog", "ii", playerid, HOUSE_OPERATION_PARAMS);
				}
			}
			case HOUSE_OPERATION_RENTERS:
			{
				if(GetHouseRentersCount(houseid) > 0)
				{
					new type = GetHouseData(houseid, H_TYPE);
					new rooms = GetHouseTypeInfo(type, HT_ROOMS);

					if (rooms > MAX_HOUSE_ROOMS) {
						rooms = MAX_HOUSE_ROOMS;
					}

					new fmt_str[21 + 1];
					new string[MAX_HOUSE_ROOMS * (sizeof fmt_str) + 1];

					for(new idx, count; idx < rooms; idx ++)
					{
						if(!IsHouseRoomOwned(houseid, idx)) continue;

						format(fmt_str, sizeof fmt_str, "%s\n", GetHouseRenterInfo(houseid, idx, HR_OWNER_NAME));
						strcat(string, fmt_str);

						SetPlayerListitemValue(playerid, count ++, idx);
					}
					Dialog(playerid, DIALOG_HOUSE_RENTERS, DIALOG_STYLE_LIST, "{33AACC}Список арендаторов", string, "Выбрать", "Назад");
				}
				else
				{
					Dialog
					(
						playerid, DIALOG_HOUSE_INFO, DIALOG_STYLE_MSGBOX,
						"{33AACC}Список арендаторов",
						"{FFFFFF}В Вашем доме, кроме Вас, сейчас никто не проживает",
						"Назад", ""
					);
				}
			}
		}
	}
	return 1;
}

public: UpdateRealtorHomeInfo()
{
	new count = -1;
	new fmt_str[128];
	new free_houses = GetFreeHousesCount();

	new new_line = floatround((float(free_houses) / 10) + 2, floatround_ceil);
	if(new_line > 28)
	{
		new_line = 28;
	}

	g_house_realtor_list = "{FFFFFF}";
	for(new idx; idx < g_house_loaded; idx ++)
	{
		if(IsHouseOwned(idx)) continue;
		if(++count > new_line)
		{
			count = -1;
		}

		format(fmt_str, sizeof fmt_str, "%d%s", idx, count != -1 ? ("\t") : ("\n"));
		strcat(g_house_realtor_list, fmt_str);
	}

	format
	(
		fmt_str, sizeof fmt_str,
		"Состояние недвижимости\n"\
		"(обновляется каждый час)\n\n"\
		"{FF6633}Куплено домов: %d\n"\
		"{99FF33}Свободно домов: %d",
		g_house_loaded - free_houses,
		free_houses
	);
	UpdateDynamic3DTextLabelText(g_house_realtor_label, 0xCCFF66FF, fmt_str);
}

public: UpdateHouseStore(houseid)
{
	if(GetHouseData(houseid, H_STORE_LABEL) != Text3D:-1)
	{
		new fmt_str[256];

		format
		(
			fmt_str, sizeof fmt_str,
			"Шкаф\n"\
			"{FFFFFF}Металл: {6699FF}%d из 700 кг\n"\
			"{FFFFFF}Наркотики: {6699FF}%d из 2000 г\n"\
			"{FFFFFF}Оружие: {6699FF}%s\n"\
			"{FFFFFF}Патроны: {6699FF}%d из 3000 шт\n"\
			"{FFFFFF}Одежда: {FF6600}%s",
			GetHouseData(houseid, H_STORE_METALL),
			GetHouseData(houseid, H_STORE_DRUGS),
			GetHouseData(houseid, H_STORE_WEAPON) ? GetWeaponName(GetHouseData(houseid, H_STORE_WEAPON)) : ("нет"),
			GetHouseData(houseid, H_STORE_AMMO),
			GetHouseData(houseid, H_STORE_SKIN) ? ("есть") : ("нет")
		);
		UpdateDynamic3DTextLabelText(GetHouseData(houseid, H_STORE_LABEL), 0xFFFF00FF, fmt_str);
	}
}

public: EvictHouseRentersAll(houseid)
{
	new query[128];

	mysql_format(mysql, query, sizeof query, "UPDATE accounts SET house_type=-1,house_room=-1,house=-1 WHERE house=%d AND house_type=%d", houseid, HOUSE_TYPE_ROOM);
	mysql_tquery(mysql, query, "", "");

	mysql_format(mysql, query, sizeof query, "DELETE FROM houses_renters WHERE house_id=%d", GetHouseData(houseid, H_SQL_ID));
	mysql_tquery(mysql, query, "", "");

	for(new idx; idx < MAX_HOUSE_ROOMS; idx ++)
	{
		if(!IsHouseRoomOwned(houseid, idx)) continue;

		SetHouseRenterInfo(houseid, idx, HR_SQL_ID, 	0);
		SetHouseRenterInfo(houseid, idx, HR_OWNER_ID, 	0);
	}

	foreach(new playerid : Player)
	{
		if(!IsPlayerLogged(playerid)) continue;
		if(GetPlayerHouse(playerid, HOUSE_TYPE_ROOM) != houseid) continue;

		SetPlayerData(playerid, P_HOUSE, -1);
		SetPlayerData(playerid, P_HOUSE_ROOM, -1);
		SetPlayerData(playerid, P_HOUSE_TYPE, -1);

		SendClientMessage(playerid, 0x3399FFFF, "Вы были выселены из дома");
	}
}

public: LoadBusinesses()
{
	new query[85], buffer[2];
	new Cache: result, rows;

	result = mysql_query(mysql, "SELECT b.*, IFNULL(a.name, 'None') AS owner_name FROM business b LEFT JOIN accounts a ON a.id=b.owner_id", true);
	rows = cache_num_rows();

	if(rows > MAX_BUSINESS)
	{
		rows = MAX_BUSINESS;
		print("[Business]: DB rows > MAX_BUSINESS");
	}
	for(new idx; idx < rows; idx ++)
	{
		SetBusinessData(idx, B_SQL_ID, 		cache_get_field_content_int(idx, "id"));
		SetBusinessData(idx, B_OWNER_ID, cache_get_field_content_int(idx, "owner_id"));

		cache_get_field_content(idx, "name", g_business[idx][B_NAME], mysql, 24);

		SetBusinessData(idx, B_IMPROVEMENTS,	cache_get_field_content_int(idx, "improvements"));
		SetBusinessData(idx, B_PRODS,			cache_get_field_content_int(idx, "products"));
		SetBusinessData(idx, B_PROD_PRICE,		cache_get_field_content_int(idx, "prod_price"));
		SetBusinessData(idx, B_BALANCE,			cache_get_field_content_int(idx, "balance"));
		SetBusinessData(idx, B_RENT_DATE,		cache_get_field_content_int(idx, "rent_time"));
		SetBusinessData(idx, B_PRICE,			cache_get_field_content_int(idx, "price"));
		SetBusinessData(idx, B_RENT_PRICE,		cache_get_field_content_int(idx, "rent_price"));

		SetBusinessData(idx, B_TYPE,			cache_get_field_content_int(idx, "type"));
		SetBusinessData(idx, B_INTERIOR,		cache_get_field_content_int(idx, "interior"));

		SetBusinessData(idx, B_ENTER_PRICE,		cache_get_field_content_int(idx, "enter_price"));
		SetBusinessData(idx, B_ENTER_MUSIC,		cache_get_field_content_int(idx, "enter_music"));

		SetBusinessData(idx, B_LOCK_STATUS,		bool: cache_get_field_content_int(idx, "lock"));

		SetBusinessData(idx, B_POS_X,			cache_get_field_content_float(idx, "x"));
		SetBusinessData(idx, B_POS_Y,			cache_get_field_content_float(idx, "y"));
		SetBusinessData(idx, B_POS_Z,			cache_get_field_content_float(idx, "z"));

		SetBusinessData(idx, B_EXIT_POS_X,		cache_get_field_content_float(idx, "exit_x"));
		SetBusinessData(idx, B_EXIT_POS_Y,		cache_get_field_content_float(idx, "exit_y"));
		SetBusinessData(idx, B_EXIT_POS_Z,		cache_get_field_content_float(idx, "exit_z"));
		SetBusinessData(idx, B_EXIT_ANGLE,		cache_get_field_content_float(idx, "exit_angle"));

		SetBusinessData(idx, B_EVICTION,		cache_get_field_content_int(idx, "eviction"));

		cache_get_field_content(idx, "owner_name", g_business[idx][B_OWNER_NAME], mysql, 21);

		// -------------------------

		SetBusinessData(idx, B_ORDER_ID, -1);
		SetBusinessData(idx, B_LABEL, CreateDynamic3DTextLabel(GetBusinessData(idx, B_NAME), 0xFFFF00FF, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z) + 1.0, 6.50));

		if(IsBusinessOwned(idx) && !strcmp(GetBusinessData(idx, B_OWNER_NAME), "None", true))
		{
			mysql_format(mysql, query, sizeof query, "UPDATE accounts SET `business`=-1 WHERE `id`=%d LIMIT 1", GetBusinessData(idx, B_OWNER_ID));
			mysql_query(mysql, query, false);

			SetBusinessData(idx, B_OWNER_ID, 0);

			mysql_format(mysql, query, sizeof query, "UPDATE business SET owner_id=0,improvements=0 WHERE id=%d", GetBusinessData(idx, B_SQL_ID));
			mysql_query(mysql, query, false);
		}

		if(!IsBusinessOwned(idx))
		{
			SetBusinessData(idx, B_PRODS,		0);
			SetBusinessData(idx, B_PROD_PRICE, 	0);
			SetBusinessData(idx, B_LOCK_STATUS, false);

			SetBusinessData(idx, B_ENTER_MUSIC, 0);
			SetBusinessData(idx, B_ENTER_PRICE, 0);

			if(GetBusinessData(idx, B_IMPROVEMENTS) >= 6)
			{
				mysql_format(mysql, query, sizeof query, "DELETE FROM business_gps WHERE bid=%d", idx);
				mysql_query(mysql, query, false);
			}
		}
		CallLocalFunction("UpdateBusinessLabel", "i", idx);

		BusinessHealthPickupInit(idx);

		CreatePickup(1318, 23, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 0, PICKUP_ACTION_TYPE_BIZ_ENTER, idx);
        CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 52, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);

		//CreateDynamicMapIcon(GetFuelStationData(idx, FS_POS_X), GetFuelStationData(idx, FS_POS_Y), GetFuelStationData(idx, FS_POS_Z), 47, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
	}
	g_business_loaded = rows;
	cache_delete(result);

	for(new idx; idx < sizeof g_business_interiors; idx ++)
	{
		CreatePickup(1318, 23, GetBusinessInteriorInfo(idx, BT_EXIT_POS_X), GetBusinessInteriorInfo(idx, BT_EXIT_POS_Y), GetBusinessInteriorInfo(idx, BT_EXIT_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_EXIT, idx);
		buffer[0] = -1;

		switch(idx)
		{
			case BUSINESS_INTERIOR_SHOP_24_7:
			{
				CreateDynamic3DTextLabel
				(
					"Список\n"\
					"товаров\n"\
					"{FFCD00}Введите /buy",
					0x00CC00EE,
					GetBusinessInteriorInfo(idx, BT_BUY_POS_X),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Y),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Z) + 0.8,
					8.0
				);
				CreatePickup(1239, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_SHOP_247, idx);
			}
			case BUSINESS_INTERIOR_CLUB, BUSINESS_INTERIOR_CASINO:
			{
				CreateDynamic3DTextLabel
				(
					"Меню бара:\n\n"\
					"{6699FF}1. Лимонад\n"\
					"2. Пиво\n"\
					"3. Вино\n"\
					"4. Шампанское\n"\
					"5. Водка\n"\
					"6. Коньяк\n"\
					"7. Виски\n"\
					"8. Абсент\n"\
					"{00CC66}9. Закуска\n"\
					"10. Сигара",
					0xFFFFFFCC,
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_X),
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_Y),
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_Z),
					9.0
				);
				buffer[0] = CreateDynamicCP(GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), 1.0, _, _, _, 8.0);
			}
			case BUSINESS_INTERIOR_REALTOR_BIZ:
			{
				g_business_realtor_label = CreateDynamic3DTextLabel
				(
					"Состояние бизнеса",
					0xCCFF66FF,
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_X),
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_Y),
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_Z),
					10.0
				);
				//CreatePickup(1239, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1);
				buffer[0] = CreateDynamicCP(GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z) - 1.0, 1.2, _, _, _, 10.0);

				CallLocalFunction("UpdateRealtorBizInfo", "");
			}
			case BUSINESS_INTERIOR_REALTOR_HOME:
			{
				g_house_realtor_label = CreateDynamic3DTextLabel
				(
					"Состояние недвижимости",
					0xCCFF66FF,
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_X),
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_Y),
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_Z),
					10.0
				);
				CreatePickup(1273, 23, 158.4875, 745.8184, 25.8272, -1, PICKUP_ACTION_TYPE_REALTOR_HOME, idx);
				CreatePickup(1272, 23, 156.3270, 746.5958, 25.8272, -1, PICKUP_ACTION_TYPE_REALTOR_HOME, idx);

				CreatePickup(1239, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1);
				buffer[0] = CreateDynamicCP(GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), 0.7, _, _, _, 5.0);

				CallLocalFunction("UpdateRealtorHomeInfo", "");
			}
			case BUSINESS_INTERIOR_HOTEL:
			{
				CreatePickup(1277, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1);

				CreateDynamic3DTextLabel("Услуги\n{FFFFFF}гост. комплекса", 0x3399FFFF, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z) + 0.8, 5.0);
				buffer[0] = CreateDynamicCP(GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), 1.2, _, _, _, 20.0);
			}
			case BUSINESS_INTERIOR_CELL_SALON:
			{
				CreateDynamic3DTextLabel
				(
					"Сотовый\n"\
					"салон\n"\
					"{FFCD00}Введите /buy",
					0x00CC00EE,
					GetBusinessInteriorInfo(idx, BT_BUY_POS_X),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Y),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Z) + 0.8,
					8.0
				);
				CreatePickup(1318, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_CELL_SALON, idx);
			}
			case BUSINESS_INTERIOR_CAR_TUNING:
			{
				CreatePickup(1318, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_CAR_TUN, idx);
				CreateDynamic3DTextLabel("Обслуживание транспорта\nТюнинг", 0xCC6600EE, GetBusinessInteriorInfo(idx, BT_LABEL_POS_X), GetBusinessInteriorInfo(idx, BT_LABEL_POS_Y), GetBusinessInteriorInfo(idx, BT_LABEL_POS_Z), 5.0);
			}
			case BUSINESS_INTERIOR_SHOP_GUN:
			{
				CreateDynamic3DTextLabel
				(
					"Список\n"\
					"оружия\n"\
					"Введите /buy",
					0x32a44bFF,
					GetBusinessInteriorInfo(idx, BT_BUY_POS_X),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Y),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Z) + 0.8,
					8.0
				);
				CreatePickup(1274, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_SHOP_GUN, idx);
			}
		}
		SetBusinessInteriorInfo(idx, BT_BUY_CHECK_ID, buffer[0]);
	}
	BusinesGPSListInit();

	printf("[Business]: Бизнесов загружено: %d", g_business_loaded);
}

public: UpdateBusinessLabel(businessid)
{
	new fmt_str[129 + 1];

	if(!IsBusinessOwned(businessid))
	{
		format
		(
			fmt_str, sizeof fmt_str,
			"%s\n"\
			"{66CC00}Бизнес продается\n"\
			"Используйте /buybiz\n"\
			"Цена: %d руб",
			GetBusinessData(businessid, B_NAME),
			GetBusinessData(businessid, B_PRICE)
		);
	}
	else
	{
		format
		(
			fmt_str, sizeof fmt_str,
			"%s\n"\
			"{FFFFFF}Владелец: {0099FF}%s\n",
			GetBusinessData(businessid, B_NAME),
			GetBusinessData(businessid, B_OWNER_NAME)
		);

		if(!GetBusinessData(businessid, B_LOCK_STATUS))
		{
			if(GetBusinessData(businessid, B_ENTER_PRICE) > 0)
			{
				format(fmt_str, sizeof fmt_str, "%s{66CC00}Вход: {FF9900}%d руб", fmt_str, GetBusinessData(businessid, B_ENTER_PRICE));
			}
			else strcat(fmt_str, "{66CC00}Вход свободный");
		}
		else strcat(fmt_str, "{FF6600}Закрыто");
	}
	UpdateDynamic3DTextLabelText(GetBusinessData(businessid, B_LABEL), 0xFFFF00FF, fmt_str);
}

public: UpdateRealtorBizInfo()
{
	new count = 0;
	new fmt_str[128];

	g_business_realtor_list = "";
	for(new idx; idx < g_business_loaded; idx ++)
	{
		if(IsBusinessOwned(idx)) continue;
		g_business_realtor_list_idx[count ++] = idx;

		format(fmt_str, sizeof fmt_str, "%d\n", idx);
		strcat(g_business_realtor_list, fmt_str);
	}

	count = GetFreeBusinessCount();
	format
	(
		fmt_str, sizeof fmt_str,
		"Состояние бизнеса\n"\
		"(обновляется каждый час)\n\n"\
		"{FF6633}Куплено бизнесов: %d\n"\
		"{99FF33}Свободно бизнесов: %d",
		g_business_loaded - count,
		count
	);
	UpdateDynamic3DTextLabelText(g_business_realtor_label, 0xCCFF66FF, fmt_str);
}

public: SetRealtorMakePhoto(playerid, type, index)
{
	if(GetPlayerData(playerid, P_REALTOR_TYPE) == type)
	{
		new Float: angle;
		new Float: pos_x, Float: pos_y, Float: pos_z;
		new Float: exit_x, Float: exit_y, Float:cam_x, Float:cam_y;

		switch(type)
		{
			case REALTOR_TYPE_HOUSE:
			{
				new entranceid = GetHouseData(index, H_ENTRACE);
				if(entranceid != -1)
				{
					pos_x = GetEntranceData(entranceid, E_POS_X);
					pos_y = GetEntranceData(entranceid, E_POS_Y);
					pos_z = GetEntranceData(entranceid, E_POS_Z);

					exit_x = GetEntranceData(entranceid, E_EXIT_POS_X);
					exit_y = GetEntranceData(entranceid, E_EXIT_POS_Y);

					new fmt_str[32];
					format(fmt_str, sizeof fmt_str, "Номер подъезда: %d", entranceid + 1);
					SendClientMessage(playerid, 0x999999FF, fmt_str);
				}
				else
				{
					pos_x = GetHouseData(index, H_POS_X);
					pos_y = GetHouseData(index, H_POS_Y);
					pos_z = GetHouseData(index, H_POS_Z);

					exit_x = GetHouseData(index, H_EXIT_POS_X);
					exit_y = GetHouseData(index, H_EXIT_POS_Y);
				}
			}
			case REALTOR_TYPE_BIZ:
			{
				pos_x = GetBusinessData(index, B_POS_X);
				pos_y = GetBusinessData(index, B_POS_Y);
				pos_z = GetBusinessData(index, B_POS_Z);

				exit_x = GetBusinessData(index, B_EXIT_POS_X);
				exit_y = GetBusinessData(index, B_EXIT_POS_Y);
			}
		}
		angle = GetAngleToPoint(exit_x, exit_y, pos_x, pos_y);
		SetPlayerPos(playerid, pos_x, pos_y, pos_z);

		cam_x = pos_x + 15.0 * -floatsin(angle, degrees);
		cam_y = pos_y + 15.0 * floatcos(angle, degrees);

		SetPlayerCameraPos(playerid, cam_x, cam_y, pos_z + 10.0);
		SetPlayerCameraLookAt(playerid, pos_x, pos_y, pos_z);

		//HidePlayerWaitPanel(playerid);
		SetPlayerData(playerid, P_REALTOR_TYPE, type);
	}
}

public:	LoadFuelStations()
{
	new query[85];
	new Cache: result, rows;

	result = mysql_query(mysql, "SELECT fs.*, IFNULL(a.name, 'None') AS owner_name FROM fuel_stations fs LEFT JOIN accounts a ON a.id=fs.owner_id", true);
	rows = cache_num_rows();

	if(rows > MAX_FUEL_STATIONS)
	{
		rows = MAX_FUEL_STATIONS;
		print("[FuelST]: DB rows > MAX_FUEL_STATIONS");
	}

	for(new idx; idx < rows; idx ++)
	{
		SetFuelStationData(idx, FS_SQL_ID,		cache_get_field_content_int(idx, "id"));
		SetFuelStationData(idx, FS_OWNER_ID, 	cache_get_field_content_int(idx, "owner_id"));

		cache_get_field_content(idx, "name", g_fuel_station[idx][FS_NAME], mysql, 20);

		SetFuelStationData(idx, FS_IMPROVEMENTS, cache_get_field_content_int(idx, "improvements"));
		SetFuelStationData(idx, FS_FUELS, 			cache_get_field_content_int(idx, "fuels"));
		SetFuelStationData(idx, FS_FUEL_PRICE,		cache_get_field_content_int(idx, "fuel_price"));
		SetFuelStationData(idx, FS_BUY_FUEL_PRICE,	cache_get_field_content_int(idx, "buy_fuel_price"));
		SetFuelStationData(idx, FS_BALANCE,			cache_get_field_content_int(idx, "balance"));
		SetFuelStationData(idx, FS_RENT_DATE,		cache_get_field_content_int(idx, "rent_time"));

		SetFuelStationData(idx, FS_PRICE,			cache_get_field_content_int(idx, "price"));
		SetFuelStationData(idx, FS_RENT_PRICE,		cache_get_field_content_int(idx, "rent_price"));

		SetFuelStationData(idx, FS_LOCK_STATUS,		bool: cache_get_field_content_int(idx, "lock"));

		SetFuelStationData(idx, FS_POS_X,			cache_get_field_content_float(idx, "x"));
		SetFuelStationData(idx, FS_POS_Y,			cache_get_field_content_float(idx, "y"));
		SetFuelStationData(idx, FS_POS_Z,			cache_get_field_content_float(idx, "z"));

		SetFuelStationData(idx, FS_EVICTION,		cache_get_field_content_int(idx, "eviction"));

		cache_get_field_content(idx, "owner_name", g_fuel_station[idx][FS_OWNER_NAME], mysql, 21);
		// -------------------------

		SetFuelStationData(idx, FS_LABEL, CreateDynamic3DTextLabel(GetFuelStationData(idx, FS_NAME), 0x3399FFFF, GetFuelStationData(idx, FS_POS_X), GetFuelStationData(idx, FS_POS_Y), GetFuelStationData(idx, FS_POS_Z) + 0.5, 15.0));
		SetFuelStationData(idx, FS_AREA, CreateDynamicSphere(GetFuelStationData(idx, FS_POS_X), GetFuelStationData(idx, FS_POS_Y), GetFuelStationData(idx, FS_POS_Z), 15.0));

		SetFuelStationData(idx, FS_ORDER_ID, -1);

		if(IsFuelStationOwned(idx) && !strcmp(GetFuelStationData(idx, FS_OWNER_NAME), "None", true))
		{
			format(query, sizeof query, "UPDATE accounts SET `fuel_st`=-1 WHERE `id`=%d LIMIT 1", GetFuelStationData(idx, FS_OWNER_ID));
			mysql_query(mysql, query, false);

			SetFuelStationData(idx, FS_OWNER_ID, 0);

			mysql_format(mysql, query, sizeof query, "UPDATE fuel_stations SET owner_id=0 WHERE id=%d", GetFuelStationData(idx, FS_SQL_ID));
			mysql_query(mysql, query, false);
		}

		if(!IsFuelStationOwned(idx))
		{
			SetFuelStationData(idx, FS_FUELS, 1000);
			SetFuelStationData(idx, FS_FUEL_PRICE, 3);

			SetFuelStationData(idx, FS_LOCK_STATUS, false);
		}
		CallLocalFunction("UpdateFuelStationLabel", "i", idx);

		#if defined FUEL_ST_CREATED_PICKUP
			CreatePickup(1650, 23, GetFuelStationData(idx, FS_POS_X), GetFuelStationData(idx, FS_POS_Y), GetFuelStationData(idx, FS_POS_Z), 0, PICKUP_ACTION_TYPE_FUEL_STATION, idx);
		#endif

		CreateDynamicMapIcon(GetFuelStationData(idx, FS_POS_X), GetFuelStationData(idx, FS_POS_Y), GetFuelStationData(idx, FS_POS_Z), 47, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
	}
	g_fuel_station_loaded = rows;
	cache_delete(result);

	printf("[FuelST]: Заправок загружено: %d", g_fuel_station_loaded);
}

public: UpdateFuelStationLabel(stationid)
{
	new fmt_str[350];

	if(!IsFuelStationOwned(stationid))
	{
		format
		(
			fmt_str, sizeof fmt_str,
			"%s\n"\
			"{FFFFFF}Цена за 10 литров: {FFCD00}%d руб\n\n"\
			"{CC9900}Заправка продается\n"\
			"Используйте /buyfuelst\n"\
			"Цена: %d руб",
			GetFuelStationData(stationid, FS_NAME),
			GetFuelStationData(stationid, FS_FUEL_PRICE) * 10,
			GetFuelStationData(stationid, FS_PRICE)
		);

	}
	else
	{
		format
		(
			fmt_str, sizeof fmt_str,
			"%s\n"\
			"{FFFFFF}Владелец: {66CC00}%s\n"\
			"{FFFFFF}Цена за 10 литров: {FFCD00}%d руб\n"\
			"Используйте /buyfuel - купить канистру\n"\
			"Используйте /buyrepaircar - купить рем. комплекс\n",
			GetFuelStationData(stationid, FS_NAME),
			GetFuelStationData(stationid, FS_OWNER_NAME),
			GetFuelStationData(stationid, FS_FUEL_PRICE) * 10
		);

		/*if(GetFuelStationData(stationid, FS_LOCK_STATUS))
		{
			strcat(fmt_str, "{FF6600}Станция закрыта");
		}
		else format(fmt_str, sizeof fmt_str, "%s{FFFFFF}Цена за 10 литров: {FFCD00}%d руб", fmt_str, GetFuelStationData(stationid, FS_FUEL_PRICE) * 10);*/
	}
	UpdateDynamic3DTextLabelText(GetFuelStationData(stationid, FS_LABEL), 0x3399FFFF, fmt_str);
}

public: OnGiveReferBonus(refer_id)
{
	new fmt_str[155];
	new playerid = GetPlayerIDBySqlID(refer_id);

	if(playerid != INVALID_PLAYER_ID)
	{
		GivePlayerMoneyEx(playerid, REFER_BONUS_MONEY, "Реферальная программа 'Пригласи друга'", true, false);

		format(fmt_str, sizeof fmt_str, "Поздравляем! Приглашенный Вами игрок достиг 5 уровня, Вы получаете %d рублей", REFER_BONUS_MONEY);
		SendClientMessage(playerid, 0x66CC00FF, fmt_str);
	}
	else
	{
		format(fmt_str, sizeof fmt_str, "INSERT INTO money_log (uid,uip,time,money,description) VALUES (%d,'%s',%d,%d,'%s')", refer_id, "system", gettime(), REFER_BONUS_MONEY, "Реферальная программа 'Пригласи друга'");
		mysql_query(mysql, fmt_str, false);

		format(fmt_str, sizeof fmt_str, "UPDATE accounts SET money=money+%d WHERE id=%d LIMIT 1", REFER_BONUS_MONEY, refer_id);
		mysql_query(mysql, fmt_str, false);

		if(mysql_errno() != 0)
			printf("[Referal System]: Произошла ошибка при выдаче бонуса реферу №%d", refer_id);
	}
}

public: SpeedBooster()
{
	foreach(new playerid : Player)
	{
		if(!IsPlayerLogged(playerid)) continue;
		if(!IsPlayerDriver(playerid)) continue;
		
		new vehicleid = GetPlayerVehicleID(playerid);

		if(vehicleid == INVALID_VEHICLE_ID)
		    continue;

		if(!IsAOwnableCar(vehicleid))
		    continue;

		new index = GetVehicleData(vehicleid, V_ACTION_ID);

		
		new Float: engine_boost,
		    Float: brake_boost;

		for(new idx; idx < GetOwnableCarData(index, OC_PT_ENGINE); idx ++)
		    engine_boost += engine_ptune_boost[idx];

		for(new idx; idx < GetOwnableCarData(index, OC_PT_BRAKE); idx ++)
		    brake_boost += brake_ptune_boost[idx];

		if(GetPVarInt(playerid, "supercar"))
		{
			new pedal_type = player_press_pedal[playerid];

			if(pedal_type != PEDAL_TYPE_NONE)
			{
				//new vehicleid = GetPlayerVehicleID(playerid),
				new Float: v_speed = GetVehicleSpeed(vehicleid);

				if(v_speed > 25.0 || v_speed < -25.0)
				{
					switch(pedal_type)
					{
						case PEDAL_TYPE_GAS:
						{
							v_speed += (0.1 * GetPVarInt(playerid, "supercar_multiplier"));
						}
						case PEDAL_TYPE_BRAKE:
						{
							v_speed -= 0.6;
						}
					}

					SetVehicleSpeed(vehicleid, v_speed);
				}
			}
		}
	}
}

public: OnSecondTimer()
{
	//new minute;
	//gettime(_, minute);

	new newhour,minute,newsecond;
    gettime(newhour, minute, newsecond);

	new time = gettime();
	if(minute && !newsecond)
	{
			print("elapsed lol");
			OnMinuteTimer(bool: GetElapsedTime(time, g_last_m_timer_time, CONVERT_TIME_TO_DAYS));
	}

	foreach(new playerid : Player)
	{
		CallLocalFunction("OnPlayerTimer", "i", playerid);
	}

	for(new carriageid; carriageid < sizeof miner_carriage; carriageid ++)
		MinerCarriageUpdate(carriageid);

	if(g_capture[C_STATUS] && g_capture[C_TIME] > 0)
	{
		-- g_capture[C_TIME];

		UpdateCaptureTextDraw();

		if(g_capture[C_TIME] == 0)
			EndCapture();
	}

	UpdateReporterText();

	OnTimerMinuteOne();
}

public: OnMinuteTimer(bool: new_day)
{
	print("minute timer");
	new time;
	new hour, minute, second;

	time = gettime();
	gettime(hour, minute, second);

	printf("minute %d", minute);

	switch(minute)
	{
	    case 10: SendClientMessageToAll(COR_SERVER, "[Информация]: {FFFFFF}На сервере есть DeathMatch Zone "c_s"/gps > Развлечения > DeathMatch Zone!");
	    case 15: SendClientMessageToAll(COR_SERVER, "[Информация]: {FFFFFF}На сервере есть Система дуэлей. "c_s"/duel");
		case 27: SendClientMessageToAll(-1, "{FF0000}[RESPAWN CARS] {FFFFFF}Через 3 минуты будет респавн авто!");
        case 28: SendClientMessageToAll(-1, "{FF0000}[RESPAWN CARS] {FFFFFF}Через 2 минуты будет респавн авто!");
        case 29: SendClientMessageToAll(-1, "{FF0000}[RESPAWN CARS] {FFFFFF}Через 1 минуту будет респавн авто!");
        case 30:
        {

                new vehicles_count;
                for(new i = 1; i < MAX_VEHICLES; i++)
                {
                    if(!IsValidVehicle(i)) continue;
                    else if(IsVehicleOccupied(i)) continue;
                    else if(IsTrailerAttachedToAnyVehicle(i)) continue;

                    SetVehicleToRespawn(i);
                    vehicles_count++;
                }

                SendClientMessageToAll(-1, "{FF0000}[RESPAWN CARS]{ffffff} зареспавнен весь незанятый транспорт.");
        }
        case 35:
        {
            //SendClientMessageToAll(COR_SERVER, "[Информация]: "c_b"В данный момент на сервере есть квесты в честь Международного Дня Женщин. Подробнее: "c_i"/8marta");
			SendClientMessageToAll(COR_SERVER, "[Информация]: "c_b"С 1 мая по 10 июня действует акция, каждый час Вам будут выдаваться монеты.");
			SendClientMessageToAll(COR_SERVER, "[Информация]: "c_b"Монеты можно будет обменять на транспорт. Подробнее "c_s"/gps > Обмен монет");
	    }
	    case 0:
        {
            if(GetElapsedTime(time, g_last_pay_day_time) >= 1)
            {
                OnPayDay();

                for(new fam_id = g_family_loaded - 1; fam_id != -1; fam_id--)
                {
                    new fmt_text[348];
                    AddFamilyData(fam_id, F_EXP, +, g_doubling[DOUBLING_EXP] * 5);

                    if(GetFamilyData(fam_id, F_EXP) > 500)
                    {
                        SetFamilyData(fam_id, F_EXP, 0);
                        AddFamilyData(fam_id, F_LEVEL, +, 1);
                    }

                    mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET score='%d',exp='%d' WHERE id='%d' LIMIT 1", GetFamilyData(fam_id, F_LEVEL), GetFamilyData(fam_id, F_EXP), fam_id);
                    mysql_query(mysql, fmt_text, false);
                }
            }
        }
		case 1:
		{
			if(GetElapsedTime(time, g_last_pay_day_time) >= 1)
			{
				OnPayDay();
			}
		}
		case 2:
		{
			if(GetElapsedTime(time, g_last_lottery_time) >= 1)
			{
				OnLottery();
			}
		}
	}

	if(new_day)
	{
		SetTimer("ClearBanList", 15_000, false);
	}

	SetWorldTime(hour);
	OnPlayersWorldTimeInit(hour, minute);

	g_last_m_timer_time = time;
}

public: OnPlayersWorldTimeInit(hour, minute)
{
	foreach(new playerid : Player)
	{
		SetPlayerTime(playerid, hour, minute);
	}
}

public: OnLottery()
{
	new fmt_str[85];
	new buffer[4];

	new lottery_str[4];
	new lottery_number;
	new buy_tickets_count;
	new hour, count;

	gettime(hour);
	lottery_number = random(900) + 100;

	valstr(lottery_str, lottery_number);
	buy_tickets_count = LotteryBuyTicketCount();

	static const
		lottery_pay[3] = {2000, 15_000, 50_000};

	foreach(new playerid : Player)
	{
		if(IsPlayerLogged(playerid))
		{
			if(GetPlayerData(playerid, P_LOTTERY))
			{
				format(fmt_str, sizeof fmt_str, "Сейчас %d:02! Начинаем лотерейный розыгрыш. Ваше счастливое число: %d", hour, GetPlayerData(playerid, P_LOTTERY));
				SendClientMessage(playerid, 0xFFFF00FF, fmt_str);

				format(fmt_str, sizeof fmt_str, "За этот час было куплено %d билетов. Счастливое число этого часа: {FF9900}%d", buy_tickets_count, lottery_number);
				SendClientMessage(playerid, 0x66CC00FF, fmt_str);

				valfmt(buffer, GetPlayerData(playerid, P_LOTTERY));

				for(count = 0; count < 3; count ++)
					if(lottery_str[count] != buffer[count]) break;

				switch(count)
				{
					case 0:
					{
						SendClientMessage(playerid, 0xFFFFFFFF, "К сожалению в вашем билете не совпала первая цифра");
						SendClientMessage(playerid, 0xFFFFFFFF, "Не расстраивайтесь. В следующий раз Вам обязательно повезёт");
					}
					case 1..3:
					{
						GivePlayerMoneyEx(playerid, lottery_pay[count-1], "Выигрыш в лотереи", true, true);

						format(fmt_str, sizeof fmt_str, "В вашем билете совпали %d цифры! Выигрыш: %d рублей", count, lottery_pay[count-1]);
						SendClientMessage(playerid, 0x3399FFFF, fmt_str);
					}
				}
				SetPlayerData(playerid, P_LOTTERY, 0);
			}
		}
	}
	g_last_lottery_time = gettime();
}

public: OnPayDay()
{
	new fmt_str[164];
	new level, cur_time;
	new hour, minute, second;

	cur_time = gettime();
	gettime(hour, minute, second);

	SetWorldTime(hour);

	format(fmt_str, sizeof fmt_str, "Текущее время: {3399FF}%02d:00", hour);
	SendClientMessageToAll(0xFFFFFFFF, fmt_str);

	foreach(new playerid : Player)
	{
		if(IsPlayerLogged(playerid))
		{
		    new rub = Config[sDistRub];
		    new coins = Config[sGiveCoins];
		    
		    AddPlayerData(playerid, P_COINS, +, coins);
			UpdatePlayerDatabaseInt(playerid, "coins", GetPlayerData(playerid, P_COINS));

			GivePlayerDonate(playerid, rub,"акция");
			

			if(GetPlayerData(playerid, P_ADMIN_STATUS))
				AddPlayerData(playerid, P_ADMIN_HOUR, +, 1);

			SendClientMessage(playerid, 0xFFFFFFFF, "   БАНКОВСКИЙ ЧЕК");
			SendClientMessage(playerid, 0xFFFFFFFF, "______________________");
			SendClientMessage(playerid, 0xFFFFFFFF, " ");

			level = GetPlayerLevel(playerid);
			if(!IsPlayerAFK(playerid) || GetPlayerAFKTime(playerid) < 60)
			{
				if(ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_HOUR), CONVERT_TIME_TO_MINUTES) >= 20)
				{
					if(GetPlayerTeamEx(playerid))
					{
						new team_wage;

						if(GetPlayerTeamEx(playerid) < TEAM_OPG_ARZAMASKAYA)
						{
							new team_id = GetPlayerTeamEx(playerid),
								rank = GetPlayerJob(playerid);

							team_wage = rank_wages[ team_id - 1 ][ rank - 1 ];
						}
						else
						{
							new gang_id = GetPlayerTeamEx(playerid) - TEAM_OPG_ARZAMASKAYA;

							team_wage = GetGangZonesCount(gang_id + 1) * 70 + 1000;
						}

						AddPlayerData(playerid, P_WAGE, +, team_wage);
					}

					AddPlayerData(playerid, P_BANK, +, GetPlayerData(playerid, P_WAGE));

					BankLog(playerid, GetPlayerData(playerid, P_WAGE), "Зарплата");

					format(fmt_str, sizeof fmt_str, "Зарплата: {66CC00}%d руб", GetPlayerData(playerid, P_WAGE));
					SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

					format(fmt_str, sizeof fmt_str, "Текущий баланс счета: {%s}%d руб", GetPlayerBankMoney(playerid) > 0 ? ("00CC00") : ("FF3300"), GetPlayerBankMoney(playerid));
					SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

					SetPlayerData(playerid, P_WAGE, 0);
					AddPlayerData(playerid, P_EXP, +, g_doubling[DOUBLING_EXP] ? 2 : 1);
					AddPlayerData(playerid, P_TOTALHOUR, +, 1);
					
					AddPlayerData(playerid, P_TOP_3, +, 1);
					UpdatePlayerDatabaseInt(playerid, "TOP_PayDay", GetPlayerData(playerid, P_TOP_3));

					//if(!IsPlayerAfk(i))
					//{
					if(GetPlayerExp(playerid) > GetExpToNextLevel(playerid))
					{
						SetPlayerData(playerid, P_EXP, 0);
						AddPlayerData(playerid, P_LEVEL, +, 1);

						SetPlayerLevelInit(playerid);
					}
					//}
				}
				else SendClientMessage(playerid, 0xFFBB00FF, "Для получения зарплаты необходимо находиться в игре минимум 20 минут");
			}
			else SendClientMessage(playerid, 0xFFBB00FF, "Вы не должны находиться на паузе для получения зарплаты");

			SendClientMessage(playerid, 0xFFFFFFFF, "______________________");
			
			SendClientMessage(playerid, 0xFFFFFFFF, "{ce325b}+5 донат монет");
			SendClientMessage(playerid, 0xFFFFFFFF, "{ff6a00}[Контейнера] {FFFFFF}В порт было доставлено 10 контейнеров");
			cont1 +=5;
			cont3 +=5;
			AddPlayerData(playerid, P_DONATE_MONEY, +, 5);
			UpdatePlayerDatabaseInt(playerid, "donate_current", GetPlayerDonateMoney(playerid));
			UpdatePlayerDatabaseInt(playerid, "donate_total", GetPlayerTotalDonate(playerid));
			SavePlayerAccount(playerid);
			if(GetPlayerData(playerid, P_TOTALHOUR) == 10)
			{
				AddPlayerData(playerid, P_CAR_SLOTS, +, 1);
				SendClientMessage(playerid, 0x3399FFFF, "Поздравляем! Вы получили дополнительный слот автомобиля");
				UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));
			}
			if(GetPlayerLevel(playerid) > level)
			{
				SendClientMessage(playerid, 0x3399FFFF, "Поздравляем! Ваш уровень повышен");
				switch(GetPlayerLevel(playerid))
				{
					case 2:
					{
						SendClientMessage(playerid, 0x66CC00FF, "Вы начали второй год своей жизни в нашей стране");
						SendClientMessage(playerid, 0x66CC00FF, "Доступна новая работа водителя автобуса");
					}
					case 5:
					{
						CallLocalFunction("OnGiveReferBonus", "i", GetPlayerData(playerid, P_REFER));
					}
					/*
					case 3:
						SendClientMessage(playerid, 0x66CC00FF, "Доступна новая работа таксиста");

					case 4:
						SendClientMessage(playerid, 0x66CC00FF, "Доступна новая работа дальнобойщика");

					case 5:
						SendClientMessage(playerid, 0x66CC00FF, "Доступна новая работа автоменаника");

					case 6:
						SendClientMessage(playerid, 0x66CC00FF, "Доступна новая работа уличного торговца");

					case 7:
						SendClientMessage(playerid, 0x66CC00FF, "Доступна новая работа сотрудника МЧС");
					*/
				}
			}
			format(fmt_str, sizeof fmt_str, "UPDATE accounts SET level=%d,exp=%d,bank=%d,wage=0,last_login=%d,game_for_hour=0,get_adm_hour=%d,totalhour = %d WHERE id=%d LIMIT 1", GetPlayerLevel(playerid), GetPlayerExp(playerid), GetPlayerBankMoney(playerid), cur_time, GetPlayerData(playerid, P_ADMIN_HOUR), GetPlayerData(playerid, P_TOTALHOUR), GetPlayerAccountID(playerid));
			mysql_query(mysql, fmt_str, false);

			if(mysql_errno() != 0)
				SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения аккаунта {FF0000}(equ-code 100)");

			new rows,
				Cache: result;

			mysql_format(mysql, fmt_str, sizeof fmt_str, "SELECT id, paydays, code FROM promocode_activations WHERE uid=%d AND paydays > 0", GetPlayerAccountID(playerid));
			result = mysql_query(mysql, fmt_str, true);

			rows = cache_num_rows();

			if(rows)
			{
				for(new idx; idx < rows; idx ++)
				{
					new id = cache_get_row_int(idx, 0),
						paydays = cache_get_row_int(idx, 1),
						code[32];

					cache_get_row(idx, 2, code);

					mysql_format(mysql, fmt_str, sizeof fmt_str, "UPDATE promocode_activations SET paydays='%d' WHERE id='%d'", paydays - 1, id);
					mysql_query(mysql, fmt_str, false);

					if(paydays == 1)
					{
						new Cache: p_cache;

						mysql_format(mysql, fmt_str, sizeof fmt_str, "SELECT type, amount FROM promocode WHERE code='%s'", code);
						p_cache = mysql_query(mysql, fmt_str, true);

						new type = cache_get_row_int(0, 0),
							amount = cache_get_row_int(0, 1);

						cache_delete(p_cache);

						AddPlayerData(playerid, promo_info[type][P_DATA], +, amount);
						UpdatePlayerDatabaseInt(playerid, promo_info[type][P_SQL_NAME], GetPlayerData(playerid, promo_info[type][P_DATA]));

						SendClientMessage(playerid, -1, "");

						format(fmt_str, sizeof fmt_str, "Получен приз за промокод \"%s\"", code);
						SendClientMessage(playerid, 0x66CC33FF, fmt_str);
					}
				}
			}

			cache_delete(result);
		}
		SetPlayerData(playerid, P_GAME_FOR_HOUR, 0);
	}

	//SellDebtorsProperty();

	if(hour == 5) SellDebtorsHotels();

	printf("hour live %d", hour);

	#if defined RAND_WEATHER
	SetTimer("SetRandomWeather", (random(60) + 60) * 1000, false);
	#endif

	CallLocalFunction("UpdateRealtorHomeInfo", "");
	CallLocalFunction("UpdateRealtorBizInfo", "");

	g_last_pay_day_time = cur_time;
	SellDebtorsHome();
	SellDebtorsFuel();
    SellDebtorsBusiness();
	return 1;
}

public: OnPlayerTimer(playerid)
{
	if(IsPlayerLogged(playerid))
	{
		new fmt_str[128];
		new speed = GetPlayerSpeed(playerid);

		AddPlayerData(playerid, P_AFK_TIME, +, 1);
		if(IsPlayerAFK(playerid))
		{
			new afk_minutes = ConvertUnixTime(GetPlayerAFKTime(playerid), CONVERT_TIME_TO_MINUTES);
			new afk_seconds = ConvertUnixTime(GetPlayerAFKTime(playerid));

			if(afk_minutes > 0)
			{
				format(fmt_str, sizeof fmt_str, "На паузе %d:%02d", afk_minutes, afk_seconds);
			}
			else format(fmt_str, sizeof fmt_str, "На паузе %d сек.", afk_seconds);

			SetPlayerChatBubble(playerid, fmt_str, 0xFF0000FF, 7.0, 1500);

		/*	if(afk_minutes >= MAX_AFK_TIME && GetPlayerAdminEx(playerid) < 5)
				Kick:(playerid, "Превышено максимально допустимое время паузы");
				*/
		}
		else
		{
			AddPlayerData(playerid, P_GAME_FOR_HOUR, +, 1);
			AddPlayerData(playerid, P_GAME_FOR_DAY, +, 1);

			UpdatePlayerDatabaseInt(playerid, "game_for_hour", GetPlayerData(playerid, P_GAME_FOR_HOUR));
            UpdatePlayerDatabaseInt(playerid, "game_for_day", GetPlayerData(playerid, P_GAME_FOR_DAY));
            
            if(GetPlayerData(playerid, P_GAME_FOR_DAY) == 10800)
            {
				Send(playerid, -1,"Вы отыграли 3 часа и получили 1 кейс. /opencase - открыть кейс");
                AddPlayerData(playerid, P_DONATE_CASE, +, 1);

				UpdatePlayerDatabaseInt(playerid, "case", GetPlayerData(playerid, P_DONATE_CASE));
            }
		}

		if(GetPlayerData(playerid, P_MUTE) > 0)
		{
			AddPlayerData(playerid, P_MUTE, -, 1);
			UpdatePlayerDatabaseInt(playerid, "mute", GetPlayerData(playerid, P_MUTE));
			if(GetPlayerData(playerid, P_MUTE) <= 0)
				SendClientMessage(playerid, 0x66CC00FF, "Срок действия бана чата закончился");
		}
		if(GetPlayerData(playerid, P_FMUTE) > 0)
		{
			AddPlayerData(playerid, P_FMUTE, -, 1);
			UpdatePlayerDatabaseInt(playerid, "fmute", GetPlayerData(playerid, P_FMUTE));
			if(GetPlayerData(playerid, P_FMUTE) <= 0)
				SendClientMessage(playerid, 0x32a44bFF, "Срок действия бана семейного чата закончился");
		}

		if(GetPlayerData(playerid, P_JAIL) > 0)
		{
			AddPlayerData(playerid, P_JAIL, -, 1);
			UpdatePlayerDatabaseInt(playerid, "jail", GetPlayerData(playerid, P_JAIL));
			if(GetPlayerData(playerid, P_JAIL) <= 0)
				SendClientMessage(playerid, 0x66CC00FF, "Срок заключения закончился"),
				UnjailPlayer(playerid);
		}

		if(GetPlayerData(playerid, P_MASK) >= 2)
		{
			AddPlayerData(playerid, P_MASK, -, 1);
			if(GetPlayerData(playerid, P_MASK) <= 2)
			{
				GameTextForPlayer(playerid, "~y~invisible off", 2500, 4);

				SetPlayerColorInit(playerid);
				SetPlayerData(playerid, P_MASK, 0);
			}
		}

		if(GetPlayerGPSInfo(playerid, G_ENABLED) == GPS_STATUS_ON)
		{
			if(IsPlayerInRangeOfPoint(playerid, 30.0, GetPlayerGPSInfo(playerid, G_POS_X), GetPlayerGPSInfo(playerid, G_POS_Y), GetPlayerGPSInfo(playerid, G_POS_Z)))
			{
				DisablePlayerGPS(playerid);
			}
		}

		new Float: player_health;

		GetPlayerHealth(playerid, player_health);

		if(player_health > GetPlayerHealthEx(playerid))
		{
			if(GetPVarInt(playerid, "anti_health_cheat") >= 10)
			{
				SendClientMessage(playerid, 0xFF6600FF, "Вы кикнуты по подозрению в читерстве {FF0000}(gac-code 01)");
				Kick:(playerid);
			}
		}
		else
		{
			SetPlayerData(playerid, P_HEALTH, player_health);
		}

	/*	if(GetPlayerData(playerid, P_JAIL) > 0 && !IsPlayerInRangeOfPoint(playerid, 70.0, 2035.7643,1416.3625,999.7344))
		{

		}
*/
		if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 70.0, 2035.7643,1416.3625,999.7344))
			{
				ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
			}
			else if(GetPlayerHealthEx(playerid) >= 95.0)
			{
				SetPlayerData(playerid, P_HOSPITAL, false);

				SendClientMessage(playerid, 0x66CC00FF, "Курс лечения пройден");
				SendClientMessage(playerid, -1, "Вы были выписаны из больницы");

				ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));

				SetPlayerChatBubble(playerid, "Выписан", 0x66CC00FF, 10.0, 2000);
			}
		}

		if(GetPlayerTeamEx(playerid) == TEAM_RADIO)
			TextDrawShowForPlayer(playerid, radio_edit_TD);

		else
			TextDrawHideForPlayer(playerid, radio_edit_TD);

		if(IsPlayerDriver(playerid))
		{
			//new Float: health;
			new vehicleid = GetPlayerVehicleID(playerid);
			if(!IsABike(vehicleid))
			{
				new	Float: fuels = GetVehicleData(vehicleid, V_FUEL),
					Float: health;

				GetVehicleHealth(vehicleid, health);

				SetVehicleParamsInit(vehicleid);
				SetVehicleData(vehicleid, V_MILEAGE, GetVehicleData(vehicleid, V_MILEAGE) + (float(speed) / 3600.0));

				if(GetVehicleParamEx(vehicleid, V_ENGINE) == VEHICLE_PARAM_ON)
				{
					if(fuels <= 0.0)
					{
						SetVehicleParam(vehicleid, V_ENGINE, false);
						GameTextForPlayer(playerid, "~r~no fuel", 4000, 1);
					}
					else SetVehicleData(vehicleid, V_FUEL, fuels - 0.05);
				}
				
				new modelid = GetVehicleModel(vehicleid) - 400;

				format(fmt_str, sizeof fmt_str, "%03i", speed);
				PlayerTextDrawSetString(playerid, speedometr_PTD[playerid][1], fmt_str);

				format(fmt_str, sizeof fmt_str, "%d L", floatround(fuels));
				PlayerTextDrawSetString(playerid, speedometr_PTD[playerid][2], fmt_str);

				format(fmt_str, sizeof fmt_str, "%d %", floatround(health / 10));
				PlayerTextDrawSetString(playerid, speedometr_PTD[playerid][3], fmt_str);
				
				format(fmt_str, sizeof fmt_str, "%s", GetVehicleInfo(modelid, VI_NAME));
				PlayerTextDrawSetString(playerid, speedometr_PTD[playerid][0], fmt_str);

				format
				(
					fmt_str, sizeof fmt_str,
					"%s.",
					GetVehicleParamEx(vehicleid, V_ENGINE) == VEHICLE_PARAM_ON ? ("") : ("~r~")
				);
				PlayerTextDrawSetString(playerid, speedometr_PTD[playerid][6], fmt_str);

				format
				(
					fmt_str, sizeof fmt_str,
					"%s.",
					GetVehicleParamEx(vehicleid, V_LIGHTS) == VEHICLE_PARAM_ON ? ("") : ("~r~")
				);
				PlayerTextDrawSetString(playerid, speedometr_PTD[playerid][5], fmt_str);

				format
				(
					fmt_str, sizeof fmt_str,
					"%s.",
					GetVehicleParamEx(vehicleid, V_LOCK) == VEHICLE_PARAM_ON ? ("") : ("~r~")
				);
				PlayerTextDrawSetString(playerid, speedometr_PTD[playerid][4], fmt_str);

				format(fmt_str, sizeof fmt_str, " %05ikm", floatround(GetVehicleData(vehicleid, V_MILEAGE)));
				PlayerTextDrawSetString(playerid, speedometr_PTD[playerid][7], fmt_str);
				
				
				
				format(fmt_str, sizeof fmt_str, "%03i", speed);
				PlayerTextDrawSetString(playerid, speedometr02_PTD[playerid][1], fmt_str);

				format(fmt_str, sizeof fmt_str, "%dL", floatround(fuels));
				PlayerTextDrawSetString(playerid, speedometr02_PTD[playerid][6], fmt_str);

				format(fmt_str, sizeof fmt_str, "%d%", floatround(health / 10));
				PlayerTextDrawSetString(playerid, speedometr02_PTD[playerid][7], fmt_str);

				format(fmt_str, sizeof fmt_str, "%s", GetVehicleInfo(modelid, VI_NAME));
				PlayerTextDrawSetString(playerid, speedometr02_PTD[playerid][0], fmt_str);

				format
				(
					fmt_str, sizeof fmt_str,
					"%s.",
					GetVehicleParamEx(vehicleid, V_ENGINE) == VEHICLE_PARAM_ON ? ("") : ("~r~")
				);
				PlayerTextDrawSetString(playerid, speedometr02_PTD[playerid][5], fmt_str);

				format
				(
					fmt_str, sizeof fmt_str,
					"%s.",
					GetVehicleParamEx(vehicleid, V_LIGHTS) == VEHICLE_PARAM_ON ? ("") : ("~r~")
				);
				PlayerTextDrawSetString(playerid, speedometr02_PTD[playerid][4], fmt_str);

				format
				(
					fmt_str, sizeof fmt_str,
					"%s.",
					GetVehicleParamEx(vehicleid, V_LOCK) == VEHICLE_PARAM_ON ? ("") : ("~r~")
				);
				PlayerTextDrawSetString(playerid, speedometr02_PTD[playerid][3], fmt_str);



				format(fmt_str, sizeof fmt_str, "%05ikm", floatround(GetVehicleData(vehicleid, V_MILEAGE)));
				PlayerTextDrawSetString(playerid, speedometr02_PTD[playerid][2], fmt_str);
				
				//

//				CheckRadars(playerid);

			}
		}
		else if(IsPlayerPassenger(playerid))
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			new driver = GetVehicleData(vehicleid, V_DRIVER_ID);

			if(driver != INVALID_PLAYER_ID && IsPlayerInJob(driver) && IsPlayerDriver(driver))
			{
				if(GetPlayerJobCar(driver) == vehicleid && IsPlayerInVehicle(driver, vehicleid))
				{
					if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TAXI_DRIVER)
					{
						g_taxi_mileage[playerid] += (float(speed) / 3600.0);
						if(g_taxi_mileage[playerid] > 0.1)
						{
							g_taxi_mileage[playerid] = 0.0;

							new tariff = GetPlayerData(driver, P_JOB_TARIFF);
							if(GetPlayerMoneyEx(playerid) >= tariff)
							{
								GivePlayerMoneyEx(driver, tariff, "- Оплата тарифа такси", false, true);
								GivePlayerMoneyEx(playerid, -tariff, "+ Оплата тарифа такси", false, true);

								AddPlayerData(playerid, P_JOB_WAGE, +, tariff);

								format(fmt_str, sizeof fmt_str, "~r~-%d rub~n~~b~+100 m", tariff);
								GameTextForPlayer(playerid, fmt_str, 4000, 1);

								format(fmt_str, sizeof fmt_str, "~g~+%d rub~n~~b~+100 m", tariff);
								GameTextForPlayer(driver, fmt_str, 4000, 1);
							}
							else
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xFF6600FF, "Недостаточно денег для дальнейшей оплаты тарифа");
							}
						}
					}
				}
			}
		}

		if(GetPlayerTempJob(playerid) != TEMP_JOB_NONE)
		{
			CheckPlayerTempJobState(playerid);
		}

		if(GetPVarInt(playerid, "player_in_ammo_cp"))
		{
			new army_ammo = GetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_AMMO, R_AMOUNT),
				rand_ammo = random(4)+1,
				soldiers_count;

			foreach(new i : Player)
			{
				if(!IsPlayerConnected(i)) continue;
				else if(!IsPlayerLogged(i)) continue;
				else if(GetPlayerTeamEx(i) != TEAM_ARMY) continue;

				soldiers_count++;
			}

			if(soldiers_count < 3 && GetPlayerTeamEx(playerid) != TEAM_ARMY)
				SendClientMessage(playerid, 0x999999FF, "Чтобы воровать патроны со склада, должно быть хотя бы 3 военнослужащих в сети");

			else
			{
				if(army_ammo == 0)
					GameTextForPlayer(playerid, "~g~loading...", 1100, 6);
				else
				{
					if(!IsPlayerAFK(playerid))
					{
						if((army_ammo - rand_ammo) < 0)
							rand_ammo = 200000 - army_ammo;

						if((GetPlayerData(playerid, P_AMMO) + rand_ammo) > 350)
							SendClientMessage(playerid, 0x66CC33FF, "Взять больше патронов не получается");
						else
						{
							AddPlayerData(playerid, P_AMMO, +, rand_ammo);
							UpdatePlayerDatabaseInt(playerid, "ammo", GetPlayerData(playerid, P_AMMO));

							SetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_AMMO, R_AMOUNT, army_ammo - rand_ammo);

							new fmt_text[128];

							format(fmt_text, sizeof fmt_text, "~g~+%d patr.~n~~b~total %d patr.", rand_ammo, GetPlayerData(playerid, P_AMMO));
							GameTextForPlayer(playerid, fmt_text, 1100, 6);

							format(fmt_text, sizeof fmt_text, "+%d шт.", rand_ammo);
							SetPlayerChatBubble(playerid, fmt_text, 0xFFCD00FF, 10.0, 1100);

							UpdateRepository(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_AMMO);
						}
					}
				}
			}
		}
		/*
		if(GetPlayerSurfingVehicleID(playerid) != INVALID_VEHICLE_ID)
		{
			new Float: x,
				Float: y,
				Float: z;

			GetPlayerPos(playerid, x, y, z);
			SetPlayerPos(playerid, x + 1.0, y + 1.0, z);
		}
		*/
	}
	else
	{
		if(GetPlayerData(playerid, P_AUTH_TIME) >= 0)
		{
			if(GetPlayerData(playerid, P_AUTH_TIME) >= MAX_AUTHORIZATION_TIME)
			{
				HidePlayerDialog(playerid);

				SendClientMessage(playerid, 0xFF6600FF, "Время на авторизацию ограничено");
				Kick:(playerid);
			}
			else AddPlayerData(playerid, P_AUTH_TIME, +, 1);
		}
	}
}

public: CheckPlayerAccount(playerid, race)
{
	if(race == mysql_race[playerid])
	{
		new query[75];
		new Cache: result, is_account_exist;

		SendClientMessage(playerid, 0x3399FFFF, "Welcome to "SERVER_NAME" RolePlay!");

		//SetPlayerPos(playerid, 1690.419189, -1950.881835, 13.5666);
		//TogglePlayerControllable(playerid, false);
		
		//for(new i = 0; i < 1; i++) TextDrawShowForPlayer(playerid, TD_logo_TD[i]);

		SetPlayerCameraPos(playerid, AUTH_CAMERA_POS);
		SetPlayerCameraLookAt(playerid, AUTH_CAMERA_LOOK);

		new buffer[40+1];
    	gpci(playerid, buffer);

    	printf("player %s buffer %s", GetPlayerNameEx(playerid), buffer);

    	if(!strcmp(GetPlayerNameEx(playerid), "Nick_Name"))
    	{
    		Dialog
			(
				playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
				"{FF9900}Критическая ошибка",
				"{FFFFFF}Невозможно подключиться к серверу из-за вашего ник-нейма\n"\
				"Зайдите в лаунчер -> Шестеренка -> и введите новый ник-нейм\n\
				Далее нажмите 'Подключится'",
				"Выход", ""
			);
			return Kick:(playerid, "Ошибка nick-name. Введите /q (/quit) чтобы выйти", 3000);
    	}

    	/*if(strcmp(buffer, "3952314F524834355456464955525858554F3353"))
    	{
    		//mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE name='%e' AND admin > 0 LIMIT 1", GetPlayerNameEx(playerid));

    		mysql_format(mysql, query, sizeof query, "SELECT * FROM whitelist WHERE name='%s' LIMIT 1", GetPlayerNameEx(playerid));
			result = mysql_query(mysql, query);
			print(query);

			if(!cache_num_rows())
			{
				Dialog
				(
					playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
					"{FF9900}Критическая ошибка",
					"{FFFFFF}Невозможно подключиться к серверу из-за ограничений входа с вашего устройства!\n"\
					"Возможно вы используете старую версию клиента, нажмите обновить клиент в настройках лаунчера",
					"Выход", ""
				);
				Kick:(playerid, "Ошибка входа. Введите /q (/quit) чтобы выйти", 3000);
				return 1;
			}
    	}*/

		mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE `name`='%e' LIMIT 1", GetPlayerNameEx(playerid));
		result = mysql_query(mysql, query);

		if(!mysql_errno())
		{
			is_account_exist = bool: cache_num_rows();
			SetPlayerData(playerid, P_ACCOUNT_STATE, is_account_exist + 1);

			if(is_account_exist)
			{
				SetPlayerData(playerid, P_ACCOUNT_ID, cache_get_field_content_int(0, "id"));

				cache_get_field_content(0, "salt", g_player[playerid][P_SALT], mysql, 11);
				cache_get_field_content(0, "password", g_player[playerid][P_PASSWORD], mysql, 65);
				cache_get_field_content(0, "last_ip", g_player[playerid][P_LAST_IP], mysql, 16);

				cache_get_field_content(0, "setting_phone", g_player[playerid][P_SETTING_PHONE], mysql, 13);
				cache_get_field_content(0, "setting_pin_code", g_player[playerid][P_SETTING_PIN], mysql, 5);

				SetPlayerData(playerid, P_REQUEST_PHONE, cache_get_field_content_int(0, "request_phone"));
				SetPlayerData(playerid, P_REQUEST_PIN, cache_get_field_content_int(0, "request_pin"));

				SetPlayerData(playerid, P_AUTH_TIME, 0);
				ShowPlayerLoginDialog(playerid, LOGIN_STATE_CHECK_BAN, false);
			}
			else ShowPlayerRegDialog(playerid, REGISTER_STATE_PASSWORD);
		}
		else
		{
			Dialog
			(
				playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
				"{FF9900}Критическая ошибка",
				"{FFFFFF}Невозможно подключиться к серверу из-за сбоя системных настроек\n"\
				"Если проблема не решится в течение нескольких минут обратитесь к администрации",
				"Выход", ""
			);
			Kick:(playerid, "Ошибка соединения. Введите /q (/quit) чтобы выйти", 3000);
		}
		cache_delete(result);

		#if defined _MAP_INCLUDED
		RemoveBuildings(playerid);
		#endif

	}
	return 1;
}

public: FixedKick(playerid)
{
	Kick(playerid);
}

public: LoadPlayerData(playerid)
{
	new query[138];
	new Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE id=%d LIMIT 1", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query);

	if(cache_num_rows())
	{
		new
			buffer = 0,
			time = gettime();

		cache_get_field_content(0, "email", g_player[playerid][P_EMAIL], mysql, 61);
		SetPlayerData(playerid, P_CONFIRM_EMAIL, bool: cache_get_field_content_int(0, "confirm_email"));

		SetPlayerData(playerid, P_LEVEL, 	cache_get_field_content_int(0, "level"));
		SetPlayerData(playerid, P_EXP, 		cache_get_field_content_int(0, "exp"));

		SetPlayerData(playerid, P_REFER, 	cache_get_field_content_int(0, "refer"));
		SetPlayerData(playerid, P_SEX, 		bool: cache_get_field_content_int(0, "sex"));
		SetPlayerData(playerid, P_SKIN, 	cache_get_field_content_int(0, "skin"));
		SetPlayerData(playerid, P_MONEY, 	cache_get_field_content_int(0, "money"));
		SetPlayerData(playerid, P_BANK, 	cache_get_field_content_int(0, "bank"));
		SetPlayerData(playerid, P_ADMIN, 	cache_get_field_content_int(0, "admin"));
		SetPlayerData(playerid, P_SECRET, 	cache_get_field_content_int(0, "a_secret"));
		SetPlayerData(playerid, P_3D_PREFIX, 	cache_get_field_content_int(0, "3d_prefix"));
		SetPlayerData(playerid, P_APASS, 	cache_get_field_content_int(0, "AdminPass"));

		cache_get_field_content(0, "cmdaccess", g_player[playerid][CMD_ACCESS], mysql, CMD_NUM+1);
		cache_get_field_content(0, "prefix", g_player[playerid][P_PREFIX], mysql, 16);
		SetPlayerData(playerid, P_PLAY_PLAYER, 	cache_get_field_content_int(0, "player"));

		SetPlayerData(playerid, P_DRIVING_LIC, 	cache_get_field_content_int(0, "driving_lic"));
		SetPlayerData(playerid, P_WEAPON_LIC, 	cache_get_field_content_int(0, "weapon_lic"));

		SetPlayerData(playerid, P_SUSPECT, 		cache_get_field_content_int(0, "suspect"));
		SetPlayerData(playerid, P_PHONE, 		cache_get_field_content_int(0, "phone"));
		SetPlayerData(playerid, P_PHONE_BALANCE,cache_get_field_content_int(0, "phone_balance"));
		SetPlayerData(playerid, P_PHONE_COLOR,	cache_get_field_content_int(0, "phone_color"));

		SetPlayerData(playerid, P_LAW_ABIDING,	cache_get_field_content_int(0, "law_abiding"));
		SetPlayerData(playerid, P_IMPROVEMENTS, cache_get_field_content_int(0, "improvements"));
		SetPlayerData(playerid, P_POWER, 		cache_get_field_content_int(0, "power"));

		SetPlayerData(playerid, P_DRUGS, 		cache_get_field_content_int(0, "drugs"));
		SetPlayerData(playerid, P_AMMO, 		cache_get_field_content_int(0, "ammo"));
		SetPlayerData(playerid, P_METALL, 		cache_get_field_content_int(0, "metall"));
		SetPlayerData(playerid, P_WIFE, 		cache_get_field_content_int(0, "wife"));
		SetPlayerData(playerid, P_TEAM, 		cache_get_field_content_int(0, "team"));
		SetPlayerData(playerid, P_SUBDIVISON,	cache_get_field_content_int(0, "subdivison"));
		SetPlayerData(playerid, P_WAGE,			cache_get_field_content_int(0, "wage"));
		SetPlayerData(playerid, P_JOB, 			cache_get_field_content_int(0, "job"));

		SetPlayerData(playerid, P_LOADER_SKILL,		cache_get_field_content_int(0, "loader_skill"));

		SetPlayerData(playerid, P_HOUSE_TYPE,	cache_get_field_content_int(0, "house_type"));
		SetPlayerData(playerid, P_HOUSE_ROOM,	cache_get_field_content_int(0, "house_room"));
		SetPlayerData(playerid, P_HOUSE, 		cache_get_field_content_int(0, "house"));
		SetPlayerData(playerid, P_BUSINESS, cache_get_field_content_int(0, "business"));
		SetPlayerData(playerid, P_FUEL_ST,		cache_get_field_content_int(0, "fuel_st"));
		SetPlayerData(playerid, P_ADMIN_WARN,		cache_get_field_content_int(0, "admin_warn"));

		SetPlayerData(playerid, P_REG_TIME, 	cache_get_field_content_int(0, "reg_time"));
		cache_get_field_content(0, "reg_ip", g_player[playerid][P_REG_IP], mysql, 16);

		buffer = SetPlayerData(playerid, P_LAST_LOGIN_TIME,	cache_get_field_content_int(0, "last_login"));
		if(GetElapsedTime(time, buffer) < 1)
		{
			if(GetElapsedTime(time, g_last_pay_day_time) < 1)
				SetPlayerData(playerid, P_GAME_FOR_HOUR,	cache_get_field_content_int(0, "game_for_hour"));
		}
		SetPlayerData(playerid, P_GAME_FOR_DAY,			cache_get_field_content_int(0, "game_for_day"));
		SetPlayerData(playerid, P_GAME_FOR_DAY_PREV,	cache_get_field_content_int(0, "game_for_day_prev"));

		buffer = GetElapsedTime(time, buffer, CONVERT_TIME_TO_DAYS);
		if(buffer == 1)
		{
			SetPlayerData(playerid, P_GAME_FOR_DAY_PREV, GetPlayerData(playerid, P_GAME_FOR_DAY));
			SetPlayerData(playerid, P_GAME_FOR_DAY, 0);
		}
		else if(buffer > 1)
		{
			SetPlayerData(playerid, P_GAME_FOR_DAY, 0);
			SetPlayerData(playerid, P_GAME_FOR_DAY_PREV, 0);
		}

		SetPlayerSettingData(playerid, S_CHAT_TYPE, 	cache_get_field_content_int(0, "setting1"));
		SetPlayerSettingData(playerid, S_TEAM_CHAT, 	cache_get_field_content_int(0, "setting2"));
		SetPlayerSettingData(playerid, S_NICK_IN_CHAT, 	cache_get_field_content_int(0, "setting4"));
		SetPlayerSettingData(playerid, S_ID_IN_CHAT, 	cache_get_field_content_int(0, "setting5"));
		SetPlayerSettingData(playerid, S_VEH_CONTROL, 	cache_get_field_content_int(0, "setting6"));

		SetPlayerData(playerid, P_WARN, 				cache_get_field_content_int(0, "warn"));
		SetPlayerData(playerid, P_WARN_TIME,			cache_get_field_content_int(0, "warn_time"));
		SetPlayerData(playerid, P_MUTE, 				cache_get_field_content_int(0, "mute"));

		SetPlayerData(playerid, P_SKILL_COLT, 			cache_get_field_content_int(0, "skill_colt"));
		SetPlayerData(playerid, P_SKILL_SDPISTOL,		cache_get_field_content_int(0, "skill_sdpistol"));
		SetPlayerData(playerid, P_SKILL_DEAGLE, 		cache_get_field_content_int(0, "skill_deagle"));
		SetPlayerData(playerid, P_SKILL_SHOTGUN, 		cache_get_field_content_int(0, "skill_shotgun"));
		SetPlayerData(playerid, P_SKILL_MP5, 			cache_get_field_content_int(0, "skill_mp5"));
		SetPlayerData(playerid, P_SKILL_AK47, 			cache_get_field_content_int(0, "skill_ak47"));
		SetPlayerData(playerid, P_SKILL_M4, 			cache_get_field_content_int(0, "skill_m4"));
		SetPlayerData(playerid, P_SKILL_SNIPER_RIFLE, 	cache_get_field_content_int(0, "skill_sniper_rifle"));
		SetPlayerData(playerid, P_SKILL_SAWNOFF, 		cache_get_field_content_int(0, "skill_sawnoff"));
		SetPlayerData(playerid, P_SKILL_COMBAT_SG, 		cache_get_field_content_int(0, "skill_combat_sg"));
		SetPlayerData(playerid, P_SKILL_MICRO_UZI, 		cache_get_field_content_int(0, "skill_micro_uzi"));

		
		SetPlayerData(playerid, P_DONATE_MONEY, 		cache_get_field_content_int(0, "donate_current"));
		SetPlayerData(playerid, P_DONATE_TOTAL, 		cache_get_field_content_int(0, "donate_total"));

		SetPlayerData(playerid, P_GIFTS,        		cache_get_field_content_int(0, "gifts"));

		SetPlayerData(playerid, P_OSKIN,		 		cache_get_field_content_int(0, "org_skin"));

		SetPlayerData(playerid, P_SPAWN,		 		cache_get_field_content_int(0, "setting_spawn"));

		SetPlayerData(playerid, P_HOSPITAL,				bool: cache_get_field_content_int(0, "hospital"));

		SetPlayerData(playerid, P_HEALTH,				cache_get_field_content_float(0, "health"));

		SetPlayerData(playerid, P_CAR_SLOTS,			cache_get_field_content_int(0, "car_slots"));

		SetPlayerData(playerid, P_JAIL,					cache_get_field_content_int(0, "jail"));

		SetPlayerData(playerid, P_PREMIUM,				cache_get_field_content_int(0, "premium"));
		SetPlayerData(playerid, P_PREMIUM_DATE,				cache_get_field_content_int(0, "premium_date"));

		SetPlayerData(playerid, P_PREMIUM,				cache_get_field_content_int(0, "premium"));
		SetPlayerData(playerid, P_PREMIUM_TIME,			cache_get_field_content_int(0, "premium_time"));

		SetPlayerData(playerid, P_FAMILY,               cache_get_field_content_int(0, "family"));
        SetPlayerData(playerid, P_FAMILY_RANK,          cache_get_field_content_int(0, "family_rank"));

        SetPlayerData(playerid, P_TEST,          cache_get_field_content_int(0, "test"));

        SetPlayerData(playerid, P_QUEST_1,        		cache_get_field_content_int(0, "quest_1"));
        SetPlayerData(playerid, P_QUEST_2,        		cache_get_field_content_int(0, "quest_2"));
        SetPlayerData(playerid, P_QUEST_3,        		cache_get_field_content_int(0, "quest_3"));
        SetPlayerData(playerid, P_QUEST_4,        		cache_get_field_content_int(0, "quest_4"));
        SetPlayerData(playerid, P_QUEST_5,        		cache_get_field_content_int(0, "quest_5"));
        SetPlayerData(playerid, P_QUEST_6,        		cache_get_field_content_int(0, "quest_6"));
        SetPlayerData(playerid, P_QUEST_7,        		cache_get_field_content_int(0, "quest_7"));
        SetPlayerData(playerid, P_QUEST_8,        		cache_get_field_content_int(0, "quest_8"));

        SetPlayerData(playerid, P_QUEST_EXP_1,        		cache_get_field_content_int(0, "quest_exp_1"));
        SetPlayerData(playerid, P_QUEST_EXP_2,        		cache_get_field_content_int(0, "quest_exp_2"));
        SetPlayerData(playerid, P_QUEST_EXP_3,        		cache_get_field_content_int(0, "quest_exp_3"));
        SetPlayerData(playerid, P_QUEST_EXP_4,        		cache_get_field_content_int(0, "quest_exp_4"));
        SetPlayerData(playerid, P_QUEST_EXP_5,        		cache_get_field_content_int(0, "quest_exp_5"));
        SetPlayerData(playerid, P_QUEST_EXP_6,        		cache_get_field_content_int(0, "quest_exp_6"));
        SetPlayerData(playerid, P_QUEST_EXP_7,        		cache_get_field_content_int(0, "quest_exp_7"));
        SetPlayerData(playerid, P_QUEST_EXP_8,        		cache_get_field_content_int(0, "quest_exp_8"));

        SetPlayerData(playerid, P_YOUTUBE,        		cache_get_field_content_int(0, "youtube"));

        SetPlayerData(playerid, P_BANIHOP,        		cache_get_field_content_int(0, "AntiBh"));

        SetPlayerData(playerid, P_ADMIN_HOUR,        		cache_get_field_content_int(0, "get_adm_hour"));
        SetPlayerData(playerid, P_ADMIN_STATUS,        		cache_get_field_content_int(0, "get_adm_status"));

        SetPlayerData(playerid, P_ANTISLIV,        		cache_get_field_content_int(0, "antisliv"));
        
        SetPlayerData(playerid, P_QUEST231,        		cache_get_field_content_int(0, "quest231"));
        SetPlayerData(playerid, P_QUEST232,        		cache_get_field_content_int(0, "quest232"));
        SetPlayerData(playerid, P_REPCARID,        		cache_get_field_content_int(0, "repcarid"));
        SetPlayerData(playerid, P_BOXQUEST,             cache_get_field_content_int(0, "QuestBox"));
        SetPlayerData(playerid, P_QUEST233,        		cache_get_field_content_int(0, "quest233"));
        SetPlayerData(playerid, P_POSTCARD,        		cache_get_field_content_int(0, "postcard"));
        
        SetPlayerData(playerid, P_TOTALHOUR,        		cache_get_field_content_int(0, "totalhour"));
        
        SetPlayerData(playerid, P_HELPER, 	cache_get_field_content_int(0, "helper"));
        SetPlayerData(playerid, P_MED_CHEST, 	cache_get_field_content_int(0, "healme"));
        
        SetPlayerData(playerid, P_BOX_QUEST_1, 	cache_get_field_content_int(0, "QuestBox1"));
        SetPlayerData(playerid, P_BOX_QUEST_2, 	cache_get_field_content_int(0, "QuestBox2"));
        SetPlayerData(playerid, P_BOX_QUEST_3, 	cache_get_field_content_int(0, "QuestBox3"));
        SetPlayerData(playerid, P_BOX_QUEST_4, 	cache_get_field_content_int(0, "QuestBox4"));
        SetPlayerData(playerid, P_BOX_QUEST_5, 	cache_get_field_content_int(0, "QuestBox5"));
        SetPlayerData(playerid, P_BOX_QUEST_6, 	cache_get_field_content_int(0, "QuestBox6"));
        
        SetPlayerData(playerid, P_REPCARID, 	cache_get_field_content_int(0, "repair"));
        
        SetPlayerData(playerid, P_FMUTE, 				cache_get_field_content_int(0, "fmute"));
        SetPlayerData(playerid, P_FWARN, 				cache_get_field_content_int(0, "fwarn"));
        
        SetPlayerData(playerid, P_OWARN, 				cache_get_field_content_int(0, "owarn"));
        
        SetPlayerData(playerid, P_DMZ_KILL, 			cache_get_field_content_int(0, "dmz_kills"));
        
        SetPlayerData(playerid, P_PROGRESS_1,        		cache_get_field_content_int(0, "Progress1"));
        SetPlayerData(playerid, P_PROGRESS_2,        		cache_get_field_content_int(0, "Progress2"));
        SetPlayerData(playerid, P_PROGRESS_3,        		cache_get_field_content_int(0, "Progress3"));
        SetPlayerData(playerid, P_PROGRESS_4,        		cache_get_field_content_int(0, "Progress4"));
        SetPlayerData(playerid, P_PROGRESS_5,        		cache_get_field_content_int(0, "Progress5"));
        SetPlayerData(playerid, P_PROGRESS_6,        		cache_get_field_content_int(0, "Progress6"));
        SetPlayerData(playerid, P_PROGRESS_EXP_1,        		cache_get_field_content_int(0, "ProgressExp1"));
        SetPlayerData(playerid, P_PROGRESS_EXP_2,        		cache_get_field_content_int(0, "ProgressExp2"));
        SetPlayerData(playerid, P_PROGRESS_EXP_3,        		cache_get_field_content_int(0, "ProgressExp3"));
        SetPlayerData(playerid, P_PROGRESS_EXP_4,        		cache_get_field_content_int(0, "ProgressExp4"));
        SetPlayerData(playerid, P_PROGRESS_EXP_5,        		cache_get_field_content_int(0, "ProgressExp5"));
        SetPlayerData(playerid, P_PROGRESS_EXP_6,        		cache_get_field_content_int(0, "ProgressExp6"));
        
        SetPlayerData(playerid, P_CAPT_KILL, 			cache_get_field_content_int(0, "capt_kills"));
        
        SetPlayerData(playerid, P_FLOWER_1,        		cache_get_field_content_int(0, "flower1"));
        SetPlayerData(playerid, P_FLOWER_2,        		cache_get_field_content_int(0, "flower2"));
        SetPlayerData(playerid, P_FLOWER_3,        		cache_get_field_content_int(0, "flower3"));
        SetPlayerData(playerid, P_TAKE_FLOWER,        		cache_get_field_content_int(0, "TakeFlower"));
        SetPlayerData(playerid, P_CONGRATULATE_WOMEN,        		cache_get_field_content_int(0, "CongratulateWomen"));
        SetPlayerData(playerid, P_BUY_PERFUME,        		cache_get_field_content_int(0, "BuyPerfume"));
        SetPlayerData(playerid, P_GIVE_PERFUME,        		cache_get_field_content_int(0, "GivePerfume"));
        SetPlayerData(playerid, P_BUY_CAKE,        		cache_get_field_content_int(0, "BuyCake"));
        SetPlayerData(playerid, P_BUY_PRODUCTS,        		cache_get_field_content_int(0, "BuyProducts"));
        SetPlayerData(playerid, P_BUY_CANDLE,        		cache_get_field_content_int(0, "BuyCandle"));
        SetPlayerData(playerid, P_END_QUEST_8MARTA,        		cache_get_field_content_int(0, "EndQuest8marta"));
        
        SetPlayerData(playerid, P_COINS, 			cache_get_field_content_int(0, "coins"));
        
        SetPlayerData(playerid, P_YTPROMO_ACTIVATE,         cache_get_field_content_int(0, "ytpromo_activate"));
        
        SetPlayerData(playerid, P_F_QUEST_EXP_1,        		cache_get_field_content_int(0, "FracQuestExp1"));
        SetPlayerData(playerid, P_F_QUEST_EXP_2,        		cache_get_field_content_int(0, "FracQuestExp2"));
        SetPlayerData(playerid, P_F_QUEST_EXP_3,        		cache_get_field_content_int(0, "FracQuestExp3"));
        SetPlayerData(playerid, P_F_QUEST_EXP_4,        		cache_get_field_content_int(0, "FracQuestExp4"));
        SetPlayerData(playerid, P_F_QUEST_EXP_5,        		cache_get_field_content_int(0, "FracQuestExp5"));
        
        SetPlayerData(playerid, P_F_QUEST_1,        		cache_get_field_content_int(0, "FracQuest1"));
        SetPlayerData(playerid, P_F_QUEST_2,        		cache_get_field_content_int(0, "FracQuest2"));
        SetPlayerData(playerid, P_F_QUEST_3,        		cache_get_field_content_int(0, "FracQuest3"));
        SetPlayerData(playerid, P_F_QUEST_4,        		cache_get_field_content_int(0, "FracQuest4"));
        SetPlayerData(playerid, P_F_QUEST_5,        		cache_get_field_content_int(0, "FracQuest5"));
        
        SetPlayerData(playerid, P_TOP_1,        		cache_get_field_content_int(0, "TOP_SalaryNewWork"));
        SetPlayerData(playerid, P_TOP_2,        		cache_get_field_content_int(0, "TOP_SalaryGosWork"));
        SetPlayerData(playerid, P_TOP_3,        		cache_get_field_content_int(0, "TOP_PayDay"));
        SetPlayerData(playerid, P_TOP_4,        		cache_get_field_content_int(0, "TOP_Progress"));
        SetPlayerData(playerid, P_TOP_5,        		cache_get_field_content_int(0, "TOP_Quest"));
        
        SetPlayerData(playerid, P_BOOMBOX,        		cache_get_field_content_int(0, "boombox"));
        
        SetPlayerData(playerid, P_SPEEDOMETR, 			cache_get_field_content_int(0, "speedometr"));
        
        
        

        SetPlayerData(playerid, P_FRACTION_CAR,        		INVALID_VEHICLE_ID);

		// -------------------------------------------------------------------------
		cache_delete(result);

		SetPlayerSpawnInit(playerid);
		SpawnPlayer(playerid);
		
		MessageInSpawn(playerid);

		if(GetPlayerData(playerid, P_SKIN))
		{
			mysql_format(mysql, query, sizeof query, "UPDATE accounts SET last_ip='%e',last_login=%d, online = 1 WHERE id=%d LIMIT 1", GetPlayerIpEx(playerid), time, GetPlayerAccountID(playerid));
			mysql_tquery(mysql, query, "", "");

			format(query, sizeof query, "~y~Добро Пожаловать ~n~~b~%s", GetPlayerNameEx(playerid));
			GameTextForPlayer(playerid, query, 3000, 1);

			if(IsPlayerHasDonations(playerid))
				SendClientMessage(playerid, 0x3399FFFF, "У Вас есть новые пополнения счёта. Введите {ff9900}/donat{3399ff}, чтобы зачислить их");

			new player_admin_rank = GetPlayerAdminEx(playerid);

			if(player_admin_rank)
			{
				AdminAuthorization(playerid);
			}

            new player_premium = GetPlayerData(playerid, P_PREMIUM_DATE);

			if(player_premium)
			{
				if((player_premium - time) > 0)
				{
				    new premium_day,
				        premium_month,
				        premium_year;

					timestamp_to_date(player_premium, premium_year, premium_month, premium_day);

					format
					(
						query, sizeof query,
						"Ваш VIP статус действует до {FFFFFF}%02d.%02d.%d",
						premium_day, premium_month, premium_year
					);
					SendClientMessage(playerid, 0xEC174FFF, query);
				}
				else
				{
				    format(query, sizeof query, "Срок действия VIP статуса истёк. Для продления подписки используйте: {FFFFFF}/mn > Дополнительно");
					SendClientMessage(playerid, 0xEC174FFF, query);

					SetPlayerData(playerid, P_PREMIUM, 					0);

					UpdatePlayerDatabaseInt(playerid, "premium", 		0);
				}
			}

			if(GetPlayerData(playerid, P_WARN) > 0)
			{
				if(time > GetPlayerData(playerid, P_WARN_TIME))
				{
					SetPlayerData(playerid, P_WARN, 0);
					SetPlayerData(playerid, P_WARN_TIME, 0);
				}
				else
				{
					format(query, sizeof query, "Количество предупреждений: %d из 3", GetPlayerData(playerid, P_WARN));
					SendClientMessage(playerid, 0xFF6600FF, query);
					SendClientMessage(playerid, 0xFF6600FF, "После 3 предупреждения аккаунт будет заблокирован");
				}
			}

		/*	if(!GetPlayerData(playerid, P_CONFIRM_EMAIL))
			{
				SendClientMessage(playerid, 0xFFA040FF, "При регистрации Вы указали Email, но не подтвердили его");
				SendClientMessage(playerid, 0xFFA040FF, "Вы можете сделать это прямо сейчас, через /menu > Настройки безопасности");
				SendClientMessage(playerid, 0xFFA040FF, "Без подтверждения Email восстановить доступ к аккаунту будет невозможно");
			}
			*/
			if((buffer = GetPlayerHouse(playerid, HOUSE_TYPE_HOME)) != -1)
			{
				if(GetElapsedTime(GetHouseData(buffer, H_RENT_DATE), time, CONVERT_TIME_TO_DAYS) < 5)
				{
					SendClientMessage(playerid, 0xFFB500FF, "Срок оплаты Вашего дома скоро заканчивается");
				}
			}
			if((buffer = GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL)) != -1)
			{
				new room_id = GetPlayerData(playerid, P_HOUSE_ROOM);
				if(GetElapsedTime(GetHotelData(buffer, room_id, H_RENT_DATE), time, CONVERT_TIME_TO_DAYS) < 5)
				{
					SendClientMessage(playerid, 0xFFB500FF, "У Вас осталось мало оплаченных дней в гостинице");
				}
			}
			if((buffer = GetPlayerBusiness(playerid)) != -1)
			{
				if(GetElapsedTime(GetBusinessData(buffer, B_RENT_DATE), time, CONVERT_TIME_TO_DAYS) < 5)
				{
					SendClientMessage(playerid, 0xFFB500FF, "Срок аренды Вашего бизнеса скоро заканчивается");
				}
			}
			if((buffer = GetPlayerFuelStation(playerid)) != -1)
			{
				if(GetElapsedTime(GetFuelStationData(buffer, FS_RENT_DATE), time, CONVERT_TIME_TO_DAYS) < 5)
				{
					SendClientMessage(playerid, 0xFFB500FF, "Срок аренды Вашей АЗС скоро заканчивается");
				}
			}
			SetPlayerInit(playerid);
			//SetTimerEx("PlayerOwnableCarInit", 250, false, "i", playerid);

			//CallLocalFunction("PlayerOwnableCarInit", "i", playerid);
		}
		else
		{
			SetPlayerData(playerid, P_ACCOUNT_STATE, ACCOUNT_STATE_REG_SKIN);
			SendClientMessage(playerid, 0x66CC00FF, "Выберите внешность Вашего персонажа");
		}
	}
}

public: ShowPlayerLoginDialog(playerid, step, wrong_pass)
{
	if(GetPlayerData(playerid, P_ACCOUNT_STATE) != ACCOUNT_STATE_LOGIN) return 0;

	/*
	new request_type = REQUEST_TYPE_OFF;
	if(strcmp(GetPlayerIpEx(playerid), GetPlayerData(playerid, P_LAST_IP)) != 0)
	{
		request_type = REQUEST_TYPE_IP;
	}
	else
	{
		new subnet_last_ip[16], subnet_cur_ip[16];

		GetSubnet(subnet_cur_ip, GetPlayerIpEx(playerid));
		GetSubnet(subnet_last_ip, GetPlayerData(playerid, P_LAST_IP));

		if(strcmp(subnet_cur_ip, subnet_last_ip) != 0)
		{
			request_type = REQUEST_TYPE_SUBNET;
		}
	}
	*/

	new fmt_str[256];
	switch(step)
	{
		case LOGIN_STATE_CHECK_BAN:
		{
			new Cache: result;

			format(fmt_str, sizeof fmt_str, "SELECT * FROM ban_list WHERE user_id=%d LIMIT 1", GetPlayerAccountID(playerid));
			result = mysql_query(mysql, fmt_str, true);

			if(cache_num_rows())
			{
				new unban_time = cache_get_field_content_int(0, "ban_time");
				new ban_days = GetElapsedTime(unban_time, gettime(), CONVERT_TIME_TO_DAYS);

				if(ban_days)
				{
					new reason[32];
					new admin_name[21];

					new year, month, day;
					new hour, minute, second;
					new ban_time = cache_get_field_content_int(0, "time");

					cache_get_field_content(0, "description", reason);
					cache_get_field_content(0, "admin", admin_name);

					timestamp_to_date(ban_time, year, month, day, hour, minute, second);
					format
					(
						fmt_str, sizeof fmt_str,
						"{FFFFFF}Этот аккаунт заблокирован на {FF3333}%d дней\n\n"\
						"{FFFFFF}Ник администратора: %s\n"\
						"Причина блокировки: %s\n"\
						"Дата и время: %d-%02d-%02d %02d:%02d:%02d\n\n"\
						"Введите {FFCD00}/q (/quit) {FFFFFF}чтобы выйти",
						ban_days,
						admin_name,
						reason,
						year, month, day, hour, minute, second
					);
					Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{3399FF}"SERVER_NAME" RolePlay", fmt_str, "Закрыть", "");

					Kick:(playerid, " ", 3000);
				}
				else
				{
					format(fmt_str, sizeof fmt_str, "DELETE FROM ban_list WHERE user_id=%d LIMIT 1", GetPlayerAccountID(playerid));
					mysql_tquery(mysql, fmt_str, "", "");

					CallLocalFunction("ShowPlayerLoginDialog", "iii", playerid, step + 1, false);
				}
			}
			else CallLocalFunction("ShowPlayerLoginDialog", "iii", playerid, step + 1, false);

			return cache_delete(result);
		}
		case LOGIN_STATE_PASSWORD:
		{
			format
			(
				fmt_str, sizeof fmt_str,
				"{FFFFFF}Добро пожаловать на "SERVER_NAME" RolePlay\n"\
				"Аккаунт с Вашим ником зарегистрирован\n\n"\
				"Логин: {66CC66}%s\n",
				GetPlayerNameEx(playerid)
			);
			if(wrong_pass)
			{
				new ch[3];
				new attemps = GetPlayerData(playerid, P_PASS_ATTEMPS);

				valstr(ch, attemps);

				strcat(fmt_str, "{FF3300}Неверный пароль! Осталось попыток: ");
				strcat(fmt_str, ch);

				AddPlayerData(playerid, P_PASS_ATTEMPS, -, 1);
				switch(attemps)
				{
					case 0:
					{
						Dialog
						(
							playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
							"{FF9933}Лимит попыток авторизации",
							"{FFFFFF}Вы ввели неправильный пароль 3 раза подряд", // . Ваш IP адрес забанен на сутки
							"Закрыть", ""
						);
						Kick:(playerid, " ");

						return 1;

						// BanEx(playerid, "Лимит попыток авторизации");
						// return AddBan(0, gettime(), 1, GetPlayerIpEx(playerid), "Лимит попыток авторизации", "Система безопасности");
					}
					case 1:
					{
						SendClientMessage(playerid, 0xFF6600FF, "При неправильном вводе пароля Вы будете забанены");
					}
				}
				PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
			}
			else strcat(fmt_str, "{FFFFFF}Введите пароль от аккаунта:");

			Dialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_INPUT, "{66CCFF}Авторизация", fmt_str, "Войти", "Отмена");
		}
		case LOGIN_STATE_PHONE: // ввод 5 послед. цифр телефона
		{
			if(GetPlayerData(playerid, P_REQUEST_PHONE))
			{
				if(!wrong_pass)
				{
					new phone[13];

					strmid(phone, GetPlayerData(playerid, P_SETTING_PHONE), 0, strlen(GetPlayerData(playerid, P_SETTING_PHONE)) - 5);
					strcat(phone, "*****");

					format
					(
						fmt_str, sizeof fmt_str,
						"{FFFFFF}Система безопасности запрашивает ввод\n"\
						"Вашего мобильного телефона\n\n{FFCD00}%s\n\n"\
						"{FFFFFF}Введите последние 5 цифр номера:",
						phone
					);
					Dialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_INPUT, "{66CCFF}Мобильный телефон", fmt_str, "Ввести", "Выход");
				}
				else
				{
					SendClientMessage(playerid, 0xFF0000FF, "Номер мобильного телефона введен неверно. Доступ запрещен");
					Kick:(playerid);
				}
			}
			else
			{
				return CallLocalFunction("ShowPlayerLoginDialog", "iii", playerid, step + 1, false);
			}
		}
		case LOGIN_STATE_PIN_CODE: // ввод пин кода
		{
			if(GetPlayerData(playerid, P_REQUEST_PIN))
			{
				if(wrong_pass)
				{
					SendClientMessage(playerid, 0xFF0000FF, "PIN-код введен неверно. Доступ запрещен");
					Kick:(playerid);
				}
				else ShowPlayerPinCodePTD(playerid, PIN_CODE_STATE_LOGIN_CHECK);
			}
			else
			{
				return CallLocalFunction("ShowPlayerLoginDialog", "iii", playerid, step + 1, false);
			}
		}
		case LOGIN_STATE_LOAD_ACC:
		{
			SetPlayerData(playerid, P_AUTH_TIME, -1);
			LoadPlayerData(playerid);
		}
	}
	SetPlayerData(playerid, P_ACCOUNT_STEP_STATE, step);

	return 1;
}

public: ClearPlayerAnim(playerid)
{
	ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 0);
}


public: ClearPlayerChatAnim(playerid)
{
	if(GetPlayerData(playerid, P_USE_ANIM_TYPE) == USE_ANIM_TYPE_CHAT)
	{
		ClearPlayerAnim(playerid);
		SetPlayerData(playerid, P_USE_ANIM_TYPE, USE_ANIM_TYPE_NONE);
	}
}

public: SetPlayerLoaderJobLoad(playerid) // брать груз
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADER)
	{
		if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_LOADER_LOAD)
		{
			//new rand = random(sizeof loader_job_attach_obj);

			ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 1, 1, 1, 1, 1, 0);
		//	SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, loader_job_attach_obj[rand][L_OBJECT], A_OBJECT_BONE_RIGHT_HAND, loader_job_attach_obj[rand][L_POS_X], loader_job_attach_obj[rand][L_POS_Y], loader_job_attach_obj[rand][L_POS_Z], loader_job_attach_obj[rand][L_ROT_X], loader_job_attach_obj[rand][L_ROT_Y], loader_job_attach_obj[rand][L_ROT_Z], 1.0, 1.0, 1.0, 0);

			SetPlayerLoaderJobUnLoadCP(playerid);

//			if(!random(6))
//				SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LOADER_DROP_LOAD);
		}
	}
}

public: SetPlayerMinerJobTakeOre(playerid, step)
{
/*	if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER)
	{
		new time = 500;

		switch(step)
		{
			case 1:
			{*/
/*		RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);

		ClearAnimations(playerid);
		ApplyAnimationEx(playerid, "CARRY", "liftup", 8.0, 0, 0, 0, 0, 0, 0);

			//	SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 905, A_OBJECT_BONE_LEFT_HAND, 0.1, 0.05, -0.1, 0.0, 90.0, 0.0, 0.2, 0.2, 0.2, 0);
			//	SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND + 1, 2936, A_OBJECT_BONE_RIGHT_HAND, 0.1, 0.05, 0.1, 0.0, 90.0, 0.0, 0.2, 0.2, 0.2, 0);
			}
			case 2:
			{
				ApplyAnimationEx(playerid, "GHANDS", "gsign3LH", 4.1, 0, 1, 1, 1, 2250, 0);

				time = 2500;
			}
			case 3:
			{
				RemovePlayerAttachedObjectEx(playerid, A_OBJECT_SLOT_HAND, A_OBJECT_SLOT_HAND + 1);

			//	SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_SPINE, 1458, A_OBJECT_BONE_SPINE, -0.9, 0.7, 0.02, 0.0, 90.0, 0.0, 0.58, 0.6, 0.4, 0);
			//	SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_SPINE + 1, 816, A_OBJECT_BONE_SPINE, -0.63, 1.3, 0.0, 270.0, 75.0, 0.0, 0.5, 0.4, 0.8, 0);*/
    ClearAnimations(playerid);
	SetPlayerMinerJobUnLoadCP(playerid);
/*				return ;
			}
			default:
				return ;
		}
		SetTimerEx("SetPlayerMinerJobTakeOre", time, false, "ii", playerid, step + 1);*/
//	}
}

public: SetPlayerLumberJackTakeWood(playerid)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_LUMBERJACK)
	{
		SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LUMBERJACK_PUT);

		SetPlayerLumberUnJackChopCP(playerid);

		RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
		ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 1, 0, 1, 0, 1500, 0);

		ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 1, 0, 1, 1, 1);
	//	SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 1463, A_OBJECT_BONE_RIGHT_HAND, 0.006, 0.138, -0.192, -109.8, -2.2, -102.9, 0.505, 0.328, 0.57);
	}
}

public: LumberJackPlayerDrop(playerid, bool: message)
{
	SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LUMBERJACK_CHOP);

	if(message)
		SendClientMessage(playerid, 0xFF6600FF, "Вы уронили дрова");

	RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
//	SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 326, A_OBJECT_BONE_RIGHT_HAND, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0);

	ApplyAnimationEx(playerid, "MISC", "Idle_Chat_02", 4.1, 0, 0, 0, 0, 1, 0);

	SetPlayerLumberJackChopCP(playerid);

	return 1;
}

public: MinerCarriageUpdate(carriageid)
{
	if(miner_carriage[carriageid][MC_STATUS] && !miner_carriage[carriageid][MC_IN_MOVE])
	{
		if(miner_carriage[carriageid][MC_ORE_COUNT] >= 500)
		{
			new fmt_str[55],
				items = GetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_AMOUNT);

			miner_carriage[carriageid][MC_ORE_COUNT] -= 500;

			SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_AMOUNT, items + 500);
			UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE);

			format(fmt_str, sizeof fmt_str, "Разгрузка\n\n{FFCC00}Количество руды\n%d / 10000 кг", miner_carriage[carriageid][MC_ORE_COUNT]);
			UpdateDynamic3DTextLabelText(miner_carriage[carriageid][MC_LABEL], 0x66CCFFFF, fmt_str);
		}

		else if(miner_carriage[carriageid][MC_ORE_COUNT] <= 0)
		{
			miner_carriage[carriageid][MC_IN_MOVE] = true;

			SetTimerEx("MinerCarriageMove", 7_000, false, "i", carriageid);
			UpdateDynamic3DTextLabelText(miner_carriage[carriageid][MC_LABEL], 0xFFFF00FF, "Ожидание...");
		}
	}
}

public: MinerCarriageMove(carriageid)
{
	new bool: status = miner_carriage[carriageid][MC_STATUS];
	if(status)
	{
	//	MoveDynamicObject(miner_carriage[carriageid][MC_OBJECT_ID], miner_carriage[carriageid][MC_START_POS_X], miner_carriage[carriageid][MC_START_POS_Y], miner_carriage[carriageid][MC_START_POS_Z], 10.0, 0.0, 0.0, 90.0);
	}
	else
	{
	//	MoveDynamicObject(miner_carriage[carriageid][MC_OBJECT_ID], miner_carriage[carriageid][MC_END_POS_X], miner_carriage[carriageid][MC_END_POS_Y], miner_carriage[carriageid][MC_END_POS_Z], 10.0, 0.0, 0.0, 90.0);
	}

	DestroyDynamic3DTextLabel(miner_carriage[carriageid][MC_LABEL]);

	miner_carriage[carriageid][MC_IN_MOVE] = true;

	miner_carriage[carriageid][MC_STATUS] = (status ^ true);
}

public: MinerCarriageSetState(carriageid)
{
	if(miner_carriage[carriageid][MC_STATUS]) // вагонетка
	{
		miner_carriage[carriageid][MC_LABEL] = CreateDynamic3DTextLabel("Разгрузка\n\n{FFCC00}Количество руды\n10000 / 10000 кг", 0x66CCFFFF, -2548.1213, 294.7194, -15.4815 + 3.0, 10.0);
		miner_carriage[carriageid][MC_ORE_COUNT] = 10_000;
	}
	else
	{
		miner_carriage[carriageid][MC_LABEL] = CreateDynamic3DTextLabel("Загрузка\n\n{FFCC00}Количество руды\n0 / 10000 кг", 0x66CC00FF, -2375.1228, 294.7194, -15.4815 + 3.0, 10.0);
		miner_carriage[carriageid][MC_PICKUP_ID] = CreatePickup(1239, 23, -2375.1228, 296.8900, -15.7689, -1, PICKUP_ACTION_TYPE_MINER_CARRI);
		miner_carriage[carriageid][MC_ORE_COUNT] = 0;
	}
}

public: NextBusRouteCP(playerid)
{
	if(GetPlayerJob(playerid) == JOB_BUS_DRIVER)
	{
		if(IsPlayerInJob(playerid))
		{
			new route_id = GetPlayerData(playerid, P_BUS_ROUTE);
			new route_step = GetPlayerData(playerid, P_BUS_ROUTE_STEP);
			new next_cp = route_step + 1;

			if(g_bus_route[route_id][next_cp][BRS_POS_X] == 0.0)
			{
				next_cp = 0;
			}

			SetPlayerRaceCheckpoint
			(
				playerid,
				g_bus_route[route_id][route_step][BRS_STOP],
				g_bus_route[route_id][route_step][BRS_POS_X],
				g_bus_route[route_id][route_step][BRS_POS_Y],
				g_bus_route[route_id][route_step][BRS_POS_Z],
				g_bus_route[route_id][next_cp][BRS_POS_X],
				g_bus_route[route_id][next_cp][BRS_POS_Y],
				g_bus_route[route_id][next_cp][BRS_POS_Z],
				4.0,
				RCP_ACTION_TYPE_BUS_ROUTE
			);
			AddPlayerData(playerid, P_BUS_ROUTE_STEP, +, 1);
		}
	}
}

public: StartPlayerJob(playerid, jobid)
{
	if(GetPlayerJob(playerid) == jobid)
	{
		if(!IsPlayerInJob(playerid))
		{
			new job_car = GetPlayerJobCar(playerid);
			if(IsPlayerInVehicle(playerid, job_car))
			{
				new action_type = GetVehicleData(job_car, V_ACTION_TYPE);
				new car_type = (action_type - VEHICLE_ACTION_TYPE_BUS_DRIVER) + 1;

				if(jobid == car_type)
				{
					SetPlayerJobLoadItems(playerid, 0);

					SetPlayerData(playerid, P_JOB_WAGE, 0);
					SetPlayerData(playerid, P_IN_JOB, true);
					SetVehicleData(job_car, V_ACTION_ID, true);

					new fmt_str[128];

					switch(jobid)
					{
						case JOB_BUS_DRIVER:
						{
							new route_id = GetPlayerData(playerid, P_BUS_ROUTE);

							format(fmt_str, sizeof fmt_str, "%s\n{FFFFFF}Стоимость проезда: {FF9900}%d руб", g_bus_routes[route_id][BR_NAME], GetPlayerData(playerid, P_JOB_TARIFF));
							CreateVehicleLabel(job_car, fmt_str, g_bus_routes[route_id][BR_COLOR], 0.0, 0.0, 2.6, 45.0);

							format(fmt_str, sizeof fmt_str, "начал работу водителя автобуса на маршруте %s", g_bus_routes[route_id][BR_NAME]);
							Action(playerid, fmt_str, _, false);

							NextBusRouteCP(playerid);

							SetPVarFloat(playerid, "car_damage", 1000.0);
						}
						case JOB_TAXI_DRIVER:
						{
							format(fmt_str, sizeof fmt_str, "%s{FFFF00}Тариф: %d руб", GetPlayerData(playerid, P_JOB_SERVICE_NAME), GetPlayerData(playerid, P_JOB_TARIFF));
							CreateVehicleLabel(job_car, fmt_str, 0x3399FFFF, 0.0, 0.0, 1.4, 25.0);

							Action(playerid, "начал работу таксиста", _, false);
						}
						case JOB_MECHANIC:
						{
							SetPlayerData(playerid, P_MECHANIC_FILL_PAY, 0);
							SetPlayerData(playerid, P_MECHANIC_REPAIR_PAY, 0);

							format(fmt_str, sizeof fmt_str, "%s{FFFFFF}Автомеханик\n{999999}Нет топлива", GetPlayerData(playerid, P_JOB_SERVICE_NAME));
							CreateVehicleLabel(job_car, fmt_str, 0xCC9900FF, 0.0, 0.0, 2.0, 25.0);

							Action(playerid, "начал работу автомеханика", _, false);
						}
						case JOB_TRUCKER:
						{
							if(!GetTruckIndex(job_car))
							{
								fmt_str = "Служба\n{FFFFFF}Доставки продуктов";

								SendClientMessage(playerid, 0x66CC00FF, "Используйте {3399FF}/bizlist {66CC00}чтобы посмотреть заказы от владельцев бизнесов");
								Action(playerid, "начал работу развозчика продуктов", _, false);
							}
							else
							{
								fmt_str = "Служба\n{FFFFFF}Доставки топлива";

								SendClientMessage(playerid, 0x66CC00FF, "Используйте {3399FF}/fuellist {66CC00}для просмотра заказов от владельцев АЗС");
								Action(playerid, "начал работу развозчика топлива", _, false);
							}

							CreateVehicleLabel(job_car, fmt_str, 0x3399FFFF, 0.0, 2.1, 2.1, 20.0);
						}
					}
				}
			}
		}
	}
	return 1;
}

public: EndPlayerJob(playerid)
{
	if(IsPlayerInJob(playerid))
	{
		new vehicleid = GetPlayerJobCar(playerid);
		if(vehicleid != INVALID_VEHICLE_ID)
		{
			SetVehicleToRespawn(vehicleid);
			SetPlayerData(playerid, P_JOB_CAR, INVALID_VEHICLE_ID);
		}
	}
	KillEndJobTimer(playerid);

	new fmt_str[128];
	new wage = GetPlayerJobWage(playerid);
	new items = GetPlayerJobLoadItems(playerid);

	SetPlayerData(playerid, P_JOB_WAGE, 0);
	SendClientMessage(playerid, 0xFFFF00FF, "Рабочий день завершен!");

	SetPlayerData(playerid, P_IN_JOB, false);
	switch(GetPlayerData(playerid, P_JOB))
	{
		case JOB_BUS_DRIVER:
		{
			new Float: health = GetPVarFloat(playerid, "car_damage");
			new repair_sum;

			if(health < 1000.0)
				repair_sum = (floatround((1000.0 - health) + float(random(100)+10))) / 3;

			DisablePlayerRaceCheckpoint(playerid);

			format(fmt_str, sizeof fmt_str, "Заработано: {00FF00}%d руб", wage + (items * GetPlayerData(playerid, P_JOB_TARIFF)));
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

			format(fmt_str, sizeof fmt_str, "Количество пассажиров: {00FF00}%d{FFFFFF}. Куплено билетов на {00FF00}%d руб", items, items * GetPlayerData(playerid, P_JOB_TARIFF));
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

			format(fmt_str, sizeof fmt_str, "За ремонт автобуса: {FF6600}-%d руб", repair_sum);
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

			if(repair_sum < wage)
				wage -= repair_sum;

			//GiveMoney(playerid, salary, "Зарплата Водителя Маршрутки", true, true);
		}
		case JOB_TAXI_DRIVER:
		{
			DisablePlayerRaceCheckpoint(playerid);
			wage = items * GetPlayerData(playerid, P_JOB_TARIFF);

			format(fmt_str, sizeof fmt_str, "Заработано: {00FF00}%d руб", wage);
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

			format(fmt_str, sizeof fmt_str, "Количество пассажиров: {00FF00}%d", items);
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
		}
		case JOB_MECHANIC:
		{
			DisablePlayerRaceCheckpoint(playerid);
			wage = GetPlayerData(playerid, P_MECHANIC_FILL_PAY) + GetPlayerData(playerid, P_MECHANIC_REPAIR_PAY);

			format(fmt_str, sizeof fmt_str, "Получено за ремонт: {00FF00}%d руб", GetPlayerData(playerid, P_MECHANIC_REPAIR_PAY));
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

			format(fmt_str, sizeof fmt_str, "Получено за заправку: {00FF00}%d руб", GetPlayerData(playerid, P_MECHANIC_FILL_PAY));
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

			format(fmt_str, sizeof fmt_str, "Всего заработано: {FFCD00}%d руб", wage);
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
		}
		case JOB_TRUCKER:
		{
			DisablePlayerRaceCheckpoint(playerid);

			format(fmt_str, sizeof fmt_str, "Ваша общая чистая прибыль составляет {00CC00}%d руб", wage);
			SendClientMessage(playerid, -1, fmt_str);

			if(GetPlayerData(playerid, P_ORDER) != -1)
				SetOrderData(GetPlayerData(playerid, P_ORDER), O_USED, false);

			return 1;
		}
		/*
		case JOB_PITCHMAN:
		{
			new marketid = player_use_market[playerid];
			player_use_market[playerid] = -1;

			if(marketid != -1)
			{
				market_status[marketid] = false;
				UpdateMarket(marketid);
			}

			salary = player_job_load_items[playerid];

			format(fmt_str, sizeof fmt_str, "Общее количество покупателей: {00FF00}%d", market_buyers_count[playerid]);
			SendClientMessage(playerid, -1, fmt_str);

			format(fmt_str, sizeof fmt_str, "Всего продано товаров на {00FF00}%d руб", salary);
			SendClientMessage(playerid, -1, fmt_str);
		}

		case JOB_FIREFIGHTER:
		{
			check_extinguish_the_fire{playerid} = false;

			DisablePlayerRaceCheckpoint(playerid);
			TextDrawHideForPlayer(playerid, time_to_fire_TD);

			salary = player_job_load_items[playerid];

			format(fmt_str, sizeof fmt_str, "Потушено очагов возгорания: {FF3333}%d", extinguished_fires_count[playerid]);
			SendClientMessage(playerid, -1, fmt_str);

			format(fmt_str, sizeof fmt_str, "Заработано {0099CC}%d руб", salary);
			SendClientMessage(playerid, -1, fmt_str);
		}
		*/
		default:
		{
			switch(GetPlayerTempJob(playerid))
			{
				case TEMP_JOB_FACTORY_TRUCKER:
				{
			//		RemovePlayerAttachedObjects(playerid);
					SetPlayerSkinInit(playerid);

					format(fmt_str, sizeof fmt_str, "Ваша общая чистая прибыль составляет {00CC00}%d руб", wage);
					SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

					SetPlayerJobLoadItems(playerid, 0);
					SetPlayerTempJob(playerid, TEMP_JOB_NONE);
				}
			}
			return 1;
		}
	}
	SendClientMessage(playerid, 0x66CC00FF, "Деньги будут перечислены на Ваш счет во время зарплаты");

	AddPlayerData(playerid, P_WAGE, +, wage);
	
	AddPlayerData(playerid, P_TOP_2, +, wage);
	UpdatePlayerDatabaseInt(playerid, "TOP_SalaryGosWork", GetPlayerData(playerid, P_TOP_2));

	format(fmt_str, sizeof fmt_str, "UPDATE accounts SET wage=%d WHERE id=%d LIMIT 1", GetPlayerData(playerid, P_WAGE), GetPlayerAccountID(playerid));
	mysql_query(mysql, fmt_str, false);

	return 1;
}

public: ShowChangeNameHistory(playerid, name[])
{
	new fmt_str[64];
	new rows = cache_num_rows();

	if(!rows)
	{
		format(fmt_str, sizeof fmt_str, "{FFCD00}Прошлые имена %s", name);
		return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, fmt_str, "{FFFFFF}История изменения имен персонажа пуста", "Закрыть", "");
	}

	new text[1024] = "{FFFFFF}";
	for(new idx; idx < rows; idx ++)
	{
		cache_get_row(idx, 0, fmt_str);
		strcat(fmt_str, "\n");

		strcat(text, fmt_str);
	}
	format(fmt_str, sizeof fmt_str, "{FFCD00}Прошлые имена %s", name);
	return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, fmt_str, text, "Закрыть", "");
}

public: ShowPlayerPhoneBook(playerid)
{
	if(IsPlayerPhoneBookInit(playerid))
	{
		if(GetPlayerPhoneBookContacts(playerid) > 0)
		{
			new fmt_str[37];
			new string[((sizeof fmt_str) * MAX_PHONE_BOOK_CONTACTS) + 1];

			for(new idx, count; idx < MAX_PHONE_BOOK_CONTACTS; idx ++)
			{
				if(!GetPlayerPhoneBook(playerid, idx, PB_SQL_ID)) continue;
				SetPlayerListitemValue(playerid, count ++, idx);

				format(fmt_str, sizeof fmt_str, "%s - tel.%s\n", GetPlayerPhoneBook(playerid, idx, PB_NAME), GetPlayerPhoneBook(playerid, idx, PB_NUMBER));
				strcat(string, fmt_str);
			}
			Dialog(playerid, DIALOG_PHONE_BOOK, DIALOG_STYLE_LIST, "{FFCD00}Телефонная книга", string, "Варианты", "Отмены");
		}
		else
		{
			SendClientMessage(playerid, 0xCECECEFF, "В телефонной книге нет номеров");
			SendClientMessage(playerid, 0xCECECEFF, "Чтобы добавить новый контакт введите {FFFF00}/add [id игрока]");
		}
	}
	else
	{
		InitPlayerPhoneBook(playerid);
		CallLocalFunction("ShowPlayerPhoneBook", "i", playerid);
	}
	return 1;
}

public: BusinesGPSListInit()
{
	new rows;
	new query[64 + 1];
	new Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM business_gps ORDER BY pos DESC, time ASC LIMIT %d", MAX_BUSINESS_GPS);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();
	for(new idx; idx < rows; idx ++)
	{
		SetBusinessGPSInfo(idx, BG_SQL_ID, 	cache_get_row_int(idx, 0));
		SetBusinessGPSInfo(idx, BG_BIZ_ID, 	cache_get_row_int(idx, 1));
		SetBusinessGPSInfo(idx, BG_POS, 	cache_get_row_int(idx, 2));
		SetBusinessGPSInfo(idx, BG_TIME, 	cache_get_row_int(idx, 3));
	}
	g_business_gps_count = rows;
	g_business_gps_init = true;

	cache_delete(result);
}

public: ShowPlayerGPSBusinessList(playerid)
{
	if(g_business_gps_init)
	{
		new businessid;

		new fmt_str[44];
		new string[(sizeof fmt_str) * MAX_BUSINESS_GPS];
		new city[MAX_ZONES_NAME + 1];

		if(!g_business_gps_count)
			string = "В данный момент в списке нет бизнесов";

		for(new idx, count; idx < g_business_gps_count; idx ++)
		{
			businessid = GetBusinessGPSInfo(idx, BG_BIZ_ID);

			GetCityName(GetBusinessData(businessid, B_POS_X), GetBusinessData(businessid, B_POS_Y), city);
			format(fmt_str, sizeof fmt_str, "%d. %s (%s)\n", idx + 1, GetBusinessInteriorInfo(GetBusinessData(businessid, B_INTERIOR), BT_NAME) , city);
			strcat(string, fmt_str);

			SetPlayerListitemValue(playerid, count ++, idx);
		}
		Dialog(playerid, DIALOG_GPS_BUSINESS, DIALOG_STYLE_LIST, "{FFCD00}Реклама бизнеса", string, "Отметить", "Назад");
	}
	else
	{
		BusinesGPSListInit();
		CallLocalFunction("ShowPlayerGPSBusinessList", "i", playerid);
	}
}

public: ShowPlayerBusinessDialog(playerid, operationid)
{
	new businessid = GetPlayerBusiness(playerid);
	if(businessid != -1)
	{
		switch(operationid)
		{
			case BIZ_OPERATION_PARAMS: // управление заправкой
			{
				Dialog
				(
					playerid, DIALOG_BIZ_PARAMS, DIALOG_STYLE_LIST,
					"{33AACC}Изменение параметров бизнеса",
					"1. {669966}Открыть {FFFFFF}или {CC3333}закрыть {FFFFFF}бизнес\n"\
					"2. Установить цену на вход\n"\
					"3. Изменить стоимость продукта\n"\
					"4. Заказать продукты\n"\
					"5. Отменить заказ\n"\
					"6. Финансовая статистика\n"\
					"7. Улучшить бизнес",
					"Выбрать", "Назад"
				);
			}
			case BIZ_OPERATION_LOCK: // открыть / закрыть
			{
				if(GetBusinessData(businessid, B_LOCK_STATUS))
				{
					SetBusinessData(businessid, B_LOCK_STATUS, false);
					SendClientMessage(playerid, 0x66CC00FF, "Бизнес открыт");
				}
				else
				{
					SetBusinessData(businessid, B_LOCK_STATUS, true);
					SendClientMessage(playerid, 0xFF6600FF, "Бизнес закрыт");
				}
				UpdateBusinessLabel(businessid);

				new query[75];
				mysql_format(mysql, query, sizeof query, "UPDATE business SET `lock`=%d WHERE `id`=%d LIMIT 1", GetBusinessData(businessid, B_LOCK_STATUS), GetBusinessData(businessid, B_SQL_ID));
				mysql_query(mysql, query, false);

				CallLocalFunction("ShowPlayerBusinessDialog", "ii", playerid, BIZ_OPERATION_PARAMS);
			}
			case BIZ_OPERATION_ENTER_PRICE: // установить цену за вход
			{
				Dialog
				(
					playerid, DIALOG_BIZ_ENTER_PRICE, DIALOG_STYLE_INPUT,
					"{33AACC}Цена за вход",
					"{FFFFFF}Укажите сколько должны платить клиенты\n"\
					"чтобы войти в ваш бизнес\n\n"\
					"{669966}Предел цен: от 0 до 5000 рублей\n"\
					"Установка цены за вход может увеличить ваши доходы,\n"\
					"однако сократит количество клиентов\n"\
					"{CC3333}Выбирайте цену разумно во избежание банкротства вашей фирмы",
					"Сменить", "Назад"
				);
			}
			case BIZ_OPERATION_PROD_PRICE: // установить стоимость продукта
			{
				Dialog
				(
					playerid, DIALOG_BIZ_PROD_PRICE, DIALOG_STYLE_INPUT,
					"{33AACC}Стоимость продукта",
					"{FFFFFF}Тут вы можете изменить стоимость продукта для бизнеса\n"\
					"Укажите цену в пределах от 25 до 200 рублей",
					"Сменить", "Назад"
				);
			}
			case BIZ_OPERATION_PROD_ORDER: // заказать продукты
			{
				Dialog
				(
					playerid, DIALOG_BIZ_ORDER_PRODS, DIALOG_STYLE_INPUT,
					"{33AACC}Заказ продуктов",
					"{FFFFFF}Сколько продуктов Вы хотите заказать?",
					"Заказать", "Назад"
				);
			}
			case BIZ_OPERATION_PROD_ORDER_CANCEL: // отменить заказ
			{
				new order_id = GetBusinessData(businessid, B_ORDER_ID);
				if(order_id != -1)
				{
					new fmt_str[128];
					format
					(
						fmt_str, sizeof fmt_str,
						"{FFFFFF}Вы действительно хотите отменить заказ?\n"\
						"На счет бизнеса будет возвращено {FFCD00}%d руб",
						GetOrderData(order_id, O_AMOUNT) * GetOrderData(order_id, O_PRICE)
					);
					Dialog(playerid, DIALOG_BIZ_ORDER_CANCEL, DIALOG_STYLE_MSGBOX, "{33AADD}Отмена заказа", fmt_str, "Да", "Нет");
				}
				else
				{
					SendClientMessage(playerid, 0xFF6600FF, "Вы не оформляли заказ продуктов для своего бизнеса");
					CallLocalFunction("ShowPlayerBusinessDialog", "ii", playerid, BIZ_OPERATION_PARAMS);
				}
			}
			case BIZ_OPERATION_PROFIT_STATS: // финансовая статистика
			{
				new query[256];

				new time = gettime();
				new cur_day = time - (time % 86400);
				new start_day = cur_day - (86400 * 20);

				mysql_format(mysql, query, sizeof query, "SELECT FROM_UNIXTIME(time, '%%Y-%%m-%%d') AS date, SUM(money) as total FROM business_profit WHERE bid=%d AND view=1 AND time >= %d AND time < %d GROUP BY time ORDER BY time DESC LIMIT 20", GetBusinessData(businessid, B_SQL_ID), start_day, cur_day);
				mysql_tquery(mysql, query, "ShowBusinessProfit", "ii", playerid, ++ mysql_race[playerid]);
			}
			case BIZ_OPERATION_IMPROVEMENTS: // Улучшения
			{
				new fmt_str[80];
				new string[512];

				new buffer[14 + 1];
				new i_level = GetBusinessData(businessid, B_IMPROVEMENTS);

				for(new idx; idx < sizeof(g_business_improvements); idx ++)
				{
					format(fmt_str, sizeof fmt_str, "%d уровень:\t%s\t", idx + 1, g_business_improvements[idx][I_NAME]);

					switch(idx)
					{
						case 0,1,4:
							buffer = "\t";

						case 5:
							buffer = "\t\t";

						default:
							buffer[0] = 0;
					}
					if(buffer[0] != EOS)
						strcat(fmt_str, buffer);

					if(i_level > idx)
					{
						strins(fmt_str, "{2277AA}", 0, sizeof fmt_str);
						strcat(fmt_str, "Куплено");
					}
					else
					{
						if(i_level < idx)
						{
							strins(fmt_str, "{CC3344}", 0, sizeof fmt_str);
						}
						strcat(string, fmt_str);

						valfmt(buffer, g_business_improvements[idx][I_PRICE]);
						format(fmt_str, sizeof fmt_str, "%s руб", buffer);

						if(i_level == idx)
							strins(fmt_str, "{66CC33}", 0, sizeof fmt_str);
					}
					strcat(fmt_str, "\n");
					strcat(string, fmt_str);
				}
				Dialog(playerid, DIALOG_BIZ_IMPROVEMENT, DIALOG_STYLE_LIST, "{33AADD}Доступные улучшения", string, "Купить", "Назад");
			}
		}
	}

	return 1;
}

public: ShowBusinessProfit(playerid, race)
{
	if(race != mysql_race[playerid])
	{
		new string[600];
		new fmt_str[32];
		new rows = cache_num_rows();

		if(rows)
		{
			string = "Дата\t\t\tПрибыль\n\n{FFFFFF}";
		}
		else string = "{FFFFFF}Финансовая статистика Вашего бизнеса еще не сформирована";

		for(new idx; idx < rows; idx ++)
		{
			cache_get_row(idx, 0, fmt_str, mysql, sizeof fmt_str);
			strcat(string, fmt_str);

			format(fmt_str, sizeof fmt_str, "\t\t%d руб\n", cache_get_row_int(idx, 1));
			strcat(string, fmt_str);
		}
		Dialog(playerid, DIALOG_BIZ_INFO, DIALOG_STYLE_MSGBOX, "{33AADD}Доход бизнеса за 20 дней", string, "<< Назад", "Закрыть");
	}
}

public: ShowPlayerFuelStationDialog(playerid, operationid)
{
	new stationid = GetPlayerFuelStation(playerid);
	if(stationid != -1)
	{
		switch(operationid)
		{
			case FUEL_ST_OPERATION_PARAMS:
			{
				Dialog
				(
					playerid, DIALOG_FUEL_STATION_PARAMS, DIALOG_STYLE_LIST,
					"{33AACC}Параметры заправочной станции",
					"1. {669966}Открыть {FFFFFF}или {CC3333}закрыть {FFFFFF}заправочную станцию\n"\
					"2. Новое название\n"\
					"3. Изменить цену на топливо\n"\
					"4. Установить закупочную цену\n"\
					"5. Заказать топливо\n"\
					"6. Отменить заказ\n"\
					"7. Финансовая статистика\n"\
					"8. Улучшить заправочную станцию",
					"Выбрать", "Назад"
				);
			}
			case FUEL_ST_OPERATION_LOCK:
			{
				if(GetFuelStationData(stationid, FS_LOCK_STATUS))
				{
					SetFuelStationData(stationid, FS_LOCK_STATUS, false);
					SendClientMessage(playerid, 0x66CC00FF, "Заправочная станция открыта");
				}
				else
				{
					SetFuelStationData(stationid, FS_LOCK_STATUS, true);
					SendClientMessage(playerid, 0xFF6600FF, "Заправочная станция закрыта");
				}
				UpdateFuelStationLabel(stationid);

				new query[75];
				mysql_format(mysql, query, sizeof query, "UPDATE `fuel_stations` SET `lock`=%d WHERE `id`=%d LIMIT 1", GetFuelStationData(stationid, FS_LOCK_STATUS), GetFuelStationData(stationid, FS_SQL_ID));
				mysql_query(mysql, query, false);

				CallLocalFunction("ShowPlayerFuelStationDialog", "ii", playerid, FUEL_ST_OPERATION_PARAMS);
			}
			case FUEL_ST_OPERATION_NEW_NAME:
			{
				Dialog
				(
					playerid, DIALOG_FUEL_STATION_NAME, DIALOG_STYLE_INPUT,
					"{33AACC}Смена названия",
					"{FFFFFF}Введите новое название для заправочной станции\n\n"\
					"Требования:\n"\
					"- Длина от 3-х до 15-ти символов\n"\
					"- Название не должно противоречить правилам сервера\n"\
					"- Название должно ассоциироваться с заправочными станциями\n\n"\
					"{CC3333}ПРИМЕЧАНИЕ: Новое название не сохранится после рестарта сервера",
					"Сменить", "Назад"
				);
			}
			case FUEL_ST_OPERATION_FUEL_PRICE:
			{
				Dialog
				(
					playerid, DIALOG_FUEL_STATION_PRICE_FUEL, DIALOG_STYLE_INPUT,
					"Цена топлива",
					"{FFFFFF}Укажите отпускную цену за 1 литр\n"\
					"топлива в пределах от 2 до 10 руб.",
					"Готово", "Назад"
				);
			}
			case FUEL_ST_OPERATION_FUEL_ORDER:
			{
				Dialog
				(
					playerid, DIALOG_FUEL_STATION_ORDER_FUELS, DIALOG_STYLE_INPUT,
					"Заказ топлива",
					"{FFFFFF}Сколько литров топлива Вы хотите заказать?",
					"Заказать", "Назад"
				);
			}
			case FUEL_ST_OPERATION_FUEL_ORDER_CA:
			{
				new order_id = GetFuelStationData(stationid, FS_ORDER_ID);

				if(order_id != -1)
				{
					new fmt_str[128];
					format
					(
						fmt_str, sizeof fmt_str,
						"{FFFFFF}Вы действительно хотите отменить заказ?\n"\
						"На счет заправочной станции будет возвращено {FFCD00}%d руб",
						GetOrderData(order_id, O_AMOUNT) * GetOrderData(order_id, O_PRICE)
					);
					Dialog(playerid, DIALOG_FUEL_STATION_ORDER_CANCE, DIALOG_STYLE_MSGBOX, "{33AADD}Отмена заказа", fmt_str, "Да", "Нет");
				}
				else
				{
					SendClientMessage(playerid, 0xFF6600FF, "Вы не оформляли заказ топлива для своей АЗС");
					CallLocalFunction("ShowPlayerFuelStationDialog", "ii", playerid, FUEL_ST_OPERATION_PARAMS);
				}
			}
			case FUEL_ST_OPERATION_PROFIT_STATS:
			{
				new query[256];

				new time = gettime();
				new cur_day = time - (time % 86400);
				new start_day = cur_day - (86400 * 20);

				format(query, sizeof query, "SELECT FROM_UNIXTIME(time, '%%Y-%%m-%%d') AS date, SUM(money) as total FROM fuel_stations_profit WHERE fid=%d AND view=1 AND time >= %d AND time < %d GROUP BY time ORDER BY time DESC LIMIT 20", GetFuelStationData(stationid, FS_SQL_ID), start_day, cur_day);
				mysql_tquery(mysql, query, "ShowFuelStationProfit", "ii", playerid, ++ mysql_race[playerid]);
			}
			case FUEL_ST_OPERATION_IMPROVEMENTS:
			{
				new fmt_str[75];
				new string[300];

				new str_numeric[14 + 1];
				new i_level = GetFuelStationData(stationid, FS_IMPROVEMENTS);

				for(new idx; idx < sizeof(g_fuel_station_improvements); idx ++)
				{
					format(fmt_str, sizeof fmt_str, "%d уровень:\t%s\t", idx + 1, g_fuel_station_improvements[idx][I_NAME]);

					if(idx != 2)
						strcat(fmt_str, "\t");

					if(i_level > idx)
					{
						strins(fmt_str, "{2277AA}", 0, sizeof fmt_str);
						strcat(fmt_str, "Куплено");
					}
					else
					{
						if(i_level < idx)
						{
							strins(fmt_str, "{CC3344}", 0, sizeof fmt_str);
						}
						strcat(string, fmt_str);

						valfmt(str_numeric, g_fuel_station_improvements[idx][I_PRICE]);
						format(fmt_str, sizeof fmt_str, "%s руб", str_numeric);

						if(i_level == idx)
							strins(fmt_str, "{66CC33}", 0, sizeof fmt_str);
					}
					strcat(fmt_str, "\n");
					strcat(string, fmt_str);
				}
				Dialog(playerid, DIALOG_FUEL_STATION_IMPROVEMENT, DIALOG_STYLE_LIST, "{33AADD}Улучшения для заправочной станции", string, "Купить", "Назад");
			}
		}
	}
	return 1;
}

public: ShowFuelStationProfit(playerid, race)
{
	if(race != mysql_race[playerid])
	{
		new string[600];
		new fmt_str[32];
		new rows = cache_num_rows();

		if(rows)
		{
			string = "Дата\t\t\tПрибыль\n\n{FFFFFF}";
		}
		else string = "{FFFFFF}Финансовая статистика Вашей заправочной станции еще не сформирована";

		for(new idx; idx < rows; idx ++)
		{
			cache_get_row(idx, 0, fmt_str, mysql, sizeof fmt_str);
			strcat(string, fmt_str);

			format(fmt_str, sizeof fmt_str, "\t\t%d руб\n", cache_get_row_int(idx, 1));
			strcat(string, fmt_str);
		}
		Dialog(playerid, DIALOG_FUEL_STATION_INFO, DIALOG_STYLE_MSGBOX, "{33AADD}Доход АЗС за 20 дней", string, "<< Назад", "Закрыть");
	}
}

public: PresentFlowersToPlayer(playerid, to_player)
{
	SetPlayerAmmo(playerid, WEAPON_FLOWER, 0);
	GivePlayerWeapon(to_player, WEAPON_FLOWER, 1);
}

public: ShowPlayerLotteryDialog(playerid)
{
	if(GetPlayerData(playerid, P_LOTTERY) >= 100)
	{
		new hour;
		new fmt_str[632];

		gettime(hour);
		format
		(
			fmt_str, sizeof fmt_str,
			"Ваше счастливое число: {FFCD00}%d\n\n"\
			"{FFFFFF}Вы зарегистрированы в лотерее, результат будет известен во\n"\
			"время ближайшего розыгрыша, который пройдёт в %d:02\n"\
			"Не выходите из игры чтобы принять в нём участие.\n\n"\
			"Выигрыш будет зависеть от того, сколько чисел совпало в\n"\
			"вашем счастливом числе и в числе, которое выпадет во\n"\
			"время розыгрыша (по порядку слева направо):\n\n"\
			"Нет совпадений:\t{FF6633}0 руб\n"\
			"{FFFFFF}1 число:\t\t{66FF00}2000 руб\n"\
			"{FFFFFF}2 числа:\t\t{66FF00}15000 руб\n"\
			"{FFFFFF}Все числа:\t\t{66FF00}50000 руб\n\n"\
			"{FFFFFF}Если Вы хотите изменить счастливое число, введите новые\n"\
			"3 цифры. В противном случае просто нажмите \"Ок\"",
			GetPlayerData(playerid, P_LOTTERY),
			GetElapsedTime(gettime(), g_last_lottery_time) >= 1 ? hour : hour+1
		);
		Dialog(playerid, DIALOG_BIZ_LOTTERY, DIALOG_STYLE_INPUT, "{66CC00}Лотерея", fmt_str, "Ок", "");
	}
}

/*public: SetGateStatus(gateid, bool: status, open_time)
{
	if(open_time != -1)
		SetTimerEx("SetGateStatus", open_time * 1000, false, "iii", gateid, status ^ GATE_STATUS_OPEN, -1);

	switch(GetGateData(gateid, G_TYPE))
	{
		case
			GATE_TYPE_BARRIER,
			GATE_TYPE_BARRIER_MSG,
			GATE_TYPE_BARRIER_BUTTON:
		{
			MoveDynamicObject(g_gate[gateid][G_OBJECT_ID][1], GetGateData(gateid, G_POS_X) + (status == GATE_STATUS_CLOSE ? 0.01 : -0.01), GetGateData(gateid, G_POS_Y), GetGateData(gateid, G_POS_Z) + 0.8, 0.01, 0.0, status == GATE_STATUS_CLOSE ? -90.0 : -10.0, GetGateData(gateid, G_ANGLE));
		}
		case GATE_TYPE_NORMAL:
		{

		}
	}
	SetGateData(gateid, G_STATUS, status);
}

public: CheckNearestGate(playerid)
{
	new gateid = GetNearestGate(playerid, 10.0);
	if(gateid != -1)
	{
		new open_time = 8;
		new bool: access = false;

		switch(gateid)
		{
			case GATE_ID_DRIVING_SCHOOL:
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				new type = GetVehicleData(vehicleid, V_ACTION_TYPE);

				if(type == VEHICLE_ACTION_TYPE_DRIVING_SCH)
				{
					if(GetPlayerDrivingExamInfo(playerid, DE_POINTS) >= 9)
					{
						access = true;
					}
				}
			}
			default:
				access = true;
		}

		if(access)
		{
			OnGateOpened(playerid, gateid, open_time);
		}
		return 1;
	}
	return 0;
}

public: OnGateOpened(playerid, gateid, open_time)
{
	new type = GetGateData(gateid, G_TYPE);
	new bool: status = GetGateData(gateid, G_STATUS);

	switch(type)
	{
		case GATE_TYPE_BARRIER, GATE_TYPE_BARRIER_MSG:
		{
			if(status == GATE_STATUS_OPEN) return 0;

			if(type == GATE_TYPE_BARRIER_MSG)
			{
				new fmt_str[64];

				if(strlen(GetGateData(gateid, G_DESCRIPTION)))
				{
					format(fmt_str, sizeof fmt_str, "[%s] Шлагбаум закроется через %d секунд", GetGateData(gateid, G_DESCRIPTION), open_time - 3);
				}
				else format(fmt_str, sizeof fmt_str, "Шлагбаум закроется через %d секунд", open_time - 3);
				SendClientMessage(playerid, 0x66CC00FF, fmt_str);
			}
		}
		case GATE_TYPE_BARRIER_BUTTON:
		{
			open_time = -1;
		}
		case GATE_TYPE_NORMAL:
		{

		}
	}
	SetGateStatus(gateid, status ^ GATE_STATUS_OPEN, open_time);

	return 1;
}*/

public: UpdateFactoryDesk(deskid)
{
	new fmt_str[64];

	format(fmt_str, sizeof fmt_str, "Рабочее место №%d\n%s", deskid + 1, factory_desk[deskid][FD_USED] ? ("{FF6600}Занято") : ("{33CC00}Свободно"));
	UpdateDynamic3DTextLabelText(factory_desk[deskid][FD_LABEl], 0xFFFFFFEE, fmt_str);
}

/*public: T_RemovePlayerAttachedObject(playerid, slot)
{
	if(IsPlayerAttachedObjectSlotUsed(playerid, slot))
	{
		RemovePlayerAttachedObject(playerid, slot);
	}
}*/

#if defined RAND_WEATHER
public: SetRandomWeather()
{
	new fmt_str[64];
	new rand = random(sizeof g_weather);

	SendClientMessageToAll(0x3399FFFF, "[Прогноз погоды]");

	format(fmt_str, sizeof fmt_str, "В области ожидается %s {99CC00}(+%d °С)", g_weather[rand][W_NAME], g_weather[rand][W_DEGREES]);
	SendClientMessageToAll(0xFFFFFFFF, fmt_str);

	SetWeather(g_weather[rand][W_ID]);
}
#endif

public: ClearBanList()
{
	new query[64];
	new time = gettime();

	format(query, sizeof query, "SELECT ip FROM ban_list WHERE ban_time <= %d", time);
	mysql_tquery(mysql, query, "UnBanIPs", "i", time);

	return 1;
}

public: UnBanIPs(time)
{
	new ip[16];
	new query[64];
	new rows = cache_num_rows();

	if(rows)
	{
		for(new idx; idx < rows; idx ++)
		{
			cache_get_row(idx, 0, ip);

			format(query, sizeof query, "unbanip %s", ip);
			SendRconCommand(query);
		}
		SendRconCommand("reloadbans");

		format(query, sizeof query, "DELETE FROM ban_list WHERE ban_time <= %d", time);
		mysql_query(mysql, query, false);
	}
	return 1;
}

public: PlayerOwnableCarInit(playerid)
{
	new index;
	new vehicleid = -1;

	while(vehicleid < MAX_VEHICLES-1)
	{
		vehicleid ++;
		index = GetVehicleData(vehicleid, V_ACTION_ID);

		if(GetVehicleData(vehicleid, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_OWNABLE_CAR) continue;
		if(GetOwnableCarData(index, OC_OWNER_ID) != GetPlayerAccountID(playerid)) continue;

		SetPlayerData(playerid, P_OWNABLE_CAR, vehicleid);
		break;
	}
}

public: SaveOwnableCar(vehicleid)
{
	if(IsAOwnableCar(vehicleid))
	{
		new query[300];
		new index = GetVehicleData(vehicleid, V_ACTION_ID);

		new Float: health;

		GetVehicleHealth(vehicleid, health);

		format
		(
			query, sizeof query,
			"UPDATE ownable_cars SET "\
			"pos_x=%f,"\
			"pos_y=%f,"\
			"pos_z=%f,"\
			"angle=%f,"\
			"status=%d,"\
			"alarm=%d,"\
			"key_in=%d,"\
			"mileage=%f,"\
			"health=%f,"\
			"number='%s'"\
			" WHERE id=%d LIMIT 1",
			GetOwnableCarData(index, OC_POS_X),
			GetOwnableCarData(index, OC_POS_Y),
			GetOwnableCarData(index, OC_POS_Z),
			GetOwnableCarData(index, OC_ANGLE),
			GetVehicleParam(vehicleid, V_LOCK),
			GetVehicleParam(vehicleid, V_ALARM),
			GetOwnableCarData(index, OC_KEY_IN),
			GetVehicleData(vehicleid, V_MILEAGE),
			GetVehicleData(vehicleid, V_HEALTH),
			GetOwnableCarData(index, OC_NUMBER),
			GetOwnableCarData(index, OC_SQL_ID)
		);
		mysql_query(mysql, query, false);

		return mysql_errno();
	}
	return -1;
}

public: ShowTrunkDialog(playerid, vehicleid, view)
{
	new count, type;

	new fmt_str[36];
	new string[(sizeof fmt_str) * MAX_VEHICLE_TRUNK_SLOTS + 1];

	ClearPlayerListitemValues(playerid);
	for(new idx; idx < MAX_VEHICLE_TRUNK_SLOTS; idx ++)
	{
		if(IsTrunkFreeSlot(vehicleid, idx)) continue;

		type = GetTrunkData(vehicleid, idx, VT_ITEM_TYPE);

		format(fmt_str, sizeof fmt_str, "%d. %s:\t{66CC00}%d %s\n", count + 1, GetItemInfo(type, I_NAME), GetTrunkData(vehicleid, idx, VT_ITEM_AMOUNT), GetItemInfo(type, I_NAME_COUNT));
		strcat(string, fmt_str);

		SetPlayerListitemValue(playerid, count ++, idx);
	}

	if(!view)
	{
		SetPlayerListitemValue(playerid, count, -1);
		SetPlayerUseTrunk(playerid, vehicleid);

		format(fmt_str, sizeof fmt_str, "{888888}%d. Положить", count + 1);
		strcat(string, fmt_str);

		Dialog(playerid, DIALOG_VEHICLE_TRUNK, DIALOG_STYLE_LIST, "{0099FF}Содержимое багажника", string, "Выбрать", "Закрыть");
	}
	else
	{
		if(!count)
			strcat(string, "{888888}Пусто");

		SetPlayerUseTrunk(playerid, INVALID_VEHICLE_ID);
		Dialog(playerid, DIALOG_VEHICLE_TRUNK, DIALOG_STYLE_LIST, "{0099FF}Содержимое багажника", string, "Закрыть", "");
	}
	return 1;
}

// ------------------------------------------
stock GetTrunkFreeSlot(vehicleid, item_type)
{
	new free_slot = -1, comb_slot = -1;
	new bool: comb = GetItemInfo(item_type, I_COMBINATION);

	for(new idx; idx < MAX_VEHICLE_TRUNK_SLOTS; idx ++)
	{
		if(GetTrunkData(vehicleid, idx, VT_ITEM_TYPE) == item_type && comb)
		{
			comb_slot = idx;
		}
		else if(free_slot == -1 && IsTrunkFreeSlot(vehicleid, idx))
		{
			free_slot = idx;
		}
		else continue;
	}
	return comb_slot != -1 ? comb_slot : free_slot;
}

stock GetTrunkBusySlot(vehicleid, item_type)
{
	new busy_slot = -1;

	for(new idx; idx < MAX_VEHICLE_TRUNK_SLOTS; idx ++)
	{
		if(GetTrunkData(vehicleid, idx, VT_ITEM_TYPE) == item_type)
		{
			busy_slot = idx;
		}
		else continue;
	}
	return busy_slot;
}

stock AddTrunkItem(vehicleid, item_id, amount, value = 0)
{
	if(1 <= item_id <= sizeof(g_item_type)-1)
	{
		new free_slot = GetTrunkFreeSlot(vehicleid, item_id);
		if(free_slot != -1)
		{
			SetTrunkData(vehicleid, free_slot, VT_SQL_ID, 1);

			SetTrunkData(vehicleid, free_slot, VT_ITEM_TYPE, item_id);
			SetTrunkData(vehicleid, free_slot, VT_ITEM_VALUE, value);

			new query[100],
				index,
				oc_id;

			index = GetVehicleData(vehicleid, V_ACTION_ID);
			oc_id = GetOwnableCarData(index, OC_SQL_ID);

			if(!IsTrunkFreeSlot(vehicleid, free_slot))
			{
				AddTrunkData(vehicleid, free_slot, VT_ITEM_AMOUNT, +, amount);

				if((GetTrunkData(vehicleid, free_slot, VT_ITEM_AMOUNT) - amount) == 0)
				{
					mysql_format(mysql, query, sizeof query, "INSERT INTO trunks (oc_id,item_id,amount,value) VALUES (%d,%d,%d,%d)", oc_id, item_id, amount, value);
					mysql_query(mysql, query, false);
				}
				else
				{
					mysql_format(mysql, query, sizeof query, "UPDATE trunks SET amount='%d' WHERE item_id='%d' AND oc_id='%d' LIMIT 1", GetTrunkData(vehicleid, free_slot, VT_ITEM_AMOUNT), item_id, oc_id);
					mysql_query(mysql, query, false);
				}
			}

			else
			{
				SetTrunkData(vehicleid, free_slot, VT_ITEM_AMOUNT, amount);

				mysql_format(mysql, query, sizeof query, "INSERT INTO trunks (oc_id,item_id,amount,value) VALUES (%d,%d,%d,%d)", oc_id, item_id, amount, value);
				mysql_query(mysql, query, false);
			}

			return 1;
		}
		return -1;
	}
	return 0;
}

stock TakeTrunkItem(vehicleid, item_id, amount)
{
	if(1 <= item_id <= sizeof(g_item_type)-1)
	{
		new busy_slot = GetTrunkBusySlot(vehicleid, item_id);

		new query[100],
			index,
			oc_id;

		index = GetVehicleData(vehicleid, V_ACTION_ID);
		oc_id = GetOwnableCarData(index, OC_SQL_ID);

		if(!IsTrunkFreeSlot(vehicleid, busy_slot))
		{
			AddTrunkData(vehicleid, busy_slot, VT_ITEM_AMOUNT, -, amount);

			if(GetTrunkData(vehicleid, busy_slot, VT_ITEM_AMOUNT) >= 0)
			{
				if(!GetTrunkData(vehicleid, busy_slot, VT_ITEM_AMOUNT))
				{
					mysql_format(mysql, query, sizeof query, "DELETE FROM trunks WHERE item_id='%d' AND oc_id='%d'", item_id, oc_id);
					mysql_query(mysql, query, false);

					RemoveTrunkItem(vehicleid, busy_slot);
				}
				else
				{
					mysql_format(mysql, query, sizeof query, "UPDATE trunks SET amount='%d' WHERE item_id='%d' AND oc_id='%d' LIMIT 1", GetTrunkData(vehicleid, busy_slot, VT_ITEM_AMOUNT), item_id, oc_id);
					mysql_query(mysql, query, false);
				}
				return 1;
			}
			else
			{
				AddTrunkData(vehicleid, busy_slot, VT_ITEM_AMOUNT, +, amount);
				return -1;
			}
		}
		return -1;
	}
	return 0;
}

stock RemoveTrunkItem(vehicleid, item_slot)
{
	if(!IsTrunkFreeSlot(vehicleid, item_slot))
	{
		SetTrunkData(vehicleid, item_slot, VT_SQL_ID,	0);

		SetTrunkData(vehicleid, item_slot, VT_ITEM_TYPE, 	0);
		SetTrunkData(vehicleid, item_slot, VT_ITEM_AMOUNT, 	0);
		SetTrunkData(vehicleid, item_slot, VT_ITEM_VALUE, 	0);

		return 1;
	}
	return 0;
}

stock GetCoordVehicle(vehicleid, type, &Float:x, &Float:y, &Float:z, &Float:angle, &Float:distance) // by Essle (багажник / капот)
{
    GetVehicleModelInfo(GetVehicleData(vehicleid, V_MODELID), 1, x, distance, z); // узнаем длину машины
    distance = distance / 2 + 0.1; // полученную длину делим на два

    GetVehiclePos(vehicleid, x, y, z); // узнаем координаты авто
    GetVehicleZAngle(vehicleid, angle); // узнаем угол поворота авто

	switch(type)
	{
		case VEHICLE_COORD_TYPE_BOOT: // багажник
		{
			x += (distance * floatsin(-angle+180, degrees)); // вычитаем координату x бaгажника
			y += (distance * floatcos(-angle+180, degrees)); // вычитаем координату y бaгажника
		}
		case VEHICLE_COORD_TYPE_BONNET: // капот
		{
			x -= (distance * floatsin(-angle+180, degrees)); // вычитаем координату x капота
			y -= (distance * floatcos(-angle+180, degrees)); // вычитаем координату y капота
		}
		default:
		{
			return 0;
		}
	}
	return 1;
}

stock GetVehicleTurnSignalPos(vehicleid, type, &Float:x, &Float:y)
{
	/*

		Типы:
		1 - левый передний
		2 - левый задний
		3 - правый передний
		4 - правый задний

	*/

	new Float: size_x,
		Float: size_y,
		Float: size_z;

	GetVehicleModelInfo(GetVehicleData(vehicleid, V_MODELID), 1, size_x, size_y, size_z);

	switch(type)
	{
		case 1:
		{
			x = -(size_x / 2) + 0.3;
			y = size_y / 2 - 0.5;
		}
		case 2:
		{
			x = -(size_x / 2) + 0.3;
			y = -(size_y / 2) + 0.4;
		}
		case 3:
		{
			x = size_x / 2 - 0.3;
			y = size_y / 2 - 0.5;
		}
		case 4:
		{
			x = size_x / 2 - 0.3;
			y = -(size_y / 2) + 0.4;
		}
	}

	return 1;
}

stock SetVehicleToHotelRespawn(hotelid, vehicleid)
{
	if(IsValidVehicle(vehicleid))
	{
		new free_slot = GetHotelFreePark(hotelid);
		if(free_slot != -1)
		{
			g_hotel_car_park_pos[hotelid][free_slot][HC_VEHICLE_ID] = vehicleid;

			SetVehiclePos(vehicleid, g_hotel_car_park_pos[hotelid][free_slot][HC_POS_X], g_hotel_car_park_pos[hotelid][free_slot][HC_POS_Y], g_hotel_car_park_pos[hotelid][free_slot][HC_POS_Z]);
			SetVehicleZAngle(vehicleid, g_hotel_car_park_pos[hotelid][free_slot][HC_ANGLE]);

			return 1;
		}
	}
	return 0;
}

stock GetHotelFreePark(hotelid)
{
	new vehicleid, slot = -1;

	for(new idx; idx < sizeof(g_hotel_car_park_pos[]); idx ++)
	{
		vehicleid = g_hotel_car_park_pos[hotelid][idx][HC_VEHICLE_ID];
		if(GetVehicleDistanceFromPoint(vehicleid, g_hotel_car_park_pos[hotelid][idx][HC_POS_X], g_hotel_car_park_pos[hotelid][idx][HC_POS_Y], g_hotel_car_park_pos[hotelid][idx][HC_POS_Z]) >= 8.0) continue;

		slot = idx;
		break;
	}
	return slot;
}

stock ShowOwnableCarPass(playerid, vehicleid)
{
	new model_id = GetVehicleData(vehicleid, V_MODELID);

	if(model_id && IsAOwnableCar(vehicleid))
	{
		new fmt_str[300];
		new Float: health;
		new index = GetVehicleData(vehicleid, V_ACTION_ID);

		new description[32];

		format(description, sizeof description, "{0099FF}Документы на ТС №%d", GetOwnableCarData(index, OC_SQL_ID));

		GetVehicleHealth(vehicleid, health);

		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Название:\t\t{3399FF}%s\n\n"\
			"{FFFFFF}Модель:\t\t{3399FF}%d\n"\
			"{FFFFFF}Состояние:\t\t{3399FF}%d\n"\
			"{FFFFFF}Пробег:\t\t{3399FF}%07i\n"\
			"{FFFFFF}Цвет:\t\t\t{3399FF}ID %d, %d\n"\
			"{FFFFFF}Гос. стоимость:\t{3399FF}%d руб\n"\
			"{FFFFFF}Номерные знаки:\t{3399FF}%s",
			GetVehicleInfo(model_id-400, VI_NAME),
			model_id,
			floatround(health),
			floatround(GetVehicleData(vehicleid, V_MILEAGE), floatround_ceil),
			GetOwnableCarData(index, OC_COLOR_1),
			GetOwnableCarData(index, OC_COLOR_2),
			GetVehicleInfo(model_id-400, VI_PRICE),
			GetOwnableCarData(index, OC_NUMBER)
		);
		Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, description, fmt_str, "Закрыть", "");

		return 1;
	}
	return 0;
}

stock ShowOwnableCarLoadDialog(playerid, id, bool: show_menu = false)
{
	SetPVarInt(playerid, "ownablecar_id", id);

	if(show_menu)
		SetPVarInt(playerid, "show_menu", 1);

	Dialog
	(
		playerid, DIALOG_OWNABLE_CAR_LOAD, DIALOG_STYLE_LIST,
		"{FFCD00}Система управления транспортом",
		"1. Отметить транспорт на GPS {FF6600}(300 руб)\n"\
		"{888888}2. Загрузить транспорт",
		"Выбрать", "Закрыть"
	);
}

/*stock SpeedometrKeyStatusInit(playerid, vehicleid)
{
	if(IsAOwnableCar(vehicleid))
	{
		new index = GetVehicleData(vehicleid, V_ACTION_ID);
		if(GetOwnableCarData(index, OC_KEY_IN))
		{
			PlayerTextDrawSetString(playerid, speedometr_PTD[playerid][5], "~y~.");
		}
		else PlayerTextDrawSetString(playerid, speedometr_PTD[playerid][5], ".");
	}
	else PlayerTextDrawSetString(playerid, speedometr_PTD[playerid][5], "~y~.");
}
*/
stock IsAOwnableCar(vehicleid)
{
	if(IsValidVehicleID(vehicleid))
	{
		if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_OWNABLE_CAR)
		{
			return 1;
		}
	}
	return 0;
}

stock IsVehicleSeatOccupied(vehicleid, seatid)
{
	foreach(new i : Player)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(!IsPlayerInVehicle(i, vehicleid)) continue;
		else if(GetPlayerVehicleSeat(i) != seatid) continue;

		return 1;
	}

	return 0;
}

stock IsVehicleOccupied(vehicleid)
{
	foreach(new i : Player)
	{
		if(!IsPlayerInAnyVehicle(i)) continue;

		if(GetPlayerVehicleID(i) == vehicleid)
			return 1;
	}

	return 0;
}

stock IsTrailerAttachedToAnyVehicle(trailerid)
{
	for(new i = 1; i < MAX_VEHICLES; i ++)
	{
		if(!IsValidVehicle(i)) continue;

		if(GetVehicleTrailer(i) == trailerid)
			return 1;
	}

	return 0;
}

stock ShowPlayerHotelRoomPayForRent(playerid)
{
	new hotel_id = GetPlayerInHotelID(playerid);
	new room_id = GetPlayerData(playerid, P_HOUSE_ROOM);

	if(GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) == hotel_id)
	{
		new rent_days = GetElapsedTime(GetHotelData(hotel_id, room_id, H_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS);
		if(rent_days < 0)
		{
			rent_days = 0;
		}

		new fmt_str[128];
		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Оплаченных дней:\t\t%d из 30\n"\
			"Ежедневная плата:\t\t1000 руб\n\n"\
			"На сколько дней Вы хотите оплатить номер?",
			rent_days
		);
		Dialog(playerid, DIALOG_HOTEL_PAY_FOR_ROOM, DIALOG_STYLE_INPUT, "{66CC99}Оплата проживания в отеле", fmt_str, "Оплатить", "Назад");
	}
}

stock ShowPlayerHotelClientMenu(playerid, hotel_id)
{
	if(GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) == hotel_id)
	{
		Dialog
		(
			playerid, DIALOG_HOTEL_CLIENT_MENU, DIALOG_STYLE_LIST,
			"{66CC99}Меню клиента",
			"1. Оплатить проживание\n"\
			"2. Информация о транспорте\n"\
			"3. Отметить транспорт на GPS\n"\
			"4. Подогнать транспорт к отелю (1000 руб)\n"\
			"5. Продать транспорт\n"\
			"6. Выселиться из отеля",
			"Выбрать", "Назад"
		);
	}
	else
	{
		SendClientMessage(playerid, 0xCECECEFF, "Вы не проживаете в этой гостинице");
		ShowPlayerHotelDialog(playerid);
	}
}

stock GetHotelFreeRoom(hotelid)
{
	new free_room = -1;
	if(0 <= hotelid <= MAX_HOTELS-1)
	{
		new max_rooms = g_hotel_rooms_loaded[hotelid] / 12;

		for(new idx; idx < max_rooms; idx ++)
		{
			if(IsHotelRoomOwned(hotelid, idx)) continue;

			free_room = idx;
			break;
		}
	}
	return free_room;
}

stock ExitPlayerFromHotelRoom(playerid)
{
	new room_id = GetPlayerData(playerid, P_IN_HOTEL_ROOM);
	if(room_id != -1)
	{
		new hotel_id = GetPlayerInHotelID(playerid);
		if(hotel_id != -1)
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 490.0204, -992.8733, 1002.9255))
			{
				new floor = (room_id / 12) + 1;
				new index = (room_id % 12) / 5;

				SetPlayerPosEx
				(
					playerid,
					g_hotel_room_exit_pos[index][0],
					g_hotel_room_exit_pos[index][1],
					g_hotel_room_exit_pos[index][2],
					180.0,
					floor,
					((hotel_id + 1) * 200) + (floor + 1000)
				);
				SetPlayerData(playerid, P_IN_HOTEL_ROOM, -1);
			}
		}
	}
}

stock EnterPlayerToHotelRoom(playerid, hotel_id, room_id)
{
	if(GetPlayerData(playerid, P_IN_HOTEL_ROOM) == -1)
	{
		if(!GetHotelData(hotel_id, room_id, H_STATUS) || GetPlayerAccountID(playerid) == GetHotelData(hotel_id, room_id, H_OWNER_ID))
		{
			SetPlayerPosEx(playerid, 491.5204, -992.8733, 1002.9255, 0.0, 6, ((hotel_id + 1) * 400) + (room_id + 2000));
			SetPlayerData(playerid, P_IN_HOTEL_ROOM, room_id);

			SetPlayerData(playerid, P_IN_HOTEL_FLOOR, (room_id / 12) + 1);
		}
		else GameTextForPlayer(playerid, "~r~Closed", 2500, 1);
	}
	return 1;
}

stock ShowPlayerHotelFloorsInfo(playerid, hotel_id)
{
	new fmt_str[8 + 1];
	new string[(sizeof fmt_str - 1) * MAX_HOTEL_FLOORS];

	new max_floors = g_hotel_rooms_loaded[hotel_id] / 12;
	for(new idx; idx < max_floors; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "%d этаж\n", idx + 1);
		strcat(string, fmt_str);
	}
	Dialog(playerid, DIALOG_HOTEL_FLOOR_SELECT, DIALOG_STYLE_LIST, "{FFCD00}Выберите этаж", string, "Выбрать", "Отмена");
}

stock ShowPlayerHotelFloorsLift(playerid, hotel_id, floor_id)
{
	new fmt_str[8 + 1];
	new string[(sizeof fmt_str - 1) * MAX_HOTEL_FLOORS];

	new max_floors = g_hotel_rooms_loaded[hotel_id] / 12;
	for(new idx, count; idx <= max_floors; idx ++)
	{
		if(idx == floor_id) continue;
		if(idx)
		{
			format(fmt_str, sizeof fmt_str, "%d этаж\n", idx);
			strcat(string, fmt_str);
		}
		else strcat(string, "Выход\n");

		SetPlayerListitemValue(playerid, count ++, idx);
	}
	Dialog(playerid, DIALOG_HOTEL_FLOOR_LIFT, DIALOG_STYLE_LIST, "{FFCD00}Выберите этаж", string, "Выбрать", "Отмена");
}

stock ShowPlayerHotelFloorInfo(playerid, hotel_id, floor_id)
{
	if(0 <= hotel_id <= MAX_HOTELS-1)
	{
		if(0 <= floor_id <= MAX_HOTEL_FLOORS-1)
		{
			new string[512];
			new fmt_str[45 + 1];

			new rent_time;
			new time = gettime();

			new s_idx = floor_id * 12;
			new e_idx = s_idx + 12;

			string = "Номер\t\tСтатус\t\tОплаченные дни\tПостоялец\n\n{FFFFFF}";
			while(s_idx < e_idx)
			{
				if(IsHotelRoomOwned(hotel_id, s_idx))
				{
					rent_time = GetElapsedTime(GetHotelData(hotel_id, s_idx, H_RENT_DATE), time, CONVERT_TIME_TO_DAYS);
					if(rent_time < 0)
						rent_time = 0;

					format(fmt_str, sizeof fmt_str, "%d\t\t%s\t\t%d\t\t%s\n", (s_idx % 12) + 1, rent_time > 0 ? ("Занят\t") : ("Выселение"), rent_time, GetHotelData(hotel_id, s_idx, H_OWNER_NAME));
				}
				else format(fmt_str, sizeof fmt_str, "%d\t\tСвободен\n", (s_idx % 12) + 1);
				strcat(string, fmt_str);

				s_idx ++;
			}

			format(fmt_str, sizeof fmt_str, "{66CC99}Список номеров на %d этаже", floor_id + 1);
			Dialog(playerid, DIALOG_HOTEL_FLOOR_INFO, DIALOG_STYLE_MSGBOX, fmt_str, string, "Назад", "Закрыть");
		}
	}
}

stock ShowPlayerHotelDialog(playerid)
{
	if(GetPlayerInHotelID(playerid) != -1)
	{
		new businessid = GetPlayerInBiz(playerid);

		Dialog
		(
			playerid, DIALOG_HOTEL, DIALOG_STYLE_LIST,
			GetBusinessData(businessid, B_NAME),
			"1. Список номеров\n"\
			"2. Регистрация\n"\
			"3. Меню клиента",
			"Выбрать", "Закрыть"
		);
	}
}

stock GetPlayerInHotelID(playerid)
{
	new hotel_id = -1;
	new businessid = GetPlayerInBiz(playerid);

	if(businessid != -1)
	{
		if(GetBusinessData(businessid, B_TYPE) == BUSINESS_TYPE_HOTEL)
		{
			switch(businessid)
			{
				case 30:
					hotel_id = 0;

				case 31:
					hotel_id = 1;

				case 32:
					hotel_id = 2;

				default:
					hotel_id = -1;
			}
		}
	}
	return hotel_id;
}

stock EntranceStatusInitAll()
{
	for(new idx; idx < g_entrance_loaded; idx ++)
	{
		CallLocalFunction("EntranceStatusInit", "i", idx);
	}
}

stock UpdateEntrance(entranceid, houses)
{
	new status = (houses >= GetEntranceData(entranceid, E_FLOORS) * 4);

	if(GetEntranceData(entranceid, E_STATUS) != status)
	{
		if(GetEntranceData(entranceid, E_PICKUP_ID))
			DestroyPickup(GetEntranceData(entranceid, E_PICKUP_ID));

		if(IsValidDynamicMapIcon(GetEntranceData(entranceid, E_MAP_ICON)))
			DestroyDynamicMapIcon(GetEntranceData(entranceid, E_MAP_ICON));

		SetEntranceData(entranceid, E_PICKUP_ID, CreatePickup((status ? 1272 : 1273), 23, GetEntranceData(entranceid, E_POS_X), GetEntranceData(entranceid, E_POS_Y), GetEntranceData(entranceid, E_POS_Z), 0, PICKUP_ACTION_TYPE_ENTRANCE_ENT, entranceid));
		SetEntranceData(entranceid, E_MAP_ICON, CreateDynamicMapIcon(GetEntranceData(entranceid, E_POS_X), GetEntranceData(entranceid, E_POS_Y), GetEntranceData(entranceid, E_POS_Z), (status ? 40 : 40), 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL));

		SetEntranceData(entranceid, E_STATUS, status);
	}
}

stock ShowPlayerEntranceFloorsLift(playerid, entranceid, floor)
{
	new fmt_str[10];
	new string[(sizeof fmt_str) * MAX_ENTRANCE_FLOORS];

	new max_floors = GetEntranceData(entranceid, E_FLOORS) + 1;

	for(new idx, count; idx < max_floors; idx ++)
	{
		if(idx == floor) continue;
		if(idx)
		{
			format(fmt_str, sizeof fmt_str, "%d этаж\n", idx);
			strcat(string, fmt_str);
		}
		else strcat(string, "Подъезд\n");

		SetPlayerListitemValue(playerid, count ++, idx);
	}
	Dialog(playerid, DIALOG_ENTRANCE_LIFT, DIALOG_STYLE_LIST, "{FFCD00}Выберите этаж", string, "Выбрать", "Отмена");
}

stock EnterPlayerToEntrance(playerid, entranceid)
{
	if(GetPlayerInEntrance(playerid) == -1)
	{
		SetPlayerPosEx(playerid, 558.4705, 24.8017, 1049.2731, 357.8067, 1, entranceid + 2500);

		SendClientMessage(playerid, -1, "ЧТО БЫ КУПИТЬ КВАРТИРУ, СНАЧАЛО ИСПОЛЬЗУЙТЕ ЛИФТ, И ВЫБЕРИТЕ ЭТАЖ!");

		SetPlayerInEntranceFloor(playerid, 0);
		SetPlayerInEntrance(playerid, entranceid);
	}
}

stock SetPlayerFactoryDeskUse(playerid, deskid, bool: status)
{
	if(!(0 <= deskid <= sizeof factory_desk-1)) return ;

	if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY)
	{
		if(status)
		{
			if(!factory_desk[deskid][FD_USED] && GetPlayerData(playerid, P_FACTORY_USE_DESK) == -1)
			{
				if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_FACTORY_CREATE_P)
				{
					factory_desk[deskid][FD_USED] = true;

					// static const
					//	p_object_id[3] = {1954, 2926, 1718};

					// static const
					//	Float: p_object_z[3] = {0.09, 0.0, 0.06};

					// new rand = random(sizeof(p_object_id));
					// new Float: x, Float: y, Float: z;
					// GetPlayerPos(playerid, x, y, z);

					new Float: angle;

					new take_metall = GetPVarInt(playerid, "factory_take_metall");
					new factory_fuel = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT);

					SetPlayerData(playerid, P_FACTORY_USE_DESK, deskid);
					TogglePlayerFactoryCP(playerid, false);

					if(!((deskid / 4) % 2))
					{
						angle = 180.0;
					}
					else angle = 0.0;
					SetPlayerFacingAngle(playerid, angle);

					//factory_object[playerid] = CreateDynamicObject(p_object_id[rand], x, y, 1044.08 + p_object_z[rand], 0.0, 0.0, angle + 180.0);
					ApplyAnimationEx(playerid, "OTB", "betslp_loop", 4.1, 1, 0, 0, 1, 20_000, 0, USE_ANIM_TYPE_NONE - 1);

				//	SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 18644, A_OBJECT_BONE_RIGHT_HAND, 0.06, 0.02, 0.0, 30.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0);
				//	SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND + 1, 18635, A_OBJECT_BONE_LEFT_HAND, 0.1, 0.06, -0.1, 180.0, 80.0, 0.0, 1.0, 1.0, 1.0, 0);

					SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_CREATED);
					SetTimerEx("CreateFactoryProd", 18_000, false, "i", playerid);

					SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT, factory_fuel - (take_metall * 6));
					UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL);
				}
				else
				{
					if(GetPlayerTempJobState(playerid) != TEMP_JOB_STATE_FACTORY_PUT_PROD)
						SendClientMessage(playerid, 0x999999FF, "Возьмите металл у раздаточного стола");
				}
			}
		}
		else
		{
			if(factory_desk[deskid][FD_USED])
			{
				if(GetPlayerData(playerid, P_FACTORY_USE_DESK) == deskid)
				{
					TogglePlayerFactoryCP(playerid, true);
					SetPlayerData(playerid, P_FACTORY_USE_DESK, -1);

					/*
					if(IsValidDynamicObject(factory_object[playerid]))
					{
						DestroyDynamicObject(factory_object[playerid]);
						factory_object[playerid] = -1;
					}
					*/
					factory_desk[deskid][FD_USED] = false;
				}
			}
		}
		UpdateFactoryDesk(deskid);
	}
}

stock AddBan(user_id, time, days, ip[], description[], admin_name[])
{
	new query[200];
	new c_time = time-(time % 86400);

	mysql_format(mysql, query, sizeof query, "INSERT INTO ban_list (user_id,time,ban_time,ip,description,admin) VALUES (%d,%d,%d,'%e','%e','%e')", user_id, c_time, c_time + (days * 86400), ip, description, admin_name);
	mysql_query(mysql, query, false);

	return !mysql_errno();
}

stock GivePlayerDrinkItem(playerid, itemid)
{
	new action_id = -1;
	switch(itemid+1)
	{
		case 1: // Лимонад
		{
			action_id = 23;
		}
		case 2, 6..7: // Пиво, Коньяк, Виски
		{
			action_id = 20;
		}
		case 3..5, 8: // Вино, Шампанское, Водка, Абсент
		{
			action_id = 22;
		}
		case 9: // Закуска
		{
			if(GetPlayerData(playerid, P_DRINK_STEP))
			{
				SetPlayerData(playerid, P_DRINK_STEP, 0);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			}

		//	SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 10213, A_OBJECT_BONE_RIGHT_HAND, 0.08, 0.05, 0.06, 180.0, 270.0, -30.0, 1.0, 1.0, 1.0, 0, 0);
			SetPlayerData(playerid, P_SNACK, true);
		}
		case 10: // Сигара
		{
			action_id = 21;
		}
	}
	if(action_id != -1)
	{
		if(GetPlayerData(playerid, P_SNACK))
		{
			SetPlayerData(playerid, P_SNACK, false);
		//	T_RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
		}

		SetPlayerData(playerid, P_DRINK_STEP, 7);
		SetPlayerSpecialAction(playerid, action_id);
	}
	return 1;
}

stock FactoryPlayerDrop(playerid, bool: reject = true)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY)
	{
		if(reject)
		{
			if(GetPlayerTempJobState(playerid) != TEMP_JOB_STATE_FACTORY_CREATED) return ;

			SetPlayerChatBubble(playerid, "Брак", 0xFF0000FF, 10.0, 1500);
			ApplyAnimationEx(playerid, "OTB", "WTCHRACE_LOSE", 4.1, 0, 0, 0, 0, 0, 0, USE_ANIM_TYPE_NONE);
		}
		else
		{
			if(GetPlayerTempJobState(playerid) != TEMP_JOB_STATE_FACTORY_DROP_P) return ;
			SetPlayerTempJobCheckAnim(playerid, false);

			//RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_FOREARM);
			SetPlayerFactoryDeskUse(playerid, GetPlayerData(playerid, P_FACTORY_USE_DESK), false);

			ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 0, USE_ANIM_TYPE_NONE);
			SendClientMessage(playerid, 0xFF6600FF, "Вы уронили продукт");
		}

		new bad_prods = GetPVarInt(playerid, "factory_bad_prods") + 1;
		SetPVarInt(playerid, "factory_bad_prods", bad_prods);

		GameTextForPlayer(playerid, "~r~~h~fail", 4000, 1);
		SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_TAKE_MET);
	}
}

stock ShowPlayerClothingShopPanel(playerid)
{
	new businessid = GetPlayerInBiz(playerid);
	
/*	if(businessid == -1)
	{*/
	    //new fmt_str[50];
	    //new price = g_business_clothing_skins[GetPlayerSex(playerid)][select_skin][1];
	    
	if(GetPlayerTeamEx(playerid) <= 0)
	{
	    
		new select_skin = GetPlayerSelectSkin(playerid);
		
		if(select_skin == -1)
		{
			new type = GetBusinessData(businessid, B_INTERIOR);
			new interior = GetBusinessInteriorInfo(type, BT_ENTER_INTERIOR);
			new
				Float: cam_x, Float: cam_y, Float: cam_z,
				Float: v_cam_x, Float: v_cam_y, Float: v_cam_z;

			GetPlayerCameraPos(playerid, cam_x, cam_y, cam_z);
			GetPlayerCameraFrontVector(playerid, v_cam_x, v_cam_y, v_cam_z);

			SetPlayerPosEx(playerid,498.6025, 23.4823, 1370.5823, 359.3968, interior, playerid + 32, false);

			SetPlayerCameraPos(playerid, 498.124511,27.611799,1371.237548);
			SetPlayerCameraLookAt(playerid, 498.699462,22.645408,1371.171142);
			
			CreateClothesShopTextDraws(playerid);
			
			SetPlayerSelectClothingSkin(playerid, 0);
			
			CallLocalFunction("BuySkinPTDUpdate", "i", playerid);
			
			CreateClothesShopTextDraws(playerid);
			
			TogglePlayerControllable(playerid, false);

		}
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Вы состоите в организации, купить новую внешность нельзя");
//	}
}

stock ExitPlayerClothingShopPanel(playerid)
{
	new in_biz = GetPlayerInBiz(playerid);
	if(in_biz != -1)
	{
		HidePlayerSelectPanel(playerid);

		SetPlayerSkinInit(playerid);
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, true);

		//SetPlayerData(playerid, P_USE_SELECT_PANEL, SELECT_PANEL_TYPE_NONE);

		PlayerTextDrawSetString(playerid, price_select_TD[playerid][0], "exit...");
		SetTimerEx("HidePlayerSelectPanelPriceTimer", 1000, false, "i", playerid);

		SetPlayerData(playerid, P_SELECT_SKIN, -1);
		
		HideClothesShopTextDraws(playerid);

		SetPlayerPosEx
		(
			playerid,
			GetBusinessData(in_biz, B_EXIT_POS_X),
			GetBusinessData(in_biz, B_EXIT_POS_Y),
			GetBusinessData(in_biz, B_EXIT_POS_Z),
			GetBusinessData(in_biz, B_EXIT_ANGLE),
			0,
			0
		);
		SetPlayerInBiz(playerid, -1);

	}
}

/*stock ShowPlayerSelectPanelPrice(playerid, price = 0)
{
	new fmt_str[50];
	
	PlayerTextDrawShow(playerid, shop_clothes_PTD[playerid][1]);
	
    format(fmt_str, sizeof fmt_str, "%dP", price);
	PlayerTextDrawSetString(playerid, shop_clothes_PTD[playerid][1], fmt_str);
}*/

public: BuySkinPTDUpdate(playerid)
{
    new select_skin = GetPlayerSelectSkin(playerid);
    
	new price = g_business_clothing_skins[GetPlayerSex(playerid)][select_skin][1];

	new fmt_str[50];
	
	PlayerTextDrawHide(playerid, shop_clothes_PTD[playerid][0]);
	
	PlayerTextDrawShow(playerid, shop_clothes_PTD[playerid][0]);

    format(fmt_str, sizeof fmt_str, "%d", price);
	PlayerTextDrawSetString(playerid, shop_clothes_PTD[playerid][0], fmt_str);
	
	return 1;
}

stock HidePlayerSelectPanelPrice(playerid)
{
	for(new idx; idx < sizeof price_select_TD[]; idx ++)
	{
		if(price_select_TD[playerid][idx] != PlayerText: -1)
		{
			PlayerTextDrawHide(playerid, price_select_TD[playerid][idx]);
			PlayerTextDrawDestroy(playerid, price_select_TD[playerid][idx]);

			price_select_TD[playerid][idx] = PlayerText: -1;
		}
	}
}

stock SetPlayerSelectClothingSkin(playerid, index = 0)
{
	new sex = GetPlayerSex(playerid);

	SetPlayerSelectSkin(playerid, index, g_business_clothing_skins[sex][index][0]);
}

/*stock CreateTeleportObjects(playerid)
{
	for(new idx; idx < 2; idx ++)
	{
		if(g_teleport_object[playerid][idx] == -1)
		{
			g_teleport_object[playerid][idx] = CreatePlayerObject(playerid, 3034, 0.0, 0.0, -2000.0, 0.0, 0.0, 0.0);
		}
	}
}

stock DestroyTeleportObjects(playerid)
{
	for(new idx; idx < 2; idx ++)
	{
		if(g_teleport_object[playerid][idx] != -1)
		{
			DestroyPlayerObject(playerid, g_teleport_object[playerid][idx]);
			g_teleport_object[playerid][idx] = -1;
		}
	}
}

stock PlayerTeleportInit(playerid, Float: x, Float: y, Float: z, Float: angle)
{
	new Float: dist = -0.862;
	angle += 90.0; //прибавление угла; можно и отнимать

	for(new idx = 2; idx --; )
	{
		SetPlayerObjectPos(playerid, g_teleport_object[playerid][idx], x + dist * -floatsin(angle, degrees), y + dist * floatcos(angle, degrees), z - 1.02);
		SetPlayerObjectRot(playerid, g_teleport_object[playerid][idx], 90.0, 90.0, angle - 90.0);

		dist = floatabs(dist);
	}
}*/

stock GetOwnableCarBySqlID(sql_id, buffer[] = {0, 0, 0})
{
	buffer[2] = INVALID_VEHICLE_ID;
	for(buffer[0] = 1; buffer[0] < MAX_VEHICLES; buffer[0] ++)
	{
		if(!IsAOwnableCar(buffer[0])) continue;
		buffer[1] = GetVehicleData(buffer[0], V_ACTION_ID);

		if(GetOwnableCarData(buffer[1], OC_SQL_ID) != sql_id) continue;

		buffer[2] = buffer[0];
		break;
	}
	return buffer[2];
}

stock GetPlayerIDBySqlID(sql_id)
{
	new playerid = INVALID_PLAYER_ID;

	foreach(new idx : Player)
	{
		if(!IsPlayerLogged(idx)) continue;
		if(GetPlayerAccountID(idx) != sql_id) continue;

		playerid = idx;
		break;
	}
	return playerid;
}

stock GetPlayerID(name[], playerid=INVALID_PLAYER_ID)
{
	sscanf(name, "u", playerid);

	return playerid;
}

stock GetPlayerSqlIDByName(name[])
{
	new sql_id,
		query[80],
		Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT id FROM `accounts` WHERE name = '%s' LIMIT 1", name);
	result = mysql_query(mysql, query, true);

	sql_id = cache_num_rows() ? cache_get_row_int(0, 0) : -1;

	cache_delete(result);

	return sql_id;
}

stock GetPlayerNameBySqlID(sql_id)
{
	new name[21] = "none",
		query[80],
		Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT name FROM `accounts` WHERE id = '%e' LIMIT 1", sql_id);
	result = mysql_query(mysql, query, true);

	if(cache_num_rows())
		cache_get_row(0, 0, name);

	cache_delete(result);

	return name;
}

stock UpdateHouse(houseid)
{
	if(GetHouseData(houseid, H_ENTRACE) == -1)
	{
		if(GetHouseData(houseid, H_ENTER_PICKUP))
			DestroyPickup(GetHouseData(houseid, H_ENTER_PICKUP));

		if(IsValidDynamicMapIcon(GetHouseData(houseid, H_MAP_ICON)))
			DestroyDynamicMapIcon(GetHouseData(houseid, H_MAP_ICON));

		SetHouseData(houseid, H_ENTER_PICKUP, CreatePickup((IsHouseOwned(houseid) ? 1272 : 1273), 23, GetHouseData(houseid, H_POS_X), GetHouseData(houseid, H_POS_Y), GetHouseData(houseid, H_POS_Z), 0, PICKUP_ACTION_TYPE_HOUSE, houseid));
		SetHouseData(houseid, H_MAP_ICON, CreateDynamicMapIcon(GetHouseData(houseid, H_POS_X), GetHouseData(houseid, H_POS_Y), GetHouseData(houseid, H_POS_Z), (IsHouseOwned(houseid) ? 32 : 31), 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL));
	}
}

stock HouseHealthInit(houseid, type = -1)
{
	if(GetHouseData(houseid, H_IMPROVEMENTS) >= 2)
	{
		if(!GetHouseData(houseid, H_HEALTH_PICKUP))
		{
			type = GetHouseData(houseid, H_TYPE);
			SetHouseData(houseid, H_HEALTH_PICKUP, CreatePickup(1240, 23, GetHouseTypeInfo(type, HT_HEALTH_POS_X), GetHouseTypeInfo(type, HT_HEALTH_POS_Y), GetHouseTypeInfo(type, HT_HEALTH_POS_Z), houseid + 2000, PICKUP_ACTION_TYPE_HOUSE_HEALTH, houseid));
		}
	}
	else
	{
		if(GetHouseData(houseid, H_HEALTH_PICKUP))
		{
			DestroyPickup(GetHouseData(houseid, H_HEALTH_PICKUP));
			SetHouseData(houseid, H_HEALTH_PICKUP, 0);
		}
	}
}

stock HouseStoreInit(houseid, type = -1)
{
	if(GetHouseData(houseid, H_IMPROVEMENTS) >= 5)
	{
		if(GetHouseData(houseid, H_STORE_LABEL) == Text3D:-1)
		{
			if(GetHouseData(houseid, H_STORE_X) == 0.0 && GetHouseData(houseid, H_STORE_Y) == 0.0 && GetHouseData(houseid, H_STORE_Z) == 0.0)
			{
				type = GetHouseData(houseid, H_TYPE);

				SetHouseData(houseid, H_STORE_X, GetHouseTypeInfo(type, HT_STORE_POS_X));
				SetHouseData(houseid, H_STORE_Y, GetHouseTypeInfo(type, HT_STORE_POS_Y));
				SetHouseData(houseid, H_STORE_Z, GetHouseTypeInfo(type, HT_STORE_POS_Z));
			}
			SetHouseData(houseid, H_STORE_LABEL, CreateDynamic3DTextLabel("Шкаф", 0xFFFF00FF, GetHouseData(houseid, H_STORE_X), GetHouseData(houseid, H_STORE_Y), GetHouseData(houseid, H_STORE_Z) + 0.5, 6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, houseid + 2000, -1, -1, 50.0));

			CallLocalFunction("UpdateHouseStore", "i", houseid);
		}
	}
	else
	{
		if(GetHouseData(houseid, H_STORE_LABEL) != Text3D:-1)
		{
			if(IsValidDynamic3DTextLabel(GetHouseData(houseid, H_STORE_LABEL)))
			{
				DestroyDynamic3DTextLabel(GetHouseData(houseid, H_STORE_LABEL));
				SetHouseData(houseid, H_STORE_LABEL, Text3D:-1);
			}
		}
	}
}

stock SellHouse(playerid, to_player = INVALID_PLAYER_ID, price = 0)
{
	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
	if(houseid != -1)
	{
		new house_price = GetHouseData(houseid, H_PRICE);
		new house_percent = (house_price * 30) / 100;
		new house_improvemnts_price = HouseImprovementsPrice(houseid);

		if(house_improvemnts_price)
			house_improvemnts_price = (house_improvemnts_price * 60) / 100;

		new query[200];
		new return_money = (house_price - house_percent) + house_improvemnts_price;

		CallLocalFunction("EvictHouseRentersAll", "i", houseid);

		SetPlayerData(playerid, P_HOUSE, -1);
		SetPlayerData(playerid, P_HOUSE_TYPE, HOUSE_TYPE_NONE);

		SetHouseData(houseid, H_OWNER_ID, 0);

		if(to_player == INVALID_PLAYER_ID)
		{
			AddPlayerData(playerid, P_BANK, +, return_money);

			BankLog(playerid, return_money, "Продажа дома");

			SetHouseData(houseid, H_IMPROVEMENTS,	0);

			SetHouseData(houseid, H_RENT_DATE,		0);
			SetHouseData(houseid, H_LOCK_STATUS,	false);

			format(query, sizeof query, "UPDATE accounts a,houses h SET a.bank=%d,a.house_type=-1,a.house=-1,h.owner_id=0,h.lock=0 WHERE a.id=%d AND h.id=%d", GetPlayerData(playerid, P_BANK), GetPlayerAccountID(playerid), GetHouseData(houseid, H_SQL_ID));
			mysql_query(mysql, query, false);

			UpdateHouse(houseid);

			HouseHealthInit(houseid);
			HouseStoreInit(houseid);

			GivePlayerMoneyEx(playerid, 0, "Продажа дома государству", false, false);
			SendClientMessage(playerid, 0x66CC00FF, "Вы продали свой дом!");

			format(query, sizeof query, "Налог за продажу дома составил 30 процентов от его стоимости {99CC00}(%d руб)", house_percent);
			SendClientMessage(playerid, 0xCECECEFF, query);

			format(query, sizeof query, "Вам было возвращено 60 процентов от стоимости купленных улучшений: {CCFF00}%d руб", house_improvemnts_price);
			SendClientMessage(playerid, 0xCECECEFF, query);

			format(query, sizeof query, "Итого на банковский счет перечислено: {3399FF}%d руб", return_money);
			SendClientMessage(playerid, 0xFFFFFFFF, query);

			new entranceid = GetHouseData(houseid, H_ENTRACE);
			if(entranceid != -1)
			{
				CallLocalFunction("EntranceStatusInit", "i", entranceid);
			}
		}
		else
		{
			if(BuyPlayerHouse(to_player, houseid, true, price) == 1)
			{
				new total_price = price + house_improvemnts_price;

				format(query, sizeof query, "Вам было возвращено 60 процентов от стоимости купленных улучшений: {CCFF00}%d руб", house_improvemnts_price);
				SendClientMessage(playerid, 0xCECECEFF, query);

				format(query, sizeof query, "UPDATE accounts SET money=%d,house=-1 WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)+total_price, GetPlayerAccountID(playerid));
				mysql_query(mysql, query, false);

				GivePlayerMoneyEx(playerid, total_price, "Продажа дома игроку", false, false);

				house_price = price;
				house_percent = 0;
			}
			else return ;
		}
		format(query, sizeof query, "~g~+%d rub~n~+%d rub", (house_price - house_percent), house_improvemnts_price);
		GameTextForPlayer(playerid, query, 4000, 1);
	}
}

stock BuyPlayerHouse(playerid, houseid, bool: buy_from_owner = false, price = -1)
{
	if(!IsHouseOwned(houseid) && GetPlayerHouse(playerid) == -1)
	{
		if(price <= 0)
			price = GetHouseData(houseid, H_PRICE);

		if(GetPlayerMoneyEx(playerid) >= price)
		{
			new query[256];

			format(query, sizeof query, "UPDATE accounts a, houses h SET a.money=%d,a.house_type=%d,a.house=%d,h.owner_id=%d WHERE a.id=%d AND h.id=%d", GetPlayerMoneyEx(playerid)-price, HOUSE_TYPE_HOME, houseid, GetPlayerAccountID(playerid), GetPlayerAccountID(playerid), GetHouseData(houseid, H_SQL_ID));
			mysql_query(mysql, query, false);
			printf("sql %s", query);

			if(!mysql_errno())
			{
				SetPlayerData(playerid, P_HOUSE, 		houseid);
				SetPlayerData(playerid, P_HOUSE_TYPE, 	HOUSE_TYPE_HOME);

				SetHouseData(houseid, H_OWNER_ID, GetPlayerAccountID(playerid));
				SetHouseData(houseid, H_IMPROVEMENTS, 	0);

				SetHouseData(houseid, H_STORE_X, 0.0);
				SetHouseData(houseid, H_STORE_Y, 0.0);
				SetHouseData(houseid, H_STORE_Z, 0.0);

				new time = gettime();
				new rent_time = (time - (time % 86400)) + 86400;

				if(!buy_from_owner)
				{
					SetHouseData(houseid,	H_RENT_DATE,	rent_time);
					SetHouseData(houseid,	H_LOCK_STATUS,	false);

					new entranceid = GetHouseData(houseid, H_ENTRACE);
					if(entranceid != -1)
					{
						CallLocalFunction("EntranceStatusInit", "i", entranceid);
					}
				}
				else
				{
					if(GetElapsedTime(GetHouseData(houseid, H_RENT_DATE), time, CONVERT_TIME_TO_DAYS) <= 0)
					{
						SetHouseData(houseid, H_RENT_DATE, rent_time);
					}
				}
				format(g_house[houseid][H_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);

				UpdateHouse(houseid);

				HouseHealthInit(houseid);
				HouseStoreInit(houseid);

				GivePlayerMoneyEx(playerid, -price, "Покупка дома", false, true);
				SendClientMessage(playerid, 0x66CC00FF, "Напишите {3399FF}/home {66CC00},чтобы узнать о возможностях");
				SendClientMessage(playerid, 0xFFCC00FF, "Используйте {3399FF}/exit {FFCC00}для выхода из дома");

				format(query, sizeof query, "UPDATE houses SET improvements=0,rent_time=%d,`lock`=%d,store_x=0.0,store_y=0.0,store_z=0.0 WHERE id=%d LIMIT 1", GetHouseData(houseid, H_RENT_DATE), GetHouseData(houseid, H_LOCK_STATUS), GetHouseData(houseid, H_SQL_ID));
				mysql_query(mysql, query, false);

				return 1;
			}
			else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 34)");

			return 0;
		}
		return 0;
	}
	return -1;
}

stock EnterPlayerToHouse(playerid, houseid)
{
	if(GetPlayerInHouse(playerid) == -1)
	{
		new type = GetHouseData(houseid, H_TYPE);

		SetPlayerPosEx
		(
			playerid,
			GetHouseTypeInfo(type, HT_ENTER_POS_X),
			GetHouseTypeInfo(type, HT_ENTER_POS_Y),
			GetHouseTypeInfo(type, HT_ENTER_POS_Z),
			GetHouseTypeInfo(type, HT_ENTER_POS_ANGLE),
			GetHouseTypeInfo(type, HT_INTERIOR),
			houseid + 2000
		);
		SetPlayerInHouse(playerid, houseid);
	}
}

stock ExitPlayerFromHouse(playerid, Float: radius = 3.0, pos = 0)
{
	new houseid = GetPlayerInHouse(playerid);
	if(houseid != -1)
	{
		new type = GetHouseData(houseid, H_TYPE);
		if(IsPlayerInRangeOfPoint(playerid, radius, GetHouseTypeInfo(type, HT_ENTER_POS_X), GetHouseTypeInfo(type, HT_ENTER_POS_Y), GetHouseTypeInfo(type, HT_ENTER_POS_Z)) || IsPlayerInRangeOfPoint(playerid, radius, 1.2011, 1994.7356, 1554.2031))
		{
			switch(pos)
			{
				case 0:
				{
					SetPlayerInHouse(playerid, -1);

					new entranceid = GetHouseData(houseid, H_ENTRACE);
					if(entranceid != -1)
					{
						new floor = GetHouseData(houseid, H_FLAT_ID) / 4 + 1;
						type = GetHouseData(houseid, H_FLAT_ID) % 4;

						SetPlayerInEntrance(playerid, entranceid);
						SetPlayerInEntranceFloor(playerid, floor);

						SetPlayerPosEx
						(
							playerid,
							g_entrance_flat_pos[type][3],
							g_entrance_flat_pos[type][4],
							g_entrance_flat_pos[type][2],
							g_entrance_flat_pos[type][5],
							floor + 1,
							(entranceid * 100) + floor
						);
					}
					else
					{
						SetPlayerPosEx
						(
							playerid,
							GetHouseData(houseid, H_EXIT_POS_X),
							GetHouseData(houseid, H_EXIT_POS_Y),
							GetHouseData(houseid, H_EXIT_POS_Z),
							GetHouseData(houseid, H_EXIT_ANGLE),
							0,
							0
						);
					}
				}
				case 1:
				{
					
					SetPlayerPosEx
					(
						playerid,
						1.2011,
						1994.7356,
						1554.2031,
						353.9531,
						GetHouseTypeInfo(type, HT_INTERIOR),
						houseid + 2000
					);
					
				}
			}
			
			return 1;
		}
	}
	return 0;
}

stock GetPlayerHouse(playerid, type = -1)
{
	new houseid = GetPlayerData(playerid, P_HOUSE);
	if(houseid != -1)
	{
		switch(type)
		{
			case HOUSE_TYPE_HOME:
			{
				if(GetPlayerData(playerid, P_HOUSE_TYPE) == HOUSE_TYPE_HOME)
				{
					if(GetHouseData(houseid, H_OWNER_ID) == GetPlayerAccountID(playerid))
					{
						return houseid;
					}
				}
			}
			case HOUSE_TYPE_ROOM:
			{
				if(GetPlayerData(playerid, P_HOUSE_TYPE) == HOUSE_TYPE_ROOM)
				{
					new room = GetPlayerData(playerid, P_HOUSE_ROOM);
					if(room != -1)
					{
						if(GetHouseRenterInfo(houseid, room, HR_OWNER_ID) == GetPlayerAccountID(playerid))
						{
							return houseid;
						}
					}
				}
			}
			case HOUSE_TYPE_HOTEL:
			{
				if(GetPlayerData(playerid, P_HOUSE_TYPE) == HOUSE_TYPE_HOTEL)
				{
					new room = GetPlayerData(playerid, P_HOUSE_ROOM);
					if(room != -1)
					{
						if(GetHotelData(houseid, room, H_OWNER_ID) == GetPlayerAccountID(playerid))
						{
							return houseid;
						}
					}
				}
			}
			default:
				return houseid;
		}
	}
	return -1;
}

stock HouseImprovementsPrice(houseid)
{
	new price;
	new level = GetHouseData(houseid, H_IMPROVEMENTS);

	if(1 <= level <= sizeof g_house_improvements)
	{
		for(new idx; idx < level; idx ++)
		{
			price += g_house_improvements[idx][I_PRICE];
		}
	}
	return price;
}

stock IsPlayerInRangeOfHouse(playerid, houseid, Float: radius = 10.0)
{
	new result;
	if(GetHouseData(houseid, H_ENTRACE) != -1)
	{
		new flatid = GetHouseData(houseid, H_FLAT_ID) % 4;
		result = IsPlayerInRangeOfPoint(playerid, radius, g_entrance_flat_pos[flatid][0], g_entrance_flat_pos[flatid][1], g_entrance_flat_pos[flatid][2]);
	}
	else result = IsPlayerInRangeOfPoint(playerid, radius, GetHouseData(houseid, H_POS_X), GetHouseData(houseid, H_POS_Y), GetHouseData(houseid, H_POS_Z));

	return result;
}

stock BuyOwnableCarFamily(playerid, marketid, ownablecar)
{
	new color_1 = GetPlayerData(playerid, P_AUTOSALON_COLOR);
	new color_2 = GetPlayerData(playerid, P_AUTOSALON_COLOR);
	
    HideAutosalonTextDraws(playerid);
	RemovePlayerFromVehicle(playerid);
    new modelid, query[256], time = gettime();
 	printf("player_cars: %d / player_slots: %d", GetPlayerOwnableCars(playerid), GetPlayerCarSlots(playerid));

	printf("BuyOwnableCar(%d, %d, %d, %d, %d)", playerid, marketid, ownablecar, color_1, color_2);

	if(ownablecar < 1000)
		modelid = car_market_data[marketid][ownablecar][0];
	else
		modelid = ownablecar - 1000;

/*	if(marketid != 0 && marketid != 2)
	{
		if(GetPlayerHouse(playerid, HOUSE_TYPE_HOME) == -1 &&
		GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) == -1 &&
		GetPlayerHouse(playerid, HOUSE_TYPE_ROOM) == -1)
		{
			SendClientMessage(playerid, 0xCECECEFF, "Для покупки транспорта этого класса нужно иметь недвижимость");
			return -1;
		}
	}

	if(GetPlayerOwnableCar(playerid) != INVALID_VEHICLE_ID)
	{
		SendClientMessage(playerid, 0xCECECEFF, "Для покупки транспорта нужно выгрузить уже загруженный транспорт с сервера");
		return -1;
	}
	*/
	
	new fam = GetPlayerData(playerid, P_FAMILY) + 1;
	if(!GetPlayerData(playerid, P_FAMILY)) return SendClientMessage(playerid, 0xCECECEFF, "Вы не состоите в семье");
	
	if(GetPlayerData(playerid, P_FAMILY_RANK) != 10)
			return SendClientMessage(playerid, 0x999999FF, "Вы не лидер семьи");
	
	if(GetFamilyData(fam, F_FAMILY_CARS) >= 5) return Send(playerid, -1, "В вашей семье нет слотов для транспорта");
	
	if(GetPlayerMoneyEx(playerid) < GetVehicleInfo(modelid - 400, VI_PRICE))
	{
		SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег для покупки этого транспорта");
		return -1;
	}

	GivePlayerMoneyEx(playerid, -GetVehicleInfo(modelid - 400, VI_PRICE), "Покупка ТС в автосалоне", true, true);


	new biz_id = marketid + 34,
	take_prods = random(5) + 6;

	if(GetBusinessData(biz_id, B_PRODS) >= take_prods)
	{
		AddBusinessData(biz_id, B_PRODS, -, take_prods);
		AddBusinessData(biz_id, B_BALANCE, +, (GetVehicleInfo(modelid - 400, VI_PRICE) * 20 / 100));
		//AddBusinessData(biz_id, B_BALANCE_DAY, +, (GetVehicleInfo(modelid - 400, VI_PRICE) * 20 / 100));

		format(query, sizeof query, "UPDATE business SET balance=%d WHERE id=%d LIMIT 1", GetBusinessData(biz_id, B_BALANCE), GetBusinessData(biz_id, B_SQL_ID));
		mysql_query(mysql, query, false);


		mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(biz_id, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), time, (GetVehicleInfo(modelid - 400, VI_PRICE) * 20 / 100), IsBusinessOwned(biz_id));
		mysql_query(mysql, query, false);
	}

  	//TransferCoffersMoney((GetVehicleInfo(modelid - 400, VI_PRICE)), "Покупка авто", "", false);

	new buy_cars_count = cars_after_purchase_count[marketid]++;

	new fam_id = GetPlayerData(playerid, P_FAMILY);

	new vehicleid = GetPlayerVehicleID(playerid);

	if(buy_cars_count >= 3)
		cars_after_purchase_count[marketid] = 0;

	new Float: pos_x = cars_pos_after_purchase[marketid][buy_cars_count][0];
	new Float: pos_y = cars_pos_after_purchase[marketid][buy_cars_count][1];
	new Float: pos_z = cars_pos_after_purchase[marketid][buy_cars_count][2];
	new Float: angle = cars_pos_after_purchase[marketid][buy_cars_count][3];

	new Cache: result,
		idx;

	idx = GetFreeFamilyCarID();

    SetFamilyCarData(idx, F_OWNER_ID,     GetPlayerAccountID(playerid));

    SetFamilyCarData(idx, F_MODEL_ID,     modelid);
    SetFamilyCarData(idx, F_COLOR_1,      color_1);
    SetFamilyCarData(idx, F_COLOR_2,      color_2);

    SetFamilyCarData(idx, F_POS_X,        pos_x);
    SetFamilyCarData(idx, F_POS_Y,        pos_y);
    SetFamilyCarData(idx, F_POS_Z,        pos_z);
    SetFamilyCarData(idx, F_ANGLE,        angle);

    SetOwnableCarData(idx, OC_KEY_IN,       false);

    SetOwnableCarData(idx, OC_CREATE,       gettime());

    // ----------------------------------------------------------------------------------------

    g_family_car[idx][F_CAR_ID] = CreateVehicle
    (
        GetFamilyCarData(idx, F_MODEL_ID),
        GetFamilyCarData(idx, F_POS_X),
        GetFamilyCarData(idx, F_POS_Y),
        GetFamilyCarData(idx, F_POS_Z),
        GetFamilyCarData(idx, F_ANGLE),
        GetFamilyCarData(idx, F_COLOR_1),
        GetFamilyCarData(idx, F_COLOR_2),
        -1,
        0,
        VEHICLE_ACTION_TYPE_FAMILY_CAR,
        idx
    );
    if(GetFamilyCarData(idx, F_CAR_ID) != INVALID_VEHICLE_ID)
    {
        CreateVehicleLabel(GetFamilyCarData(idx, F_CAR_ID), GetFamilyData(fam_id, F_NAME), 0x6666CCEE, 0.0, 0.0, 1.3, 20.0);
        SetVehicleParam(GetFamilyCarData(idx, F_CAR_ID), V_LOCK, false);

        SetVehicleData(GetFamilyCarData(idx, F_CAR_ID), V_MILEAGE, 0.0);
        SetVehicleData(GetFamilyCarData(idx, F_CAR_ID), V_FUEL, 50.0);
    }
    format
    (
        query, sizeof query,
        "INSERT INTO family_cars \
        (owner_id,model_id,color_1,color_2,pos_x,pos_y,pos_z,angle,create_time) \
        VALUES \
        ('%d','%d','%d','%d','%f','%f','%f','%f','%d')",
        fam_id,
        GetFamilyCarData(idx, F_MODEL_ID),
        GetFamilyCarData(idx, F_COLOR_1),
        GetFamilyCarData(idx, F_COLOR_2),
        GetFamilyCarData(idx, F_POS_X),
        GetFamilyCarData(idx, F_POS_Y),
        GetFamilyCarData(idx, F_POS_Z),
        GetFamilyCarData(idx, F_ANGLE),
        gettime()
    );

    result = mysql_query(mysql, query, true);
    printf("%s",query);

    SetFamilyCarData(idx, F_SQL_ID, cache_insert_id());
    cache_delete(result);

	SaveFamilyCar(vehicleid);
	
	fam_id = GetPlayerData(playerid, P_FAMILY) + 1;
	new fmt_text[120];
	
	AddFamilyData(fam_id,F_FAMILY_CARS,+,1);
	
	mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET family_cars='%d' WHERE id='%d' LIMIT 1", GetFamilyData(fam_id, F_FAMILY_CARS), fam_id);
 	mysql_query(mysql, fmt_text, false);

	SendClientMessage(playerid, 0x32a44bFF, "Поздравляем с покупкой нового транспорта в семью!");
    SendClientMessage(playerid, 0x1E90FFFF, "Документы на транспорт будут оформлены в течении нескольких минут");

    return 1;
}

stock BuyOwnableCar(playerid, marketid, ownablecar)
{
    new color_1 = GetPlayerData(playerid, P_AUTOSALON_COLOR);
	new color_2 = GetPlayerData(playerid, P_AUTOSALON_COLOR);
	
    HideAutosalonTextDraws(playerid);
	printf("player_cars: %d / player_slots: %d", GetPlayerOwnableCars(playerid), GetPlayerCarSlots(playerid));

	printf("BuyOwnableCar(%d, %d, %d, %d, %d)", playerid, marketid, ownablecar, color_1, color_2);

	ExitPlayerBuyCarMarket(playerid);

	if((GetPlayerOwnableCars(playerid) + 1) > GetPlayerCarSlots(playerid))
	{
		SendClientMessage(playerid, 0x3399FFFF, "Все слоты для транспорта заняты. Вы можете увеличить их: {FFFF00}/menu > Дополнительно");
		return -1;
	}
	
	if(GetPlayerOwnableCar(playerid) != INVALID_VEHICLE_ID)
	{
		SendClientMessage(playerid, 0x999999FF, "Для покупки транспорта нужно выгрузить уже загруженный транспорт с сервера");
		return -1;
	}
	
	new modelid;

	if(ownablecar < 1000)
		modelid = car_market_data[marketid][ownablecar][0];
	else
		modelid = ownablecar - 1000;

	printf("modelid = %d | ownablecar = %d", modelid, ownablecar);

/*if(marketid != 0 && marketid != 2)
	{
		if(GetPlayerHouse(playerid, HOUSE_TYPE_HOME) == -1 &&
		GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) == -1 &&
		GetPlayerHouse(playerid, HOUSE_TYPE_ROOM) == -1)
		{
			SendClientMessage(playerid, 0x999999FF, "Для покупки транспорта этого класса нужно иметь недвижимость");
			return -1;
		}
	}*/


	if(GetPlayerMoneyEx(playerid) < GetVehicleInfo(modelid - 400, VI_PRICE))
	{
		SendClientMessage(playerid, 0x999999FF, "Недостаточно денег для покупки этого транспорта");
		return -1;
	}

	GivePlayerMoneyEx(playerid, -GetVehicleInfo(modelid - 400, VI_PRICE), "Покупка ТС в автосалоне", true, true);

	new biz_id = marketid + 34,
		take_prods = random(5) + 6;

	if(GetBusinessData(biz_id, B_PRODS) >= take_prods)
	{
		AddBusinessData(biz_id, B_PRODS, -, take_prods);
		AddBusinessData(biz_id, B_BALANCE, +, (GetVehicleInfo(modelid - 400, VI_PRICE) * 20 / 100));
	}

	new buy_cars_count = cars_after_purchase_count[marketid]++;

	if(buy_cars_count >= 4)
		cars_after_purchase_count[marketid] = 0;

	new Float: pos_x = cars_pos_after_purchase[marketid][buy_cars_count][0];
	new Float: pos_y = cars_pos_after_purchase[marketid][buy_cars_count][1];
	new Float: pos_z = cars_pos_after_purchase[marketid][buy_cars_count][2];
	new Float: angle = cars_pos_after_purchase[marketid][buy_cars_count][3];

	new query[220],
		Cache: result,
		idx;

	idx = GetFreeOwnableCarID();

	SetOwnableCarData(idx, OC_OWNER_ID, 	GetPlayerAccountID(playerid));

	SetOwnableCarData(idx, OC_MODEL_ID, 	modelid);
	SetOwnableCarData(idx, OC_COLOR_1, 		color_1);
	SetOwnableCarData(idx, OC_COLOR_2, 		color_2);

	SetOwnableCarData(idx, OC_POS_X, 		pos_x);
	SetOwnableCarData(idx, OC_POS_Y, 		pos_y);
	SetOwnableCarData(idx, OC_POS_Z, 		pos_z);
	SetOwnableCarData(idx, OC_ANGLE, 		angle);

	strmid(g_ownable_car[idx][OC_NUMBER], "------", 0, 8, 8);

	SetOwnableCarData(idx, OC_ALARM, 		false);
	SetOwnableCarData(idx, OC_KEY_IN, 		false);

	SetOwnableCarData(idx, OC_CREATE, 		gettime());

	format(g_ownable_car[idx][OC_OWNER_NAME], 21, GetPlayerNameEx(playerid));
	// ----------------------------------------------------------------------------------------

	new vehicleid = CreateVehicle
	(
		GetOwnableCarData(idx, OC_MODEL_ID),
		GetOwnableCarData(idx, OC_POS_X),
		GetOwnableCarData(idx, OC_POS_Y),
		GetOwnableCarData(idx, OC_POS_Z),
		GetOwnableCarData(idx, OC_ANGLE),
		GetOwnableCarData(idx, OC_COLOR_1),
		GetOwnableCarData(idx, OC_COLOR_2),
		-1,
		0,
		VEHICLE_ACTION_TYPE_OWNABLE_CAR,
		idx
	);
	if(vehicleid != INVALID_VEHICLE_ID)
	{
		CreateVehicleLabel(vehicleid, GetOwnableCarData(idx, OC_NUMBER), 0xFFFF00EE, 0.0, 0.0, 1.3, 20.0);
		SetVehicleParam(vehicleid, V_LOCK, false);

		SetVehicleData(vehicleid, V_MILEAGE, 0.0);
	}

	SetPlayerData(playerid, P_OWNABLE_CAR, vehicleid);

	format
	(
		query, sizeof query,
		"INSERT INTO ownable_cars \
		(owner_id,model_id,color_1,color_2,pos_x,pos_y,pos_z,angle,create_time) \
		VALUES \
		('%d','%d','%d','%d','%f','%f','%f','%f','%d')",
		GetPlayerAccountID(playerid),
		modelid,
		color_1,
		color_2,
		pos_x,
		pos_y,
		pos_z,
		angle,
		gettime()
	);
	result = mysql_query(mysql, query, true);

	SetOwnableCarData(idx, OC_SQL_ID, cache_insert_id());

	cache_delete(result);

	SendClientMessage(playerid, 0x66CC00FF, "Поздравляем с покупкой нового транспорта!");
	SendClientMessage(playerid, 0x66CC00FF, "Напишите {0099FF}/car {66CC00}чтобы узнать о возможностях");
	EnablePlayerGPS(playerid, 55, pos_x, pos_y, pos_z, "Местоположение Вашего транспорта отмечено на GPS");

	AddPlayerData(playerid, P_QUEST_EXP_5, +, 1);
	UpdatePlayerDatabaseInt(playerid, "quest_exp_5", GetPlayerData(playerid, P_QUEST_EXP_5));

	if(GetPlayerData(playerid, P_QUEST_EXP_5) == 1)
	{
	    SendClientMessage(playerid, COR_SERVER, "[Квесты]: "c_b"Вы успешно выполнили квест "c_i"'Первый транспорт'. "c_b"Награда: "c_m"10000000$");
	    GivePlayerMoneyEx(playerid, 10000000, "Выполнение квеста");

	    SetPlayerData(playerid, P_QUEST_5, 1);
	    UpdatePlayerDatabaseInt(playerid, "quest_5", 1);
	    
	    AddPlayerData(playerid, P_TOP_5, +, 1);
		UpdatePlayerDatabaseInt(playerid, "TOP_Quest", GetPlayerData(playerid, P_TOP_5));
	}

	return 1;
}

stock GetFreeHousesCount()
{
	new count;
	for(new idx; idx < g_house_loaded; idx ++)
	{
		if(IsHouseOwned(idx)) continue;

		count ++;
	}
	return count;
}

stock ShowHouseRenterInfo(playerid, houseid, roomid)
{
	if(GetPlayerHouse(playerid, HOUSE_TYPE_HOME) == houseid)
	{
		if(0 <= roomid <= MAX_HOUSE_ROOMS-1)
		{
			if(IsHouseRoomOwned(houseid, roomid))
			{
				SetPlayerUseListitem(playerid, roomid);

				new string[144];
				new time = gettime();

				new s_year, s_month, s_day; // поселение
				timestamp_to_date(GetHouseRenterInfo(houseid, roomid, HR_RENT_TIME), s_year, s_month, s_day);

				//new e_year, e_month, e_day;	// выселение
				//timestamp_to_date(GetHouseRoomInfo(houseid, roomid, HR_RENT_DATE), e_year, e_month, e_day);

				format
				(
					string, sizeof string,
					"1. Арендатор\t\t\t{CCCC00}%s\n"\
					"2. Поселился\t\t\t%02d-%02d-%d\n"\
					"3. Проживает\t\t\t{66BB33}%d дней\n"\
					"{888888}4. Выселить",
					GetHouseRenterInfo(houseid, roomid, HR_OWNER_NAME),
					s_day, s_month, s_year,
					GetElapsedTime(time, GetHouseRenterInfo(houseid, roomid, HR_RENT_TIME), CONVERT_TIME_TO_DAYS)
				);
				Dialog(playerid, DIALOG_HOUSE_RENTER_INFO, DIALOG_STYLE_LIST, "{33AACC}Информация о арендаторе", string, "Действие", "Назад");
			}
			else SendClientMessage(playerid, 0x999999FF, "В этой комнате уже никто не проживает");
		}
	}
}

stock AddHouseRenter(houseid, roomid, playerid)
{
	if(!IsHouseRoomOwned(houseid, roomid))
	{
		new query[128];
		new Cache: result;

		new time = gettime();

		format(query, sizeof query, "UPDATE accounts SET house_type=%d,house_room=%d,house=%d WHERE id=%d LIMIT 1", HOUSE_TYPE_ROOM, roomid, houseid, GetPlayerAccountID(playerid));
		mysql_query(mysql, query, false);

		format(query, sizeof query, "INSERT INTO houses_renters (owner_id,house_id,room_id,rent_time,time) VALUES (%d,%d,%d,%d,%d)", GetPlayerAccountID(playerid), GetHouseData(houseid, H_SQL_ID), roomid, 0, time);
		result = mysql_query(mysql, query, true);

		SetHouseRenterInfo(houseid, roomid, HR_SQL_ID, 		cache_insert_id());
		SetHouseRenterInfo(houseid, roomid, HR_OWNER_ID,	GetPlayerAccountID(playerid));
		SetHouseRenterInfo(houseid, roomid, HR_RENT_DATE,	0);
		SetHouseRenterInfo(houseid, roomid, HR_RENT_TIME,	time);

		format(GetHouseRenterInfo(houseid, roomid, HR_OWNER_NAME), 21, GetPlayerNameEx(playerid));

		SetPlayerData(playerid, P_HOUSE, 		houseid);
		SetPlayerData(playerid, P_HOUSE_TYPE, 	HOUSE_TYPE_ROOM);
		SetPlayerData(playerid, P_HOUSE_ROOM, 	roomid);

		AddHouseRentersCount(houseid, +, 1);

		cache_delete(result);
	}
}

stock EvictHouseRenter(houseid, roomid, renter_id = INVALID_PLAYER_ID, ownerid = INVALID_PLAYER_ID)
{
	if(IsHouseRoomOwned(houseid, roomid))
	{
		new query[90];

		format(query, sizeof query, "DELETE FROM houses_renters WHERE owner_id=%d AND house_id=%d", GetHouseRenterInfo(houseid, roomid, HR_OWNER_ID), GetHouseData(houseid, H_SQL_ID));
		mysql_query(mysql, query, false);

		format(query, sizeof query, "UPDATE accounts SET house_type=-1,house_room=-1,house=-1 WHERE id=%d LIMIT 1", GetHouseRenterInfo(houseid, roomid, HR_OWNER_ID));
		mysql_query(mysql, query, false);

		if(!mysql_errno())
		{
			if(renter_id == INVALID_PLAYER_ID)
				renter_id = GetPlayerID(GetHouseRenterInfo(houseid, roomid, HR_OWNER_NAME));

			if(renter_id != INVALID_PLAYER_ID)
			{
				if(GetPlayerHouse(renter_id, HOUSE_TYPE_ROOM) == houseid)
				{
					if(ownerid != INVALID_PLAYER_ID)
					{
						format(query, sizeof query, "%s выселил Вас из своего дома", GetPlayerNameEx(ownerid));
						SendClientMessage(renter_id, 0x3399FFFF, query);
					}

					SetPlayerData(renter_id, P_HOUSE, -1);
					SetPlayerData(renter_id, P_HOUSE_TYPE, -1);
					SetPlayerData(renter_id, P_HOUSE_ROOM, -1);
				}
			}

			SetHouseRenterInfo(houseid, roomid, HR_SQL_ID, 	0);
			SetHouseRenterInfo(houseid, roomid, HR_OWNER_ID,	0);
			SetHouseRenterInfo(houseid, roomid, HR_RENT_DATE,	0);
			SetHouseRenterInfo(houseid, roomid, HR_RENT_TIME,	0);

			AddHouseRentersCount(houseid, -, 1);
			return 1;
		}
		return -1;
	}
	return 0;
}

stock GetHouseIndexBySQLID(sql_id)
{
	new index = -1;

	for(new idx; idx < MAX_HOUSES; idx ++)
	{
		if(GetHouseData(idx, H_SQL_ID) != sql_id) continue;

		index = idx;
		break;
	}
	return index;
}

stock GetHouseFreeRoom(houseid)
{
	new roomid = -1;

	for(new idx; idx < MAX_HOUSE_ROOMS; idx ++)
	{
		if(IsHouseRoomOwned(houseid, idx)) continue;

		roomid = idx;
		break;
	}
	return roomid;
}

stock LotteryBuyTicketCount()
{
	new count;
	foreach(new playerid : Player)
	{
		if(!IsPlayerLogged(playerid)) continue;
		if(!GetPlayerData(playerid, P_LOTTERY)) continue;

		count ++;
	}
	return count;
}



stock ShowPlayerSelectPanel(playerid, type)
{
	if(GetPlayerData(playerid, P_USE_SELECT_PANEL) == SELECT_PANEL_TYPE_NONE)
	{
		for(new idx; idx < sizeof select_TD; idx ++)
		{
			TextDrawShowForPlayer(playerid, select_TD[idx]);
		}
		SetPlayerData(playerid, P_USE_SELECT_PANEL, type);

		SelectTextDraw(playerid, 0x009900FF);
	}
}

stock HidePlayerSelectPanel(playerid)
{
	if(GetPlayerData(playerid, P_USE_SELECT_PANEL) != SELECT_PANEL_TYPE_NONE)
	{
		CancelSelectTextDraw(playerid);

		for(new idx; idx < sizeof select_TD; idx ++)
		{
			TextDrawHideForPlayer(playerid, select_TD[idx]);
		}
		SetPlayerData(playerid, P_USE_SELECT_PANEL, SELECT_PANEL_TYPE_NONE);
	}
}

stock IsPlayerHaveWeapon(playerid, weaponid)
{
	new weapon, ammo;
	new bool: is_have = false;

	for(new idx; idx <= 12; idx ++)
	{
		GetPlayerWeaponData(playerid, idx, weapon, ammo);
		if(weapon != weaponid) continue;

		is_have = true;
		break;
	}
	return is_have;
}

stock IsAJobCar(vehicleid)
{
	switch(GetVehicleData(vehicleid, V_ACTION_TYPE))
	{
		case
			VEHICLE_ACTION_TYPE_BUS_DRIVER,
			VEHICLE_ACTION_TYPE_TAXI_DRIVER,
			VEHICLE_ACTION_TYPE_MECHANIC,
			VEHICLE_ACTION_TYPE_TRUCKER:
		{
			return 1;
		}
	}
	return 0;
}

stock GetNearestVehicleID(playerid, Float: radius = 0.0)
{
	if(radius == 0.0)
		radius = FLOAT_INFINITY;

	new vehicleid = INVALID_VEHICLE_ID;

	new Float: dist;
	new Float: pos_x, Float: pos_y, Float: pos_z;

	GetPlayerPos(playerid, pos_x, pos_y, pos_z);
	for(new idx; idx < MAX_VEHICLES; idx ++)
	{
		if(!IsValidVehicle(idx)) continue;
		if(!IsVehicleStreamedIn(idx, playerid)) continue;

		dist = GetVehicleDistanceFromPoint(idx, pos_x, pos_y, pos_z);
		if(dist < radius)
		{
			radius = dist,
			vehicleid = idx;
		}
	}
	return vehicleid;
}

stock ShowPlayerBuyRepairCarDialog(playerid, stationid)
{
	if(stationid != -1)
	{
		SetPVarInt(playerid, "buy_jerrican_in_fuelst", stationid);

		new fmt_str[70];
		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Рем. комплекс стоит 100.000$\n"\
			"Вы хотите купить ее?"
		);
		Dialog(playerid, DIALOG_FUEL_STATION_BUY_REPAIR, DIALOG_STYLE_MSGBOX, "АЗС", fmt_str, "Да", "Нет");
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Рем комплекс можно купить на любой АЗС");
}

stock ShowPlayerBuyJerricanDialog(playerid, stationid)
{
	if(stationid != -1)
	{
		SetPVarInt(playerid, "buy_jerrican_in_fuelst", stationid);

		new fmt_str[70];
		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Канистра на этой заправке стоит %d руб\n"\
			"Вы хотите купить ее?",
			GetFuelStationData(stationid, FS_FUEL_PRICE) * 15
		);
		Dialog(playerid, DIALOG_FUEL_STATION_BUY_JERRICA, DIALOG_STYLE_MSGBOX, "{FFCD00}Покупка канистры", fmt_str, "Да", "Нет");
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Канистру с топливом можно купить на любой АЗС");
}

stock LoadOrders()
{
	new Cache: result, rows;

	result = mysql_query(mysql, "SELECT * FROM orders");
	rows = cache_num_rows();

	if(rows > sizeof g_order)
		rows = sizeof g_order;

	new buffer;
	for(new idx; idx < rows; idx ++)
	{
		SetOrderData(idx, O_SQL_ID,		cache_get_field_content_int(idx, "id"));
		SetOrderData(idx, O_TYPE,		cache_get_field_content_int(idx, "type"));
		SetOrderData(idx, O_COMPANY_ID,		cache_get_field_content_int(idx, "company"));
		SetOrderData(idx, O_AMOUNT,		cache_get_field_content_int(idx, "amount"));
		SetOrderData(idx, O_PRICE,		cache_get_field_content_int(idx, "price"));
		SetOrderData(idx, O_TIME,		cache_get_field_content_int(idx, "time"));
		SetOrderData(idx, O_USED, 		false);

		buffer = GetOrderData(idx, O_COMPANY_ID);
		switch(GetOrderData(idx, O_TYPE))
		{
			case ORDER_TYPE_FUEL_STATION:
			{
				SetFuelStationData(buffer, FS_ORDER_ID, idx);
			}
			case ORDER_TYPE_BUSINESS:
			{
				SetBusinessData(buffer, B_ORDER_ID, idx);
			}
		}
	}
	cache_delete(result);

	printf("[Orders]: Заказов загружено: %d", rows);
}

stock CreateOrder(type, company, amount, price, description[] = "")
{

	new order_id = GetOrderFreeSlot();
	if(order_id != -1)
	{
		new query[128];
		new Cache: result;
		new time = gettime();

		format(query, sizeof query, "INSERT INTO orders (type,company,amount,price,time) VALUES (%d,%d,%d,%d,%d)", type, company, amount, price, time);
		result = mysql_query(mysql, query, true);

		if(!mysql_errno())
		{
			new year, month, day;
			getdate(year, month, day);

			SetOrderData(order_id, O_TYPE, type);
			SetOrderData(order_id, O_COMPANY_ID, company);
			SetOrderData(order_id, O_AMOUNT, amount);
			SetOrderData(order_id, O_PRICE, price);
			SetOrderData(order_id, O_TIME, time);
			SetOrderData(order_id, O_USED, false);

			SetOrderData(order_id, O_SQL_ID, cache_insert_id());

			switch(type)
			{
				case ORDER_TYPE_FUEL_STATION:
				{
					SetFuelStationData(company, FS_ORDER_ID, order_id);
				}
				case ORDER_TYPE_BUSINESS:
				{
					SetBusinessData(company, B_ORDER_ID, order_id);
				}
			}
		}
		else order_id = -1;

		cache_delete(result);
	}
	return order_id;
}

stock DeleteOrder(orderid)
{
	if(GetOrderData(orderid, O_SQL_ID) > 0)
	{
		new query[64];
		new company = GetOrderData(orderid, O_COMPANY_ID);

		switch(GetOrderData(orderid, O_TYPE))
		{
			case ORDER_TYPE_FUEL_STATION:
			{
				SetFuelStationData(company, FS_ORDER_ID, -1);
			}
			case ORDER_TYPE_BUSINESS:
			{
				SetBusinessData(company, B_ORDER_ID, -1);
			}
		}

		format(query, sizeof query, "DELETE FROM orders WHERE type=%d AND company=%d", GetOrderData(orderid, O_TYPE), GetOrderData(orderid, O_COMPANY_ID));
		mysql_query(mysql, query, false);

		SetOrderData(orderid, O_SQL_ID, 0);
		SetOrderData(orderid, O_PRICE,  0);
		SetOrderData(orderid, O_AMOUNT, 0);
	}
}

stock GetOrderFreeSlot()
{
	new slot = -1;

	for(new idx; idx < sizeof g_order; idx ++)
	{
		if(GetOrderData(idx, O_SQL_ID) > 0) continue;

		slot = idx;
		break;
	}
	return slot;
}

stock SellFuelStation(playerid, to_player = INVALID_PLAYER_ID, price = 0)
{
	new stationid = GetPlayerFuelStation(playerid);
	if(stationid != -1)
	{
		new fuel_st_price = GetFuelStationData(stationid, FS_PRICE);
		new fuel_st_percent = (fuel_st_price * 30) / 100;
		new fuel_st_improvemnts_price = FuelStationImprovementsPrice(stationid);

		if(fuel_st_improvemnts_price)
			fuel_st_improvemnts_price = (fuel_st_improvemnts_price * 60) / 100;

		new query[170];
		new return_money = (fuel_st_price - fuel_st_percent) + fuel_st_improvemnts_price;

		SetPlayerData(playerid, P_FUEL_ST, -1);

		SetFuelStationData(stationid, FS_OWNER_ID, 0);

		if(to_player == INVALID_PLAYER_ID)
		{
			AddPlayerData(playerid, P_BANK, +, return_money);

			BankLog(playerid, return_money, "Продажа АЗС");

			SetFuelStationData(stationid, FS_IMPROVEMENTS, 0);

			SetFuelStationData(stationid, FS_FUELS, 		1000);
			SetFuelStationData(stationid, FS_FUEL_PRICE,	3);
			SetFuelStationData(stationid, FS_BUY_FUEL_PRICE,0);

			SetFuelStationData(stationid, FS_BALANCE,		0);
			SetFuelStationData(stationid, FS_RENT_DATE,		0);
			SetFuelStationData(stationid, FS_LOCK_STATUS,	false);

			format(query, sizeof query, "UPDATE accounts a,fuel_stations f SET a.bank=%d,a.fuel_st=-1,f.owner_id=0,f.fuels=1000,f.fuel_price=3,f.lock=0 WHERE a.id=%d AND f.id=%d", GetPlayerData(playerid, P_BANK), GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID));
			mysql_query(mysql, query, false);

			//format(query, sizeof query, "UPDATE fuel_stations_profit SET view=0 WHERE fid=%d AND view=1",  GetFuelStationData(stationid, FS_SQL_ID));
			//mysql_query(mysql, query, false);

			GivePlayerMoneyEx(playerid, 0, "Продажа заправочной станции государству", false, false);
			CallLocalFunction("UpdateFuelStationLabel", "i", stationid);

			SendClientMessage(playerid, 0x66CC00FF, "Вы продали свою заправочную станцию!");

			format(query, sizeof query, "Налог за продажу заправочной станции составил 30 процентов от ее стоимости {99CC00}(%d руб)", fuel_st_percent);
			SendClientMessage(playerid, 0xCECECEFF, query);

			format(query, sizeof query, "Вам было возвращено 60 процентов от стоимости купленных улучшений: {CCFF00}%d руб", fuel_st_improvemnts_price);
			SendClientMessage(playerid, 0xCECECEFF, query);

			format(query, sizeof query, "Итого на банковский счет перечислено: {3399FF}%d руб", return_money);
			SendClientMessage(playerid, 0xFFFFFFFF, query);

		}
		else
		{
			if(BuyPlayerFuelStation(to_player, stationid, true, price) == 1)
			{
				new total_price = price + fuel_st_improvemnts_price;

				format(query, sizeof query, "Вам было возвращено 60 процентов от стоимости купленных улучшений: {CCFF00}%d руб", fuel_st_improvemnts_price);
				SendClientMessage(playerid, 0xCECECEFF, query);

				format(query, sizeof query, "UPDATE accounts SET money=%d,fuel_st=-1 WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)+total_price, GetPlayerAccountID(playerid));
				mysql_query(mysql, query, false);

				GivePlayerMoneyEx(playerid, total_price, "Продажа заправочной станции игроку", false, false);

				fuel_st_price = price;
				fuel_st_percent = 0;
			}
			else return ;
		}
		format(query, sizeof query, "~g~+%d rub~n~+%d rub", (fuel_st_price - fuel_st_percent), fuel_st_improvemnts_price);
		GameTextForPlayer(playerid, query, 4000, 1);
	}
}

stock BuyPlayerFuelStation(playerid, stationid, bool: buy_from_owner = false, price = -1)
{
	if(!IsFuelStationOwned(stationid) && GetPlayerFuelStation(playerid) == -1)
	{
		if(price <= 0)
			price = GetFuelStationData(stationid, FS_PRICE);

		if(GetPlayerMoneyEx(playerid) >= price)
		{
			new query[256];

			format(query, sizeof query, "UPDATE accounts a, fuel_stations f SET a.money=%d,a.fuel_st=%d,f.owner_id=%d WHERE a.id=%d AND f.id=%d", GetPlayerMoneyEx(playerid)-price, stationid, GetPlayerAccountID(playerid), GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID));
			mysql_query(mysql, query, false);

			if(!mysql_errno())
			{
				SetPlayerData(playerid, P_FUEL_ST, stationid);

				SetFuelStationData(stationid, FS_OWNER_ID, 		GetPlayerAccountID(playerid));
				SetFuelStationData(stationid, FS_IMPROVEMENTS, 0);

				new time = gettime();
				new rent_time = (time - (time % 86400)) + 86400;

				if(!buy_from_owner)
				{
					SetFuelStationData(stationid, FS_FUELS, 		50);
					SetFuelStationData(stationid, FS_FUEL_PRICE,	3);
					SetFuelStationData(stationid, FS_BUY_FUEL_PRICE,0);

					SetFuelStationData(stationid, FS_BALANCE,		0);
					SetFuelStationData(stationid, FS_RENT_DATE,		rent_time);
					SetFuelStationData(stationid, FS_LOCK_STATUS,	false);
				}
				else
				{
					if(GetElapsedTime(GetFuelStationData(stationid, FS_RENT_DATE), time, CONVERT_TIME_TO_DAYS) <= 0)
					{
						SetFuelStationData(stationid, FS_RENT_DATE, rent_time);
					}
				}
				format(g_fuel_station[stationid][FS_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
				CallLocalFunction("UpdateFuelStationLabel", "i", stationid);

				GivePlayerMoneyEx(playerid, -price, "Покупка заправочной станции", false, true);
				SendClientMessage(playerid, 0x66CC00FF, "Напишите {3399FF}/fuelst {66CC00}чтобы узнать о возможностях");

				format(query, sizeof query, "UPDATE fuel_stations SET improvements=0,fuels=%d,fuel_price=%d,buy_fuel_price=%d,balance=%d,rent_time=%d,`lock`=%d WHERE id=%d LIMIT 1", GetFuelStationData(stationid, FS_FUELS), GetFuelStationData(stationid, FS_FUEL_PRICE), GetFuelStationData(stationid, FS_BUY_FUEL_PRICE), GetFuelStationData(stationid, FS_BALANCE), GetFuelStationData(stationid, FS_RENT_DATE), GetFuelStationData(stationid, FS_LOCK_STATUS), GetFuelStationData(stationid, FS_SQL_ID));
				mysql_query(mysql, query, false);

				format(query, sizeof query, "UPDATE fuel_stations_profit SET view=0 WHERE fid=%d AND view=1",  GetFuelStationData(stationid, FS_SQL_ID));
				mysql_query(mysql, query, false);

				return 1;
			}

			SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 16)");
			return 0;
		}
		return 0;
	}
	return -1;
}

stock FuelStationFillCar(playerid, vehicleid, stationid)
{
	if(IsPlayerDriver(playerid) && IsPlayerInVehicle(playerid, vehicleid))
	{
		if(0 <= stationid <= g_fuel_station_loaded)
		{
			if(!GetFuelStationData(stationid, FS_LOCK_STATUS))
			{
				new fmt_str[150];

				new buy_fuel_pay = GetPVarInt(playerid, "buy_fuel_pay");
				new buy_fuel_count = GetPVarInt(playerid, "buy_fuel_count");

				new price = GetFuelStationData(stationid, FS_FUEL_PRICE) * 10;

				if(GetPlayerMoneyEx(playerid) >= price)
				{
					if((GetVehicleData(vehicleid, V_FUEL) + 10.0) <= 150.0)
					{
						if(GetFuelStationData(stationid, FS_FUELS) >= 10)
						{
							if(IsFuelStationOwned(stationid))
							{
								AddFuelStationData(stationid, FS_FUELS, -, 10);
								AddFuelStationData(stationid, FS_BALANCE, +, price);
							}
							SetVehicleData(vehicleid, V_FUEL, GetVehicleData(vehicleid, V_FUEL) + 10);

							buy_fuel_count += 10;
							buy_fuel_pay += price;

							SetPVarInt(playerid, "buy_fuel_pay", buy_fuel_pay);
							SetPVarInt(playerid, "buy_fuel_count", buy_fuel_count);

							format(fmt_str, sizeof fmt_str, "UPDATE accounts a,fuel_stations f SET a.money=%d,f.fuels=%d,f.balance=%d WHERE a.id=%d AND f.id=%d", GetPlayerMoneyEx(playerid)-price, GetFuelStationData(stationid, FS_FUELS), GetFuelStationData(stationid, FS_BALANCE), GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID));
							mysql_query(mysql, fmt_str, false);

							fmt_str = "";
							GivePlayerMoneyEx(playerid, -price, "Покупка топлива на заправке", false, false);
						}
						else strcat(fmt_str, "~n~~r~~h~no fuel");
					}
					else strcat(fmt_str, "~n~~r~~h~benzobak full");

					format(fmt_str, sizeof fmt_str, "~w~summa: ~g~~h~%d rub~n~~w~litres: ~b~%d%s", buy_fuel_pay, buy_fuel_count, fmt_str);
					GameTextForPlayer(playerid, fmt_str, 3000, 4);
				}
				else SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег для заправки");
			}
			else
			{
				GameTextForPlayer(playerid, "~w~fuel station~n~~r~~h~is closed", 3000, 4);
				//SendClientMessage(playerid, 0xFF6600FF, "Заправочная станция закрыта");
			}
		}
	}
}

stock GetFuelStationMaxFuel(stationid)
{
	new max_fuels = 2500;
	new i_level = GetFuelStationData(stationid, FS_IMPROVEMENTS);

	if(i_level > 3)
		i_level = 3;

	max_fuels += i_level * 2500;
	return max_fuels;
}

stock GetNearestFuelStation(playerid, Float: dist = 15.0)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;

	new stationid = -1;
	new Float: my_dist;

	for(new idx; idx < g_fuel_station_loaded; idx ++)
	{
		my_dist = GetPlayerDistanceFromPoint(playerid, GetFuelStationData(idx, FS_POS_X), GetFuelStationData(idx, FS_POS_Y), GetFuelStationData(idx, FS_POS_Z));
		if(my_dist < dist)
		{
			dist = my_dist,
			stationid = idx;
		}
	}
	return stationid;
}

stock GetPlayerFuelStation(playerid)
{
	new stationid = GetPlayerData(playerid, P_FUEL_ST);

	if(stationid != -1)
	{
		if(GetFuelStationData(stationid, FS_OWNER_ID) == GetPlayerAccountID(playerid))
		{
			return stationid;
		}
	}
	return -1;
}

stock FuelStationImprovementsPrice(stationid)
{
	new price;
	new level = GetFuelStationData(stationid, FS_IMPROVEMENTS);

	if(1 <= level <= sizeof g_fuel_station_improvements)
	{
		for(new idx; idx < level; idx ++)
		{
			price += g_fuel_station_improvements[idx][I_PRICE];
		}
	}
	return price;
}

stock ShowPlayerFuelStationPayForRent(playerid)
{
	new stationid = GetPlayerFuelStation(playerid);
	if(stationid != -1)
	{
		new fmt_str[256];

		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Заправочная станция:\t\t№%d (%s)\n"\
			"Оплаченных дней арендны:\t\t%d из 30\n"\
			"Ежедневная арендная плата:\t%d руб\n"\
			"Тип аренды:\t\t\t\t%s\n\n"\
			"На сколько дней Вы хотите арендовать заправочную станцию?",
			stationid,
			GetFuelStationData(stationid, FS_NAME),
			GetElapsedTime(GetFuelStationData(stationid, FS_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
			GetFuelStationData(stationid, FS_IMPROVEMENTS) < 4 ? GetFuelStationData(stationid, FS_RENT_PRICE) : GetFuelStationData(stationid, FS_RENT_PRICE) / 2,
			GetFuelStationData(stationid, FS_IMPROVEMENTS) < 4 ? ("Полная") : ("Пониженная")
		);
		Dialog(playerid, DIALOG_PAY_FOR_RENT_FUEL_ST, DIALOG_STYLE_INPUT, "{66CC00}Аренда заправочной станции", fmt_str, "Оплатить", "Назад");
	}
}

stock ShowPlayerBusinessPayForRent(playerid)
{
	new businessid = GetPlayerBusiness(playerid);
	if(businessid != -1)
	{
		new fmt_str[256];

		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Бизнес:\t\t\t\t№%d (%s)\n"\
			"Оплаченных дней арендны:\t\t%d из 30\n"\
			"Ежедневная арендная плата:\t%d руб\n"\
			"Тип аренды:\t\t\t\t%s\n\n"\
			"На сколько дней Вы хотите арендовать бизнес?",
			businessid,
			GetBusinessData(businessid, B_NAME),
			GetElapsedTime(GetBusinessData(businessid, B_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
			GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? GetBusinessData(businessid, B_RENT_PRICE) : GetBusinessData(businessid, B_RENT_PRICE) / 2,
			GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? ("Полная") : ("Пониженная")
		);
		Dialog(playerid, DIALOG_PAY_FOR_RENT_BIZ, DIALOG_STYLE_INPUT, "{66CC00}Аренда бизнеса", fmt_str, "Оплатить", "Назад");
	}
}

stock ShowPlayerHousePayForRent(playerid)
{
	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
	if(houseid != -1)
	{
		new fmt_str[256];

		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Дом:\t\t\t\t\t№%d (%s)\n"\
			"Оплаченных дней арендны:\t\t%d из 30\n"\
			"Ежедневная квартплата:\t\t%d руб\n"\
			"Субсидия:\t\t\t\t%s\n\n"\
			"На сколько дней Вы хотите оплатить дом?",
			houseid,
			GetHouseData(houseid, H_NAME),
			GetElapsedTime(GetHouseData(houseid, H_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
			GetHouseData(houseid, H_IMPROVEMENTS) < 4 ? GetHouseData(houseid, H_RENT_PRICE) : GetHouseData(houseid, H_RENT_PRICE) / 2,
			GetHouseData(houseid, H_IMPROVEMENTS) < 4 ? ("Нет") : ("Есть")
		);
		Dialog(playerid, DIALOG_PAY_FOR_RENT_HOUSE, DIALOG_STYLE_INPUT, "{66CC00}Оплата дома", fmt_str, "Оплатить", "Назад");
	}
}

stock SellBusiness(playerid, to_player = INVALID_PLAYER_ID, price = 0)
{
	new businessid = GetPlayerBusiness(playerid);

	if(businessid != -1)
	{
		new biz_price = GetBusinessData(businessid, B_PRICE);
		new biz_percent = (biz_price * 30) / 100;
		new biz_improvemnts_price = BusinessImprovementsPrice(businessid);

		if(biz_improvemnts_price)
			biz_improvemnts_price = (biz_improvemnts_price * 60) / 100;

		new query[200];
		new return_money = (biz_price - biz_percent) + biz_improvemnts_price;

		SetPlayerData(playerid, P_BUSINESS, -1);

		SetBusinessData(businessid, B_OWNER_ID, 0);

		if(to_player == INVALID_PLAYER_ID)
		{
			AddPlayerData(playerid, P_BANK, +, return_money);

			BankLog(playerid, return_money, "Продажа бизнеса");

			SetBusinessData(businessid, B_IMPROVEMENTS, 	0);

			SetBusinessData(businessid, B_PRODS, 			0);
			SetBusinessData(businessid, B_PROD_PRICE,		0);

			SetBusinessData(businessid, B_BALANCE,			0);
			SetBusinessData(businessid, B_RENT_DATE,		0);
			SetBusinessData(businessid, B_ENTER_MUSIC,		0);
			SetBusinessData(businessid, B_LOCK_STATUS,	false);

			BusinessHealthPickupInit(businessid);

			format(query, sizeof query, "UPDATE accounts a,business b SET a.bank=%d,a.business=-1,b.owner_id=0,b.products=0,b.prod_price=0,b.lock=0 WHERE a.id=%d AND b.id=%d", GetPlayerData(playerid, P_BANK), GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
			mysql_query(mysql, query, false);

			format(query, sizeof query, "DELETE FROM business_gps WHERE bid=%d", businessid);
			mysql_query(mysql, query, false);

			g_business_gps_init = false;

			//format(query, sizeof query, "UPDATE business_profit SET view=0 WHERE bid=%d AND view=1", GetBusinessData(businessid, B_SQL_ID));
			//mysql_query(mysql, query, false);

			GivePlayerMoneyEx(playerid, 0, "Продажа бизнеса государству", false, false);
			CallLocalFunction("UpdateBusinessLabel", "i", businessid);

			SendClientMessage(playerid, 0x66CC00FF, "Вы продали свой бизнес!");

			format(query, sizeof query, "Налог за продажу бизнеса составил 30 процентов от его стоимости {99CC00}(%d руб)", biz_percent);
			SendClientMessage(playerid, 0xCECECEFF, query);

			format(query, sizeof query, "Вам было возвращено 60 процентов от стоимости купленных улучшений: {CCFF00}%d руб", biz_improvemnts_price);
			SendClientMessage(playerid, 0xCECECEFF, query);

			format(query, sizeof query, "Итого на банковский счет перечислено: {3399FF}%d руб", return_money);
			SendClientMessage(playerid, 0xFFFFFFFF, query);
		}
		else
		{
			if(BuyPlayerBusiness(to_player, businessid, true, price) == 1)
			{
				new total_price = price + biz_improvemnts_price;

				format(query, sizeof query, "Вам было возвращено 60 процентов от стоимости купленных улучшений: {CCFF00}%d руб", biz_improvemnts_price);
				SendClientMessage(playerid, 0xCECECEFF, query);

				format(query, sizeof query, "UPDATE accounts SET money=%d,business=-1 WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)+total_price, GetPlayerAccountID(playerid));
				mysql_query(mysql, query, false);

				format(query, sizeof query, "DELETE FROM business_gps WHERE bid=%d", businessid);
				mysql_query(mysql, query, false);

				g_business_gps_init = false;
				GivePlayerMoneyEx(playerid, total_price, "Продажа бизнеса игроку", false, false);

				biz_price = price;
				biz_percent = 0;
			}
			else return ;
		}
		format(query, sizeof query, "~g~+%d rub~n~+%d rub", (biz_price - biz_percent), biz_improvemnts_price);
		GameTextForPlayer(playerid, query, 4000, 1);
	}
}

stock BuyPlayerBusiness(playerid, businessid, bool: buy_from_owner = false, price = -1)
{
	if(!IsBusinessOwned(businessid) && GetPlayerBusiness(playerid) == -1)
	{
		if(price <= 0)
			price = GetBusinessData(businessid, B_PRICE);

		if(GetPlayerMoneyEx(playerid) >= price)
		{
			new query[256];

			format(query, sizeof query, "UPDATE accounts a, business b SET a.money=%d,a.business=%d,b.owner_id=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, businessid, GetPlayerAccountID(playerid), GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
			mysql_query(mysql, query, false);
			printf("sql %s", query);

			if(!mysql_errno())
			{
				SetPlayerData(playerid, P_BUSINESS, businessid);

				SetBusinessData(businessid, B_OWNER_ID, GetPlayerAccountID(playerid));
				SetBusinessData(businessid, B_IMPROVEMENTS, 	0);

				new time = gettime();
				new rent_time = (time - (time % 86400)) + 86400;

				if(!buy_from_owner)
				{
					SetBusinessData(businessid,	B_PRODS, 		20);
					SetBusinessData(businessid,	B_PROD_PRICE, 	0);

					SetBusinessData(businessid,	B_ENTER_MUSIC, 	0);
					SetBusinessData(businessid,	B_ENTER_PRICE, 	0);

					SetBusinessData(businessid,	B_BALANCE, 		0);
					SetBusinessData(businessid,	B_RENT_DATE,	rent_time);
					SetBusinessData(businessid,	B_LOCK_STATUS,	false);
				}
				else
				{
					if(GetElapsedTime(GetBusinessData(businessid, B_RENT_DATE), time, CONVERT_TIME_TO_DAYS) <= 0)
					{
						SetBusinessData(businessid, B_RENT_DATE, rent_time);
					}
				}
				format(g_business[businessid][B_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
				CallLocalFunction("UpdateBusinessLabel", "i", businessid);

				GivePlayerMoneyEx(playerid, -price, "Покупка бизнеса", false, true);
				SendClientMessage(playerid, 0x66CC00FF, "Напишите {0099FF}/business {66CC00}чтобы узнать о возможностях");

				format(query, sizeof query, "UPDATE business SET improvements=0,products=%d,prod_price=%d,balance=%d,rent_time=%d,`lock`=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_PRODS), GetBusinessData(businessid, B_PROD_PRICE), GetBusinessData(businessid, B_BALANCE), GetBusinessData(businessid, B_RENT_DATE), GetBusinessData(businessid, B_LOCK_STATUS), GetBusinessData(businessid, B_SQL_ID));
				mysql_query(mysql, query, false);

				format(query, sizeof query, "UPDATE business_profit SET view=0 WHERE bid=%d AND view=1", GetBusinessData(businessid, B_SQL_ID));
				mysql_query(mysql, query, false);

				return 1;
			}
			SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 21)");
			return 0;
		}
		return 0;
	}
	return -1;
}

stock BusinessHealthPickupInit(businessid)
{
	if(GetBusinessData(businessid, B_IMPROVEMENTS) >= 2)
	{
		if(!GetBusinessData(businessid, B_HEALTH_PICKUP))
		{
			new interior = GetBusinessData(businessid, B_INTERIOR);
			SetBusinessData(businessid, B_HEALTH_PICKUP, CreatePickup(1240, 23, GetBusinessInteriorInfo(interior, BT_HEALTH_POS_X), GetBusinessInteriorInfo(interior, BT_HEALTH_POS_Y), GetBusinessInteriorInfo(interior, BT_HEALTH_POS_Z), businessid + 255, PICKUP_ACTION_TYPE_BIZ_HEALTH, businessid));
		}
	}
	else
	{
		if(GetBusinessData(businessid, B_HEALTH_PICKUP))
		{
			DestroyPickup(GetBusinessData(businessid, B_HEALTH_PICKUP));
			SetBusinessData(businessid, B_HEALTH_PICKUP, 0);
		}
	}
}

stock GetBusinessEnterProdCount(businessid)
{
	new take_prods = 0;
	new enter_price = GetBusinessData(businessid, B_ENTER_PRICE);

	if(enter_price > 0)
	{
		if(enter_price < 150)
		{
			take_prods = 1;
		}
		else if(enter_price < 500)
		{
			take_prods = 2;
		}
		else take_prods = 3;
	}
	return take_prods;
}

stock GetBusinessMaxProd(businessid)
{
	new max_prods = 500;
	new i_level = GetBusinessData(businessid, B_IMPROVEMENTS);

	if(i_level >= 5)
	{
		max_prods = 10_000;
	}
	else if(i_level >= 1)
	{
		max_prods = 3_000;
	}
	else max_prods = 500;

	return max_prods;
}

stock GetNearestBusiness(playerid, Float: dist = 10.0)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;

	new businessid = -1;
	new Float: my_dist;

	for(new idx; idx < g_business_loaded; idx ++)
	{
		my_dist = GetPlayerDistanceFromPoint(playerid, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z));
		if(my_dist < dist)
		{
			dist = my_dist,
			businessid = idx;
		}
	}
	return businessid;
}

stock BusinessImprovementsPrice(businessid)
{
	new price;
	new level = GetBusinessData(businessid, B_IMPROVEMENTS);

	if(1 <= level <= sizeof g_business_improvements)
	{
		for(new idx; idx < level; idx ++)
		{
			price += g_business_improvements[idx][I_PRICE];
		}
	}
	return price;
}

stock EnterPlayerToBiz(playerid, businessid)
{
	print("okey");
	if(GetPlayerInBiz(playerid) == -1)
	{
		new type = GetBusinessData(businessid, B_TYPE),
			buffer = GetBusinessData(businessid, B_INTERIOR);

		printf("okey type %d buffer %d",type,buffer);

		if(type == BUSINESS_TYPE_CAR_TUNING)
		{
			new vehicleid = GetPlayerOwnableCar(playerid);

			if(vehicleid == INVALID_VEHICLE_ID)
				return 1;

			GetVehiclePos(vehicleid, vehicle_temp_position[playerid][0], vehicle_temp_position[playerid][3], vehicle_temp_position[playerid][2]);
			GetVehicleZAngle(vehicleid, vehicle_temp_position[playerid][3]);

			SetVehiclePos(vehicleid, 2503.6116,1503.9767,1497.8375);
			SetVehicleZAngle(vehicleid, 161.0);

			LinkVehicleToInterior(vehicleid, GetBusinessInteriorInfo(buffer, BT_ENTER_INTERIOR));
			SetVehicleVirtualWorld(vehicleid, businessid + 255);
		}

		SetPlayerPosEx
		(
			playerid,
			GetBusinessInteriorInfo(buffer, BT_ENTER_POS_X),
			GetBusinessInteriorInfo(buffer, BT_ENTER_POS_Y),
			GetBusinessInteriorInfo(buffer, BT_ENTER_POS_Z),
			GetBusinessInteriorInfo(buffer, BT_ENTER_ANGLE),
			GetBusinessInteriorInfo(buffer, BT_ENTER_INTERIOR),
			businessid + 255, false
		);
		SetPlayerInBiz(playerid, businessid);

		buffer = GetBusinessData(businessid, B_ENTER_MUSIC);
		
		if(1 <= buffer <= sizeof g_business_sound)
		{
			PlayerPlaySound(playerid, g_business_sound[buffer - 1], 0.0, 0.0, 0.0);
		}
	}
	return 1;
}

stock GetPlayerBusiness(playerid)
{
	new businessid = GetPlayerData(playerid, P_BUSINESS);

	if(businessid != -1)
	{
		if(GetBusinessData(businessid, B_OWNER_ID) == GetPlayerAccountID(playerid))
		{
			return businessid;
		}
	}
	return -1;
}

stock GetFreeBusinessCount()
{
	new count;
	for(new idx; idx < g_business_loaded; idx ++)
	{
		if(IsBusinessOwned(idx)) continue;

		count ++;
	}
	return count;
}

stock IsPlayerInBuyPosBiz(playerid, businessid, type, Float: radius = 50.0)
{
	if(GetBusinessData(businessid, B_TYPE) == type)
	{
		new interior = GetBusinessData(businessid, B_INTERIOR);
		if(IsPlayerInRangeOfPoint(playerid, radius, GetBusinessInteriorInfo(interior, BT_BUY_POS_X), GetBusinessInteriorInfo(interior, BT_BUY_POS_Y), GetBusinessInteriorInfo(interior, BT_BUY_POS_Z)))
		{
			return 1;
		}
	}
	return 0;
}

stock ShowPlayerRealtorHomeDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_BIZ_REALTOR_HOME_GET, DIALOG_STYLE_INPUT,
		"{99CC00}Информация о доме",
		"{FFFFFF}Введите номер дома, информацию\n"\
		"о котором Вы хотите получить\n\n"\
		"{FFCD00}Стоимость услуги 50 рублей",
		"Далее", "Отмена"
	);
}

stock IsABike(vehicleid)
{
	switch(GetVehicleData(vehicleid, V_MODELID))
	{
		case 481, 509, 510:
		{
			return 1;
		}
	}
	return 0;
}

stock IsModelHasBootAndBonnet(modelid)
{
	switch(modelid)
	{
		case 481,509,510,417,425,447,460,469,464,465,476,487,489,497,501,511,512,513,519,520,530,548,553,563,577,592,593: return 0;
	}
	return 1;
}

stock SetPlayerPhoneUseState(playerid, bool: use = true, bool: bubble = true)
{
	if(use)
	{
	//	SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, GetPlayerData(playerid, P_PHONE_COLOR) + 18865, A_OBJECT_BONE_RIGHT_HAND, 0.1, 0.001, 0.0, 280.0, 0.0, 200.0, 1.0, 1.0, 1.0);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

		SetPlayerData(playerid, P_USE_ANIM_TYPE, USE_ANIM_TYPE_NONE - 1);

		if(bubble)
			Action(playerid, "достал телефон", _, false);
	}
	else
	{
	//	RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
		SetPlayerData(playerid, P_USE_ANIM_TYPE, USE_ANIM_TYPE_NONE);

		if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE)
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	}
}

stock GetNearestAtm(playerid, Float: dist = 15.0)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;

	new atmid = -1;
	new Float: my_dist;

	for(new idx; idx < sizeof g_atm-1; idx ++)
	{
		my_dist = GetPlayerDistanceFromPoint(playerid, g_atm[idx][A_POS_X], g_atm[idx][A_POS_Y], g_atm[idx][A_POS_Z]);
		if(my_dist < dist)
		{
			dist = my_dist,
			atmid = idx;
		}
	}
	return atmid;
}

stock GetElapsedTime(time, to_time, type = CONVERT_TIME_TO_HOURS)
{
	new result;

	switch(type)
	{
		case CONVERT_TIME_TO_MINUTES:
		{
			result = ((time - (time % 60)) - (to_time - (to_time % 60))) / 60;
		}
		case CONVERT_TIME_TO_HOURS:
		{
			result = ((time - (time % 3600)) - (to_time - (to_time % 3600))) / 3600;
		}
		case CONVERT_TIME_TO_DAYS:
		{
			result = ((time - (time % 86400)) - (to_time - (to_time % 86400))) / 86400;
		}
		default:
			result = -1;
	}
	return result;
}

stock ConvertUnixTime(unix_time, type = CONVERT_TIME_TO_SECONDS)
{
	switch(type)
	{
		case CONVERT_TIME_TO_SECONDS:
		{
			unix_time %= 60;
		}
		case CONVERT_TIME_TO_MINUTES:
		{
			unix_time = (unix_time / 60) % 60;
		}
		case CONVERT_TIME_TO_HOURS:
		{
			unix_time = (unix_time / 3600) % 24;
		}
		case CONVERT_TIME_TO_DAYS:
		{
			unix_time = (unix_time / 86400) % 30;
		}
		case CONVERT_TIME_TO_MONTHS:
		{
			unix_time = (unix_time / 2629743) % 12;
		}
		case CONVERT_TIME_TO_YEARS:
		{
			unix_time = (unix_time / 31556926) + 1970;
		}
		default:
			unix_time %= 60;
	}
	return unix_time;
}

stock CheckPlayerFlood(playerid, bool:inc = true, max_rate = MAX_FLOOD_RATE, rate_inc = FLOOD_RATE_INC, kick_rate = FLOOD_RATE_KICK)
{
	new tick = GetTickCount();

	AddPlayerAntiFloodData(playerid, AF_RATE, +, inc ? rate_inc : 0);
	AddPlayerAntiFloodData(playerid, AF_RATE, -, (GetTickCount() - GetPlayerAntiFloodData(playerid, AF_LAST_TICK)));
	SetPlayerAntiFloodData(playerid, AF_LAST_TICK, tick);

	if(GetPlayerAntiFloodData(playerid, AF_RATE) < 0)
		SetPlayerAntiFloodData(playerid, AF_RATE, 0);

	if(GetPlayerAntiFloodData(playerid, AF_RATE) >= max_rate)
	{
		if(GetPlayerAntiFloodData(playerid, AF_RATE) >= kick_rate)
		{
			Kick:(playerid, _, 10);
		}
		return 1;
	}
	return 0;
}

stock ShowPhoneBookOperation(playerid, operationid, contactid=0)
{
	switch(operationid)
	{
		case PHONE_BOOK_OPERATION_OPTIONS:
		{
			SetPlayerPhoneBookSelectContact(playerid, GetPlayerListitemValue(playerid, contactid));

			Dialog
			(
				playerid, DIALOG_PHONE_BOOK_OPTION, DIALOG_STYLE_LIST,
				"{FFCD00}Варианты",
				"1. Позвонить\n"\
				"2. Отправить SMS сообщение\n"\
				"3. Изменить имя контакта\n"\
				"4. Изменить номер контакта\n"\
				"5. Удалить контакт",
				"Выбрать", "Назад"
			);
		}
		case PHONE_BOOK_OPERATION_CALL:
		{
			new number[11]; // TODO
			format(number, sizeof number, "%d", GetPlayerPhoneBook(playerid, contactid, PB_NUMBER));
			callcmd::call(playerid, number);
		}
		case PHONE_BOOK_OPERATION_SEND_SMS:
		{
			Dialog
			(
				playerid, DIALOG_PHONE_BOOK_SEND_SMS, DIALOG_STYLE_INPUT,
				"{FFCD00}Отправка SMS сообщения",
				"{FFFFFF}-\t\t\tВведите текст SMS сообщения:\t\t-",
				"Отправить", "Назад"
			);
		}
		case PHONE_BOOK_OPERATION_CHANGE_NAM:
		{
			Dialog
			(
				playerid, DIALOG_PHONE_BOOK_CHANGE_NAME, DIALOG_STYLE_INPUT,
				"{FFCD00}Изменение имени контакта",
				"{FFFFFF}Введите новое имя для контакта:",
				"Изменить", "Назад"
			);
		}
		case PHONE_BOOK_OPERATION_CHANGE_NUM:
		{
			Dialog
			(
				playerid, DIALOG_PHONE_BOOK_CHANGE_NUMBER, DIALOG_STYLE_INPUT,
				"{FFCD00}Изменение номера контакта",
				"{FFFFFF}Введите новый номер для контакта:",
				"Изменить", "Назад"
			);
		}
		case PHONE_BOOK_OPERATION_DELETE_CON:
		{
			if(GetPlayerPhoneBook(playerid, contactid, PB_SQL_ID))
			{
				new query[80];

				format(query, sizeof query, "DELETE FROM phone_books WHERE id=%d LIMIT 1", GetPlayerPhoneBook(playerid, contactid, PB_SQL_ID));
				mysql_query(mysql, query, false);

				SetPlayerPhoneBookInitStatus(playerid, false);
				SendClientMessage(playerid, 0xFF9030FF, "Контакт удален с памяти телефона");
			}
		}
	}
}

stock AddPhoneBookContact(playerid, name[], number[])
{
	if(!IsPlayerPhoneBookInit(playerid))
	{
		InitPlayerPhoneBook(playerid);
	}
	if(GetPlayerPhoneBookContacts(playerid) < MAX_PHONE_BOOK_CONTACTS)
	{
		if(!CheckPhoneBookUsedNumber(playerid, number))
		{
			new fmt_str[128];
			SetPlayerPhoneBookInitStatus(playerid, false);

			format(fmt_str, sizeof fmt_str, "Вы добавили %s (тел. %s) в свой список контактов", name, number);
			SendClientMessage(playerid, 0x33FF66FF, fmt_str);

			mysql_format(mysql, fmt_str, sizeof fmt_str, "INSERT INTO phone_books (owner_id,name,number,time) VALUES (%d,'%e','%e',%d)", GetPlayerAccountID(playerid), name, number, gettime());
			mysql_query(mysql, fmt_str, false);
		}
	}
	return 1;
}

stock CheckPhoneBookUsedNumber(playerid, number[])
{
	for(new idx, len; idx < MAX_PHONE_BOOK_CONTACTS; idx ++)
	{
		if(!GetPlayerPhoneBook(playerid, idx, PB_SQL_ID)) continue;

		len = strlen(GetPlayerPhoneBook(playerid, idx, PB_NUMBER));
		if(len && !strcmp(GetPlayerPhoneBook(playerid, idx, PB_NUMBER), number, true))
		{
			new fmt_str[64];
			format(fmt_str, sizeof fmt_str, "{FFFFFF}Номер %s уже записан для контакта %s", number, GetPlayerPhoneBook(playerid, idx, PB_NAME));
			Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FF6633}Ошибка", fmt_str, "Закрыть", "");

			return 1;
		}
	}
	return 0;
}

stock InitPlayerPhoneBook(playerid)
{
	if(!IsPlayerPhoneBookInit(playerid))
	{
		new query[80];
		new Cache: result, rows;

		format(query, sizeof query, "SELECT * FROM phone_books WHERE owner_id=%d ORDER BY id DESC LIMIT %d", GetPlayerAccountID(playerid), MAX_PHONE_BOOK_CONTACTS);
		result = mysql_query(mysql, query);

		rows = cache_num_rows();
		for(new idx; idx < MAX_PHONE_BOOK_CONTACTS; idx ++)
		{
			if(idx < rows)
			{
				SetPlayerPhoneBook(playerid, idx, PB_SQL_ID, cache_get_row_int(idx, 0));

				cache_get_row(idx, 2, g_player_phone_book[playerid][idx][PB_NAME], mysql, 21);
				cache_get_row(idx, 3, g_player_phone_book[playerid][idx][PB_NUMBER], mysql, 9);

				SetPlayerPhoneBook(playerid, idx, PB_TIME, cache_get_row_int(idx, 4));
				continue;
			}
			ClearPlayerPhoneBookContact(playerid, idx);
		}
		cache_delete(result);

		SetPlayerPhoneBookContacts(playerid, rows);
		SetPlayerPhoneBookInitStatus(playerid, true);
	}
	return 1;
}

stock ClearPlayerPhoneBookContact(playerid, contactid)
{
	SetPlayerPhoneBook(playerid, contactid, PB_SQL_ID, 	0);
	SetPlayerPhoneBook(playerid, contactid, PB_NAME, 	0);
	SetPlayerPhoneBook(playerid, contactid, PB_NUMBER, 	0);
	SetPlayerPhoneBook(playerid, contactid, PB_TIME, 	0);
}

stock GetPlayerIDByPhone(number)
{
	new playerid = INVALID_PLAYER_ID;

	if(1000 <= number <= 9999999)
	{
		foreach(new i : Player)
		{
			if(!IsPlayerLogged(i)) continue;
			if(number != GetPlayerPhone(i)) continue;

			playerid = i;
			break;
		}
	}
	return playerid;
}

stock CheckPlayerTempJobState(playerid)
{
	new job = GetPlayerTempJob(playerid);
	new j_state = GetPlayerTempJobState(playerid);

	//new s_action = GetPlayerSpecialAction(playerid);

	switch(job)
	{
		case TEMP_JOB_MINER:
		{
			if(j_state == TEMP_JOB_STATE_MINER_DROP_LOAD) // || s_action != SPECIAL_ACTION_NONE
			{
				SetPlayerTempJobCheckAnim(playerid, false);
				SetPlayerTempJobState(playerid, TEMP_JOB_STATE_MINER_LOAD);

				RemovePlayerAttachedObjects(playerid);
				ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 0);

		//tPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 18634, A_OBJECT_BONE_RIGHT_HAND, 0.07, 0.03, 0.04, 0.0, 270.0, 270.0, 1.5, 2.1, 1.8, 0);

				SetPlayerData(playerid, P_USE_ANIM_TYPE, USE_ANIM_TYPE_NONE);
				SetPlayerMinerJobLoadCP(playerid);

				SendClientMessage(playerid, 0xFF6600FF, "Вы сломали тележку");
			}
		}
		case TEMP_JOB_FACTORY:
		{
			if(j_state == TEMP_JOB_STATE_FACTORY_DROP_P)
			{
				FactoryPlayerDrop(playerid, false);
			}
		}
		case TEMP_JOB_LUMBERJACK:
		{
			if(j_state == TEMP_JOB_STATE_LUMBERJACK_DROP)
			{
				LumberJackPlayerDrop(playerid, true);
			}
		}
	}
}

stock ChangePlayerName(playerid, name[], bool: non_rp_nick = false)
{
	new query[128];
	new Cache: result, rows;

	mysql_format(mysql, query, sizeof query, "SELECT id FROM accounts WHERE name='%e' LIMIT 1", name);
	result = mysql_query(mysql, query);

	rows = cache_num_rows();
	cache_delete(result);

	if(3 <= strlen(name) <= 20 && !rows)
	{
		mysql_format(mysql, query, sizeof query, "UPDATE accounts SET name='%e' WHERE id=%d LIMIT 1", name, GetPlayerAccountID(playerid));
		mysql_query(mysql, query, false);

		if(!mysql_errno())
		{
			mysql_format(mysql, query, sizeof query, "INSERT INTO change_names (owner_id,name,time,ip) VALUES (%d,'%e',%d,'%e')", GetPlayerAccountID(playerid), GetPlayerNameEx(playerid), gettime(), GetPlayerIpEx(playerid));
			mysql_query(mysql, query, false);

			format(query, sizeof query, "%s сменил %s на %s", GetPlayerNameEx(playerid), non_rp_nick ? "нон-рп имя" : "имя", name);

			format(g_player[playerid][P_NAME], 21, "%s", name);
			SetPlayerName(playerid, GetPlayerNameEx(playerid));

			SendClientMessageToAll(0xCCFF00FF, query);
			UpdateCharity();

			new buffer;
			if((buffer = GetPlayerFuelStation(playerid)) != -1)
			{
				format(g_fuel_station[buffer][FS_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
				CallLocalFunction("UpdateFuelStationLabel", "i", buffer);
			}
			if((buffer = GetPlayerBusiness(playerid)) != -1)
			{
				format(g_business[buffer][B_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
				CallLocalFunction("UpdateBusinessLabel", "i", buffer);
			}
			if((buffer = GetPlayerHouse(playerid, HOUSE_TYPE_HOME)) != -1)
			{
				format(g_house[buffer][H_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
			}
			if((buffer = GetPlayerHouse(playerid, HOUSE_TYPE_ROOM)) != -1)
			{
				new room = GetPlayerData(playerid, P_HOUSE_ROOM);
				format(g_house_renters[buffer][room][HR_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
			}
			if((buffer = GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL)) != -1)
			{
				new room = GetPlayerData(playerid, P_HOUSE_ROOM);
				format(g_hotel[buffer][room][H_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
			}
			return 1;
		}
	}
	return 0;
}



stock EndPlayerTempJob(playerid, job, bool:annul = false)
{
	print("EndPlayerTempJob");
	if(GetPlayerTempJob(playerid) == job)
	{
		printf("GetPlayerTempJob(%d) == job(%d)", GetPlayerTempJob(playerid), job);
		SetPlayerTempJobCheckAnim(playerid, false);

	//	RemovePlayerAttachedObjects(playerid);
		SetPlayerSkinInit(playerid);

		new items = GetPlayerJobLoadItems(playerid);
		new pay_sum = items * 80;

		if(g_doubling[DOUBLING_WAGE])
			pay_sum = pay_sum * 2;

		new fmt_str[128];
		switch(job)
		{
			case TEMP_JOB_LOADER:
			{
				DisablePlayerCheckpoint(playerid);
				DisablePlayerRaceCheckpoint(playerid);

				TogglePlayerDynamicCP(playerid, help_info_CP, true);

				if(!annul)
				{
					new ts_pay = false;
					if(pay_sum > 0)
						format(fmt_str, sizeof fmt_str, ". Заработано {FFFF00}%d руб.", pay_sum);

					strins(fmt_str, "[Информация]: "c_server"Рабочий день завершен", 0, sizeof fmt_str);
					SendClientMessage(playerid, COR_SERVER, fmt_str);

					if(ts_pay)
					{
						format(fmt_str, sizeof fmt_str, "%d руб {3399FF}за работу на погрузчике", pay_sum);
						SendClientMessage(playerid, 0xFFFF00FF, fmt_str);
					}

					if(pay_sum > 0)
						GivePlayerMoneyEx(playerid, pay_sum, "Зарплата на работе грузчика", true, false);

					format(fmt_str, sizeof fmt_str, "~b~~h~+%d rub", pay_sum);
					GameTextForPlayer(playerid, fmt_str, 4000, 1);
				}
				/*else SendClientMessage(playerid, 0xFF6600FF, "Вы покинули территорию склада. Заработок был аннулирован");

				items = GetPlayerVehicleID(playerid); // в items временно хранится ид авто
				if(GetVehicleData(items, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_LOADER)
				{
					SetVehicleToRespawn(items);
				}
				ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 0, USE_ANIM_TYPE_NONE);*/
			}
			case TEMP_JOB_MINER:
			{
				DisablePlayerCheckpoint(playerid);

				if(!annul)
				{
					if(items > 0)
					{
						format(fmt_str, sizeof fmt_str, "Рабочий день завершен. Вы добыли %d кг руды", items);
						SendClientMessage(playerid, 0x3399FFFF, fmt_str);

						format(fmt_str, sizeof fmt_str, "Всего заработано %d руб", pay_sum);
						SendClientMessage(playerid, 0x3399FFFF, fmt_str);

						GivePlayerMoneyEx(playerid, pay_sum, "Зарплата на работе шахтера", true, false);

						format(fmt_str, sizeof fmt_str, "~b~~h~+%d rub", pay_sum);
						GameTextForPlayer(playerid, fmt_str, 4000, 1);
					}
					else SendClientMessage(playerid, 0x3399FFFF, "Рабочий день завершен");
				}
				else SendClientMessage(playerid, 0xFF6600FF, "Вы покинули территорию шахты. Заработок был аннулирован");

				ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 0, USE_ANIM_TYPE_NONE);
			}
			case TEMP_JOB_FACTORY:
			{
				pay_sum = GetPlayerJobWage(playerid);

				new bad_items = GetPVarInt(playerid, "factory_bad_prods");
				new skill = GetPVarInt(playerid, "factory_skill");
				new waste_sum = bad_items * (random(16) + 5);

				if(!annul)
				{
					SendClientMessage(playerid, 0x3399FFFF, "Рабочий день завершен");
					if(pay_sum > 0 && waste_sum < pay_sum)
					{
						format(fmt_str, sizeof fmt_str, "Всего создано {FFFF00}%d {66CC00}продуктов, забракованно {FFFF00}%d шт.", items, bad_items) ;
						SendClientMessage(playerid, 0x66CC00FF, fmt_str);

						if(skill > 0)
						{
							format(fmt_str, sizeof fmt_str, "Рабочий навык увеличился {66CCFF}на %d единиц(ы)", skill);
						}
						else fmt_str = "Рабочий навык не изменился";
						SendClientMessage(playerid, 0x66CC00FF, fmt_str);

						format(fmt_str, sizeof fmt_str, "Заработано {00CC00}%d руб, {FFFFFF}из них {FF6600}%d руб {FFFFFF}- штраф за брак продуктов", pay_sum, waste_sum);
						SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

						pay_sum -= waste_sum;
						format(fmt_str, sizeof fmt_str, "~b~~h~+%d rub", pay_sum);
						GameTextForPlayer(playerid, fmt_str, 4000, 1);

						GivePlayerMoneyEx(playerid, pay_sum, "Зарплата на работе в цеху (завод)", true, false);
					}
				}
				else SendClientMessage(playerid, 0xFF6600FF, "Вы покинули территорию завода. Выручка была аннулирована");

				skill = GetPlayerData(playerid, P_FACTORY_USE_DESK);
				SetPlayerFactoryDeskUse(playerid, skill, false);
			}
			case TEMP_JOB_LUMBERJACK:
			{
				DisablePlayerCheckpoint(playerid);

				if(!annul)
				{
					if(items > 0)
					{
						format(fmt_str, sizeof fmt_str, "Рабочий день завершен. Вы принесли %d шт дров", items);
						SendClientMessage(playerid, 0x3399FFFF, fmt_str);

						format(fmt_str, sizeof fmt_str, "Всего заработано %d руб", pay_sum);
						SendClientMessage(playerid, 0x3399FFFF, fmt_str);

						GivePlayerMoneyEx(playerid, pay_sum, "Зарплата на работе лесоруба", true, false);

						format(fmt_str, sizeof fmt_str, "~b~~h~+%d rub", pay_sum);
						GameTextForPlayer(playerid, fmt_str, 4000, 1);
					}
					else SendClientMessage(playerid, 0x3399FFFF, "Рабочий день завершен");
				}
				else SendClientMessage(playerid, 0xFF6600FF, "Вы покинули территорию лесопилки. Заработок был аннулирован");

				ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 0, USE_ANIM_TYPE_NONE);
			}
		}

		SetPlayerJobLoadItems(playerid, 0);
		SetPlayerData(playerid, P_JOB_WAGE, 0);
		SetPlayerTempJob(playerid, TEMP_JOB_NONE);
		
		AddPlayerData(playerid, P_TOP_1, +, pay_sum);
		UpdatePlayerDatabaseInt(playerid, "TOP_SalaryNewWork", GetPlayerData(playerid, P_TOP_1));
	}
}

stock TogglePlayerFactoryCP(playerid, toggle)
{
	for(new idx; idx < sizeof factory_desk; idx ++)
	{
		TogglePlayerDynamicCP(playerid, factory_desk[idx][FD_CHEK_ID], toggle);
	}
}

stock KillEndJobTimer(playerid)
{
	KillTimer(GetPlayerData(playerid, P_END_JOB_TIMER));
	SetPlayerData(playerid, P_END_JOB_TIMER, -1);
}

stock StartEndJobTimer(playerid, time = 15_000)
{
	if(GetPlayerData(playerid, P_END_JOB_TIMER) == -1)
		SetPlayerData(playerid, P_END_JOB_TIMER, SetTimerEx("EndPlayerJob", time, false, "i", playerid));
}

stock ShowPlayerBuyMetalDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_MINER_BUY_METALL, DIALOG_STYLE_INPUT,
		"{FFCD00}Покупка металла",
		"{FFFFFF}Сколько кг металла вы хотите купить?\n"\
		"{00CC00}Цена за кг: 15 рублей",
		"Купить", "Отмена"
	);
}

stock SetPlayerMinerJobLoadCP(playerid)
{
    if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER)
    {
        new rand = random(sizeof miner_job_chop_cp);
        SetPlayerCheckpoint(playerid, miner_job_chop_cp[rand][0], miner_job_chop_cp[rand][1], miner_job_chop_cp[rand][2], 2.0, CP_ACTION_TYPE_MINER_JOB_TAKE);
        SetPlayerTempJobState(playerid, TEMP_JOB_STATE_MINER_LOAD);
    }
}

stock SetPlayerMinerJobUnLoadCP(playerid)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER)
	{
		SetPlayerCheckpoint(playerid, 560.3134,509.3524,998.6719, 2.0, CP_ACTION_TYPE_MINER_JOB_PUT);

		SetPlayerTempJobState(playerid, TEMP_JOB_STATE_MINER_UNLOAD);
	}
}

public: SetPlayerLoaderJobUnLoadCP(playerid) // установить чекпоинт где ложить груз
{
    if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADER)
    {
        new rand = random(sizeof loader_job_unload_cp);

        SetPlayerCheckpoint(playerid, loader_job_unload_cp[rand][0], loader_job_unload_cp[rand][1], loader_job_unload_cp[rand][2], 2.0, CP_ACTION_TYPE_LOADER_JOB_PUT);
        //SetPlayerCheckpoint(playerid, 622.3066, 1664.1621, 12.1726, 2.0);
		SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LOADER_UNLOAD);

        SetPlayerTempJobCheckAnim(playerid, true);
    }
}

public: SetPlayerLoaderJobLoadCP(playerid) // установить чекпоинт где брать груз
{
    if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADER)
    {
        new rand = random(sizeof loader_get_cp);

        SetPlayerTempJobCheckAnim(playerid, false);

        SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LOADER_LOAD);
        SetPlayerCheckpoint(playerid, loader_get_cp[rand][0], loader_get_cp[rand][1], loader_get_cp[rand][2], 2.0, CP_ACTION_TYPE_LOADER_JOB_TAKE);
    }
}

stock SetPlayerLumberJackChopCP(playerid)
{
	new rand = random(sizeof lumberjack_job_chop_cp);

	SetPlayerCheckpoint(playerid, lumberjack_job_chop_cp[rand][0], lumberjack_job_chop_cp[rand][1], lumberjack_job_chop_cp[rand][2], 2.0, CP_ACTION_TYPE_LUMBERJACK_TAKE);
}

stock SetPlayerLumberUnJackChopCP(playerid)
{
	SetPlayerCheckpoint(playerid, 2239.7788,496.8613,15.7230, 2.0, CP_ACTION_TYPE_LUMBERJACK_PUT);
}

stock ShowPlayerDrivingTutorial(playerid)
{
	Dialog
	(
		playerid, DIALOG_DRIVING_TUTORIAL_START, DIALOG_STYLE_MSGBOX,
		"{0099FF}Введение",
		"{FFFFFF}Это пособие поможет вам хорошо подготовиться\n"\
		"к экзамену по вождению\n\n"\
		"{CC9900}Для того, чтобы начать обучение нажмите \"Далее\"",
		"Далее", "Отмена"
	);
	return 1;
}

stock ShowDrivingTutorialSection(playerid, step)
{
	if(0 <= step <= sizeof driving_tutorial-1)
	{
		Dialog
		(
			playerid, DIALOG_DRIVING_TUTORIAL, DIALOG_STYLE_MSGBOX,
			driving_tutorial[step][DT_TITLE],
			driving_tutorial[step][DT_INFO],
			"Далее", "Назад"
		);
		SetPVarInt(playerid, "driving_tutorial_step", step);
	}
}

stock ShowPlayerDrivingExam(playerid, step)
{
	if(0 <= step <= sizeof driving_exam - 1)
	{
		Dialog
		(
			playerid, DIALOG_DRIVING_EXAM, DIALOG_STYLE_LIST,
			driving_exam[step][DE_TITLE],
			driving_exam[step][DE_LIST_ITEMS],
			"Ответить", ""
		);
		SetPlayerDrivingExamInfo(playerid, DE_EXAM_STEP, step);
	}
	else if(step >= sizeof driving_exam)
	{
		new points = GetPlayerDrivingExamInfo(playerid, DE_POINTS);
		SetPlayerDrivingExamInfo(playerid, DE_EXAM_STEP, 0);
		SetPlayerDrivingExamInfo(playerid, DE_ROUTE_STEP, 0);

		if(points >= 9)
			SetPlayerData(playerid, P_DRIVING_LIC, 1);

		new fmt_str[256];
		format(fmt_str, sizeof fmt_str, "{FFFFFF}Количество правильных ответов: {66CC00}%d\n\n", points);

		if(points == 9)
		{
			strcat
			(
				fmt_str,
				"{6699FF}Поздравляем!\n"\
				"Вы набрали минимальное количество баллов, чтобы приступить ко второй части экзамена!"
			);
		}
		else if(points >= 10)
		{
			static const
				medal_name[3][12] = {"бронзовую", "серебрянную", "золотую"};

			format(fmt_str, sizeof fmt_str, "%s{6699FF}Поздравляем!\nВы получаете %s медаль за теоретическую часть экзамена!", fmt_str, medal_name[points - 10]);
		}
		else
		{
			ClearPlayerDrivingExamInfo(playerid);
			strcat
			(
				fmt_str,
				"{FF6600}К сожалению вы не набрали необходимого количества баллов\n"\
				"В следующий раз внимательно прочитайте обучающий раздел\n"\
				"Ждем вас на пересдаче!"
			);
		}

		Dialog
		(
			playerid, DIALOG_DRIVING_EXAM_RESULT, DIALOG_STYLE_MSGBOX,
			"{FFFF00}Результаты теоретической части",
			fmt_str,
			"Ок", ""
		);
	}
	return 1;
}

stock NextDrivingExamRouteCP(playerid)
{
	new step = GetPlayerDrivingExamInfo(playerid, DE_ROUTE_STEP);

	SetPlayerRaceCheckpoint
	(
		playerid,
		0,
		driving_exam_route[step][0],
		driving_exam_route[step][1],
		driving_exam_route[step][2],
		driving_exam_route[step + 1][0],
		driving_exam_route[step + 1][1],
		driving_exam_route[step + 1][2],
		4.0,
		RCP_ACTION_TYPE_DRIVING_EXAM
	);
	SetPlayerDrivingExamInfo(playerid, DE_ROUTE_STEP, step + 1);
}

stock GetPlayerSpeed(playerid)
{
	new Float: x, Float: y, Float: z;
	if(IsPlayerInAnyVehicle(playerid))
	{
		GetVehicleVelocity(GetPlayerVehicleID(playerid), x, y, z);
	}
	else GetPlayerVelocity(playerid, x, y, z);

	return floatround(floatsqroot(x*x+y*y+z*z)*100);
}

stock SetVehicleSpeed(vehicleid, Float: speed)
{
	if(vehicleid != INVALID_VEHICLE_ID)
	{
		new Float: x,
			Float: y,
			Float: z,
			Float: angle;

		GetVehicleVelocity(vehicleid, x, y, z);
		GetVehicleZAngle(vehicleid, angle);

		speed /= 100.0;
        x = speed * floatsin(-angle, degrees);
        y = speed * floatcos(-angle, degrees);

        return SetVehicleVelocity(vehicleid, x, y, z - speed / 1000.0);

/*
		speed = floatsqroot(x*x+y*y+z*z);

		if(speed > 0)
		{
			multiple = (kmh / (speed * 100));

			return SetVehicleVelocity(vehicleid, x * multiple, y * multiple, z * multiple);
		}
*/
	}

	return 0;
}

/*
stock SetVehicleSpeed(vehicleid, Float: kmh)
{
      new Float:Vx, Float:Vy, Float:Vz ,Float:speeds, Float:multiple;
      GetVehicleVelocity(vehicleid,Vx,Vy,Vz);
      speeds = floatsqroot(Vx*Vx + Vy*Vy + Vz*Vz);
      if(speeds > 0)
      {
          multiple = (mph / (speeds * 250));
          return SetVehicleVelocity(vehicleid, Vx*multiple, Vy*multiple, Vz*multiple);
      }
      return 0;
}

stock SetVehicleSpeed(vehicleid, Float:Speed)
{
        new
            Float:X,
            Float:Y,
            Float:Z,
            Float:Angle;

        GetVehicleZAngle(vehicleid, Angle);
        Speed = Speed/200;
        X = Speed * floatsin(-Angle, degrees);
        Y = Speed * floatcos(-Angle, degrees);
        SetVehicleVelocity(vehicleid, X, Y, Z);
}
*/
stock IsPlayerDriver(playerid) // сидит ли игрок за рулем ТС
{
	return (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER);
}

stock IsPlayerPassenger(playerid) // сидит ли игрок как пассажир
{
	return (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_PASSENGER);
}

stock Speedometr01ShowForPlayer(playerid)
{
	//for(new idx; idx < sizeof speedometr_PTD[]; idx ++)
	//	PlayerTextDrawShow(playerid, speedometr_PTD[playerid][idx]);
	PlayerTextDrawShow(playerid, speedometr_PTD[playerid][0]);
	PlayerTextDrawShow(playerid, speedometr_PTD[playerid][1]);
	PlayerTextDrawShow(playerid, speedometr_PTD[playerid][2]);
	PlayerTextDrawShow(playerid, speedometr_PTD[playerid][3]);
	PlayerTextDrawShow(playerid, speedometr_PTD[playerid][4]);
	PlayerTextDrawShow(playerid, speedometr_PTD[playerid][5]);
	PlayerTextDrawShow(playerid, speedometr_PTD[playerid][6]);
	PlayerTextDrawShow(playerid, speedometr_PTD[playerid][7]);
		
    for(new idx; idx < sizeof speedometr_TD; idx ++)
		TextDrawShowForPlayer(playerid, speedometr_TD[idx]);
}

stock SpeedometrHideForPlayer(playerid)
{
	for(new idx; idx < sizeof speedometr_PTD[]; idx ++)
		PlayerTextDrawHide(playerid, speedometr_PTD[playerid][idx]);
		
    for(new idx; idx < sizeof speedometr_TD; idx ++)
		TextDrawHideForPlayer(playerid, speedometr_TD[idx]);
		
    for(new idx; idx < sizeof speedometr02_PTD[]; idx ++)
		PlayerTextDrawHide(playerid, speedometr02_PTD[playerid][idx]);

    for(new idx; idx < sizeof speedometr02_TD; idx ++)
		TextDrawHideForPlayer(playerid, speedometr02_TD[idx]);

}

stock CreateSpeedometr01ForPlayer(playerid)
{
	speedometr_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 273.3996, 377.2600, "Sheatch_A"); // ?????
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][0], 0.1602, 0.6442);
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][0], -58.0000, 0.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][0], -2147483393);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][0], 0);

	speedometr_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 276.1997, 384.3466, "0"); // ?????
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][1], 0.4731, 2.2022);
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][1], 2.0000, 0.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][1], -16776961);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][1], 0);

	speedometr_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 338.6995, 407.5964, "100_L"); // ?????
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][2], 0.1558, 0.8732);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][2], 0);

	speedometr_PTD[playerid][3] = CreatePlayerTextDraw(playerid, 365.1012, 407.2963, "100_%"); // ?????
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][3], 0.1578, 0.8732);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][3], 0);

	speedometr_PTD[playerid][4] = CreatePlayerTextDraw(playerid, 346.7994, 364.3417, "."); // ?????
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][4], 0.6183, 2.7697);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][4], 16711935);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][4], 0);

	speedometr_PTD[playerid][5] = CreatePlayerTextDraw(playerid, 372.5010, 364.3417, "."); // ?????
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][5], 0.6183, 2.7697);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][5], 16711935);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][5], 0);

	speedometr_PTD[playerid][6] = CreatePlayerTextDraw(playerid, 364.7669, 370.6374, "."); // ?????
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][6], 0.6183, 2.7697);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][6], 16711935);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][6], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][6], 2);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][6], 0);

	speedometr_PTD[playerid][7] = CreatePlayerTextDraw(playerid, 293.9000, 415.2975, "00000_km"); // ?????
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][7], 0.0915, 0.6686);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][7], 2);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][7], -1378294017);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][7], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][7], 2);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][7], 0);


/*	speedometr_PTD[playerid][0] = CreatePlayerTextDrawBeta(playerid, 484.7380, 415.1671, "LD_BEAT:chit"); // пусто
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][0], 19.0000, 22.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][0], 7849983);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][0], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][0], 0);

	speedometr_PTD[playerid][1] = CreatePlayerTextDrawBeta(playerid, 517.0651, 415.1671, "LD_BEAT:chit"); // пусто
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][1], 19.0000, 22.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][1], 7849983);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][1], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][1], 0);

	speedometr_PTD[playerid][2] = CreatePlayerTextDrawBeta(playerid, 493.6398, 418.6671, "LD_SPAC:white"); // пусто
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][2], 33.0000, 15.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][2], 7849983);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][2], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][2], 0);

	speedometr_PTD[playerid][3] = CreatePlayerTextDrawBeta(playerid, 468.8080, 369.0837, "LD_BEAT:chit"); // пусто
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][3], 19.0000, 22.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][3], 7849983);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][3], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][3], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][3], 0);

	speedometr_PTD[playerid][4] = CreatePlayerTextDrawBeta(playerid, 501.1361, 369.0837, "LD_BEAT:chit"); // пусто
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][4], 19.0000, 22.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][4], 7849983);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][4], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][4], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][4], 0);

	speedometr_PTD[playerid][5] = CreatePlayerTextDrawBeta(playerid, 477.7098, 372.5837, "LD_SPAC:white"); // пусто
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][5], 33.0000, 15.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][5], 7849983);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][5], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][5], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][5], 0);

	speedometr_PTD[playerid][6] = CreatePlayerTextDrawBeta(playerid, 485.8424, 373.1666, "/"); // пусто
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][6], -1.2244, 4.0616);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][6], 7849983);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][6], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][6], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][6], 0);

	speedometr_PTD[playerid][7] = CreatePlayerTextDrawBeta(playerid, 493.8073, 395.9166, "/"); // пусто
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][7], -1.2244, 4.0616);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][7], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][7], 7849983);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][7], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][7], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][7], 0);

	speedometr_PTD[playerid][8] = CreatePlayerTextDrawBeta(playerid, 525.1973, 368.5002, "/"); // пусто
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][8], -1.2244, 4.0616);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][8], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][8], 7849983);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][8], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][8], 1);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][8], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][8], 0);

	speedometr_PTD[playerid][9] = CreatePlayerTextDrawBeta(playerid, 532.6939, 390.0833, "/"); // пусто
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][9], -1.2244, 4.0616);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][9], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][9], 7849983);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][9], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][9], 1);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][9], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][9], 0);

	speedometr_PTD[playerid][10] = CreatePlayerTextDrawBeta(playerid, 504.1156, 362.0835, "/"); // пусто
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][10], -2.6354, 8.3198);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][10], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][10], 7849983);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][10], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][10], 1);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][10], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][10], 0);

	speedometr_PTD[playerid][11] = CreatePlayerTextDrawBeta(playerid, 533.1632, 361.5002, "/"); // пусто
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][11], -2.6354, 8.3198);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][11], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][11], 7849983);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][11], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][11], 1);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][11], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][11], 0);

	speedometr_PTD[playerid][12] = CreatePlayerTextDrawBeta(playerid, 512.5490, 361.5002, "/"); // пусто
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][12], -2.6354, 8.3198);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][12], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][12], 7849983);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][12], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][12], 1);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][12], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][12], 0);

	speedometr_PTD[playerid][13] = CreatePlayerTextDrawBeta(playerid, 526.6032, 365.5833, "/"); // пусто
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][13], -2.6354, 8.3198);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][13], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][13], 7849983);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][13], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][13], 1);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][13], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][13], 0);

	speedometr_PTD[playerid][14] = CreatePlayerTextDrawBeta(playerid, 521.4497, 366.1666, "/"); // пусто
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][14], -2.6354, 8.3198);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][14], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][14], 7849983);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][14], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][14], 1);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][14], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][14], 0);

	speedometr_PTD[playerid][15] = CreatePlayerTextDrawBeta(playerid, 525.6649, 374.9165, "/"); // пусто
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][15], -0.5655, 1.9033);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][15], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][15], 724249599);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][15], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][15], 1);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][15], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][15], 0);

	speedometr_PTD[playerid][16] = CreatePlayerTextDrawBeta(playerid, 609.5313, 373.1665, "/"); // пусто
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][16], -0.5655, 1.9033);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][16], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][16], 724249599);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][16], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][16], 1);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][16], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][16], 0);

	speedometr_PTD[playerid][17] = CreatePlayerTextDrawBeta(playerid, 521.2802, 383.0834, "LD_BEAT:chit"); // пусто
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][17], 9.0000, 11.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][17], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][17], 724249599);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][17], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][17], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][17], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][17], 0);

	speedometr_PTD[playerid][18] = CreatePlayerTextDrawBeta(playerid, 518.0006, 373.1664, "LD_BEAT:chit"); // пусто
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][18], 9.0000, 11.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][18], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][18], 724249599);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][18], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][18], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][18], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][18], 0);

	speedometr_PTD[playerid][19] = CreatePlayerTextDrawBeta(playerid, 601.3983, 383.0834, "LD_BEAT:chit"); // пусто
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][19], 9.0000, 11.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][19], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][19], 724249599);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][19], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][19], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][19], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][19], 0);

	speedometr_PTD[playerid][20] = CreatePlayerTextDrawBeta(playerid, 598.1187, 373.1668, "LD_BEAT:chit"); // пусто
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][20], 9.0000, 11.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][20], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][20], 724249599);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][20], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][20], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][20], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][20], 0);

	speedometr_PTD[playerid][21] = CreatePlayerTextDrawBeta(playerid, 522.6857, 374.9166, "LD_SPAC:white"); // пусто
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][21], 81.0000, 13.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][21], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][21], 724249599);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][21], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][21], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][21], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][21], 0);

	speedometr_PTD[playerid][22] = CreatePlayerTextDrawBeta(playerid, 525.0286, 379.5834, "LD_SPAC:white"); // пусто
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][22], 81.0000, 13.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][22], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][22], 724249599);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][22], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][22], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][22], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][22], 0);

	speedometr_PTD[playerid][23] = CreatePlayerTextDrawBeta(playerid, 532.6932, 394.7500, "/"); // пусто
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][23], -0.5655, 1.9033);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][23], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][23], 724249599);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][23], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][23], 1);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][23], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][23], 0);

	speedometr_PTD[playerid][24] = CreatePlayerTextDrawBeta(playerid, 616.5598, 393.0000, "/"); // пусто
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][24], -0.5655, 1.9033);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][24], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][24], 724249599);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][24], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][24], 1);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][24], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][24], 0);

	speedometr_PTD[playerid][25] = CreatePlayerTextDrawBeta(playerid, 528.3084, 402.9169, "LD_BEAT:chit"); // пусто
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][25], 9.0000, 11.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][25], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][25], 724249599);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][25], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][25], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][25], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][25], 0);

	speedometr_PTD[playerid][26] = CreatePlayerTextDrawBeta(playerid, 525.0286, 393.0000, "LD_BEAT:chit"); // пусто
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][26], 9.0000, 11.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][26], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][26], 724249599);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][26], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][26], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][26], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][26], 0);

	speedometr_PTD[playerid][27] = CreatePlayerTextDrawBeta(playerid, 608.4268, 402.9169, "LD_BEAT:chit"); // пусто
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][27], 9.0000, 11.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][27], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][27], 724249599);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][27], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][27], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][27], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][27], 0);

	speedometr_PTD[playerid][28] = CreatePlayerTextDrawBeta(playerid, 605.1469, 393.0003, "LD_BEAT:chit"); // пусто
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][28], 9.0000, 11.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][28], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][28], 724249599);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][28], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][28], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][28], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][28], 0);

	speedometr_PTD[playerid][29] = CreatePlayerTextDrawBeta(playerid, 529.7136, 394.7500, "LD_SPAC:white"); // пусто
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][29], 81.0000, 13.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][29], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][29], 724249599);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][29], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][29], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][29], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][29], 0);

	speedometr_PTD[playerid][30] = CreatePlayerTextDrawBeta(playerid, 532.0567, 399.4165, "LD_SPAC:white"); // пусто
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][30], 81.0000, 13.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][30], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][30], 724249599);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][30], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][30], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][30], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][30], 0);

	speedometr_PTD[playerid][31] = CreatePlayerTextDrawBeta(playerid, 539.2529, 414.5830, "/"); // пусто
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][31], -0.5655, 1.9033);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][31], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][31], 724249599);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][31], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][31], 1);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][31], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][31], 0);

	speedometr_PTD[playerid][32] = CreatePlayerTextDrawBeta(playerid, 623.1187, 412.8330, "/"); // пусто
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][32], -0.5655, 1.9033);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][32], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][32], 724249599);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][32], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][32], 1);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][32], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][32], 0);

	speedometr_PTD[playerid][33] = CreatePlayerTextDrawBeta(playerid, 534.8679, 422.7500, "LD_BEAT:chit"); // пусто
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][33], 9.0000, 11.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][33], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][33], 724249599);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][33], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][33], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][33], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][33], 0);

	speedometr_PTD[playerid][34] = CreatePlayerTextDrawBeta(playerid, 531.5880, 412.8330, "LD_BEAT:chit"); // пусто
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][34], 9.0000, 11.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][34], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][34], 724249599);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][34], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][34], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][34], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][34], 0);

	speedometr_PTD[playerid][35] = CreatePlayerTextDrawBeta(playerid, 614.9857, 422.7500, "LD_BEAT:chit"); // пусто
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][35], 9.0000, 11.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][35], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][35], 724249599);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][35], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][35], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][35], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][35], 0);

	speedometr_PTD[playerid][36] = CreatePlayerTextDrawBeta(playerid, 611.7061, 412.8334, "LD_BEAT:chit"); // пусто
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][36], 9.0000, 11.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][36], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][36], 724249599);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][36], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][36], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][36], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][36], 0);

	speedometr_PTD[playerid][37] = CreatePlayerTextDrawBeta(playerid, 536.2734, 414.5833, "LD_SPAC:white"); // пусто
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][37], 81.0000, 13.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][37], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][37], 724249599);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][37], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][37], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][37], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][37], 0);

	speedometr_PTD[playerid][38] = CreatePlayerTextDrawBeta(playerid, 538.6162, 419.2500, "LD_SPAC:white"); // пусто
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][38], 81.0000, 13.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][38], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][38], 724249599);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][38], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][38], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][38], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][38], 0);

	speedometr_PTD[playerid][39] = CreatePlayerTextDrawBeta(playerid, 501.7723, 385.4171, "120"); // пусто
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][39], 0.5321, 2.9941);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][39], 2);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][39], -1);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][39], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][39], 3);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][39], 1);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][39], 0);

	speedometr_PTD[playerid][40] = CreatePlayerTextDrawBeta(playerid, 499.4301, 412.2502, "km/h"); // пусто
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][40], 0.1488, 0.8241);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][40], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][40], -1);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][40], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][40], 2);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][40], 1);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][40], 0);

	speedometr_PTD[playerid][41] = CreatePlayerTextDrawBeta(playerid, 544.4066, 377.8327, "fuel:_50l"); // пусто
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][41], 0.1368, 0.7832);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][41], 2);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][41], -1);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][41], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][41], 2);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][41], 1);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][41], 0);

	speedometr_PTD[playerid][42] = CreatePlayerTextDrawBeta(playerid, 526.9028, 385.9996, "LD_SPAC:white"); // пусто
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][42], 36.0000, 2.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][42], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][42], 7849813);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][42], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][42], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][42], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][42], 0);

	speedometr_PTD[playerid][43] = CreatePlayerTextDrawBeta(playerid, 526.9028, 385.9996, "LD_SPAC:white"); // пусто
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][43], 25.0000, 2.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][43], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][43], 7849983);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][43], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][43], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][43], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][43], 0);

	speedometr_PTD[playerid][44] = CreatePlayerTextDrawBeta(playerid, 585.1677, 377.8330, "1000hp"); // пусто
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][44], 0.1368, 0.7832);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][44], 2);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][44], -1);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][44], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][44], 2);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][44], 1);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][44], 0);

	speedometr_PTD[playerid][45] = CreatePlayerTextDrawBeta(playerid, 567.1961, 385.9995, "LD_SPAC:white"); // пусто
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][45], 36.0000, 2.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][45], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][45], 7849813);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][45], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][45], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][45], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][45], 0);

	speedometr_PTD[playerid][46] = CreatePlayerTextDrawBeta(playerid, 567.1961, 385.9995, "LD_SPAC:white"); // пусто
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][46], 25.0000, 2.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][46], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][46], 7849983);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][46], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][46], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][46], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][46], 0);

	speedometr_PTD[playerid][47] = CreatePlayerTextDrawBeta(playerid, 542.3643, 426.8330, "LD_SPAC:white"); // пусто
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][47], 21.0000, 1.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][47], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][47], -1254211841);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][47], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][47], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][47], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][47], 0);

	speedometr_PTD[playerid][48] = CreatePlayerTextDrawBeta(playerid, 567.6649, 426.8330, "LD_SPAC:white"); // пусто
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][48], 21.0000, 1.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][48], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][48], -1254211841);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][48], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][48], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][48], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][48], 0);

	speedometr_PTD[playerid][49] = CreatePlayerTextDrawBeta(playerid, 592.9655, 426.8330, "LD_SPAC:white"); // пусто
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][49], 21.0000, 1.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][49], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][49], -1254211841);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][49], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][49], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][49], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][49], 0);

	speedometr_PTD[playerid][50] = CreatePlayerTextDrawBeta(playerid, 551.9031, 418.6665, "љўњ™."); // пусто
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][50], 0.1368, 0.7832);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][50], 2);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][50], -1);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][50], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][50], 2);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][50], 1);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][50], 0);

	speedometr_PTD[playerid][51] = CreatePlayerTextDrawBeta(playerid, 577.6723, 418.6665, "apЁ"); // пусто
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][51], 0.1368, 0.7832);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][51], 2);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][51], -1);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][51], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][51], 2);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][51], 1);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][51], 0);

	speedometr_PTD[playerid][52] = CreatePlayerTextDrawBeta(playerid, 603.4409, 418.6665, "љўepњ"); // пусто
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][52], 0.1368, 0.7832);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][52], 2);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][52], -1);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][52], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][52], 2);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][52], 1);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][52], 0);

	speedometr_PTD[playerid][53] = CreatePlayerTextDrawBeta(playerid, 572.9865, 399.4166, "meliage:_0km"); // пусто
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][53], 0.1368, 0.7832);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][53], 2);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][53], -1);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][53], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][53], 2);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][53], 1);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][53], 0);*/

}

stock Speedometr02ShowForPlayer(playerid)
{
	PlayerTextDrawShow(playerid, speedometr02_PTD[playerid][0]);
	PlayerTextDrawShow(playerid, speedometr02_PTD[playerid][1]);
	PlayerTextDrawShow(playerid, speedometr02_PTD[playerid][2]);
	PlayerTextDrawShow(playerid, speedometr02_PTD[playerid][3]);
	PlayerTextDrawShow(playerid, speedometr02_PTD[playerid][4]);
	PlayerTextDrawShow(playerid, speedometr02_PTD[playerid][5]);
	PlayerTextDrawShow(playerid, speedometr02_PTD[playerid][6]);
	PlayerTextDrawShow(playerid, speedometr02_PTD[playerid][7]);

    for(new idx; idx < sizeof speedometr02_TD; idx ++)
		TextDrawShowForPlayer(playerid, speedometr02_TD[idx]);
}

stock CreateSpeedometr02ForPlayer(playerid)
{

    speedometr02_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 284.0002, 370.9864, "Sheatch_A"); // ?????
	PlayerTextDrawLetterSize(playerid, speedometr02_PTD[playerid][0], 0.1442, 0.6392);
	PlayerTextDrawTextSize(playerid, speedometr02_PTD[playerid][0], -1.0000, 0.0000);
	PlayerTextDrawAlignment(playerid, speedometr02_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, speedometr02_PTD[playerid][0], -1061109505);
	PlayerTextDrawBackgroundColor(playerid, speedometr02_PTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, speedometr02_PTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, speedometr02_PTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, speedometr02_PTD[playerid][0], 0);

	speedometr02_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 283.8999, 380.1507, "000"); // ?????
	PlayerTextDrawLetterSize(playerid, speedometr02_PTD[playerid][1], 0.5735, 2.5308);
	PlayerTextDrawAlignment(playerid, speedometr02_PTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, speedometr02_PTD[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, speedometr02_PTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, speedometr02_PTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, speedometr02_PTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, speedometr02_PTD[playerid][1], 0);

	speedometr02_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 289.2998, 410.5108, "00000_km"); // ?????
	PlayerTextDrawLetterSize(playerid, speedometr02_PTD[playerid][2], 0.1090, 0.8582);
	PlayerTextDrawAlignment(playerid, speedometr02_PTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, speedometr02_PTD[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, speedometr02_PTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, speedometr02_PTD[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, speedometr02_PTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, speedometr02_PTD[playerid][2], 0);

	speedometr02_PTD[playerid][3] = CreatePlayerTextDraw(playerid, 360.2994, 359.6276, "."); // ?????
	PlayerTextDrawLetterSize(playerid, speedometr02_PTD[playerid][3], 0.4751, 2.3217);
	PlayerTextDrawAlignment(playerid, speedometr02_PTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, speedometr02_PTD[playerid][3], 16711935);
	PlayerTextDrawBackgroundColor(playerid, speedometr02_PTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, speedometr02_PTD[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, speedometr02_PTD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, speedometr02_PTD[playerid][3], 0);

	speedometr02_PTD[playerid][4] = CreatePlayerTextDraw(playerid, 359.8994, 370.7283, "."); // ?????
	PlayerTextDrawLetterSize(playerid, speedometr02_PTD[playerid][4], 0.4751, 2.3217);
	PlayerTextDrawAlignment(playerid, speedometr02_PTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, speedometr02_PTD[playerid][4], 16711935);
	PlayerTextDrawBackgroundColor(playerid, speedometr02_PTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, speedometr02_PTD[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, speedometr02_PTD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, speedometr02_PTD[playerid][4], 0);

	speedometr02_PTD[playerid][5] = CreatePlayerTextDraw(playerid, 366.9998, 381.6290, "."); // ?????
	PlayerTextDrawLetterSize(playerid, speedometr02_PTD[playerid][5], 0.4751, 2.3217);
	PlayerTextDrawAlignment(playerid, speedometr02_PTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, speedometr02_PTD[playerid][5], 16711935);
	PlayerTextDrawBackgroundColor(playerid, speedometr02_PTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, speedometr02_PTD[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, speedometr02_PTD[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, speedometr02_PTD[playerid][5], 0);

	speedometr02_PTD[playerid][6] = CreatePlayerTextDraw(playerid, 348.5995, 410.7492, "50_L"); // ?????
	PlayerTextDrawLetterSize(playerid, speedometr02_PTD[playerid][6], 0.0990, 0.7039);
	PlayerTextDrawAlignment(playerid, speedometr02_PTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, speedometr02_PTD[playerid][6], -1);
	PlayerTextDrawBackgroundColor(playerid, speedometr02_PTD[playerid][6], 255);
	PlayerTextDrawFont(playerid, speedometr02_PTD[playerid][6], 2);
	PlayerTextDrawSetProportional(playerid, speedometr02_PTD[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, speedometr02_PTD[playerid][6], 0);

	speedometr02_PTD[playerid][7] = CreatePlayerTextDraw(playerid, 364.8005, 410.7515, "100%"); // ?????
	PlayerTextDrawLetterSize(playerid, speedometr02_PTD[playerid][7], 0.0955, 0.7188);
	PlayerTextDrawAlignment(playerid, speedometr02_PTD[playerid][7], 1);
	PlayerTextDrawColor(playerid, speedometr02_PTD[playerid][7], -1);
	PlayerTextDrawBackgroundColor(playerid, speedometr02_PTD[playerid][7], 255);
	PlayerTextDrawFont(playerid, speedometr02_PTD[playerid][7], 2);
	PlayerTextDrawSetProportional(playerid, speedometr02_PTD[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, speedometr02_PTD[playerid][7], 0);
}

stock CreateAutoMarketForPlayer(playerid)
{
	buy_menu_PTD[playerid] = CreatePlayerTextDraw(playerid, 317.600006, 347.199920, "---");
	PlayerTextDrawLetterSize(playerid, buy_menu_PTD[playerid], 0.346798, 1.861333);
	PlayerTextDrawAlignment(playerid, buy_menu_PTD[playerid], 2);
	PlayerTextDrawColor(playerid, buy_menu_PTD[playerid], -1);
	PlayerTextDrawSetShadow(playerid, buy_menu_PTD[playerid], 1);
	PlayerTextDrawSetOutline(playerid, buy_menu_PTD[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, buy_menu_PTD[playerid], 51);
	PlayerTextDrawFont(playerid, buy_menu_PTD[playerid], 2);
	PlayerTextDrawSetProportional(playerid, buy_menu_PTD[playerid], 1);

	buy_car_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 454.400146, 120.213172, "ABЏO #0");
	PlayerTextDrawLetterSize(playerid, buy_car_PTD[playerid][0], 0.593998, 2.406393);
	PlayerTextDrawAlignment(playerid, buy_car_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, buy_car_PTD[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, buy_car_PTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, buy_car_PTD[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, buy_car_PTD[playerid][0], 51);
	PlayerTextDrawFont(playerid, buy_car_PTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, buy_car_PTD[playerid][0], 1);

	buy_car_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 536.799865, 145.599868, "~b~~h~‰EмA: 0 P~n~ЊPOЂE‚: 0 km~n~~b~~h~CKOPOCЏ’: 0 km/h~n~K‡ACC: -");
	PlayerTextDrawLetterSize(playerid, buy_car_PTD[playerid][1], 0.365597, 1.764965);
	PlayerTextDrawAlignment(playerid, buy_car_PTD[playerid][1], 2);
	PlayerTextDrawColor(playerid, buy_car_PTD[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, buy_car_PTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, buy_car_PTD[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, buy_car_PTD[playerid][1], 51);
	PlayerTextDrawFont(playerid, buy_car_PTD[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, buy_car_PTD[playerid][1], 1);

	buy_car_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 521.0, 226.916687, "‰BEЏ  ");
	PlayerTextDrawTextSize(playerid, buy_car_PTD[playerid][2], 521.0 + 30.0, 7.0);	 // ----------------------
	PlayerTextDrawLetterSize(playerid, buy_car_PTD[playerid][2], 0.180999, 0.975832);
	PlayerTextDrawAlignment(playerid, buy_car_PTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, buy_car_PTD[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, buy_car_PTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, buy_car_PTD[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, buy_car_PTD[playerid][2], 51);
	PlayerTextDrawFont(playerid, buy_car_PTD[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, buy_car_PTD[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, buy_car_PTD[playerid][2], true);

	buy_car_PTD[playerid][3] = CreatePlayerTextDraw(playerid, 475.5, 239.4, "_");
	PlayerTextDrawTextSize(playerid, buy_car_PTD[playerid][3], 475.5 + 36.5, 34.0);
	PlayerTextDrawLetterSize(playerid, buy_car_PTD[playerid][3], 1.0, 4.1);
	PlayerTextDrawAlignment(playerid, buy_car_PTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, buy_car_PTD[playerid][3], -1);
	PlayerTextDrawUseBox(playerid, buy_car_PTD[playerid][3], true);
	PlayerTextDrawBoxColor(playerid, buy_car_PTD[playerid][3], 255);
	PlayerTextDrawSetShadow(playerid, buy_car_PTD[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, buy_car_PTD[playerid][3], 1);
	PlayerTextDrawBackgroundColor(playerid, buy_car_PTD[playerid][3], 51);
	PlayerTextDrawFont(playerid, buy_car_PTD[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, buy_car_PTD[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, buy_car_PTD[playerid][3], true);

	buy_car_PTD[playerid][4] = CreatePlayerTextDraw(playerid, 516.5, 239.4, "_");
	PlayerTextDrawTextSize(playerid, buy_car_PTD[playerid][4], 516.5 + 36.5, 34.0);
	PlayerTextDrawLetterSize(playerid, buy_car_PTD[playerid][4], 1.0, 4.1); // 4.108332);
	PlayerTextDrawAlignment(playerid, buy_car_PTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, buy_car_PTD[playerid][4], -1);
	PlayerTextDrawUseBox(playerid, buy_car_PTD[playerid][4], true);
	PlayerTextDrawBoxColor(playerid, buy_car_PTD[playerid][4], 255);
	PlayerTextDrawSetShadow(playerid, buy_car_PTD[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, buy_car_PTD[playerid][4], 1);
	PlayerTextDrawBackgroundColor(playerid, buy_car_PTD[playerid][4], 51);
	PlayerTextDrawFont(playerid, buy_car_PTD[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, buy_car_PTD[playerid][4], 1);

	// ------

	buy_car_PTD[playerid][5] = CreatePlayerTextDraw(playerid, 557.5, 239.4, "_");
	PlayerTextDrawTextSize(playerid, buy_car_PTD[playerid][5], 557.5 + 36.5, 34.0);
	PlayerTextDrawLetterSize(playerid, buy_car_PTD[playerid][5], 1.0, 4.1);
	PlayerTextDrawAlignment(playerid, buy_car_PTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, buy_car_PTD[playerid][5], -1);
	PlayerTextDrawUseBox(playerid, buy_car_PTD[playerid][5], true);
	PlayerTextDrawBoxColor(playerid, buy_car_PTD[playerid][5], 255);
	PlayerTextDrawSetShadow(playerid, buy_car_PTD[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, buy_car_PTD[playerid][5], 1);
	PlayerTextDrawBackgroundColor(playerid, buy_car_PTD[playerid][5], 51);
	PlayerTextDrawFont(playerid, buy_car_PTD[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, buy_car_PTD[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, buy_car_PTD[playerid][5], true);
}

stock CreateAutoTuningForPlayer(playerid)
{
	change_color_PTD[0][playerid] = CreatePlayerTextDraw(playerid, 321.889190, 346.457916, "цвет 1");
	PlayerTextDrawLetterSize(playerid, change_color_PTD[0][playerid], 0.193553, 0.913064);
	PlayerTextDrawTextSize(playerid, change_color_PTD[0][playerid], 27.999996, 26.382226);
	PlayerTextDrawAlignment(playerid, change_color_PTD[0][playerid], 2);
	PlayerTextDrawColor(playerid, change_color_PTD[0][playerid], -1);
	PlayerTextDrawUseBox(playerid, change_color_PTD[0][playerid], true);
	PlayerTextDrawBoxColor(playerid, change_color_PTD[0][playerid], -256);
	PlayerTextDrawSetShadow(playerid, change_color_PTD[0][playerid], 1);
	PlayerTextDrawSetOutline(playerid, change_color_PTD[0][playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, change_color_PTD[0][playerid], 51);
	PlayerTextDrawFont(playerid, change_color_PTD[0][playerid], 2);
	PlayerTextDrawSetProportional(playerid, change_color_PTD[0][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, change_color_PTD[0][playerid], true);

	change_color_PTD[1][playerid] = CreatePlayerTextDraw(playerid, 342.444366, 359.402191, "usebox");
	PlayerTextDrawLetterSize(playerid, change_color_PTD[1][playerid], 0.000000, 4.030000);
	PlayerTextDrawTextSize(playerid, change_color_PTD[1][playerid], 300.222320, 0.000000);
	PlayerTextDrawAlignment(playerid, change_color_PTD[1][playerid], 1);
	PlayerTextDrawColor(playerid, change_color_PTD[1][playerid], 0);
	PlayerTextDrawUseBox(playerid, change_color_PTD[1][playerid], true);
	PlayerTextDrawBoxColor(playerid, change_color_PTD[1][playerid], 102);
	PlayerTextDrawSetShadow(playerid, change_color_PTD[1][playerid], 0);
	PlayerTextDrawSetOutline(playerid, change_color_PTD[1][playerid], 0);
	PlayerTextDrawFont(playerid, change_color_PTD[1][playerid], 0);
	PlayerTextDrawSetSelectable(playerid, change_color_PTD[1][playerid], true);

	change_color_PTD[2][playerid] = CreatePlayerTextDraw(playerid, 402.999755, 359.406555, "usebox");
	PlayerTextDrawLetterSize(playerid, change_color_PTD[2][playerid], 0.000000, 4.030000);
	PlayerTextDrawTextSize(playerid, change_color_PTD[2][playerid], 360.666625, 0.000000);
	PlayerTextDrawAlignment(playerid, change_color_PTD[2][playerid], 1);
	PlayerTextDrawColor(playerid, change_color_PTD[2][playerid], 0);
	PlayerTextDrawUseBox(playerid, change_color_PTD[2][playerid], true);
	PlayerTextDrawBoxColor(playerid, change_color_PTD[2][playerid], -171);
	PlayerTextDrawSetShadow(playerid, change_color_PTD[2][playerid], 0);
	PlayerTextDrawSetOutline(playerid, change_color_PTD[2][playerid], 0);
	PlayerTextDrawFont(playerid, change_color_PTD[2][playerid], 0);
	PlayerTextDrawSetSelectable(playerid, change_color_PTD[2][playerid], true);

	change_color_PTD[3][playerid] = CreatePlayerTextDraw(playerid, 283.555328, 359.411010, "usebox");
	PlayerTextDrawLetterSize(playerid, change_color_PTD[3][playerid], 0.000000, 4.030000);
	PlayerTextDrawTextSize(playerid, change_color_PTD[3][playerid], 241.111145, 0.000000);
	PlayerTextDrawAlignment(playerid, change_color_PTD[3][playerid], 1);
	PlayerTextDrawColor(playerid, change_color_PTD[3][playerid], 0);
	PlayerTextDrawUseBox(playerid, change_color_PTD[3][playerid], true);
	PlayerTextDrawBoxColor(playerid, change_color_PTD[3][playerid], 865730389);
	PlayerTextDrawSetShadow(playerid, change_color_PTD[3][playerid], 0);
	PlayerTextDrawSetOutline(playerid, change_color_PTD[3][playerid], 0);
	PlayerTextDrawFont(playerid, change_color_PTD[3][playerid], 0);
	PlayerTextDrawSetSelectable(playerid, change_color_PTD[3][playerid], true);
}

stock IntToString(integer)
{
	new string[sizeof integer + 5];

	format(string, sizeof string, "%d", integer);

	return string;
}

stock SendMessageInChat(playerid, text[], Float: radius = 30.0)
{
	new Float: dist, type;
	new Float: x, Float: y, Float: z;

	GetPlayerPos(playerid, x, y, z);
	SetPlayerChatBubble(playerid, text, 0x00CCFFFF, 30.0, 8000);

	ChatMessageInit(playerid, text);
	foreach(new idx : Player)
	{
		if(!IsPlayerLogged(idx)) continue;
		dist = GetPlayerDistanceFromPoint(idx, x, y, z);

		if(dist > radius) continue;
		type = GetPlayerChatType(idx);

		switch(GetPlayerSettingData(idx, S_CHAT_TYPE))
		{
			case SETTING_CHAT_ADVANCE:
			{
				if(dist < (radius / 4))
				{
					SendClientMessage(idx, 0xCECECEFF, chat_message[type]);
				}
				else if(dist < (radius / 2))
				{
					SendClientMessage(idx, 0x999999FF, chat_message[type]);
				}
				else
				{
					SendClientMessage(idx, 0x6B6B6BFF, chat_message[type]);
				}
			}
			case SETTING_CHAT_STANDART:
			{
				if(GetPlayerSettingData(idx, S_NICK_IN_CHAT))
				{
					SendPlayerMessageToPlayer(idx, playerid, chat_message[type]);
				}
				else SendClientMessage(idx, 0xCECECEFF, text);
			}
			default: continue;
		}
	}
	if(!IsPlayerDriver(playerid))
	{
		if(GetPlayerData(playerid, P_USE_ANIM_TYPE) == USE_ANIM_TYPE_NONE)
		{
			ApplyAnimationEx(playerid, "PED", "IDLE_chat", 4.100, 0, 1, 1, 1, 1, 0, USE_ANIM_TYPE_CHAT);
			SetTimerEx("ClearPlayerChatAnim", strlen(text) * 400, false, "i", playerid);
		}
	}
	return 1;
}

stock ChatMessageInit(playerid, text[])
{
	format(chat_message[0], 129, "- %s {%06x}(%s)[%d]", text, GetPlayerColorEx(playerid) >>> 8, GetPlayerNameEx(playerid), playerid);
	format(chat_message[1], 129, "- %s {%06x}(%s)", text, GetPlayerColorEx(playerid) >>> 8, GetPlayerNameEx(playerid));
	format(chat_message[2], 129, "- %s", text);

	format(chat_message[3], 129, "(%d): %s", playerid, text);
	format(chat_message[4], 129, "%s", text);
}

stock SetPlayerChatInit(playerid)
{
	new type = 0;
	switch(GetPlayerSettingData(playerid, S_CHAT_TYPE))
	{
		case SETTING_CHAT_ADVANCE:
		{
			if(GetPlayerSettingData(playerid, S_NICK_IN_CHAT) == SETTING_TYPE_ON)
			{
				if(GetPlayerSettingData(playerid, S_ID_IN_CHAT) == SETTING_TYPE_ON)
				{
					type = 0;
				}
				else type = 1;
			}
			else type = 2;
		}
		case SETTING_CHAT_STANDART:
		{
			if(GetPlayerSettingData(playerid, S_ID_IN_CHAT) == SETTING_TYPE_ON)
			{
				type = 3;
			}
			else type = 4;
		}
		default: type = 0;
	}
	SetPlayerChatType(playerid, type);
}

stock SetPlayerSpawnInit(playerid)
{
	new spawn_id = random(3);
	
	SetSpawnInfo
	(
		playerid,
		0,
		GetPlayerSkinEx(playerid),
		spawn_pos_data[spawn_id][0], // + random(3),
		spawn_pos_data[spawn_id][1], // + random(3),
		spawn_pos_data[spawn_id][2],
		spawn_pos_data[spawn_id][3],
		0, 0, 0, 0, 0, 0
	);

	return 1;
}

stock SetPlayerSpawnPos(playerid)
{
	if(GetPlayerData(playerid, P_JAIL))
	{
		new jail_pos = random(sizeof g_jail_positions);

		SetPlayerPosEx
		(
			playerid,
			g_jail_positions[jail_pos][0],
			g_jail_positions[jail_pos][1],
			g_jail_positions[jail_pos][2],
			g_jail_positions[jail_pos][3],
			1, 2
		);
	}
	else if(GetPlayerData(playerid, P_DMZ_STATUS) == 1)
	{
	    SpawnDeathMatch(playerid);
	}
	else if(GetPlayerData(playerid, P_HOSPITAL))
	{
		SetPlayerPosEx
		(
			playerid,
			2045.6726,
			1420.0134,
			999.1636,
			-90.0,
			1, 1
		);
	}
	else
	{
		switch(GetPlayerSpawnSetting(playerid))
		{
			case 1:
			{
				if(GetPlayerHouse(playerid, HOUSE_TYPE_HOME) == -1)
				{
					SetPlayerSpawnSetting(playerid, 0);
					UpdatePlayerDatabaseInt(playerid, "setting_spawn", 0);

					return 1;
				}

				EnterPlayerToHouse(playerid, GetPlayerHouse(playerid, HOUSE_TYPE_HOME));
			}
			case 2:
			{
				if(GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) == -1)
				{
					SetPlayerSpawnSetting(playerid, 0);
					UpdatePlayerDatabaseInt(playerid, "setting_spawn", 0);

					return 1;
				}

				new hotel_id = GetPlayerData(playerid, P_HOUSE),
					room_id = GetPlayerData(playerid, P_HOUSE_ROOM);

				SetPlayerData(playerid, P_IN_BUSINESS, hotel_id + 30);
				EnterPlayerToHotelRoom(playerid, hotel_id, room_id);
			}
			case 3:
			{
				new team_id = GetPlayerTeamEx(playerid);

				if(!team_id)
				{
					SetPlayerSpawnSetting(playerid, 0);
					UpdatePlayerDatabaseInt(playerid, "setting_spawn", 0);

					return 1;
				}

				SetPlayerPosEx
				(
					playerid,
					GetTeamData(team_id, O_SPAWN)[0],
					GetTeamData(team_id, O_SPAWN)[1],
					GetTeamData(team_id, O_SPAWN)[2],
					GetTeamData(team_id, O_SPAWN)[3],
					GetTeamData(team_id, O_SPAWN_INT),
					GetTeamData(team_id, O_SPAWN_VW)
				);
			}
			case 4:
			{
				if(GetPlayerHouse(playerid, HOUSE_TYPE_ROOM) == -1)
				{
					SetPlayerSpawnSetting(playerid, 0);
					UpdatePlayerDatabaseInt(playerid, "setting_spawn", 0);

					return 1;
				}

				EnterPlayerToHouse(playerid, GetPlayerHouse(playerid, HOUSE_TYPE_ROOM));
			}
            case 5:
            {
                new fam_id = GetPlayerData(playerid, P_FAMILY);
                if(!GetPlayerData(playerid, P_FAMILY))
                {
                    SetPlayerSpawnSetting(playerid, 0);
                    UpdatePlayerDatabaseInt(playerid, "setting_spawn", 0);

                    return 1;
                }
                SetPlayerPosEx
                (
                    playerid,
                    g_family[fam_id][F_SPAWN_POSITION][0],
                    g_family[fam_id][F_SPAWN_POSITION][1],
                    g_family[fam_id][F_SPAWN_POSITION][2],
                    g_family[fam_id][F_SPAWN_POSITION][3],
                    g_family[fam_id][F_SPAWN_IV][0],
                    g_family[fam_id][F_SPAWN_IV][1]
                );
            }
        }
    }

	return 1;
}

stock SetPlayerInit(playerid)
{
	SetPlayerLevelInit(playerid);
	SetPlayerColorInit(playerid);
	SetPlayerSuspectInit(playerid);
	SetPlayerSkinInit(playerid);
	SetPlayerChatInit(playerid);
	SetPlayerMoneyInit(playerid);

//	CreateTeleportObjects(playerid);
	CreateSpeedometr01ForPlayer(playerid);
	CreateSpeedometr02ForPlayer(playerid);
	CreateAutoMarketForPlayer(playerid);
	//CreatePlayerGreenZoneText(playerid);
	// CreateAutoTuningForPlayer(playerid);

	SetPlayerLogged(playerid, true);
}

stock GetPlayerSkinEx(playerid)
{
	if(1 <= GetPlayerTeamEx(playerid) <= MAX_GOV_ORG) //max_org
	{
	    if(GetPlayerData(playerid, P_ATWORK))
			return GetPlayerData(playerid, P_OSKIN);
		else
		    return GetPlayerData(playerid, P_SKIN);
	}
	else if(START_MAX_GANG <= GetPlayerTeamEx(playerid) <= MAX_ORG)
	    return GetPlayerData(playerid, P_OSKIN);
	else
		return GetPlayerData(playerid, P_SKIN);
}

stock PreLoadPlayerAnims(playerid)
{
	for(new idx; idx < sizeof g_anim_libs; idx ++)
	{
		PreloadAnimLib(playerid, g_anim_libs[idx]);
	}
}

stock PreloadAnimLib(playerid, animlib[])
{
	ApplyAnimationEx(playerid, animlib, "null", 0.0, 0, 0, 0, 0, 0, 0);
}

stock SetPlayerMoneyInit(playerid)
{
	ResetPlayerMoney(playerid);
	return GivePlayerMoney(playerid, GetPlayerMoneyEx(playerid));
}

stock SetPlayerColorInit(playerid)
{
	//делал osca|r vk.com/artem.kovaler

   	if(1 <= GetPlayerTeamEx(playerid) <= MAX_GOV_ORG)
	{
	    if(GetPlayerData(playerid, P_ATWORK))
			return SetPlayerColorEx(playerid, GetPlayerTeamColor(playerid));
		else
		    return SetPlayerColorEx(playerid, 0xFFFFFF11);
	}
	else if(START_MAX_GANG <= GetPlayerTeamEx(playerid) <= MAX_ORG)
	    return SetPlayerColorEx(playerid, GetPlayerTeamColor(playerid));
	else
		return SetPlayerColorEx(playerid, 0xFFFFFF11);
}

stock SetPlayerColorEx(playerid, color)
{
	SetPlayerData(playerid, P_COLOR, color);
	return SetPlayerColor(playerid, color);
}

stock SetPlayerHealthEx(playerid, Float: health, bool: inc_health = false)
{
	if(inc_health)
	{
		AddPlayerData(playerid, P_HEALTH, +, health);
	}
	else SetPlayerData(playerid, P_HEALTH, health);

	if(GetPlayerData(playerid, P_HEALTH) > 100.0)
		SetPlayerData(playerid, P_HEALTH, 100.0);

	return SetPlayerHealth(playerid, GetPlayerData(playerid, P_HEALTH));
}

stock SetPlayerSuspectInit(playerid)
{
	return SetPlayerWantedLevel(playerid, GetPlayerSuspect(playerid));
}

stock SetPlayerSkinInit(playerid)
{
	return SetPlayerSkin(playerid, GetPlayerSkinEx(playerid));
}

stock SetPlayerLevelInit(playerid)
{
	return SetPlayerScore(playerid, GetPlayerLevel(playerid));
}

stock SetPlayerSkillsInit(playerid)
{
	SetPlayerSkillLevel(playerid, 0, GetPlayerData(playerid, P_SKILL_COLT) * 10);
	SetPlayerSkillLevel(playerid, 1, GetPlayerData(playerid, P_SKILL_SDPISTOL) * 10);
	SetPlayerSkillLevel(playerid, 2, GetPlayerData(playerid, P_SKILL_DEAGLE) * 10);
	SetPlayerSkillLevel(playerid, 3, GetPlayerData(playerid, P_SKILL_SHOTGUN) * 10);
	SetPlayerSkillLevel(playerid, 4, GetPlayerData(playerid, P_SKILL_SAWNOFF) * 10);
	SetPlayerSkillLevel(playerid, 5, GetPlayerData(playerid, P_SKILL_COMBAT_SG) * 10);
	SetPlayerSkillLevel(playerid, 6, GetPlayerData(playerid, P_SKILL_MICRO_UZI) * 10);
	SetPlayerSkillLevel(playerid, 7, GetPlayerData(playerid, P_SKILL_MP5) * 10);
	SetPlayerSkillLevel(playerid, 8, GetPlayerData(playerid, P_SKILL_AK47) * 10);
	SetPlayerSkillLevel(playerid, 9, GetPlayerData(playerid, P_SKILL_M4) * 10);
	SetPlayerSkillLevel(playerid, 10, GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE) * 10);

	return 1;
}

stock SetPlayerSelectSkin(playerid, select_skin, skinid)
{
	SetPlayerData(playerid, P_SELECT_SKIN, select_skin);
	SetPlayerSkin(playerid, skinid);
}

stock SetPlayerPosEx(playerid, Float: x, Float: y, Float: z, Float: angle, interior = -1, virtual_world = -1, freeze = true)
{
//	if(interior > 0)
//	PlayerTeleportInit(playerid, x, y,  z, angle);

	SetPlayerPos(playerid, x, y, z);

	SetPlayerFacingAngle(playerid, angle);
	SetCameraBehindPlayer(playerid);

	if(interior != -1)// && GetPlayerInterior(playerid) != interior)
	{
		SetPlayerInterior(playerid, interior);
	}
	if(virtual_world != -1)// && GetPlayerVirtualWorld(playerid) != virtual_world)
	{
		SetPlayerVirtualWorld(playerid, virtual_world);
	}
	if(GetPlayerData(playerid, P_LAST_PICKUP) != -1)
	{
		SetPlayerData(playerid, P_LAST_PICKUP, -1);
	}
	if(freeze)
    {
        TeleportFreeze(playerid, GetPlayerPing(playerid)*10);
    }
	return 1;
}

stock TeleportFreeze(playerid, ms)
{
	if(ms <= 0)
        return 0;

    TogglePlayerControllable(playerid, false);

    SetTimerEx("TeleportUnfreeze", ms, false, "d", playerid);

    return 1;
}

public: TeleportUnfreeze(playerid)
{
    TogglePlayerControllable(playerid, true);

    return 1;
}

stock JailPlayer(playerid, jail_time)
{
	new jail_pos = random(sizeof g_jail_positions);

	SetPlayerPosEx
	(
		playerid,
		g_jail_positions[jail_pos][0],
		g_jail_positions[jail_pos][1],
		g_jail_positions[jail_pos][2],
		g_jail_positions[jail_pos][3],
		1, 6
	);

	SetPlayerData(playerid, P_JAIL, jail_time * 60);
	UpdatePlayerDatabaseInt(playerid, "jail", jail_time * 60);
}

stock UnjailPlayer(playerid)
{
	new spawn_id = random(3);

    SetPlayerPosEx
    (
        playerid,
        spawn_pos_data[spawn_id][0]  + random(3),
        spawn_pos_data[spawn_id][1]  + random(3),
        spawn_pos_data[spawn_id][2],
        spawn_pos_data[spawn_id][3],
        0, 0
    );

	SetPlayerData(playerid, P_JAIL, 0);
	UpdatePlayerDatabaseInt(playerid, "jail", 0);
}

stock UpdatePlayerDatabaseInt(playerid, field[], value)
{
	if(!IsPlayerConnected(playerid)) return 1;

	new query[256];

	mysql_format(mysql, query, sizeof query, "UPDATE accounts SET `%s`=%d WHERE `id`=%d LIMIT 1", field, value, GetPlayerAccountID(playerid));
	mysql_query(mysql, query, false);
	return 1;
}

stock UpdatePlayerDatabaseFloat(playerid, field[], Float:value)
{
	if(!IsPlayerConnected(playerid)) return 1;

	new query[256];

	mysql_format(mysql, query, sizeof query, "UPDATE accounts SET `%s`='%f' WHERE `id`=%d LIMIT 1", field, value, GetPlayerAccountID(playerid));
	mysql_query(mysql, query, false);
	return 1;
}

stock UpdatePlayerDatabaseString(playerid, field[], value[])
{
	if(!IsPlayerConnected(playerid)) return 1;

	new query[256];

	mysql_format(mysql, query, sizeof query, "UPDATE accounts SET `%s`='%s' WHERE `id`=%d LIMIT 1", field, value, GetPlayerAccountID(playerid));
	mysql_query(mysql, query, false);
	return 1;
}

stock FixKick(playerid, message[] = "Введите /q (/quit) чтобы выйти", time_ms = 500)
{
	if(strlen(message) > 1)
		SendClientMessage(playerid, 0xFF6600FF, message);

	if(time_ms == 10)
	{
		new fmt_text[65];

		format(fmt_text, sizeof fmt_text, "[A] %s[%d] кикнут антифлуд-системой", GetPlayerNameEx(playerid), playerid);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	SetTimerEx("FixedKick", time_ms, false, "i", playerid);

	return 1;
}

stock ClearPlayerInfo(playerid)
{
	g_player[playerid] = g_player_default_values;
	g_player_gps[playerid] = g_gps_default_values;
	g_player_setting[playerid] = g_settings_default_values;
	g_player_driving_exam[playerid] = g_driving_exam_default_values;

	g_pickup_flood[playerid] = 0;
	g_speed_line_update[playerid] = -1;
//	g_teleport_object[playerid] = {-1, -1};

	price_select_TD[playerid] = PlayerText: {-1};

	SetPlayerPhoneBookInitStatus(playerid, false);
	SetPlayerPhoneBookContacts(playerid, 0);

	ClearPlayerOffer(playerid);
	ClearPlayerListitemValues(playerid);
	ClearPlayerPhoneCall(playerid);

	AntiFloodPlayerInit(playerid);
	// ClearBankAccountsData(playerid);

//	DestroyTeleportObjects(playerid);

	SetPlayerSpectateData(playerid, S_PLAYER, -1);

	#if defined _SYSTEM_CP
	ClearPlayerCPInfo(playerid);
	#endif

	#if defined _SYSTEM_RACE_CP
	ClearPlayerRCPInfo(playerid);
	#endif

	SetPlayerPinCodeState(playerid, PIN_CODE_STATE_NONE);

	mysql_race[playerid] ++;
}

stock CreatePlayerAccount(playerid)
{
	new query[356];
	new Cache: result;

	new time = gettime();

	SetPlayerData(playerid, P_REG_TIME, time);
	SetPlayerData(playerid, P_LAST_LOGIN_TIME, time);

	format(g_player[playerid][P_REG_IP], 16, "%s", GetPlayerIpEx(playerid));
	format(g_player[playerid][P_LAST_IP], 16, "%s", GetPlayerIpEx(playerid));

	//sha 256

	for(new i; i < 10; i++)
	{
		g_player[playerid][P_SALT][i] = random(79) + 47;
	}
    g_player[playerid][P_SALT][10] = 0;

    SHA256_PassHash(CheckPass[playerid], GetPlayerData(playerid, P_SALT), GetPlayerData(playerid, P_PASSWORD), 65);//PlayerInfo[playerid][pSalt], PlayerInfo[playerid][pPassword], 65);


	mysql_format
	(
		mysql, query, sizeof query,
		"INSERT INTO accounts "\
			"(name,password,salt,email,refer,sex,reg_time,reg_ip,last_ip,last_login) "\
			"VALUES "\
			"('%e','%e','%e','%e',%d,%d,%d,'%e','%e',%d)",
		GetPlayerNameEx(playerid),
		GetPlayerData(playerid, P_PASSWORD),
		GetPlayerData(playerid, P_SALT),
		GetPlayerData(playerid, P_EMAIL),
		GetPlayerData(playerid, P_REFER),
		GetPlayerData(playerid, P_SEX),
		GetPlayerData(playerid, P_REG_TIME),
		GetPlayerData(playerid, P_REG_IP),
		GetPlayerData(playerid, P_LAST_IP),
		GetPlayerData(playerid, P_LAST_LOGIN_TIME)
	);
	result = mysql_query(mysql, query);

	print(query);

	SetPlayerData(playerid, P_ACCOUNT_ID, cache_insert_id());
	CheckPass[playerid][0] = 0;
	cache_delete(result);

	return GetPlayerAccountID(playerid);
}

stock CreateTextDraws()
{
	new playerid;
	
	
	enter_speedometr_TD[0] = TextDrawCreate(151.4990, 134.6741, "txd:enter_speedometr"); // ?????
	TextDrawTextSize(enter_speedometr_TD[0], 341.0000, 186.0000);
	TextDrawAlignment(enter_speedometr_TD[0], 1);
	TextDrawColor(enter_speedometr_TD[0], -1);
	TextDrawBackgroundColor(enter_speedometr_TD[0], 255);
	TextDrawFont(enter_speedometr_TD[0], 4);
	TextDrawSetProportional(enter_speedometr_TD[0], 0);
	TextDrawSetShadow(enter_speedometr_TD[0], 0);

	enter_speedometr_TD[1] = TextDrawCreate(151.4000, 162.4667, "speedometr_1"); // ?????
	TextDrawTextSize(enter_speedometr_TD[1], 169.0000, 155.0000);
	TextDrawAlignment(enter_speedometr_TD[1], 1);
	TextDrawColor(enter_speedometr_TD[1], -1);
	TextDrawBackgroundColor(enter_speedometr_TD[1], 255);
	TextDrawFont(enter_speedometr_TD[1], 4);
	TextDrawSetProportional(enter_speedometr_TD[1], 0);
	TextDrawSetShadow(enter_speedometr_TD[1], 0);
	TextDrawSetSelectable(enter_speedometr_TD[1], true);

	enter_speedometr_TD[2] = TextDrawCreate(322.7023, 161.9689, "speedometr_2"); // ?????
	TextDrawTextSize(enter_speedometr_TD[2], 169.0000, 155.0000);
	TextDrawAlignment(enter_speedometr_TD[2], 1);
	TextDrawColor(enter_speedometr_TD[2], -1);
	TextDrawBackgroundColor(enter_speedometr_TD[2], 255);
	TextDrawFont(enter_speedometr_TD[2], 4);
	TextDrawSetProportional(enter_speedometr_TD[2], 0);
	TextDrawSetShadow(enter_speedometr_TD[2], 0);
	TextDrawSetSelectable(enter_speedometr_TD[2], true);

	enter_speedometr_TD[3] = TextDrawCreate(431.3999, 294.8756, "exit"); // ?????
	TextDrawTextSize(enter_speedometr_TD[3], 61.0000, 27.0000);
	TextDrawAlignment(enter_speedometr_TD[3], 1);
	TextDrawColor(enter_speedometr_TD[3], -1);
	TextDrawBackgroundColor(enter_speedometr_TD[3], 255);
	TextDrawFont(enter_speedometr_TD[3], 4);
	TextDrawSetProportional(enter_speedometr_TD[3], 0);
	TextDrawSetShadow(enter_speedometr_TD[3], 0);
	TextDrawSetSelectable(enter_speedometr_TD[3], true);
	
	speedometr02_TD[0] = TextDrawCreate(263.3994, 351.1237, "txd:speedometr02"); // ?????
	TextDrawTextSize(speedometr02_TD[0], 111.0000, 90.0000);
	TextDrawAlignment(speedometr02_TD[0], 1);
	TextDrawColor(speedometr02_TD[0], -1);
	TextDrawBackgroundColor(speedometr02_TD[0], 255);
	TextDrawFont(speedometr02_TD[0], 4);
	TextDrawSetProportional(speedometr02_TD[0], 0);
	TextDrawSetShadow(speedometr02_TD[0], 0);
	
	speedometr_TD[0] = TextDrawCreate(248.8017, 312.7956, "txd:speedometr"); // ?????
	TextDrawTextSize(speedometr_TD[0], 142.0000, 172.0000);
	TextDrawAlignment(speedometr_TD[0], 1);
	TextDrawColor(speedometr_TD[0], -1);
	TextDrawBackgroundColor(speedometr_TD[0], 255);
	TextDrawFont(speedometr_TD[0], 4);
	TextDrawSetProportional(speedometr_TD[0], 0);
	TextDrawSetShadow(speedometr_TD[0], 0);
	
	buy_car_number_TD[0] = TextDrawCreate(-25.3997, -285.5335, "txd:buy_car_number"); // ?????
	TextDrawTextSize(buy_car_number_TD[0], 700.0000, 1017.0000);
	TextDrawAlignment(buy_car_number_TD[0], 1);
	TextDrawColor(buy_car_number_TD[0], -1);
	TextDrawBackgroundColor(buy_car_number_TD[0], 255);
	TextDrawFont(buy_car_number_TD[0], 4);
	TextDrawSetProportional(buy_car_number_TD[0], 0);
	TextDrawSetShadow(buy_car_number_TD[0], 0);
	TextDrawSetSelectable(buy_car_number_TD[0], true);

	buy_car_number_TD[1] = TextDrawCreate(383.0000, 172.4221, "txd:flag_RUS"); // ?????
	TextDrawTextSize(buy_car_number_TD[1], 91.0000, 117.0000);
	TextDrawAlignment(buy_car_number_TD[1], 1);
	TextDrawColor(buy_car_number_TD[1], -1);
	TextDrawBackgroundColor(buy_car_number_TD[1], 255);
	TextDrawFont(buy_car_number_TD[1], 4);
	TextDrawSetProportional(buy_car_number_TD[1], 0);
	TextDrawSetShadow(buy_car_number_TD[1], 0);

	buy_car_number_TD[2] = TextDrawCreate(195.0001, 372.5289, "buy_number"); // ?????
	TextDrawTextSize(buy_car_number_TD[2], 120.0000, 62.0000);
	TextDrawAlignment(buy_car_number_TD[2], 1);
	TextDrawColor(buy_car_number_TD[2], -1);
	TextDrawBackgroundColor(buy_car_number_TD[2], 255);
	TextDrawFont(buy_car_number_TD[2], 4);
	TextDrawSetProportional(buy_car_number_TD[2], 0);
	TextDrawSetShadow(buy_car_number_TD[2], 0);
	TextDrawSetSelectable(buy_car_number_TD[2], true);

	buy_car_number_TD[3] = TextDrawCreate(335.0000, 372.5289, "exit"); // ?????
	TextDrawTextSize(buy_car_number_TD[3], 117.0000, 59.0000);
	TextDrawAlignment(buy_car_number_TD[3], 1);
	TextDrawColor(buy_car_number_TD[3], -1);
	TextDrawBackgroundColor(buy_car_number_TD[3], 255);
	TextDrawFont(buy_car_number_TD[3], 4);
	TextDrawSetProportional(buy_car_number_TD[3], 0);
	TextDrawSetShadow(buy_car_number_TD[3], 0);
	TextDrawSetSelectable(buy_car_number_TD[3], true);

	buy_car_number_TD[4] = TextDrawCreate(167.3999, 167.9420, "input_number"); // ?????
	TextDrawTextSize(buy_car_number_TD[4], 213.0000, 110.0000);
	TextDrawAlignment(buy_car_number_TD[4], 1);
	TextDrawColor(buy_car_number_TD[4], -1);
	TextDrawBackgroundColor(buy_car_number_TD[4], 255);
	TextDrawFont(buy_car_number_TD[4], 4);
	TextDrawSetProportional(buy_car_number_TD[4], 0);
	TextDrawSetShadow(buy_car_number_TD[4], 0);
	TextDrawSetSelectable(buy_car_number_TD[4], true);

	buy_car_number_TD[5] = TextDrawCreate(381.3999, 167.9420, "enter_flag"); // ?????
	TextDrawTextSize(buy_car_number_TD[5], 100.0000, 108.0000);
	TextDrawAlignment(buy_car_number_TD[5], 1);
	TextDrawColor(buy_car_number_TD[5], -1);
	TextDrawBackgroundColor(buy_car_number_TD[5], 255);
	TextDrawFont(buy_car_number_TD[5], 4);
	TextDrawSetProportional(buy_car_number_TD[5], 0);
	TextDrawSetShadow(buy_car_number_TD[5], 0);
	TextDrawSetSelectable(buy_car_number_TD[5], true);

	buy_car_number_TD[6] = TextDrawCreate(1.0000, 93.2753, "enter_flag_ru"); // ?????
	TextDrawTextSize(buy_car_number_TD[6], 90.0000, 80.0000);
	TextDrawAlignment(buy_car_number_TD[6], 1);
	TextDrawColor(buy_car_number_TD[6], -1);
	TextDrawBackgroundColor(buy_car_number_TD[6], 255);
	TextDrawFont(buy_car_number_TD[6], 4);
	TextDrawSetProportional(buy_car_number_TD[6], 0);
	TextDrawSetShadow(buy_car_number_TD[6], 0);
	TextDrawSetSelectable(buy_car_number_TD[6], true);

	buy_car_number_TD[7] = TextDrawCreate(1.3997, 173.9154, "enter_flag_kz"); // ?????
	TextDrawTextSize(buy_car_number_TD[7], 89.0000, 77.0000);
	TextDrawAlignment(buy_car_number_TD[7], 1);
	TextDrawColor(buy_car_number_TD[7], -1);
	TextDrawBackgroundColor(buy_car_number_TD[7], 255);
	TextDrawFont(buy_car_number_TD[7], 4);
	TextDrawSetProportional(buy_car_number_TD[7], 0);
	TextDrawSetShadow(buy_car_number_TD[7], 0);
	TextDrawSetSelectable(buy_car_number_TD[7], true);

	buy_car_number_TD[8] = TextDrawCreate(3.3998, 253.0621, "enter_flag_by"); // ?????
	TextDrawTextSize(buy_car_number_TD[8], 89.0000, 77.0000);
	TextDrawAlignment(buy_car_number_TD[8], 1);
	TextDrawColor(buy_car_number_TD[8], -1);
	TextDrawBackgroundColor(buy_car_number_TD[8], 255);
	TextDrawFont(buy_car_number_TD[8], 4);
	TextDrawSetProportional(buy_car_number_TD[8], 0);
	TextDrawSetShadow(buy_car_number_TD[8], 0);
	TextDrawSetSelectable(buy_car_number_TD[8], true);

	buy_car_number_TD[9] = TextDrawCreate(1.3997, 336.6889, "enter_flag_ua"); // ?????
	TextDrawTextSize(buy_car_number_TD[9], 90.0000, 90.0000);
	TextDrawAlignment(buy_car_number_TD[9], 1);
	TextDrawColor(buy_car_number_TD[9], -1);
	TextDrawBackgroundColor(buy_car_number_TD[9], 255);
	TextDrawFont(buy_car_number_TD[9], 4);
	TextDrawSetProportional(buy_car_number_TD[9], 0);
	TextDrawSetShadow(buy_car_number_TD[9], 0);
	TextDrawSetSelectable(buy_car_number_TD[9], true);

	buy_car_number_TD[10] = TextDrawCreate(383.0000, 172.4221, "txd:flag_KZ"); // ?????
	TextDrawTextSize(buy_car_number_TD[10], 91.0000, 117.0000);
	TextDrawAlignment(buy_car_number_TD[10], 1);
	TextDrawColor(buy_car_number_TD[10], -1);
	TextDrawBackgroundColor(buy_car_number_TD[10], 255);
	TextDrawFont(buy_car_number_TD[10], 4);
	TextDrawSetProportional(buy_car_number_TD[10], 0);
	TextDrawSetShadow(buy_car_number_TD[10], 0);

	/*buy_car_number_TD[11] = TextDrawCreate(290.0000, 190.0000, "TDEditor"); // ?????
	TextDrawLetterSize(buy_car_number_TD[11], 0.4000, 1.6000);
	TextDrawAlignment(buy_car_number_TD[11], 1);
	TextDrawColor(buy_car_number_TD[11], -1);
	TextDrawBackgroundColor(buy_car_number_TD[11], 255);
	TextDrawFont(buy_car_number_TD[11], 1);
	TextDrawSetProportional(buy_car_number_TD[11], 1);
	TextDrawSetShadow(buy_car_number_TD[11], 0);*/

	buy_car_number_TD[12] = TextDrawCreate(383.0000, 172.4221, "txd:flag_UA"); // ?????
	TextDrawLetterSize(buy_car_number_TD[12], 91.0000, 117.0000);
	TextDrawAlignment(buy_car_number_TD[12], 1);
	TextDrawColor(buy_car_number_TD[12], -1);
	TextDrawBackgroundColor(buy_car_number_TD[12], 255);
	TextDrawFont(buy_car_number_TD[12], 4);
	TextDrawSetProportional(buy_car_number_TD[12], 0);
	TextDrawSetShadow(buy_car_number_TD[12], 0);

	buy_car_number_TD[13] = TextDrawCreate(383.0000, 172.4221, "txd:flag_BY"); // ?????
	TextDrawTextSize(buy_car_number_TD[13], 91.0000, 117.0000);
	TextDrawAlignment(buy_car_number_TD[13], 1);
	TextDrawColor(buy_car_number_TD[13], -1);
	TextDrawBackgroundColor(buy_car_number_TD[13], 255);
	TextDrawFont(buy_car_number_TD[13], 4);
	TextDrawSetProportional(buy_car_number_TD[13], 0);
	TextDrawSetShadow(buy_car_number_TD[13], 0);

	buy_car_number_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 214.3997, 197.4667, ""); // ?????
	PlayerTextDrawLetterSize(playerid, buy_car_number_PTD[playerid][0], 1.0231, 5.7761);
	PlayerTextDrawAlignment(playerid, buy_car_number_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, buy_car_number_PTD[playerid][0], -1378294017);
	PlayerTextDrawBackgroundColor(playerid, buy_car_number_PTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, buy_car_number_PTD[playerid][0], 3);
	PlayerTextDrawSetProportional(playerid, buy_car_number_PTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, buy_car_number_PTD[playerid][0], 0);

	buy_car_number_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 585.2005, 203.9378, ""); // ?????
	PlayerTextDrawLetterSize(playerid, buy_car_number_PTD[playerid][1], 0.4338, 2.0878);
	PlayerTextDrawAlignment(playerid, buy_car_number_PTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, buy_car_number_PTD[playerid][1], 16711935);
	PlayerTextDrawBackgroundColor(playerid, buy_car_number_PTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, buy_car_number_PTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, buy_car_number_PTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, buy_car_number_PTD[playerid][1], 0);
	
	shop_clothes_TD[0] = TextDrawCreate(8.6000, 120.1555, "txd:shop_clothes_buy_and_exit"); // ?????
	TextDrawTextSize(shop_clothes_TD[0], 184.0000, 225.0000);
	TextDrawAlignment(shop_clothes_TD[0], 1);
	TextDrawColor(shop_clothes_TD[0], -1);
	TextDrawBackgroundColor(shop_clothes_TD[0], 255);
	TextDrawFont(shop_clothes_TD[0], 4);
	TextDrawSetProportional(shop_clothes_TD[0], 0);
	TextDrawSetShadow(shop_clothes_TD[0], 0);

	shop_clothes_TD[1] = TextDrawCreate(372.6001, 358.5910, "next"); // ?????
	TextDrawTextSize(shop_clothes_TD[1], 83.0000, 40.0000);
	TextDrawAlignment(shop_clothes_TD[1], 1);
	TextDrawColor(shop_clothes_TD[1], -1);
	TextDrawBackgroundColor(shop_clothes_TD[1], 255);
	TextDrawFont(shop_clothes_TD[1], 4);
	TextDrawSetProportional(shop_clothes_TD[1], 0);
	TextDrawSetShadow(shop_clothes_TD[1], 0);
	TextDrawSetSelectable(shop_clothes_TD[1], true);

	shop_clothes_TD[2] = TextDrawCreate(181.0001, 359.0888, "back"); // ?????
	TextDrawTextSize(shop_clothes_TD[2], 84.0000, 40.0000);
	TextDrawAlignment(shop_clothes_TD[2], 1);
	TextDrawColor(shop_clothes_TD[2], -1);
	TextDrawBackgroundColor(shop_clothes_TD[2], 255);
	TextDrawFont(shop_clothes_TD[2], 4);
	TextDrawSetProportional(shop_clothes_TD[2], 0);
	TextDrawSetShadow(shop_clothes_TD[2], 0);
	TextDrawSetSelectable(shop_clothes_TD[2], true);

	shop_clothes_TD[3] = TextDrawCreate(12.2000, 253.0623, "buy"); // ?????
	TextDrawTextSize(shop_clothes_TD[3], 79.0000, 37.0000);
	TextDrawAlignment(shop_clothes_TD[3], 1);
	TextDrawColor(shop_clothes_TD[3], -1);
	TextDrawBackgroundColor(shop_clothes_TD[3], 255);
	TextDrawFont(shop_clothes_TD[3], 4);
	TextDrawSetProportional(shop_clothes_TD[3], 0);
	TextDrawSetShadow(shop_clothes_TD[3], 0);
	TextDrawSetSelectable(shop_clothes_TD[3], true);

	shop_clothes_TD[4] = TextDrawCreate(109.7999, 254.0577, "exit"); // ?????
	TextDrawTextSize(shop_clothes_TD[4], 78.0000, 34.0000);
	TextDrawAlignment(shop_clothes_TD[4], 1);
	TextDrawColor(shop_clothes_TD[4], -1);
	TextDrawBackgroundColor(shop_clothes_TD[4], 255);
	TextDrawFont(shop_clothes_TD[4], 4);
	TextDrawSetProportional(shop_clothes_TD[4], 0);
	TextDrawSetShadow(shop_clothes_TD[4], 0);
	TextDrawSetSelectable(shop_clothes_TD[4], true);
	
	shop_clothes_TD[5] = TextDrawCreate(168.5998, 182.8753, "txd:shop_clothes_next_and_back"); // ?????
	TextDrawTextSize(shop_clothes_TD[5], 301.0000, 394.0000);
	TextDrawAlignment(shop_clothes_TD[5], 1);
	TextDrawColor(shop_clothes_TD[5], -1);
	TextDrawBackgroundColor(shop_clothes_TD[5], 255);
	TextDrawFont(shop_clothes_TD[5], 4);
	TextDrawSetProportional(shop_clothes_TD[5], 0);
	TextDrawSetShadow(shop_clothes_TD[5], 0);


	business_menu_TD[0] = TextDrawCreate(124.2000, -35.6488, "txd:business_menu"); // ?????
	TextDrawTextSize(business_menu_TD[0], 392.0000, 514.0000);
	TextDrawAlignment(business_menu_TD[0], 1);
	TextDrawColor(business_menu_TD[0], -1);
	TextDrawBackgroundColor(business_menu_TD[0], 255);
	TextDrawFont(business_menu_TD[0], 4);
	TextDrawSetProportional(business_menu_TD[0], 0);
	TextDrawSetShadow(business_menu_TD[0], 0);

	business_menu_TD[1] = TextDrawCreate(327.3999, 134.5911, "Business_Menu"); // ?????
	TextDrawTextSize(business_menu_TD[1], 168.0000, 88.0000);
	TextDrawAlignment(business_menu_TD[1], 1);
	TextDrawColor(business_menu_TD[1], -1);
	TextDrawBackgroundColor(business_menu_TD[1], 255);
	TextDrawFont(business_menu_TD[1], 4);
	TextDrawSetProportional(business_menu_TD[1], 0);
	TextDrawSetShadow(business_menu_TD[1], 0);
	TextDrawSetSelectable(business_menu_TD[1], true);

	business_menu_TD[2] = TextDrawCreate(327.7998, 228.1734, "Business_Finka"); // ?????
	TextDrawTextSize(business_menu_TD[2], 168.0000, 88.0000);
	TextDrawAlignment(business_menu_TD[2], 1);
	TextDrawColor(business_menu_TD[2], -1);
	TextDrawBackgroundColor(business_menu_TD[2], 255);
	TextDrawFont(business_menu_TD[2], 4);
	TextDrawSetProportional(business_menu_TD[2], 0);
	TextDrawSetShadow(business_menu_TD[2], 0);
	TextDrawSetSelectable(business_menu_TD[2], true);

	business_menu_TD[3] = TextDrawCreate(439.0000, 328.2268, "Business_menu_exit"); // ?????
	TextDrawTextSize(business_menu_TD[3], 66.0000, 30.0000);
	TextDrawAlignment(business_menu_TD[3], 1);
	TextDrawColor(business_menu_TD[3], -1);
	TextDrawBackgroundColor(business_menu_TD[3], 255);
	TextDrawFont(business_menu_TD[3], 4);
	TextDrawSetProportional(business_menu_TD[3], 0);
	TextDrawSetShadow(business_menu_TD[3], 0);
	TextDrawSetSelectable(business_menu_TD[3], true);

	business_menu_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 205.1999, 144.7021, "Business_Name"); // ?????
	PlayerTextDrawLetterSize(playerid, business_menu_PTD[playerid][0], 0.2031, 1.2167);
	PlayerTextDrawAlignment(playerid, business_menu_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, business_menu_PTD[playerid][0], -16776961);
	PlayerTextDrawBackgroundColor(playerid, business_menu_PTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, business_menu_PTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, business_menu_PTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, business_menu_PTD[playerid][0], 0);

	business_menu_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 205.1999, 189.5022, "Jackson_Vendetta"); // ?????
	PlayerTextDrawLetterSize(playerid, business_menu_PTD[playerid][1], 0.1951, 1.4257);
	PlayerTextDrawAlignment(playerid, business_menu_PTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, business_menu_PTD[playerid][1], -16776961);
	PlayerTextDrawBackgroundColor(playerid, business_menu_PTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, business_menu_PTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, business_menu_PTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, business_menu_PTD[playerid][1], 0);

	business_menu_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 206.4000, 235.2977, "100000000$"); // ?????
	PlayerTextDrawLetterSize(playerid, business_menu_PTD[playerid][2], 0.2627, 1.5552);
	PlayerTextDrawAlignment(playerid, business_menu_PTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, business_menu_PTD[playerid][2], 8388863);
	PlayerTextDrawBackgroundColor(playerid, business_menu_PTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, business_menu_PTD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, business_menu_PTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, business_menu_PTD[playerid][2], 0);

	business_menu_PTD[playerid][3] = CreatePlayerTextDraw(playerid, 209.1999, 282.5866, "50000$"); // ?????
	PlayerTextDrawLetterSize(playerid, business_menu_PTD[playerid][3], 0.2643, 1.4855);
	PlayerTextDrawAlignment(playerid, business_menu_PTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, business_menu_PTD[playerid][3], 8388863);
	PlayerTextDrawBackgroundColor(playerid, business_menu_PTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, business_menu_PTD[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, business_menu_PTD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, business_menu_PTD[playerid][3], 0);

	autosalon_color_TD[0] = TextDrawCreate(444.9995, 116.1733, "txd:autosalon_color"); // пусто
	TextDrawTextSize(autosalon_color_TD[0], 189.0000, 238.0000);
	TextDrawAlignment(autosalon_color_TD[0], 1);
	TextDrawColor(autosalon_color_TD[0], -1);
	TextDrawBackgroundColor(autosalon_color_TD[0], 255);
	TextDrawFont(autosalon_color_TD[0], 4);
	TextDrawSetProportional(autosalon_color_TD[0], 0);
	TextDrawSetShadow(autosalon_color_TD[0], 0);

	autosalon_color_TD[1] = TextDrawCreate(464.9999, 201.7911, "color_1"); // пусто
	TextDrawTextSize(autosalon_color_TD[1], 26.0000, 31.0000);
	TextDrawAlignment(autosalon_color_TD[1], 1);
	TextDrawColor(autosalon_color_TD[1], -1);
	TextDrawBackgroundColor(autosalon_color_TD[1], 255);
	TextDrawFont(autosalon_color_TD[1], 4);
	TextDrawSetProportional(autosalon_color_TD[1], 0);
	TextDrawSetShadow(autosalon_color_TD[1], 0);
	TextDrawSetSelectable(autosalon_color_TD[1], true);

	autosalon_color_TD[2] = TextDrawCreate(506.1998, 202.2889, "color_2"); // пусто
	TextDrawTextSize(autosalon_color_TD[2], 26.0000, 31.0000);
	TextDrawAlignment(autosalon_color_TD[2], 1);
	TextDrawColor(autosalon_color_TD[2], -1);
	TextDrawBackgroundColor(autosalon_color_TD[2], 255);
	TextDrawFont(autosalon_color_TD[2], 4);
	TextDrawSetProportional(autosalon_color_TD[2], 0);
	TextDrawSetShadow(autosalon_color_TD[2], 0);
	TextDrawSetSelectable(autosalon_color_TD[2], true);

	autosalon_color_TD[3] = TextDrawCreate(546.5999, 201.7911, "color_3"); // пусто
	TextDrawTextSize(autosalon_color_TD[3], 26.0000, 31.0000);
	TextDrawAlignment(autosalon_color_TD[3], 1);
	TextDrawColor(autosalon_color_TD[3], -1);
	TextDrawBackgroundColor(autosalon_color_TD[3], 255);
	TextDrawFont(autosalon_color_TD[3], 4);
	TextDrawSetProportional(autosalon_color_TD[3], 0);
	TextDrawSetShadow(autosalon_color_TD[3], 0);
	TextDrawSetSelectable(autosalon_color_TD[3], true);

	autosalon_color_TD[4] = TextDrawCreate(587.7998, 202.2889, "color_4"); // пусто
	TextDrawTextSize(autosalon_color_TD[4], 26.0000, 31.0000);
	TextDrawAlignment(autosalon_color_TD[4], 1);
	TextDrawColor(autosalon_color_TD[4], -1);
	TextDrawBackgroundColor(autosalon_color_TD[4], 255);
	TextDrawFont(autosalon_color_TD[4], 4);
	TextDrawSetProportional(autosalon_color_TD[4], 0);
	TextDrawSetShadow(autosalon_color_TD[4], 0);
	TextDrawSetSelectable(autosalon_color_TD[4], true);

	autosalon_color_TD[5] = TextDrawCreate(464.9998, 254.5556, "color_5"); // пусто
	TextDrawTextSize(autosalon_color_TD[5], 26.0000, 31.0000);
	TextDrawAlignment(autosalon_color_TD[5], 1);
	TextDrawColor(autosalon_color_TD[5], -1);
	TextDrawBackgroundColor(autosalon_color_TD[5], 255);
	TextDrawFont(autosalon_color_TD[5], 4);
	TextDrawSetProportional(autosalon_color_TD[5], 0);
	TextDrawSetShadow(autosalon_color_TD[5], 0);
	TextDrawSetSelectable(autosalon_color_TD[5], true);

	autosalon_color_TD[6] = TextDrawCreate(506.1997, 253.0622, "color_6"); // пусто
	TextDrawTextSize(autosalon_color_TD[6], 26.0000, 31.0000);
	TextDrawAlignment(autosalon_color_TD[6], 1);
	TextDrawColor(autosalon_color_TD[6], -1);
	TextDrawBackgroundColor(autosalon_color_TD[6], 255);
	TextDrawFont(autosalon_color_TD[6], 4);
	TextDrawSetProportional(autosalon_color_TD[6], 0);
	TextDrawSetShadow(autosalon_color_TD[6], 0);
	TextDrawSetSelectable(autosalon_color_TD[6], true);

	autosalon_color_TD[7] = TextDrawCreate(546.5999, 252.5645, "color_7"); // пусто
	TextDrawTextSize(autosalon_color_TD[7], 26.0000, 31.0000);
	TextDrawAlignment(autosalon_color_TD[7], 1);
	TextDrawColor(autosalon_color_TD[7], -1);
	TextDrawBackgroundColor(autosalon_color_TD[7], 255);
	TextDrawFont(autosalon_color_TD[7], 4);
	TextDrawSetProportional(autosalon_color_TD[7], 0);
	TextDrawSetShadow(autosalon_color_TD[7], 0);
	TextDrawSetSelectable(autosalon_color_TD[7], true);

	autosalon_color_TD[8] = TextDrawCreate(587.8002, 253.5600, "color_8"); // пусто
	TextDrawTextSize(autosalon_color_TD[8], 26.0000, 31.0000);
	TextDrawAlignment(autosalon_color_TD[8], 1);
	TextDrawColor(autosalon_color_TD[8], -1);
	TextDrawBackgroundColor(autosalon_color_TD[8], 255);
	TextDrawFont(autosalon_color_TD[8], 4);
	TextDrawSetProportional(autosalon_color_TD[8], 0);
	TextDrawSetShadow(autosalon_color_TD[8], 0);
	TextDrawSetSelectable(autosalon_color_TD[8], true);

	autosalon_select_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 297.1998, 399.5642, "BMW_X5"); // ?????
	PlayerTextDrawLetterSize(playerid, autosalon_select_PTD[playerid][0], 0.3619, 1.2017);
	PlayerTextDrawAlignment(playerid, autosalon_select_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, autosalon_select_PTD[playerid][0], -2139062017);
	PlayerTextDrawBackgroundColor(playerid, autosalon_select_PTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, autosalon_select_PTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, autosalon_select_PTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, autosalon_select_PTD[playerid][0], 0);

    autosalon_price_TD[0] = TextDrawCreate(13.3999, 119.6577, "txd:autosalon_price"); // пусто
	TextDrawTextSize(autosalon_price_TD[0], 209.0000, 238.0000);
	TextDrawAlignment(autosalon_price_TD[0], 1);
	TextDrawColor(autosalon_price_TD[0], -1);
	TextDrawBackgroundColor(autosalon_price_TD[0], 255);
	TextDrawFont(autosalon_price_TD[0], 4);
	TextDrawSetProportional(autosalon_price_TD[0], 0);
	TextDrawSetShadow(autosalon_price_TD[0], 0);

	autosalon_price_TD[1] = TextDrawCreate(28.9999, 258.5378, "autosalon_buy"); // пусто
	TextDrawTextSize(autosalon_price_TD[1], 80.0000, 34.0000);
	TextDrawAlignment(autosalon_price_TD[1], 1);
	TextDrawColor(autosalon_price_TD[1], -1);
	TextDrawBackgroundColor(autosalon_price_TD[1], 255);
	TextDrawFont(autosalon_price_TD[1], 4);
	TextDrawSetProportional(autosalon_price_TD[1], 0);
	TextDrawSetShadow(autosalon_price_TD[1], 0);
	TextDrawSetSelectable(autosalon_price_TD[1], true);

	autosalon_price_TD[2] = TextDrawCreate(126.5999, 258.5378, "autosalon_exit"); // пусто
	TextDrawTextSize(autosalon_price_TD[2], 80.0000, 34.0000);
	TextDrawAlignment(autosalon_price_TD[2], 1);
	TextDrawColor(autosalon_price_TD[2], -1);
	TextDrawBackgroundColor(autosalon_price_TD[2], 255);
	TextDrawFont(autosalon_price_TD[2], 4);
	TextDrawSetProportional(autosalon_price_TD[2], 0);
	TextDrawSetShadow(autosalon_price_TD[2], 0);
	TextDrawSetSelectable(autosalon_price_TD[2], true);

	autosalon_price_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 89.6000, 214.3911, "25000000_P"); // пусто
	PlayerTextDrawLetterSize(playerid, autosalon_price_PTD[playerid][0], 0.3615, 1.4805);
	PlayerTextDrawTextSize(playerid, autosalon_price_PTD[playerid][0], -20.0000, 0.0000);
	PlayerTextDrawAlignment(playerid, autosalon_price_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, autosalon_price_PTD[playerid][0], 8388863);
	PlayerTextDrawBackgroundColor(playerid, autosalon_price_PTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, autosalon_price_PTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, autosalon_price_PTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, autosalon_price_PTD[playerid][0], 0);

    autosalon_select_TD[0] = TextDrawCreate(180.9997, 227.6753, "txd:autosalon_input"); // пусто
	TextDrawTextSize(autosalon_select_TD[0], 278.0000, 338.0000);
	TextDrawAlignment(autosalon_select_TD[0], 1);
	TextDrawColor(autosalon_select_TD[0], -1);
	TextDrawBackgroundColor(autosalon_select_TD[0], 255);
	TextDrawFont(autosalon_select_TD[0], 4);
	TextDrawSetProportional(autosalon_select_TD[0], 0);
	TextDrawSetShadow(autosalon_select_TD[0], 0);

	autosalon_select_TD[1] = TextDrawCreate(192.2000, 370.0401, "input_1"); // пусто
	TextDrawTextSize(autosalon_select_TD[1], 42.0000, 53.0000);
	TextDrawAlignment(autosalon_select_TD[1], 1);
	TextDrawColor(autosalon_select_TD[1], -1);
	TextDrawBackgroundColor(autosalon_select_TD[1], 255);
	TextDrawFont(autosalon_select_TD[1], 4);
	TextDrawSetProportional(autosalon_select_TD[1], 0);
	TextDrawSetShadow(autosalon_select_TD[1], 0);
	TextDrawSetSelectable(autosalon_select_TD[1], true);

	autosalon_select_TD[2] = TextDrawCreate(406.2001, 368.5469, "input_2"); // пусто
	TextDrawTextSize(autosalon_select_TD[2], 42.0000, 53.0000);
	TextDrawAlignment(autosalon_select_TD[2], 1);
	TextDrawColor(autosalon_select_TD[2], -1);
	TextDrawBackgroundColor(autosalon_select_TD[2], 255);
	TextDrawFont(autosalon_select_TD[2], 4);
	TextDrawSetProportional(autosalon_select_TD[2], 0);
	TextDrawSetShadow(autosalon_select_TD[2], 0);
	TextDrawSetSelectable(autosalon_select_TD[2], true);

/*	server_logo_TD[0] = TextDrawCreate(11.5238, 423.8132, "Истинная Россия");
    TextDrawLetterSize(server_logo_TD[0], 0.3356, 1.2245);
    TextDrawAlignment(server_logo_TD[0], 1);
    TextDrawColor(server_logo_TD[0], 865730559);
    TextDrawBackgroundColor(server_logo_TD[0], 255);
    TextDrawFont(server_logo_TD[0], 2);
    TextDrawSetProportional(server_logo_TD[0], 1);
    TextDrawSetShadow(server_logo_TD[0], 1);

    server_logo_TD[1] = TextDrawCreate(33.6190, 433.1999, SERVER_SITE);
    TextDrawLetterSize(server_logo_TD[1], 0.2689, 1.0026);
    TextDrawAlignment(server_logo_TD[1], 1);
    TextDrawColor(server_logo_TD[1], -1);
    TextDrawBackgroundColor(server_logo_TD[1], 255);
    TextDrawFont(server_logo_TD[1], 2);
    TextDrawSetProportional(server_logo_TD[1], 1);
    TextDrawSetShadow(server_logo_TD[1], 1);*/

/*	server_logo_TD[0] = TextDrawCreate(548.000305, 6.968833, "T");
	TextDrawLetterSize(server_logo_TD[0], 0.733106, 3.317331);
	TextDrawAlignment(server_logo_TD[0], 1);
	TextDrawColor(server_logo_TD[0], 865730559);
	TextDrawSetShadow(server_logo_TD[0], 1);
	TextDrawSetOutline(server_logo_TD[0], 0);
	TextDrawBackgroundColor(server_logo_TD[0], 85);
	TextDrawFont(server_logo_TD[0], 2);
	TextDrawSetProportional(server_logo_TD[0], 1);

	server_logo_TD[1] = TextDrawCreate(554.221801, 24.888874, " ruee RP");
	TextDrawLetterSize(server_logo_TD[1], 0.193999, 0.982752);
	TextDrawAlignment(server_logo_TD[1], 1);
	TextDrawColor(server_logo_TD[1], -1);
	TextDrawSetShadow(server_logo_TD[1], 1);
	TextDrawSetOutline(server_logo_TD[1], 0);
	TextDrawBackgroundColor(server_logo_TD[1], 51);
	TextDrawFont(server_logo_TD[1], 2);
	TextDrawSetProportional(server_logo_TD[1], 1);

	server_logo_TD[2] = TextDrawCreate(615.556152, 19.413391, "beta server");
	TextDrawLetterSize(server_logo_TD[2], 0.160221, 0.957865);
	TextDrawAlignment(server_logo_TD[2], 3);
	TextDrawColor(server_logo_TD[2], 2006581247);
	TextDrawSetShadow(server_logo_TD[2], 0);
	TextDrawSetOutline(server_logo_TD[2], 0);
	TextDrawBackgroundColor(server_logo_TD[2], 51);
	TextDrawFont(server_logo_TD[2], 2);
	TextDrawSetProportional(server_logo_TD[2], 1);

	server_logo_TD[3] = TextDrawCreate(583.666809, 31.862302, SERVER_SITE);
	TextDrawLetterSize(server_logo_TD[3], 0.149554, 0.888175);
	TextDrawAlignment(server_logo_TD[3], 2);
	TextDrawColor(server_logo_TD[3], 51);
	TextDrawSetShadow(server_logo_TD[3], 0);
	TextDrawSetOutline(server_logo_TD[3], 0);
	TextDrawBackgroundColor(server_logo_TD[3], 51);
	TextDrawFont(server_logo_TD[3], 2);
	TextDrawSetProportional(server_logo_TD[3], 1);
	*/

	gps_on_TD[0] = TextDrawCreate(485.3998, 94.2711, "txd:gps_on"); // ?????
	TextDrawTextSize(gps_on_TD[0], 146.0000, 193.0000);
	TextDrawAlignment(gps_on_TD[0], 1);
	TextDrawColor(gps_on_TD[0], -1);
	TextDrawBackgroundColor(gps_on_TD[0], 255);
	TextDrawFont(gps_on_TD[0], 4);
	TextDrawSetProportional(gps_on_TD[0], 0);
	TextDrawSetShadow(gps_on_TD[0], 0);

	stop_anim_TD[0] = TextDrawCreate(263.3999, 347.1419, "txd:stop_anim"); // ?????
	TextDrawTextSize(stop_anim_TD[0], 114.0000, 154.0000);
	TextDrawAlignment(stop_anim_TD[0], 1);
	TextDrawColor(stop_anim_TD[0], -1);
	TextDrawBackgroundColor(stop_anim_TD[0], 255);
	TextDrawFont(stop_anim_TD[0], 4);
	TextDrawSetProportional(stop_anim_TD[0], 0);
	TextDrawSetShadow(stop_anim_TD[0], 0);
	TextDrawSetSelectable(stop_anim_TD[0], true);
	

/*
	speedometr_TD[0] = TextDrawCreate(405.777832, 353.926574, "usebox");
	TextDrawLetterSize(speedometr_TD[0], 0.000000, 8.921848);
	TextDrawTextSize(speedometr_TD[0], 232.444549, 0.000000);
	TextDrawAlignment(speedometr_TD[0], 1);
	TextDrawColor(speedometr_TD[0], 0);
	TextDrawUseBox(speedometr_TD[0], true);
	TextDrawBoxColor(speedometr_TD[0], 102);
	TextDrawSetShadow(speedometr_TD[0], 0);
	TextDrawSetOutline(speedometr_TD[0], 0);
	TextDrawFont(speedometr_TD[0], 0);

	speedometr_TD[1] = TextDrawCreate(405.889160, 353.931030, "usebox");
	TextDrawLetterSize(speedometr_TD[1], 0.000000, -0.189257);
	TextDrawTextSize(speedometr_TD[1], 232.444549, 0.000000);
	TextDrawAlignment(speedometr_TD[1], 1);
	TextDrawColor(speedometr_TD[1], 0);
	TextDrawUseBox(speedometr_TD[1], true);
	TextDrawBoxColor(speedometr_TD[1], 865730457);
	TextDrawSetShadow(speedometr_TD[1], 0);
	TextDrawSetOutline(speedometr_TD[1], 0);
	TextDrawFont(speedometr_TD[1], 0);

	speedometr_TD[2] = TextDrawCreate(318.444274, 369.848968, "км/ч");
	TextDrawLetterSize(speedometr_TD[2], 0.260666, 1.127110);
	TextDrawAlignment(speedometr_TD[2], 2);
	TextDrawColor(speedometr_TD[2], -1);
	TextDrawSetShadow(speedometr_TD[2], 1);
	TextDrawSetOutline(speedometr_TD[2], 0);
	TextDrawBackgroundColor(speedometr_TD[2], 51);
	TextDrawFont(speedometr_TD[2], 2);
	TextDrawSetProportional(speedometr_TD[2], 1);

	speedometr_TD[3] = TextDrawCreate(319.333618, 377.813262, "llllllllllllllllllllllllllllllllllllllllllllllll");
	TextDrawLetterSize(speedometr_TD[3], 0.359777, 1.898668);
	TextDrawAlignment(speedometr_TD[3], 2);
	TextDrawColor(speedometr_TD[3], -2004318055);
	TextDrawSetShadow(speedometr_TD[3], 1);
	TextDrawSetOutline(speedometr_TD[3], 0);
	TextDrawBackgroundColor(speedometr_TD[3], 51);
	TextDrawFont(speedometr_TD[3], 1);
	TextDrawSetProportional(speedometr_TD[3], 1);

	speedometr_TD[4] = TextDrawCreate(238.888977, 396.231140, "hud:radar_centre");
	TextDrawLetterSize(speedometr_TD[4], 0.000000, 0.000000);
	TextDrawTextSize(speedometr_TD[4], 14.222206, 11.946636);
	TextDrawAlignment(speedometr_TD[4], 1);
	TextDrawColor(speedometr_TD[4], -1);
	TextDrawSetShadow(speedometr_TD[4], 0);
	TextDrawSetOutline(speedometr_TD[4], 0);
	TextDrawFont(speedometr_TD[4], 4);

	speedometr_TD[5] = TextDrawCreate(240.333435, 409.177795, "hud:radar_modgarage");
	TextDrawLetterSize(speedometr_TD[5], 0.000000, 0.000000);
	TextDrawTextSize(speedometr_TD[5], 11.555538, 11.946636);
	TextDrawAlignment(speedometr_TD[5], 1);
	TextDrawColor(speedometr_TD[5], -1);
	TextDrawSetShadow(speedometr_TD[5], 0);
	TextDrawSetOutline(speedometr_TD[5], 0);
	TextDrawFont(speedometr_TD[5], 4);

	speedometr_TD[6] = TextDrawCreate(274.888916, 423.111022, "ключ");
	TextDrawLetterSize(speedometr_TD[6], 0.189998, 1.052443);
	TextDrawAlignment(speedometr_TD[6], 3);
	TextDrawColor(speedometr_TD[6], -1);
	TextDrawSetShadow(speedometr_TD[6], 1);
	TextDrawSetOutline(speedometr_TD[6], 0);
	TextDrawBackgroundColor(speedometr_TD[6], 51);
	TextDrawFont(speedometr_TD[6], 2);
	TextDrawSetProportional(speedometr_TD[6], 1);

	speedometr_TD[7] = TextDrawCreate(287.777770, 386.773406, "~b~~h~~h~~h~l");
	TextDrawLetterSize(speedometr_TD[7], 0.151776, 6.055101);
	TextDrawAlignment(speedometr_TD[7], 2);
	TextDrawColor(speedometr_TD[7], -1);
	TextDrawSetShadow(speedometr_TD[7], 0);
	TextDrawSetOutline(speedometr_TD[7], 0);
	TextDrawBackgroundColor(speedometr_TD[7], 51);
	TextDrawFont(speedometr_TD[7], 1);
	TextDrawSetProportional(speedometr_TD[7], 1);

	speedometr_TD[8] = TextDrawCreate(353.555541, 417.635589, "~b~~h~~h~~h~-");
	TextDrawLetterSize(speedometr_TD[8], 9.387352, 0.903110);
	TextDrawAlignment(speedometr_TD[8], 2);
	TextDrawColor(speedometr_TD[8], -1);
	TextDrawSetShadow(speedometr_TD[8], 1);
	TextDrawSetOutline(speedometr_TD[8], 0);
	TextDrawBackgroundColor(speedometr_TD[8], 51);
	TextDrawFont(speedometr_TD[8], 1);
	TextDrawSetProportional(speedometr_TD[8], 1);
	*/

	select_TD[0] = TextDrawCreate(229.575424, 395.499969, "<<");
	TextDrawLetterSize(select_TD[0], 0.449999, 1.600000);
	TextDrawTextSize(select_TD[0], 229.000 + 20, 18.000);
	TextDrawAlignment(select_TD[0], 1);
	TextDrawColor(select_TD[0], -1);
	TextDrawSetShadow(select_TD[0], 0);
	TextDrawSetOutline(select_TD[0], 1);
	TextDrawBackgroundColor(select_TD[0], 51);
	TextDrawFont(select_TD[0], 1);
	TextDrawSetProportional(select_TD[0], 1);
	TextDrawSetSelectable(select_TD[0], true);

	select_TD[1] = TextDrawCreate(407.613922, 395.499969, ">>");
	TextDrawLetterSize(select_TD[1], 0.449999, 1.600000);
	TextDrawTextSize(select_TD[1], 407.000 + 20, 18.000);
	TextDrawAlignment(select_TD[1], 3);
	TextDrawColor(select_TD[1], -1);
	TextDrawSetShadow(select_TD[1], 0);
	TextDrawSetOutline(select_TD[1], 1);
	TextDrawBackgroundColor(select_TD[1], 51);
	TextDrawFont(select_TD[1], 3);
	TextDrawSetProportional(select_TD[1], 1);
	TextDrawSetSelectable(select_TD[1], true);

	select_TD[2] = TextDrawCreate(285.798065, 395.499969, "SELECT");
	TextDrawLetterSize(select_TD[2], 0.449999, 1.600000);
	TextDrawTextSize(select_TD[2], 285.000 + 65, 14.000);
	TextDrawAlignment(select_TD[2], 1);
	TextDrawColor(select_TD[2], -1);
	TextDrawSetShadow(select_TD[2], 0);
	TextDrawSetOutline(select_TD[2], 1);
	TextDrawBackgroundColor(select_TD[2], 51);
	TextDrawFont(select_TD[2], 2);
	TextDrawSetProportional(select_TD[2], 1);
	TextDrawSetSelectable(select_TD[2], true);

	select_TD[3] = TextDrawCreate(585.182983, 159.250045, "EXIT");
	TextDrawLetterSize(select_TD[3], 0.449999, 1.600000);
	TextDrawTextSize(select_TD[3], 585.000 + 30, 14.000);
	TextDrawAlignment(select_TD[3], 1);
	TextDrawColor(select_TD[3], -16776961);
	TextDrawSetShadow(select_TD[3], 0);
	TextDrawSetOutline(select_TD[3], 1);
	TextDrawBackgroundColor(select_TD[3], 51);
	TextDrawFont(select_TD[3], 2);
	TextDrawSetProportional(select_TD[3], 1);
	TextDrawSetSelectable(select_TD[3], true);

	select_TD[4] = TextDrawCreate(630.755493, 158.416656, "usebox");
	TextDrawLetterSize(select_TD[4], 0.000000, 1.498149);
	TextDrawTextSize(select_TD[4], 578.497802, 0.000000);
	TextDrawAlignment(select_TD[4], 1);
	TextDrawColor(select_TD[4], 0);
	TextDrawUseBox(select_TD[4], true);
	TextDrawBoxColor(select_TD[4], 102);
	TextDrawSetShadow(select_TD[4], 0);
	TextDrawSetOutline(select_TD[4], 0);
	TextDrawFont(select_TD[4], 0);

	select_TD[5] = TextDrawCreate(229.701324, 401.083312, "usebox");
	TextDrawLetterSize(select_TD[5], 0.000000, 0.201854);
	TextDrawTextSize(select_TD[5], 406.082000, 0.000000);
	TextDrawAlignment(select_TD[5], 1);
	TextDrawColor(select_TD[5], 0);
	TextDrawUseBox(select_TD[5], true);
	TextDrawBoxColor(select_TD[5], 102);
	TextDrawSetShadow(select_TD[5], 0);
	TextDrawSetOutline(select_TD[5], 0);
	TextDrawFont(select_TD[5], 0);
//

	buy_car_TD[0] = TextDrawCreate(626.000000, 134.406661, "usebox");
	TextDrawLetterSize(buy_car_TD[0], 0.110399, 9.810622);
	TextDrawTextSize(buy_car_TD[0], 442.000000, 0.000000);
	TextDrawAlignment(buy_car_TD[0], 1);
	TextDrawColor(buy_car_TD[0], 0);
	TextDrawUseBox(buy_car_TD[0], true);
	TextDrawBoxColor(buy_car_TD[0], 102);
	TextDrawSetShadow(buy_car_TD[0], 0);
	TextDrawSetOutline(buy_car_TD[0], 0);
	TextDrawFont(buy_car_TD[0], 0);

	buy_car_TD[1] = TextDrawCreate(626.000000, 226.406677, "usebox");
	TextDrawLetterSize(buy_car_TD[1], 0.110399, 6.765620);
	TextDrawTextSize(buy_car_TD[1], 442.000000, 0.000000);
	TextDrawAlignment(buy_car_TD[1], 1);
	TextDrawColor(buy_car_TD[1], 0);
	TextDrawUseBox(buy_car_TD[1], true);
	TextDrawBoxColor(buy_car_TD[1], 102);
	TextDrawSetShadow(buy_car_TD[1], 0);
	TextDrawSetOutline(buy_car_TD[1], 0);
	TextDrawFont(buy_car_TD[1], 0);

	capture_TD[0] = TextDrawCreate(170.444442, 260.842224, "usebox");
	TextDrawLetterSize(capture_TD[0], 0.000000, 4.293703);
	TextDrawTextSize(capture_TD[0], -0.222222, 0.000000);
	TextDrawAlignment(capture_TD[0], 1);
	TextDrawColor(capture_TD[0], 0);
	TextDrawUseBox(capture_TD[0], true);
	TextDrawBoxColor(capture_TD[0], 102);
	TextDrawSetShadow(capture_TD[0], 0);
	TextDrawSetOutline(capture_TD[0], 0);
	TextDrawFont(capture_TD[0], 0);

	capture_TD[1] = TextDrawCreate(3.555550, 260.337829, "_");
	TextDrawLetterSize(capture_TD[1], 0.410000, 1.380977);
	TextDrawAlignment(capture_TD[1], 1);
	TextDrawColor(capture_TD[1], 13369599);
	TextDrawSetShadow(capture_TD[1], 0);
	TextDrawSetOutline(capture_TD[1], 1);
	TextDrawBackgroundColor(capture_TD[1], 255);
	TextDrawFont(capture_TD[1], 1);
	TextDrawSetProportional(capture_TD[1], 1);

	green_zone_TD[0] = TextDrawCreate(4.6000, 187.8533, "txd:green_zone"); // ?????
	TextDrawTextSize(green_zone_TD[0], 143.0000, 174.0000);
	TextDrawAlignment(green_zone_TD[0], 1);
	TextDrawColor(green_zone_TD[0], -1);
	TextDrawBackgroundColor(green_zone_TD[0], 255);
	TextDrawFont(green_zone_TD[0], 4);
	TextDrawSetProportional(green_zone_TD[0], 0);
	TextDrawSetShadow(green_zone_TD[0], 0);

	radio_edit_TD = TextDrawCreate(9.838958, 385.000122, "_");
	TextDrawLetterSize(radio_edit_TD, 0.362385, 1.605833);
	TextDrawTextSize(radio_edit_TD, -0.468522, -161.583328);
	TextDrawAlignment(radio_edit_TD, 1);
	TextDrawColor(radio_edit_TD, -1);
	TextDrawSetShadow(radio_edit_TD, 0);
	TextDrawSetOutline(radio_edit_TD, 1);
	TextDrawBackgroundColor(radio_edit_TD, 255);
	TextDrawFont(radio_edit_TD, 1);
	TextDrawSetProportional(radio_edit_TD, 1);

	change_color_TD[0] = TextDrawCreate(434.889099, 332.522338, "usebox");
	TextDrawLetterSize(change_color_TD[0], 0.000000, 9.385062);
	TextDrawTextSize(change_color_TD[0], 207.777801, 0.000000);
	TextDrawAlignment(change_color_TD[0], 1);
	TextDrawColor(change_color_TD[0], 0);
	TextDrawUseBox(change_color_TD[0], true);
	TextDrawBoxColor(change_color_TD[0], 102);
	TextDrawSetShadow(change_color_TD[0], 0);
	TextDrawSetOutline(change_color_TD[0], 0);
	TextDrawFont(change_color_TD[0], 0);

	change_color_TD[1] = TextDrawCreate(434.000000, 333.517761, "usebox");
	TextDrawLetterSize(change_color_TD[1], 0.000000, 1.121358);
	TextDrawTextSize(change_color_TD[1], 208.666671, 0.000000);
	TextDrawAlignment(change_color_TD[1], 1);
	TextDrawColor(change_color_TD[1], 0);
	TextDrawUseBox(change_color_TD[1], true);
	TextDrawBoxColor(change_color_TD[1], 865730389);
	TextDrawSetShadow(change_color_TD[1], 0);
	TextDrawSetOutline(change_color_TD[1], 0);
	TextDrawFont(change_color_TD[1], 0);

	change_color_TD[2] = TextDrawCreate(322.222564, 333.511169, "Перекраска транспорта");
	TextDrawLetterSize(change_color_TD[2], 0.219777, 1.077329);
	TextDrawAlignment(change_color_TD[2], 2);
	TextDrawColor(change_color_TD[2], -1);
	TextDrawSetShadow(change_color_TD[2], 1);
	TextDrawSetOutline(change_color_TD[2], 0);
	TextDrawBackgroundColor(change_color_TD[2], 51);
	TextDrawFont(change_color_TD[2], 2);
	TextDrawSetProportional(change_color_TD[2], 1);

	change_color_TD[3] = TextDrawCreate(321.778656, 402.717987, "usebox");
	TextDrawLetterSize(change_color_TD[3], 0.000000, 1.453209);
	TextDrawTextSize(change_color_TD[3], 208.666885, 0.000000);
	TextDrawAlignment(change_color_TD[3], 1);
	TextDrawColor(change_color_TD[3], 0);
	TextDrawUseBox(change_color_TD[3], true);
	TextDrawBoxColor(change_color_TD[3], 1724658517);
	TextDrawSetShadow(change_color_TD[3], 0);
	TextDrawSetOutline(change_color_TD[3], 0);
	TextDrawBackgroundColor(change_color_TD[3], 1714657791);
	TextDrawFont(change_color_TD[3], 0);
	TextDrawSetSelectable(change_color_TD[3], true);

	change_color_TD[4] = TextDrawCreate(433.889801, 402.722534, "usebox");
	TextDrawLetterSize(change_color_TD[4], 0.000000, 1.453209);
	TextDrawTextSize(change_color_TD[4], 319.333526, 0.000000);
	TextDrawAlignment(change_color_TD[4], 1);
	TextDrawColor(change_color_TD[4], 0);
	TextDrawUseBox(change_color_TD[4], true);
	TextDrawBoxColor(change_color_TD[4], -11193515);
	TextDrawSetShadow(change_color_TD[4], 0);
	TextDrawSetOutline(change_color_TD[4], 0);
	TextDrawFont(change_color_TD[4], 0);
	TextDrawSetSelectable(change_color_TD[4], true);

	change_color_TD[5] = TextDrawCreate(265.110870, 404.222503, "Выбрать");
	TextDrawLetterSize(change_color_TD[5], 0.222444, 1.052441);
	TextDrawAlignment(change_color_TD[5], 2);
	TextDrawColor(change_color_TD[5], -1);
	TextDrawSetShadow(change_color_TD[5], 1);
	TextDrawSetOutline(change_color_TD[5], 0);
	TextDrawBackgroundColor(change_color_TD[5], 51);
	TextDrawFont(change_color_TD[5], 2);
	TextDrawSetProportional(change_color_TD[5], 1);

	change_color_TD[6] = TextDrawCreate(377.444671, 404.715820, "Отмена");
	TextDrawLetterSize(change_color_TD[6], 0.224666, 1.012619);
	TextDrawAlignment(change_color_TD[6], 2);
	TextDrawColor(change_color_TD[6], -1);
	TextDrawSetShadow(change_color_TD[6], 1);
	TextDrawSetOutline(change_color_TD[6], 0);
	TextDrawBackgroundColor(change_color_TD[6], 51);
	TextDrawFont(change_color_TD[6], 2);
	TextDrawSetProportional(change_color_TD[6], 1);

	print("[TextDraw]: Все текстдравы созданы");
}

stock CreateMenus()
{
	admin_spec_menu = CreateMenu("_", 1, 550.0, 130.0, 50.0);
    AddMenuItem(admin_spec_menu, 0, "-EXIT-");
    AddMenuItem(admin_spec_menu, 0, "Update");
    AddMenuItem(admin_spec_menu, 0, "Stats");
    AddMenuItem(admin_spec_menu, 0, "Skick");
    AddMenuItem(admin_spec_menu, 0, "Mute");
    AddMenuItem(admin_spec_menu, 0, "Slap");
    AddMenuItem(admin_spec_menu, 0, "GMTest");
    AddMenuItem(admin_spec_menu, 0, "Info");
    AddMenuItem(admin_spec_menu, 0, "-EXIT-");


	/*
	reg_select_skin_menu = CreateMenu("Skin", 1, 150.0, 250.0, 60.0, 60.0);
	AddMenuItem(reg_select_skin_menu, 0, "Next >>");
    AddMenuItem(reg_select_skin_menu, 0, "<< Prev");
    AddMenuItem(reg_select_skin_menu, 0, "OK");
	*/

	print("[Menu]: Все меню созданы");
}

stock CreateVehicles()
{
	new spawn_time = 60 * 5; // 5 минут

	// --------------- Автобусы
	AddStaticVehicleEx(418,758.8998,723.5314,12.2439,248.7655,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // Маршрутка 1
	AddStaticVehicleEx(418,757.3745,719.7014,12.1885,249.3062,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // Маршрутка 2
	AddStaticVehicleEx(418,755.6907,715.4114,12.1333,248.9229,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // Маршрутка 3
	AddStaticVehicleEx(418,754.1324,711.1880,12.0992,249.3299,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // Маршрутка 4
	AddStaticVehicleEx(418,752.6511,707.2150,12.0903,248.8002,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // Маршрутка 5
	AddStaticVehicleEx(418,750.8207,702.5714,12.0930,248.1884,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // Маршрутка 6
	AddStaticVehicleEx(418,749.1871,698.3358,12.0932,249.0095,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // Маршрутка 7
	AddStaticVehicleEx(418,747.5515,694.0026,12.0930,249.3973,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // Маршрутка 8
	AddStaticVehicleEx(418,745.9255,689.8022,12.0931,249.8988,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // Маршрутка 9
	AddStaticVehicleEx(418,744.3026,685.6509,12.0931,249.3905,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // Маршрутка 10
	AddStaticVehicleEx(418,742.6512,681.3754,12.0930,249.4450,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // Маршрутка 11
	AddStaticVehicleEx(418,741.0107,677.0425,12.0931,249.4603,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // Маршрутка 12
	AddStaticVehicleEx(418,739.3386,672.7777,12.0929,249.4026,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // Маршрутка 13
	AddStaticVehicleEx(418,737.7796,668.5155,12.0930,249.2589,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // Маршрутка 14
	AddStaticVehicleEx(418,736.0520,663.8519,12.0930,250.1295,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // Маршрутка 15
	AddStaticVehicleEx(418,734.3118,659.4240,12.0928,249.0372,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // Маршрутка 16
	AddStaticVehicleEx(418,732.4960,654.7409,12.0930,249.3797,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // Маршрутка 17
	AddStaticVehicleEx(418,730.8508,650.4247,12.0930,249.0664,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // Маршрутка 18
	AddStaticVehicleEx(418,729.2156,645.9833,12.0930,249.3153,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // Маршрутка 19
	AddStaticVehicleEx(418,727.4211,641.1423,12.0930,249.6270,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // Маршрутка 20

	/*такси
	AddStaticVehicleEx(421,1872.5802,2260.5298,15.1562,90.4024,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // Автошкола, такси 1
	AddStaticVehicleEx(421,1872.5099,2264.3132,15.1572,90.1363,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // Автошкола, такси 2
	AddStaticVehicleEx(421,1872.5029,2267.6094,15.1456,90.0060,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // Автошкола, такси 3
	AddStaticVehicleEx(421,1872.4307,2270.8154,15.1490,90.4211,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // Автошкола, такси 4
	AddStaticVehicleEx(421,1872.4064,2273.9580,15.1511,90.3450,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // Автошкола, такси 5

	AddStaticVehicleEx(421,-2490.6890,2846.5657,37.5173,89.6803,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // Эдово, такси 1
	AddStaticVehicleEx(421,-2490.6812,2842.3467,37.5189,89.4857,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // Эдово, такси 2
	AddStaticVehicleEx(421,-2490.6860,2838.0046,37.5068,90.3039,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // Эдово, такси 3
	AddStaticVehicleEx(421,-2490.7419,2833.7920,37.5068,90.2202,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // Эдово, такси 4
	AddStaticVehicleEx(421,-2490.8013,2829.9333,37.5071,89.7149,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // Эдово, такси 5

	AddStaticVehicleEx(421,-245.0356,453.3494,12.7324,73.8823,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // Больница, такси 1
	AddStaticVehicleEx(421,-246.2037,449.3405,12.7325,74.0256,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // Больница, такси 2
	AddStaticVehicleEx(421,-247.3436,445.4543,12.7325,73.9557,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // Больница, такси 3
	AddStaticVehicleEx(421,-248.5921,441.2789,12.7437,73.4070,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // Больница, такси 4
	AddStaticVehicleEx(421,-249.6691,437.3716,12.7437,73.7906,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // Больница, такси 5

	AddStaticVehicleEx(421,-2399.8335,197.4634,21.0467,258.4910,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // Лыткарино, такси 1
	AddStaticVehicleEx(421,-2400.6265,193.7770,21.0451,258.1457,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // Лыткарино, такси 2
	AddStaticVehicleEx(421,-2401.4087,189.9429,21.0426,258.7071,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // Лыткарино, такси 3
	AddStaticVehicleEx(421,-2402.0530,186.2944,21.0539,259.4415,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // Лыткарино, такси 4
	AddStaticVehicleEx(421,-2402.9199,182.1572,21.0538,259.6259,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // Лыткарино, такси 5
*/
/*	// --------------- Развозчики прод
	CreateVehicle(609,559.9359,1733.5430,12.1656,180.2581,3,3, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER); //
	CreateVehicle(609,563.3645,1733.5222,12.1624,179.9105,3,3, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER); //
	CreateVehicle(609,566.7790,1733.4283,12.1592,180.1140,3,3, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER); //
	CreateVehicle(609,570.2552,1733.3171,12.1605,180.4367,3,3, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER); //
	CreateVehicle(514,577.0301,1732.2271,12.4212,180.8919,3,3, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER); //
	CreateVehicle(514,580.5125,1732.1981,12.4211,178.5292,3,3, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER); //

	// --------------- Развозчики топлива
	CreateVehicle(514,583.8480,1732.2230,12.4207,178.4962,3,3, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER);*/

	// --------------- Механики
	CreateVehicle(525,1856.6643,-106.4669,15.5701,205.9911,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_MECHANIC); // Механики 1
	CreateVehicle(525,1846.6710,-111.2327,15.5693,205.0836,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_MECHANIC); // Механики 2
	CreateVehicle(525,1836.6302,-116.0337,15.5716,205.5031,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_MECHANIC); // Механики 3
	CreateVehicle(525,1826.5474,-120.8417,15.5719,205.3838,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_MECHANIC); // Механики 4
	CreateVehicle(525,1816.5082,-125.6350,15.5664,205.5100,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_MECHANIC); // Механики 5

	// --------------- МЧС (Пожарник)
	/*
	// батырево
	CreateVehicle(544,1833.9083,2522.2378,15.8410,126.4627,3,1, spawn_time, 0, VEHICLE_ACTION_TYPE_NONE);
	CreateVehicle(544,1830.9589,2526.5569,15.8433,125.1378,3,1, spawn_time, 0, VEHICLE_ACTION_TYPE_NONE);
	CreateVehicle(407,1839.2209,2506.0569,15.8813,123.6029,3,1, spawn_time, 0, VEHICLE_ACTION_TYPE_NONE);
	CreateVehicle(407,1842.2141,2501.6240,15.8911,125.9585,3,1, spawn_time, 0, VEHICLE_ACTION_TYPE_NONE);
	CreateVehicle(407,1836.1093,2510.9060,15.8818,124.8976,3,1, spawn_time, 0, VEHICLE_ACTION_TYPE_NONE);

	// Арзамасская
	CreateVehicle(544,1577.5398,-287.9251,4.1764,88.8271,3,1, spawn_time, 0, VEHICLE_ACTION_TYPE_NONE);
	CreateVehicle(544,1577.6602,-282.3537,4.1783,88.0708,3,1, spawn_time, 0, VEHICLE_ACTION_TYPE_NONE);
	CreateVehicle(407,1574.9150,-267.0268,4.2169,88.4024,3,1, spawn_time, 0, VEHICLE_ACTION_TYPE_NONE);
	CreateVehicle(407,1573.9773,-302.7855,4.2166,88.7209,3,1, spawn_time, 0, VEHICLE_ACTION_TYPE_NONE);
	*/

	// --------------- траснпорт на аренду
	/*
	for(new i; i < sizeof rent_cars_data; i ++)
	{
		rent_cars_data[i][rent_car_tenant_id] = INVALID_PLAYER_ID;
		rent_car_id[i] = CreateVehicle(rent_cars_data[i][rent_car_modelid], rent_cars_data[i][rent_car_pos_x], rent_cars_data[i][rent_car_pos_y], rent_cars_data[i][rent_car_pos_z], rent_cars_data[i][rent_car_angle], -1, -1, 600);
	}
	*/

/*	// --------------- Правительство
	CreateVehicle(405,-112.2823,632.1828,11.8647,262.1775,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_GOV_CAR); // Правительство. Паджеро (К) 1
	CreateVehicle(405,-112.8945,628.6407,11.8654,261.8431,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_GOV_CAR); // Правительство. Лимузин (К) 1
	CreateVehicle(579,-126.4343,613.5458,12.0994,262.7750,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_GOV_CAR); // Правительство. Паджеро (К) 2
	CreateVehicle(579,-125.8978,616.8631,12.0719,262.0505,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_GOV_CAR); // Правительство. Паджеро 3
	CreateVehicle(579,-125.3645,622.8160,12.0355,261.4984,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_GOV_CAR); // Правительство. Паджеро 4
	CreateVehicle(579,-124.9747,626.0245,12.0353,262.3873,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_GOV_CAR); // Правительство. Паджеро 5

	// --------------- Армия
	CreateVehicle(433,1643.2213,1783.7754,16.1457,178.3940,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(433,1624.8214,1784.5745,16.1437,182.2602,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(433,1637.0369,1783.8199,16.1448,180.6668,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(433,1631.1500,1784.2634,16.1456,178.9016,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(578,1634.2886,1766.6494,16.0713,269.5823,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);//
	CreateVehicle(470,1678.4862,1697.5649,15.9925,270.3940,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(470,1678.6205,1691.7412,15.9946,268.4553,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(470,1678.5873,1685.6942,15.9925,270.0685,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(470,1678.5808,1679.6937,15.9924,269.0610,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(470,1704.5851,1697.6337,15.9928,89.0024,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);//
	CreateVehicle(470,1704.5321,1691.7560,15.9942,90.9812,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(470,1704.5664,1685.5950,15.9940,88.8577,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(470,1704.5837,1679.7170,15.9939,91.4316,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(425,1691.5505,1627.0763,16.8365,359.1029,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(425,1748.7424,1655.9851,16.8010,88.6654,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);//
	CreateVehicle(432,1535.2101,1658.5985,16.0110,270.7559,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(432,1534.9117,1670.6539,16.0107,271.3260,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);

	// --------------- Больница
	CreateVehicle(416,-238.7698,550.8733,12.8994,172.9392,1,3, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); // Карета 1
	CreateVehicle(416,-242.7097,551.2446,12.8732,172.6469,1,3, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); // Карета 2
	CreateVehicle(416,-246.4461,551.7439,12.8284,173.2092,1,3, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); // Карета 3
	CreateVehicle(416,-250.5226,552.2697,12.7723,173.1097,1,3, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); // Карета 4
	CreateVehicle(416,-254.7837,552.7803,12.7358,172.8184,1,3, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); // Карета 5
	CreateVehicle(416,-259.3213,553.0524,12.7474,173.1399,1,3, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); // Карета 6
	CreateVehicle(416,-263.5467,553.6649,12.7380,172.5578,1,3, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); // Карета 7
	CreateVehicle(551,-268.3803,554.4357,12.2997,173.0043,3,1, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); // Волга 1
	CreateVehicle(551,-272.1465,554.9032,12.2546,173.1070,3,1, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); // Волга 2
	CreateVehicle(487,-215.8927,548.0470,12.6525,170.4808,1,3, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); // Вертолет

	// --------------- Радио ТРК ритм
	CreateVehicle(488,-347.8155,789.8935,13.2867,0.3074,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR); // ORP, репортеры, вертолет
	CreateVehicle(582,-342.4899,761.2209,13.1179,270.2607,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR); // ORP, репортеры, фургон 1
	CreateVehicle(582,-342.5310,769.6465,13.1147,271.1894,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR); // ORP, репортеры, фургон 2
	CreateVehicle(582,-342.4580,765.3802,13.1140,269.6879,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR); // ORP, репортеры, фургон 3
	CreateVehicle(436,-307.6978,774.4358,12.8307,269.2672,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR); // ORP, репортеры, фургон 5
	CreateVehicle(436,-314.1729,774.4270,12.8307,270.6675,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR); // ORP, репортеры, Марк 2
    CreateVehicle(436,-320.8231,774.3403,12.8306,269.9083,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR); // ORP, репортеры, Марк 2
    CreateVehicle(436,-327.6737,774.2808,12.8306,270.2942,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR); // ORP, репортеры, Марк 2

	// --------------- ГИБДД
	CreateVehicle(497,1931.8230,-2188.8899,11.8762,0.0267,7,7, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // ORP, ????
	CreateVehicle(598,1880.1023,-2212.1838,10.9975,0.3477,7,7, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // ORP, 2114 (1)
	CreateVehicle(598,1883.1862,-2212.1328,10.9976,0.2257,7,7, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // ORP, 2114 (2)
	CreateVehicle(598,1886.3611,-2212.1938,10.9976,359.9777,7,7, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // ORP, 2114 (3)
	CreateVehicle(598,1889.4093,-2212.2568,10.9975,359.3611,7,7, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // ORP, 2114 (4)
	CreateVehicle(598,1892.5190,-2212.2109,10.9976,0.0868,7,7, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // ORP, 2114 (5)
	CreateVehicle(598,1895.6697,-2212.2500,10.9975,359.6567,7,7, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // ORP, Lancer (1)
	CreateVehicle(598,1898.7358,-2212.2239,10.9976,0.0120,7,7, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // ORP, Lancer (2)
	CreateVehicle(405,1915.9124,-2211.7017,11.1142,0.6291,7,7, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // ORP, ??? (1)
	CreateVehicle(405,1919.2542,-2211.6953,11.1138,359.7451,7,7, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // ORP, ??? (2)
	CreateVehicle(427,1945.7332,-2211.8752,11.7312,0.2200,7,7, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // ORP, ?? (1)
	CreateVehicle(427,1942.4802,-2211.8374,11.7306,359.8291,7,7, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // ORP, ?? (2)

	// --------------- УМВД
	CreateVehicle(599,2560.7986,-2408.1597,22.2194,89.9931,1,7, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR); // ORP, УАЗ 1
	CreateVehicle(599,2560.7788,-2411.9888,22.2036,89.9236,1,7, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR); // ORP, УАЗ 2
	CreateVehicle(599,2560.7996,-2416.0906,22.2035,90.0734,1,7, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR); // ORP, УАЗ 3
	CreateVehicle(599,2560.8000,-2420.1050,22.2025,89.9610,1,7, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR); // ORP, УАЗ 4
	CreateVehicle(599,2560.7986,-2423.9609,22.2015,90.0278,1,7, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR); // ORP, УАЗ 5
	CreateVehicle(483,2544.2998,-2446.5334,22.0704,272.3640,7,1, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR); // Поливалка 1
	CreateVehicle(405,2574.6765,-2445.7793,21.8628,0.4627,7,1, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR); // Поливалка 2
	CreateVehicle(497,2548.1506,-2415.8462,22.2703,182.6345,7,1, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR); // ORP, вертолет

	// --------------- ФСБ
	CreateVehicle(436,1791.7882,2132.8452,15.6173,186.7860,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // Марк 2 (1)
	CreateVehicle(436,1795.6742,2133.1658,15.6197,184.4205,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // Марк 2 (2)
	CreateVehicle(411,1821.8221,2134.1011,15.4769,269.9896,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // Буритто 1
	CreateVehicle(490,1785.8453,2082.2854,15.9843,359.6827,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // Буритто 2
	CreateVehicle(490,1789.5758,2082.3005,15.9831,359.9913,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // Ранчер 1
	CreateVehicle(490,1793.3331,2082.2737,15.9832,359.7090,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // Ранчер 2
	CreateVehicle(490,1797.0198,2082.2732,15.9897,359.9627,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // Ранчер 3
	CreateVehicle(497,1791.2578,2074.6387,18.7589,0.6484,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // Ранчер 4

	// --------------- ОПГ Арзамасская
	CreateVehicle(492,487.8650,740.6981,11.9774,69.3225,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARZ_CAR); // авто Арзамасская ОПГ
	CreateVehicle(492,489.2836,744.6002,11.9768,68.9850,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARZ_CAR); // авто Арзамасская ОПГ
	CreateVehicle(404,490.6520,748.3609,11.9282,69.4498,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARZ_CAR); // авто Арзамасская ОПГ
	CreateVehicle(404,492.0961,752.2858,11.9286,69.9391,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARZ_CAR); // авто Арзамасская ОПГ
	CreateVehicle(482,472.4447,742.4490,12.1203,70.8132,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARZ_CAR); // авто Арзамасская ОПГ

	// --------------- ОПГ Батырево
	CreateVehicle(463,1948.7590,2167.8774,15.2449,89.2575,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_BAT_CAR); // ОПГ Батырево, мото 1
	CreateVehicle(463,1948.6904,2164.2683,15.2448,89.8878,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_BAT_CAR); // ОПГ Батырево, мото 2
	CreateVehicle(463,1948.6851,2160.5647,15.2423,91.4960,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_BAT_CAR); // ОПГ Батырево, мото 3
	CreateVehicle(463,1948.7839,2156.7493,15.2449,89.4765,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_BAT_CAR); // ОПГ Батырево, мото 4
	CreateVehicle(482,1932.6991,2170.4280,15.8223,269.8936,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_BAT_CAR); // ОПГ Батырево, Буритто 1
	CreateVehicle(482,1932.6681,2174.2288,15.8255,270.3850,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_BAT_CAR); // ОПГ Батырево Буритто 2

	CreateVehicle(461,1938.2802,2166.0913,15.2826,272.8900,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_BAT_CAR); //
	CreateVehicle(461,1938.1625,2163.5066,15.2761,270.5090,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_BAT_CAR); //

	// --------------- Лыткаринская ОПГ
	CreateVehicle(551,-2340.2644,104.5932,20.4217,259.5525,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_LYT_CAR); // Волга 1 (1)
	CreateVehicle(551,-2341.0471,100.8282,20.4220,258.7062,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_LYT_CAR); // Волга 1 (2)
	CreateVehicle(445,-2341.6548,97.2001,20.8720,259.0891,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_LYT_CAR); // Волга 2 (1)
	CreateVehicle(445,-2342.4653,93.2930,20.8720,258.3354,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_LYT_CAR); // Волга 2 (2)
	CreateVehicle(482,-2343.4084,89.1208,21.1174,258.7979,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_LYT_CAR); // Буритто 1
	CreateVehicle(482,-2344.3076,84.8594,21.1200,258.6470,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_LYT_CAR); // Буритто 2

	CreateVehicle(489,-2345.0205,80.8984,21.0643,258.3234,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_LYT_CAR); //
	CreateVehicle(516,-2345.7017,77.4525,20.7411,258.9327,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_LYT_CAR); //

	// --------------- Авто для аренды
	for(new i; i < sizeof rent_cars_data; i++)
	{
		new rent_market_id,
			vehicleid;

		switch(i)
		{
			case 0..10: rent_market_id = 0;
			case 11..24: rent_market_id = 1;
			case 25..40: rent_market_id = 2;
			case 41..54: rent_market_id = 3;
		}

		rent_cars_data[i][rent_car_tenant_id] = INVALID_PLAYER_ID;
		vehicleid = CreateVehicle
		(
			rent_cars_data[i][rent_car_modelid],
			rent_cars_data[i][rent_car_pos_x],
			rent_cars_data[i][rent_car_pos_y],
			rent_cars_data[i][rent_car_pos_z],
			rent_cars_data[i][rent_car_angle],
			-1, -1, spawn_time, 0,
			VEHICLE_ACTION_TYPE_RENT_CAR, rent_market_id
		);

		if(i == 0) first_rent_car_id = vehicleid;
	}
	*/

	print("[Vehicle]: Все транспортные средства созданы");
}

stock CreateMedBeds()
{
	for(new i; i < sizeof g_med_bed_pos; i ++)
	{
		g_med_bed_label[i] = CreateDynamic3DTextLabel(" ", 0xFFFFFFEE, g_med_bed_pos[i][0], g_med_bed_pos[i][1], g_med_bed_pos[i][2], 5.0, _, _, _, -1, -1, _, 30.0);
		UpdateMedBed(i);
	}
}

stock CreateCasinoTables()
{
	for(new idx; idx < sizeof g_casino_table_pos; idx ++)
	{
		g_casino_area[idx] = CreateDynamicSphere
		(
			g_casino_table_pos[idx][0],
			g_casino_table_pos[idx][1],
			g_casino_table_pos[idx][2],
			2.0
		);

		CreateDynamic3DTextLabel
		(
			"- Казино -\n\n{FFFFFF}Для игры используйте:\n{9999ff}/dice",
			0x3399FFFF,
			g_casino_table_pos[idx][0], g_casino_table_pos[idx][1], g_casino_table_pos[idx][2] + 1.5,
			8.0,
			_, _, _, -1, -1, _,
			15.0
		);
	}
}

stock CreateArmories()
{
	for(new idx; idx < sizeof g_armory; idx ++)
	{
		CreatePickup
		(
			g_armory[idx][A_TYPE] == ARMORY_TYPE_ARMOR ? 1242 : 1239,
			23,
			g_armory[idx][A_POS_X], g_armory[idx][A_POS_Y], g_armory[idx][A_POS_Z],
			-1,
			PICKUP_ACTION_TYPE_ARMORY, g_armory[idx][A_TYPE]
		);

		new fmt_text[55];

		format(fmt_text, sizeof fmt_text, "- %s -\n{FFFFFF}%s",
		g_armory[idx][A_TYPE] == ARMORY_TYPE_ARMOR ? "Получение бронежилета" : "Оружейный склад",
		g_armory[idx][A_DESCRIPTION]);

		CreateDynamic3DTextLabel
		(
			fmt_text,
			0x3399FFFF,
			g_armory[idx][A_POS_X], g_armory[idx][A_POS_Y], g_armory[idx][A_POS_Z] + 1.5,
			8.0,
			_, _, _, -1, -1, _,
			15.0
		);
	}
	for(new idx = 0; idx < MAX_GOV_ORG; idx ++)
	{
		CreatePickup
		(
			1275,
			23,
			g_organization[idx][O_CHANGESKIN][0], g_organization[idx][O_CHANGESKIN][1], g_organization[idx][O_CHANGESKIN][2],
			-1,
			PICKUP_ACTION_TYPE_CHANGESKIN, idx
		);
	}
}

stock IsPlayerInRangeOfAnyCasinoTable(playerid)
{
	for(new idx; idx < sizeof g_casino_table_pos; idx ++)
	{
		if(IsPlayerInDynamicArea(playerid, g_casino_area[idx])) return 1;
	}

	return 0;
}

/*stock CreateTrainObjects()
{
	for(new idx; idx < sizeof train_objects; idx ++)
	{
		train_objects[idx][T_OBJECT_ID] = CreateDynamicObject
		(
			train_objects[idx][T_OBJECT],
			train_objects[idx][T_POS_X], train_objects[idx][T_POS_Y], train_objects[idx][T_POS_Z],
			train_objects[idx][T_ROT_X], train_objects[idx][T_ROT_Y], train_objects[idx][T_ROT_Z]
		);

		if(!idx)
			Streamer_SetIntData(STREAMER_TYPE_OBJECT, train_objects[idx][T_OBJECT_ID], E_STREAMER_EXTRA_ID, OBJECT_TYPE_TRAIN);
	}

	return 1;
}*/

stock ShowPlayerPayForRentDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_PAY_FOR_RENT, DIALOG_STYLE_LIST,
		"{66CC00}Оплата",
		"1. Заплатить за дом\n"\
		"2. Оплатить аренду бизнеса\n"\
		"3. Оплатить аренду АЗС\n"\
		"4. Возврат денег за имущество",
		"Далее", "Отмена"
	);
	return 1;
}

stock ClearBankAccountInfo(playerid, accountid)
{
	strmid(g_bank_account[playerid][accountid][BA_NAME], "None", 0, 21, 21);

	SetBankAccountData(playerid, accountid, BA_ID, 0);
	SetBankAccountData(playerid, accountid, BA_PIN_CODE, 0);

	SetBankAccountData(playerid, accountid, BA_BALANCE, 0);
	SetBankAccountData(playerid, accountid, BA_REG_TIME, 0);
}

stock ClearBankAccountsData(playerid)
{
	for(new idx; idx < MAX_BANK_ACCOUNTS; idx ++)
	{
		ClearBankAccountInfo(playerid, idx);
	}
}

stock ShowPlayerBankDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_BANK, DIALOG_STYLE_LIST,
		"{00CC00}Банк",
		"Мои счета\n"\
		"Открыть новый счет",
		"Выбрать", "Отмена"
	);
}

stock ShowPlayerBankAccounts(playerid)
{
	new query[64];
	new Cache: result;
	new rows;
	new bank_accounts_list[(37 * MAX_BANK_ACCOUNTS) + 22 + 1];

	format(query, sizeof query, "SELECT * FROM bank_accounts WHERE uid=%d LIMIT %d", GetPlayerAccountID(playerid), MAX_BANK_ACCOUNTS);
	result = mysql_query(mysql, query);
	rows = cache_num_rows();

	bank_accounts_list = "{99CC00}Основной счет\n";
	for(new idx, count; idx < MAX_BANK_ACCOUNTS; idx ++)
	{
		ClearBankAccountInfo(playerid, idx);

		if(idx < rows)
		{
			SetBankAccountData(playerid, idx, BA_ID, cache_get_row_int(idx, 0));

			cache_get_row(idx, 2, g_bank_account[playerid][idx][BA_NAME], mysql, 21);
			cache_get_row(idx, 4, g_bank_account[playerid][idx][BA_PIN_CODE], mysql, 9);

			SetBankAccountData(playerid, idx, BA_BALANCE, cache_get_row_int(idx, 3));
			SetBankAccountData(playerid, idx, BA_REG_TIME, cache_get_row_int(idx, 5));

			format(query, sizeof query, "%s - №%d\n", GetBankAccountData(playerid, idx, BA_NAME), GetBankAccountData(playerid, idx, BA_ID));
			strcat(bank_accounts_list, query);

			SetPlayerListitemValue(playerid, count ++, idx);
		}
	}
	cache_delete(result);

	return Dialog(playerid, DIALOG_BANK_ACCOUNTS, DIALOG_STYLE_LIST, "{FFCD00}Ваши счета", bank_accounts_list, "Операции", "Назад");
}

stock IsValidBankAccount(playerid, accountid)
{
	if(0 <= accountid <= MAX_BANK_ACCOUNTS-1)
	{
		if(GetBankAccountData(playerid, accountid, BA_ID) > 0)
		{
			return 1;
		}
	}
	return 0;
}

stock UpdateBankAccountData(playerid, accountid)
{
	if(IsValidBankAccount(playerid, accountid))
	{
		new query[64];
		new Cache: result;

		format(query, sizeof query, "SELECT balance FROM bank_accounts WHERE id=%d LIMIT 1", GetBankAccountData(playerid, accountid, BA_ID));
		result = mysql_query(mysql, query);

		if(cache_num_rows())
			SetBankAccountData(playerid, accountid, BA_BALANCE, cache_get_row_int(0, 0));

		cache_delete(result);
	}
}

stock ShowPlayerBankAccountOperation(playerid)
{
	Dialog
	(
		playerid, DIALOG_BANK_ACCOUNT_OPERATION, DIALOG_STYLE_LIST,
		"{0099FF}Список операций",
		"1. Информация о счете\n"\
		"2. История операций\n"\
		"3. Снять деньги\n"\
		"4. Положить деньги\n"\
		"5. Перевести на другой счет\n"\
		"6. Переименовать счет\n"\
		"7. Изменить PIN-код",
		"Выбрать", "Назад"
	);
	return 1;
}

stock ShowPlayerBankAccountTransfer(playerid, accountid)
{
	if(!PlayerTotalOnline(playerid, 24))
		return SendClientMessage(playerid, 0x999999FF, "Для перевода денег необходимо отыграть 24 часа");

	if(IsValidBankAccount(playerid, accountid))
	{
		new fmt_str[128];
		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Исходный счет:\t%d\n"\
			"Назначение:\t\t\"%s\", №%d\n\n"\
			"Введите сумму для перевода:",
			GetBankAccountData(playerid, accountid, BA_ID),
			GetPlayerBankTransfer(playerid, BT_NAME),
			GetPlayerBankTransfer(playerid, BT_ID)
		);
		Dialog(playerid, DIALOG_BANK_ACCOUNT_TRANSFER_2, DIALOG_STYLE_INPUT, "{FFCD00}Перевод средств", fmt_str, "Перевести", "Отмена");
	}
	return 1;
}

stock ShowPlayerATMTransfer(playerid)
{
	new transfer_id = GetPlayerBankTransfer(playerid, BT_ID);
	if(transfer_id)
	{
		new fmt_str[64 + 1];

		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Вы выполняете перевод на счет №%d\n"\
			"Укажите сумму:",
			transfer_id
		);
		Dialog(playerid, DIALOG_ATM_TRANSFER_MONEY_2, DIALOG_STYLE_INPUT, "{FFCD00}Безналичный перевод", fmt_str, "Перевести", "Отмена");
	}
	return 1;
}

stock IsABadBankAccountName(dest[], pos=0)
{
	new is_bad_name = false;
	do
	{
		switch(dest[pos])
		{
			case
				'a'..'z', 'A'..'Z', 'а'..'я', 'А'..'Я', '0'..'9': continue;

			default:
				is_bad_name = true;

		}
	}
	while(dest[++pos]);

	return is_bad_name;
}

stock BankAccountLog(playerid, accountid, description[])
{
	new query[180 + 1];

	mysql_format(mysql, query, sizeof query, "INSERT INTO bank_accounts_log (acc_id,uip,time,description) VALUES (%d,'%e',%d,'%e')", accountid, GetPlayerIpEx(playerid), gettime(), description);
	mysql_query(mysql, query, false);

	return 1;
}

stock ShowPlayerBankAccountLog(playerid, accountid)
{
	new fmt_str[128];
	new Cache: result;
	new rows;

	format(fmt_str, sizeof fmt_str, "SELECT FROM_UNIXTIME(time,'%%Y-%%m-%%d') AS date,description FROM bank_accounts_log WHERE acc_id=%d ORDER BY id DESC LIMIT 10", accountid);
	result = mysql_query(mysql, fmt_str);

	rows = cache_num_rows();

	if(rows)
	{
		new text[900] = "{FFFFFF}";
		new day, month, year;

		for(new idx; idx < rows; idx ++)
		{
			cache_get_row(idx, 0, fmt_str);
			sscanf(fmt_str, "P<->ddd", year, month, day);

			cache_get_row(idx, 1, fmt_str);

			format(fmt_str, sizeof fmt_str, "%d %s %d г.\t\t%s\n", day, GetMonthName(month), year, fmt_str);
			strcat(text, fmt_str);
		}
		Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "{FFCD00}Последние 10 операций", text, "Вернуться", "");
	}
	else Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "{FFCD00}История", "{FFFFFF}История операций пуста", "Вернуться", "");

	cache_delete(result);
	return 1;
}

stock RemovePlayerAttachedObjects(playerid)
{
	for(new idx; idx < MAX_PLAYER_ATTACHED_OBJECTS; idx ++)
	{
		if(IsPlayerAttachedObjectSlotUsed(playerid, idx))
		{
			RemovePlayerAttachedObject(playerid, idx);
		}
	}
}

stock RemovePlayerAttachedObjectEx(playerid, ...)
{
	new args = numargs()-1;
	for(new idx; idx < args; idx ++)
		RemovePlayerAttachedObject(playerid, getarg(idx + 1));
}

stock HelpInfoInit()
{
	new fmt_str[64];

	for(new idx; idx < sizeof help_info; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "%d. %s\n", idx + 1, help_info[idx][H_TITLE]);
		strcat(help_info_items, fmt_str);

		format(fmt_str, sizeof fmt_str, "{FFCD00}%d. ", idx + 1);
		strins(help_info[idx][H_TITLE], fmt_str, 0, 64);

		//strins(help_info[idx][H_INFO], "{FFFFFF}", 0, 1024);
	}


	markerhelp = CreateDynamicCP(-116.0248,965.5103,12.1417, 2.1, _, _, _, 23.0); // ЖД-вокзал ЛС
	CreateDynamic3DTextLabel("Раздел для новичков\n{FFFF00}Помощь по игре", 0x3399FFFF, 1763.693, -1885.828, 13.555 + 0.66, 26.0, _, _, _, 0, 0);

//	CreateDynamic3DTextLabel("Станция технического обслуживания\nПосигнальте чтобы починить авто\n{FFFF00}Стоимость услуги: 50.000 рублей", 0x3399FFFF, 1850.7094,2196.4565,15.8480 + 0.66, 26.0, _, _, _, 0, 0);
//	CreateDynamicCP(1850.7094,2196.4565,15.8480	, 2.1, _, _, _, 23.0); // ЖД-вокзал ЛС

//	CreateDynamic3DTextLabel("Станция технического обслуживания\nПосигнальте чтобы починить авто\n{FFFF00}Стоимость услуги: 50.000 рублей", 0x3399FFFF, 275.8153,673.9254,12.0000 + 0.66, 26.0, _, _, _, 0, 0);
//	CreateDynamicCP(275.8153,673.9254,12.0000	, 2.1, _, _, _, 23.0); // ЖД-вокзал ЛС

	markerhelp1 = CreateDynamicCP(1808.5878,2498.1243,15.8725, 2.1, _, _, _, 23.0); // ЖД-вокзал ЛС
	CreateDynamic3DTextLabel("Раздел для новичков\n{FFFF00}Помощь по игре", 0x3399FFFF, 1763.693, -1885.828, 13.555 + 0.66, 26.0, _, _, _, 0, 0);
}

stock ShowPlayerHelpSection(playerid, sectionid)
{
	new next_buttom[9] = "Далее >>";
	if(sectionid >= sizeof help_info - 1)
	{
		next_buttom[0] = '\0';
	}

	Dialog
	(
		playerid, DIALOG_HELP_SECTION, DIALOG_STYLE_MSGBOX,
		GetHelpInfoData(sectionid, H_TITLE),
		GetHelpInfoData(sectionid, H_INFO),
		"<< Меню", next_buttom
	);
	SetPVarInt(playerid, "help_section", sectionid);
}

stock ServerRadioInit()
{
	new fmt_str[64];

	for(new idx; idx < sizeof g_server_radio; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "%d. %s\n", idx + 1, GetServerRadioData(idx, SR_CHANNEL_NAME));
		strcat(g_server_radio_items, fmt_str);
	}
}

stock MapIconsInit()
{
	for(new idx; idx < sizeof map_icons; idx ++)
	{
		CreateDynamicMapIcon
		(
			GetMapIconsData(idx, MI_POS_X),
			GetMapIconsData(idx, MI_POS_Y),
			GetMapIconsData(idx, MI_POS_Z),
			GetMapIconsData(idx, MI_TYPE),
			0,
			0,
			0,
			-1,
			MAP_ICON_STREAM_DISTANCE,
			MAPICON_LOCAL
		);
	}
}

stock TeleportPickupsInit()
{
	new Text3D:buffer;
	for(new idx; idx < sizeof g_teleport; idx ++)
	{
		if(strlen(GetTeleportData(idx, T_NAME)) && !GetTeleportData(idx, T_PICKUP_VIRTUAL_WORLD))
		{
			buffer = CreateDynamic3DTextLabel
			(
				GetTeleportData(idx, T_NAME),
				0x3399FFEE,
				GetTeleportData(idx, T_PICKUP_POS_X),
				GetTeleportData(idx, T_PICKUP_POS_Y),
				GetTeleportData(idx, T_PICKUP_POS_Z) + 0.8,
				5.0,
				INVALID_PLAYER_ID,
				INVALID_VEHICLE_ID,
				0,
				0,
				0,
				-1,
				STREAMER_3D_TEXT_LABEL_SD
			);
			SetTeleportData(idx, T_LABEL, buffer);
		}
		CreatePickup(1318, 23, GetTeleportData(idx, T_PICKUP_POS_X), GetTeleportData(idx, T_PICKUP_POS_Y), GetTeleportData(idx, T_PICKUP_POS_Z), GetTeleportData(idx, T_PICKUP_VIRTUAL_WORLD), PICKUP_ACTION_TYPE_TELEPORT, idx);
	}

	CreatePickup(1318, 23, 5.6028, -23.3124, 1080.9968, -1, PICKUP_ACTION_TYPE_BIZ_CAR_ENT); // авторынок телепорт ко входу
	CreatePickup(1318, 23, 5.9334, -25.4932, 1085.9291, -1, PICKUP_ACTION_TYPE_BIZ_CAR_EXI); // авторынок телепорт к выходу

	print("[TP]: Все входы/выходы созданы");
}

stock DrivingSchoolInit()
{
	new buffer[5];

	driving_exam_CP = CreateDynamicCP(1644.4178,928.7159,1001.0000, 1.5, 1, 1, -1, 15.0); // автошкола
//	CreateDynamic3DTextLabel("Сдача\nэкзамена", 0x99CC00BB, 1644.4178,928.7159,1001.0000, 7.0, 1);

	CreatePickup(2894, 23, 1643.7570,915.3533,1001.0000, 1, PICKUP_ACTION_TYPE_DRIVING_TUTO); // автошкола обучающий раздел
	CreateDynamic3DTextLabel("Обучающий\nраздел", 0xCC9900BB, 1643.7570,915.3533,1001.0000 + 0.2, 5.0);

	buffer[0] = AddStaticVehicleEx(565, 1928.5189, 2225.2505, 15.7314, 360.0, 17, 17, 300, 0, VEHICLE_ACTION_TYPE_DRIVING_SCH); // учебный 1
	buffer[1] = AddStaticVehicleEx(565, 1932.1473, 2225.2505, 15.7304, 360.0, 17, 17, 300, 0, VEHICLE_ACTION_TYPE_DRIVING_SCH); 			// учебный 2
	buffer[2] = AddStaticVehicleEx(565, 1936.1224, 2225.2505, 15.7313, 360.0, 17, 17, 300, 0, VEHICLE_ACTION_TYPE_DRIVING_SCH); // учебный 3
    buffer[3] = AddStaticVehicleEx(565, 1921.2749, 2225.2498, 15.6625, 360.0, 17, 17, 300, 0, VEHICLE_ACTION_TYPE_DRIVING_SCH);
    buffer[4] = AddStaticVehicleEx(565, 1924.9423, 2225.2175, 15.6620, 360.0, 17, 17, 300, 0, VEHICLE_ACTION_TYPE_DRIVING_SCH);

	for(new idx = buffer[0]; idx <= buffer[4]; idx ++)
		CreateDynamic3DTextLabel("Учебный", 0xFF0000FF, 0.0, 0.0, 1.2, 16.0, INVALID_PLAYER_ID, idx);

	new fmt_str[64];
	for(new idx; idx < sizeof driving_tutorial; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "{CC9900}Раздел %d: ", idx + 1);
		strins(driving_tutorial[idx][DT_TITLE], fmt_str, 0, 64);
	}

	for(new idx; idx < sizeof driving_exam; idx ++)
	{
		strins(driving_exam[idx][DE_TITLE], "{00CC66}", 0, 64);
	}
}

/*stock GatesInit()
{
	new type;
	new Float: x, Float: y, Float: z;
	new Float: angle, Float: dist = 3.5;

	for(new idx; idx < sizeof g_gate; idx ++)
	{
		type = GetGateData(idx, G_TYPE);

		x = GetGateData(idx, G_POS_X);
		y = GetGateData(idx, G_POS_Y);
		z = GetGateData(idx, G_POS_Z);
		angle = GetGateData(idx, G_ANGLE);

		switch(type)
		{
			case
				GATE_TYPE_BARRIER,
				GATE_TYPE_BARRIER_MSG,
				GATE_TYPE_BARRIER_BUTTON:
			{
				g_gate[idx][G_OBJECT_ID][0] = CreateDynamicObject(966, x, y, z, 0.0, 0.0, angle, -1, -1, -1, 300.0, 200.0);
				g_gate[idx][G_OBJECT_ID][1] = CreateDynamicObject(968, x, y, z + 0.8, 0.0, 0.0, angle, -1, -1, -1, 300.0, 200.0);

				if(type != GATE_TYPE_BARRIER_BUTTON)
				{
					angle += 90.0;

					SetGateData(idx, G_OPEN_POS_X, x + (dist * floatsin(-angle, degrees)));
					SetGateData(idx, G_OPEN_POS_Y, y + (dist * floatcos(-angle, degrees)));
					SetGateData(idx, G_OPEN_POS_Z, z);
				}
				else
				{
					type = g_gate_buttons_count;

					g_gate_button[type][1] = idx;
					g_gate_button[type][0] = CreateButton(GetGateData(idx, G_OPEN_POS_X), GetGateData(idx, G_OPEN_POS_Y), GetGateData(idx, G_OPEN_POS_Z), GetGateData(idx, G_OPEN_ANGLE));

					g_gate_buttons_count ++;
				}
				// CreateDynamic3DTextLabel("Шлагбаум", 0xFF6600FF, GetGateData(idx, G_OPEN_POS_X), GetGateData(idx, G_OPEN_POS_Y), GetGateData(idx, G_OPEN_POS_Z), 10.0);
			}
			case GATE_TYPE_NORMAL:
			{

			}
		}
		SetGateStatus(idx, GetGateData(idx, G_STATUS), -1);
	}
	print("[Gates]: Все шлагбаумы созданы");
}

stock IsGateButtonID(buttonid)
{
	return (g_gate_button[0][0] <= buttonid <= g_gate_button[g_gate_buttons_count - 1][0]);
}

stock GetNearestGate(playerid, Float: dist = 10.0)
{
	if(!(0.0 <= dist <= 20.0))
	{
		dist = 10.0;
	}
	//if(dist == 0.0)
	//	dist = FLOAT_INFINITY;

	new gateid = -1;
	new Float: my_dist;

	for(new idx; idx < sizeof g_gate; idx ++)
	{
		if(GetGateData(idx, G_TYPE) == GATE_TYPE_BARRIER_BUTTON) continue;

		my_dist = GetPlayerDistanceFromPoint(playerid, GetGateData(idx, G_OPEN_POS_X), GetGateData(idx, G_OPEN_POS_Y), GetGateData(idx, G_OPEN_POS_Z));
		if(my_dist < dist)
		{
			dist = my_dist,
			gateid = idx;
		}
	}
	return gateid;
}*/

/*stock AtmsInit()
{
	new Float: x, Float: y, Float: z, Float: rot_z;
	new Float: dist = 0.6; // дистацния пикапа от банкомата

	for(new idx; idx < sizeof g_atm; idx ++)
	{
		x = GetATMInfo(idx, A_POS_X);
		y = GetATMInfo(idx, A_POS_Y);
		z = GetATMInfo(idx, A_POS_Z);
		rot_z = GetATMInfo(idx, A_ROT_Z);

	//	CreateDynamicObject(2942, x, y, z, 0.0, 0.0, rot_z, 0, 0, -1, STREAMER_OBJECT_SD, 100.0);
		//SetDynamicObjectMaterialText(buffer, 2, "Банкомат\n\n\n\n\n", OBJECT_MATERIAL_SIZE_256x256, "Tahoma", 48, 1, 0xFF000000, 0xFFFF9966, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);

		CreateDynamic3DTextLabel("Банкомат\n{FFCC33}Нажмите ~k~~SNEAK_ABOUT~", 0x00CC00FE, x, y, z + 0.7, 3.0); // 0x00CC00EE

		#if defined ATM_CREATED_PICKUP
		rot_z += 180.0;
		CreatePickup(1212, 23, x + dist * -floatsin(rot_z, degrees), y + dist * floatcos(rot_z, degrees), z, -1, PICKUP_ACTION_TYPE_ATM, idx);
		#endif
	}
	print("[ATM]: Все банкоматы созданы");
}

stock GetPlayerNearestATM(playerid, Float: dist = 1.3)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;

	new atmid = -1;
	new Float: my_dist;

	for(new idx; idx < sizeof g_atm; idx ++)
	{
		my_dist = GetPlayerDistanceFromPoint(playerid, GetATMInfo(idx, A_POS_X), GetATMInfo(idx, A_POS_Y), GetATMInfo(idx, A_POS_Z));
		if(my_dist < dist)
		{
			dist = my_dist,
			atmid = idx;
		}
	}
	return atmid;
}*/

stock ShowPlayerATMDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_ATM, DIALOG_STYLE_LIST,
		"{FFCD00}Банкомат",
		"1. Снять с банковского счета\n"\
		"2. Положить на банковский счет\n"\
		"3. Баланс банковского счета\n"\
		"4. Снять со счета предприятия\n"\
		"5. Положить на счет предприятия\n"\
		"6. Пополнить мобильный телефон\n"\
		"7. Безналичный перевод\n"\
		"8. Оплата штрафа\n"\
		"9. Благотворительность",
		"Выбрать", "Выйти"
	);
	return 1;
}

stock ShowPlayerATMSelectSumDialog(playerid, bool:take)
{
	Dialog
	(
		playerid, take ? DIALOG_ATM_TAKE_MONEY : DIALOG_ATM_PUT_MONEY, DIALOG_STYLE_LIST,
		"Выберите сумму",
		"100 руб\n"\
		"200 руб\n"\
		"500 руб\n"\
		"1000 руб\n"\
		"2000 руб\n"\
		"5000 руб\n"\
		"10000 руб\n"\
		"Другая сумма...",
		take ? ("Снять") : ("Положить"), "Назад"
	);
	return 1;
}

stock ShowPlayerATMSelectOtherSum(playerid, bool:take)
{
	Dialog
	(
		playerid, take ? DIALOG_ATM_TAKE_OTHER_MONEY : DIALOG_ATM_PUT_OTHER_MONEY, DIALOG_STYLE_INPUT,
		"{FFCD00}Другая сумма",
		"{FFFFFF}Укажите сумму:",
		take ? ("Снять") : ("Положить"), "Назад"
	);
	return 1;
}

stock ShowPlayerATMCharityDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_ATM_CHARITY, DIALOG_STYLE_INPUT,
		"{FFCD00}Благотворительность",
		"{FFFFFF}Мы предлагаем вам перечислить любую\n"\
		"сумму на благотворительный счет\n"\
		"государства. Все средства пойдут на\n"\
		"развитие нашей страны и поднятие\n"\
		"экономики.\n\n"\
		"Помимо этого, в мэриях время от времени\n"\
		"будут публиковаться списки тех, кто\n"\
		"сделал наибольшие взносы.\n\n"\
		"Этот список можно просмотреть командой\n"\
		"/charity. Там же можно узнать общую\n"\
		"сумму сделанных Вами пожертвований.",
		"Внести", "Закрыть"
	);
	return 1;
}

stock ShowPlayerATMCompanyDialog(playerid, bool: take)
{
	new stationid = GetPlayerFuelStation(playerid);
	new businessid = GetPlayerBusiness(playerid);

	if(stationid != -1 && businessid != -1)
	{
		new fmt_str[64 + 1];

		format
		(
			fmt_str, sizeof fmt_str,
			"1. %s (№%d)\n"\
			"2. %s (№%d)",
			GetBusinessData(businessid, B_NAME), businessid,
			GetFuelStationData(stationid, FS_NAME), stationid
		);
		Dialog(playerid, take ? DIALOG_ATM_SELECT_COMPANY_TAKE : DIALOG_ATM_SELECT_COMPANY_PUT, DIALOG_STYLE_LIST, "{FFCD00}Выберите предприятие", fmt_str, "Выбрать", "Назад");
	}
	else if(stationid != -1)
	{
		ShowPlayerATMFuelStationDialog(playerid, take);
	}
	else if(businessid != -1)
	{
		ShowPlayerATMBusinessDialog(playerid, take);
	}
}

stock ShowPlayerATMFuelStationDialog(playerid, bool:take)
{
	new stationid = GetPlayerFuelStation(playerid);
	if(stationid != -1)
	{
		Dialog
		(
			playerid, take ? DIALOG_ATM_FUEL_ST_TAKE_MONEY : DIALOG_ATM_FUEL_ST_PUT_MONEY, DIALOG_STYLE_INPUT,
			GetFuelStationData(stationid, FS_NAME),
			"{FFFFFF}Укажите сумму:",
			take ? ("Снять") : ("Положить"), "Выйти"
		);
	}
}

stock ShowPlayerATMBusinessDialog(playerid, bool:take)
{
	new businessid = GetPlayerBusiness(playerid);
	if(businessid != -1)
	{
		Dialog
		(
			playerid, take ? DIALOG_ATM_BIZ_TAKE_MONEY : DIALOG_ATM_BIZ_PUT_MONEY, DIALOG_STYLE_INPUT,
			GetBusinessData(businessid, B_NAME),
			"{FFFFFF}Укажите сумму:",
			take ? ("Снять") : ("Положить"), "Выйти"
		);
	}
}

stock BanksInit()
{
	CreatePickup(1274, 23, 2899.3831,2499.7405,1051.0000, -1, PICKUP_ACTION_TYPE_BANK, false);
	CreateDynamic3DTextLabel("Оплата\n{CCCC00}дома\nбизнеса\nАЗС\nВозврат денег", 0x00CC00FF, 2899.3831,2499.7405,1051.0000 + 0.8, 8.0);

	CreatePickup(1274, 23, 2901.8137,2506.4182,1051.0000, -1, PICKUP_ACTION_TYPE_BANK, true);
	CreateDynamic3DTextLabel("/bank", 0x00CC00FF, 2901.8137,2506.4182,1051.0000 + 0.8, 8.0);

	CreatePickup(1274, 23, 2902.8274,2509.2036,1051.0000, -1, PICKUP_ACTION_TYPE_BANK, true);
	CreateDynamic3DTextLabel("/bank", 0x00CC00FF, 2902.8274,2509.2036,1051.0000 + 0.8, 8.0);

	CreatePickup(1274, 23, 2903.8157,2511.9390,1051.0000, -1, PICKUP_ACTION_TYPE_BANK, true);
	CreateDynamic3DTextLabel("/bank", 0x66CC66FF, 2903.8157,2511.9390,1051.0000 + 0.8, 8.0);

	CreatePickup(1274, 23, 2900.3252,2502.3345,1051.0000, -1, PICKUP_ACTION_TYPE_BANK, false);
	CreateDynamic3DTextLabel("Оплата\n{CCCC00}дома\nбизнеса\nАЗС\nВозврат денег", 0x66CC66FF, 2900.3252,2502.3345,1051.0000 + 0.8, 8.0);
}

stock TempJobsInit()
{
	new idx;
	for(idx = 0; idx < sizeof g_temp_jobs; idx ++)
	{
		//if(idx == 3) continue; // пикап в заводе (создается отдельно от всех)

		CreatePickup(1275, 23, GetTempJobInfo(idx, TJ_POS_X), GetTempJobInfo(idx, TJ_POS_Y), GetTempJobInfo(idx, TJ_POS_Z), -1, PICKUP_ACTION_TYPE_TEMP_JOB, idx);
	}
	//loader_job_area = CreateDynamicRectangle(591.4026, 1781.0015, 482.7329, 1534.9045, 0, 0);

//	AddStaticVehicleEx(530, 494.4254, 1639.0137, 11.9525, 266.6, 6, 1, 5, 0, VEHICLE_ACTION_TYPE_LOADER); // погрузчик в порту
//	AddStaticVehicleEx(530, 494.4254, 1641.4299, 11.9525, 266.6, 6, 1, 5, 0, VEHICLE_ACTION_TYPE_LOADER); // погрузчик в порту
//	AddStaticVehicleEx(530, 494.4254, 1643.8461, 11.9525, 266.6, 6, 1, 5, 0, VEHICLE_ACTION_TYPE_LOADER); // погрузчик в порту

	// шахта
	for(idx = 0; idx < sizeof miner_carriage; idx ++)
	{
		miner_carriage[idx][MC_STATUS] = false;
//		miner_carriage[idx][MC_OBJECT_ID] = CreateDynamicObject(1769, miner_carriage[idx][MC_START_POS_X], miner_carriage[idx][MC_START_POS_Y], miner_carriage[idx][MC_START_POS_Z], 0.0, 0.0, 90.0);

//		Streamer_SetIntData(STREAMER_TYPE_OBJECT, miner_carriage[idx][MC_OBJECT_ID], E_STREAMER_EXTRA_ID, OBJECT_TYPE_CARRIAGE);

		miner_carriage[idx][MC_LABEL] = CreateDynamic3DTextLabel("Загрузка\n\n{FFCC00}Количество руды\n0 / 10000 кг", 0x66CC00FF, -2375.1228, 294.7194, -15.4815 + 3.0, 10.0);
		miner_carriage[idx][MC_PICKUP_ID] = CreatePickup(1239, 23, -2375.1228, 296.8900, -15.7689, -1, PICKUP_ACTION_TYPE_MINER_CARRI);
	}
	miner_job_area = CreateDynamicRectangle(2447.1799,1697.9985, 2279.3557,1806.0872, 0, 0);

	for(new i; i < sizeof miner_job_load_pos; i ++)
	{
		CreateDynamic3DTextLabel("Место\nдобычи руды", 0xFFFF00AA, miner_job_load_pos[i][0], miner_job_load_pos[i][1], miner_job_load_pos[i][2], 10.0);
		//miner_job_load_cp[i] = CreateDynamicCP(miner_job_load_pos[i][0], miner_job_load_pos[i][1], miner_job_load_pos[i][2], 1.2, _, _, _, 1.3);
	}

	CreatePickup(1318, 23, 2305.8884, 1738.6920, 1.7285, 0, PICKUP_ACTION_TYPE_MINER_SELL_M);
	CreateDynamic3DTextLabel("Продажа металла\n{00CC00}15 рублей {FFFFFF}за 1 кг", 0x9966FFBB,  2305.8884, 1738.6920, 1.7285 + 1.2, 10.0);

	CreateDynamic3DTextLabel("Шахта\n\n{3399CC}1. Выдача инструментов\n2. Получение зарплаты", 0x009933FF, GetTempJobInfo(TEMP_JOB_MINER, TJ_POS_X), GetTempJobInfo(TEMP_JOB_MINER, TJ_POS_Y), GetTempJobInfo(TEMP_JOB_MINER, TJ_POS_Z) + 0.82, 5.0);

	// завод
	for(idx = 0; idx < 3; idx ++)
	{
		CreatePickup(1275, 33, 264.4713, -217.2706 + float(idx * 2), 1006.5694, -1, PICKUP_ACTION_TYPE_TEMP_JOB, TEMP_JOB_FACTORY);
	}
	for(idx = 0; idx < sizeof factory_take_metall_pos; idx ++)
	{
		CreatePickup(1279, 23, factory_take_metall_pos[idx][0], factory_take_metall_pos[idx][1], factory_take_metall_pos[idx][2] - 0.4, 1, PICKUP_ACTION_TYPE_FACTORY_MET);
	}
	for(idx = 0; idx < sizeof factory_put_metall_pos; idx ++)
	{
		CreatePickup(1318, 23, factory_put_metall_pos[idx][0], factory_put_metall_pos[idx][1], factory_put_metall_pos[idx][2] - 0.4, 1, PICKUP_ACTION_TYPE_P_CREATE);
	}

	new Float: x = 311.6580, Float: y = -207.6711, Float: z = 1006.5694;
	for(idx = 0; idx < sizeof factory_desk; idx ++)
	{
		if(idx && !(idx % 4))
			y -= (idx != 8 ? 2.9917 : 3.0085);

		factory_desk[idx][FD_POS_X] = x - (float(idx % 4) * 5.5003);
		factory_desk[idx][FD_POS_Y] = y;
		factory_desk[idx][FD_POS_Z] = z;

		factory_desk[idx][FD_USED] = false;
		factory_desk[idx][FD_OBJECT_ID] = -1;

		factory_desk[idx][FD_CHEK_ID] = CreateDynamicCP(factory_desk[idx][FD_POS_X], factory_desk[idx][FD_POS_Y], factory_desk[idx][FD_POS_Z], 0.3, _, _, _, 0.3);
		factory_desk[idx][FD_LABEl] = CreateDynamic3DTextLabel("Рабочее место", 0xFFFFFFEE, factory_desk[idx][FD_POS_X], factory_desk[idx][FD_POS_Y], factory_desk[idx][FD_POS_Z] + 1.0, 5.0);

		CallLocalFunction("UpdateFactoryDesk", "i", idx);
	}
	factory_put_zone = CreateDynamicRectangle(264.8033, -199.8648, 296.8693, -202.0421);
	factory_job_area = CreateDynamicRectangle(-981.2298, 2098.1736, -1170.6591, 2263.3167, 0, 0);

	// --------------- Завод
	AddStaticVehicleEx(406, -1076.2706, 2204.9490, 38.4303, 180.0, 125, 1, 20, 0, VEHICLE_ACTION_TYPE_FACTORY); // фургон для перевози металла
	AddStaticVehicleEx(406, -1081.3639, 2204.7727, 38.4130, 180.0, 125, 1, 20, 0, VEHICLE_ACTION_TYPE_FACTORY); // фургон для перевози металла
	AddStaticVehicleEx(406, -1086.3571, 2204.7319, 38.3786, 180.0, 125, 1, 20, 0, VEHICLE_ACTION_TYPE_FACTORY); // фургон для перевози металла
	AddStaticVehicleEx(406, -1090.8806, 2204.7322, 38.3446, 180.0, 125, 1, 20, 0, VEHICLE_ACTION_TYPE_FACTORY); // фургон для перевози металла

	AddStaticVehicleEx(514, -1116.3119, 2205.5913, 38.2890, 179.9556, 6, 6, 20, 0, VEHICLE_ACTION_TYPE_FACTORY); // фура для перевозки топлива
	AddStaticVehicleEx(514, -1107.9980, 2205.7349, 38.1867, 180.4830, 6, 6, 20, 0, VEHICLE_ACTION_TYPE_FACTORY); // фура для перевозки топлива

	AddStaticVehicleEx(584,-1121.6831, 2190.3965, 38.0457, 263.2740, 1, 1, 180, 0, VEHICLE_ACTION_TYPE_FACTORY, true); // цистерна
	AddStaticVehicleEx(584,-1121.6831, 2181.3005, 38.0457, 263.2740, 1, 1, 180, 0, VEHICLE_ACTION_TYPE_FACTORY, true); // цистерна
}

/*stock InfoPickupsInit()
{
	new title_color[16];
	for(new idx; idx < sizeof info_pickup; idx ++)
	{
		CreatePickup(1239, 23, GetInfoPickupData(idx, IP_POS_X), GetInfoPickupData(idx, IP_POS_Y), GetInfoPickupData(idx, IP_POS_Z), -1, PICKUP_ACTION_TYPE_INFO_PICKUP, idx);

		format(title_color, sizeof title_color, "{%06x}", GetInfoPickupData(idx, IP_TITLE_COLOR) >>> 8);
		strins(GetInfoPickupData(idx, IP_TITLE), title_color, 0, 64);

		strins(GetInfoPickupData(idx, IP_INFO), "{FFFFFF}", 0, 1024);
		if(strlen(GetInfoPickupData(idx, IP_LABEL_INFO)) > 3)
			CreateDynamic3DTextLabel(GetInfoPickupData(idx, IP_LABEL_INFO), 0x99CC00DD, GetInfoPickupData(idx, IP_POS_X), GetInfoPickupData(idx, IP_POS_Y), GetInfoPickupData(idx, IP_POS_Z) + 0.7, 9.5);
	}
}*/

stock BusRoutesInit()
{
	new fmt_str[64];

	for(new idx; idx < sizeof g_bus_routes; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "%d.  %s\n", idx + 1, g_bus_routes[idx][BR_NAME]);
		strcat(g_bus_routes_list, fmt_str);

		if(g_bus_routes[idx][BR_COLOR] > 0)
		{
			g_bus_routes[idx][BR_COLOR] = 0x66CC00FF;
		}
		else g_bus_routes[idx][BR_COLOR] = 0x3399FFFF;
	}
}

stock AnimListInit()
{
	new fmt_str[64];
	for(new idx; idx < sizeof anim_list; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "%d. %s\n", idx + 1, GetAnimListData(idx, AL_DESCRIPTION));
		strcat(anim_list_items, fmt_str);

		if(GetAnimListData(idx, AL_LOOP) > 2)
			anim_list[idx][AL_DESCRIPTION] = 2;
	}
	strcat(anim_list_items, "{33CC00}Информация");
}

stock RepositoriesLoad()
{
	new Cache: result;
	new type, action_id;

	result = mysql_query(mysql, "SELECT * FROM repositories ORDER BY type,action_id ASC");
	new rows = cache_num_rows();

	for(new idx; idx < rows; idx ++)
	{
		type = cache_get_row_int(idx, 1);
		action_id = cache_get_row_int(idx, 2);

		if(0 <= type <= sizeof g_repository-1)
		{
			if(0 <= action_id <= sizeof g_repository[]-1)
			{
				SetRepositoryData(type, action_id, R_AMOUNT, cache_get_row_int(idx, 3));
			}
		}
	}
	cache_delete(result);

	RepositoriesInit();
}

stock RepositoriesInit()
{
	// шахта

	SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_LABEL, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, 2387.6606, 1757.4240, -1.8463 + 1.0, 20.0));
	SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_LABEL_2, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, 2317.1355, 1738.4092, 5.0, 25.0));

	UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL);

	// ----------------------
	SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_LABEL, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, -2568.2881, 297.3934, -15.7620 + 2.5, 15.0));
	SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_LABEL_2, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, 2382.7622, 1720.6998, 4.0, 30.0));

	UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE);

	// ----------------------
	SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_REMELTI, R_LABEL, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, 2387.6606, 1752.0416, -1.8463 + 1.0, 20.0));
	UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_REMELTI);

	SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_REMELTI, R_NOT_SAVE, true);
	SetTimer("UpdateMinerRemelting", 10_000, false);

	// завод
	SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_LABEL, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, -1046.6550,2208.5771, 41.0, 20.0));
	SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_LABEL_2, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, 263.7803, -203.8183, 1010.0, 15.0));

	factory_store_label[0] = CreateDynamic3DTextLabel("На складе:\n{FF9900}Топливо: 0 / 1000000 л\n\n{6699FF}/sellf", 0xFFFFFFFF, -1120.4103,2175.6133,38.0294, 20.0); // топливо
	factory_store_label[1] = CreateDynamic3DTextLabel("На складе:\n{FF9900}Металл: 0 / 1000000 кг\n\n{6699FF}/sellm", 0xFFFFFFFF, -1043.8157,2205.5217,38.1195, 20.0); // метал

	CreateDynamic3DTextLabel("Склад\nпроизводственного\nцеха\n\n{6699FF}/sellf\n/sellm\n{33CC00}/buyprod", 0xFFFFFFFF, -1046.6550, 2208.5771, 42.0, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, _, _, _, _, 50.0);
	UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL);

	// нефтезавод
	CreateDynamic3DTextLabel("Прямо\n\n{FFFFFF}Продажа топлива для АЗС", 0xFF6600FF, 977.3191, 630.5245, 12.1154 - 0.5, 20.0);
	CreateDynamic3DTextLabel("Направо\n\n{FFFFFF}Продажа топлива для завода", 0xFF6600FF, 977.3191, 635.4105, 12.1154 - 0.5, 20.0);

	SetRepositoryData(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F, R_LABEL, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, 2738.3379,-2273.0725,17.9063 + 5.0, 35.0)); // для азс
	SetRepositoryData(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F, R_LABEL_2, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, 2710.3369,-2383.5164,17.9063 + 5.0, 35.0)); // для завода

	UpdateRepository(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F);
	SetTimer("UpdateOilFactory", 30_000, false);

	// воинская часть
	SetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL, R_LABEL, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, 2883.7095,1447.6533,1050.9984 + 1.5, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 18, 3)); // металл
	SetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_AMMO, R_LABEL, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, 1681.6646,1778.9902,16.3985 + 1.5, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 18, 3)); // патроны

	UpdateRepository(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL);
	UpdateRepository(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_AMMO);

	// лесопилка
	SetRepositoryData(REPOSITORY_TYPE_SAWMILL, REPOSITORY_ACTION_SAWMILL_WOOD, R_LABEL, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, 2411.6389,-599.9781,12.3683 + 2.0, 10.0)); // дерево на лесопилке

	UpdateRepository(REPOSITORY_TYPE_SAWMILL, REPOSITORY_ACTION_SAWMILL_WOOD);

	print("[Repositories]: Все склады загружнены");
}

stock UpdateRepository(type, actionid)
{
	new fmt_str[128];
	new amount = GetRepositoryData(type, actionid, R_AMOUNT);
	new Text3D: label = GetRepositoryData(type, actionid, R_LABEL);
	new Text3D: label_2 = GetRepositoryData(type, actionid, R_LABEL_2);

	switch(type)
	{
		case REPOSITORY_TYPE_MINER:
		{
			switch(actionid)
			{
				case REPOSITORY_ACTION_MINER_METAL:
				{
					format(fmt_str, sizeof fmt_str, "Покупка металла\n(для развозчиков)\n\n{FFCD00}На складе %d кг\nКупить: /buym", amount);
					UpdateDynamic3DTextLabelText(label_2, 0xFFFFFFFF, fmt_str);

					format(fmt_str, sizeof fmt_str, "Металл\n{0099CC}На складе:\n%d кг", amount);
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);
				}
				case REPOSITORY_ACTION_MINER_ORE:
				{
					format(fmt_str, sizeof fmt_str, "Руда\n{00CC00}На складе:\n%d кг", amount);
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);

					UpdateDynamic3DTextLabelText(label_2, 0xFFFFFFFF, fmt_str);
				}
				case REPOSITORY_ACTION_MINER_REMELTI:
				{
					format(fmt_str, sizeof fmt_str, "Кузница\n{CC9900}%d кг руды\nна переплавке", amount);
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);
				}
			}
		}
		case REPOSITORY_TYPE_FACTORY:
		{
			switch(actionid)
			{
				case REPOSITORY_ACTION_FACTORY_METAL..REPOSITORY_ACTION_FACTORY_PROD:
				{
					if(actionid != REPOSITORY_ACTION_FACTORY_PROD)
					{
						format(fmt_str, sizeof fmt_str, "На складе:\n{FF9900}Топливо: %d / 1000000 л\n\n{6699FF}/sellf", GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT));
						UpdateDynamic3DTextLabelText(factory_store_label[0], 0xFFFFFFFF, fmt_str);

						format(fmt_str, sizeof fmt_str, "На складе:\n{FF9900}Металл: %d / 1000000 кг\n\n{6699FF}/sellm", GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_AMOUNT));
						UpdateDynamic3DTextLabelText(factory_store_label[1], 0xFFFFFFFF, fmt_str);
					}

					label = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_LABEL);
					label_2 = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_LABEL_2);

					format
					(
						fmt_str, sizeof fmt_str,
						"Исходные материалы:\n"\
						"{FF9900}Топливо: %d / 1000000 л\n"\
						"Металл: %d / 1000000 кг\n"\
						"{33CC00}Продукты: %d шт.",
						GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT),
						GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_AMOUNT),
						GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD, R_AMOUNT)
					);
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);
					UpdateDynamic3DTextLabelText(label_2, 0xFFFFFFFF, fmt_str);
				}
			}
		}
		case REPOSITORY_TYPE_OIL_FACTORY:
		{
			switch(actionid)
			{
				case REPOSITORY_ACTION_OIL_FACTORY_F:
				{
					format(fmt_str, sizeof fmt_str, "Топливо для АЗС\n\n{FFCD00}На складе\n%d л топлива\n{33FF00}Купить: /buyf", amount);
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);

					format(fmt_str, sizeof fmt_str, "Топливо для завода\n\n{FFCD00}На складе\n%d л топлива\n{33FF00}Купить: /buyf", amount);
					UpdateDynamic3DTextLabelText(label_2, 0xFFFFFFFF, fmt_str);
				}
			}
		}
		case REPOSITORY_TYPE_ARMY:
		{
			switch(actionid)
			{
				case REPOSITORY_ACTION_ARMY_METAL:
				{
					format(fmt_str, sizeof fmt_str, "Металл на складе:\n{66cc33}%d кг\n\n{9999ff}/takem\n/putm", amount);
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);
				}
				case REPOSITORY_ACTION_ARMY_AMMO:
				{
					format(fmt_str, sizeof fmt_str, "Патроны на складе:\n%d / 200000 шт.", amount);
					UpdateDynamic3DTextLabelText(label, 0xFFCD00FF, fmt_str);
				}
			}
		}
		case REPOSITORY_TYPE_SAWMILL:
		{
			switch(actionid)
			{
				case REPOSITORY_ACTION_SAWMILL_WOOD:
				{
					format(fmt_str, sizeof fmt_str, "На складе:\n{FF9900}Дерево: %d / 1000000 ед", GetRepositoryData(REPOSITORY_TYPE_SAWMILL, REPOSITORY_ACTION_SAWMILL_WOOD, R_AMOUNT));
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);
				}
			}
		}
	}
}

public: UpdateOilFactory()
{
	new add_fuels = (random(2500) + 500);
	new fuels = GetRepositoryData(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F, R_AMOUNT) + add_fuels;

	new time = (random(fuels <= 20_000 ? 1 : 180) + 60) * 1000;

	SetRepositoryData(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F, R_AMOUNT, fuels);
	UpdateRepository(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F);

	SetTimer("UpdateOilFactory", time, false);
}

public: UpdateMinerRemelting()
{
	new remelting = GetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_REMELTI, R_AMOUNT);
	new ore = GetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_AMOUNT);
	new metall = GetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_AMOUNT);
	new rand;

	// берем с переплавки руду
	rand = random(90) + 11; // от 10 до 100;
	if(remelting > 0) // если на переплавке есть руда
	{
		if(rand > remelting) // если взяли больше чем было
			rand = remelting; // берем все что осталось

		remelting -= rand;

		SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_REMELTI, R_AMOUNT, remelting); // забрали с переплавки
		SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_AMOUNT, metall + rand); // добавили на склад металл
	}

	// берем со склада руду
	rand = random(90) + 11; // от 10 до 100;
	if(remelting < 100) // если на пререплавке меньше 100 кг
	{
		if(rand > ore) // если взяли больше чем на складе
			rand = ore; // берем все что осталось

		SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_AMOUNT, ore - rand); // взяли со склада
		SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_REMELTI, R_AMOUNT, remelting + rand); // добавили в переплавку
	}

	UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE);
	UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_REMELTI);

	UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL);

	SetTimer("UpdateMinerRemelting", (random(16)+15) * 1000, false);
}

stock SaveRepository(type = -1, actionid = -1)
{
	new fmt_str[128];

	if(type != -1 && actionid != -1)
	{
		format(fmt_str, sizeof fmt_str, "UPDATE repositories SET amount=%d WHERE type=%d AND action_id=%d LIMIT 1", GetRepositoryData(type, actionid, R_AMOUNT), type, actionid);
		mysql_query(mysql, fmt_str, false);
	}
	else
	{
		for(new idx, idx_2; idx < sizeof g_repository; idx ++)
		{
			for(idx_2 = 0; idx_2 < sizeof g_repository[]; idx_2 ++)
			{
				if(GetRepositoryData(idx, idx_2, R_NOT_SAVE)) continue;

				format(fmt_str, sizeof fmt_str, "UPDATE repositories SET amount=%d WHERE type=%d AND action_id=%d LIMIT 1", GetRepositoryData(idx, idx_2, R_AMOUNT), idx, idx_2);
				mysql_query(mysql, fmt_str, false);
			}
		}
	}
}

stock PreLoadPlayerAnimList(playerid)
{
	if(!GetPlayerData(playerid, P_ANIM_LIST_INIT))
	{
		PreLoadPlayerAnims(playerid);
		SetPlayerData(playerid, P_ANIM_LIST_INIT, true);

		return 1;
	}
	return 0;
}

stock SetPlayerAnimation(playerid, animid)
{
    HideAnimTD(playerid);
    
    CreateAnimTD(playerid);
    
    //CreateAnimTD(playerid);
    
	if(0 <= animid <= sizeof anim_list-1)
	{
		if(!IsPlayerInAnyVehicle(playerid))
		{
			switch(animid+1)
			{
				case 1..4:
				{
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1 + animid);
				}
				default:
				{
					new type = USE_ANIM_TYPE_NONE - 1;
					if(GetAnimListData(animid, AL_LOOP))
					{
						SetPlayerData(playerid, P_USE_ANIM, true);
						
						CreateAnimTD(playerid);
					}
					else
					{
						if(IsPlayerUseAnim(playerid))
						{
							SetPlayerData(playerid, P_USE_ANIM, false);
							HideAnimTD(playerid);
						}
						type = USE_ANIM_TYPE_NONE;
					}
					ApplyAnimationEx(playerid, GetAnimListData(animid, AL_LIB), GetAnimListData(animid, AL_NAME), GetAnimListData(animid, AL_DELTA), (GetAnimListData(animid, AL_LOOP) % 2), GetAnimListData(animid, AL_LOCK_X), GetAnimListData(animid, AL_LOCK_Y), GetAnimListData(animid, AL_FREEZE), GetAnimListData(animid, AL_TIME), 0, type);
				}
			}
		}
		return 1;
	}
	return 0;
}

stock ClearPlayerUseAnim(playerid)
{
    HideAnimTD(playerid);
    
	if(IsPlayerUseAnim(playerid))
	{
		SetPlayerData(playerid, P_USE_ANIM_TYPE, USE_ANIM_TYPE_NONE);

		SetPlayerData(playerid, P_USE_ANIM, false);
		
		HideAnimTD(playerid);

		ClearPlayerAnim(playerid);
	}
}

stock IsValidMail(email[], len = sizeof email)
{
    new count[2];
    if(!(5 <= len <= 60)) return 0;
    for(new i; i != len; i++)
    {
		switch(email[i])
		{
			case '@':
			{
				count[0]++;
				if(count[0] != 1 || i == len - 1 || i == 0) return 0;
			}
			case '.':
			{
				if(count[0] == 1 && count[1] == 0 && i != len - 1)
				{
					count[1] = 1;
				}
			}
			case '0'..'9', 'a'..'z', 'A'..'Z', '_', '-':
			{
				continue;
			}
			default:
				return 0;
		}
    }
    if(count[1] == 0) return 0;
    return 1;
}

stock ShowPlayerRegDialog(playerid, step)
{
	if(GetPlayerData(playerid, P_ACCOUNT_STATE) != ACCOUNT_STATE_REGISTER) return 0;

	switch(step)
	{
		case REGISTER_STATE_PASSWORD:
		{
			Dialog
			(
				playerid, DIALOG_REGISTER, DIALOG_STYLE_INPUT,
				"{66CCFF}Регистрация",
				"{FFFFFF}Добро пожаловать на сервер "SERVER_NAME" RolePlay\n"\
				"Чтобы начать игру сначала необходимо зарегистрироваться\n\n"\
				"Пожалуйста укажите пароль для Вашего аккаунта\n"\
				"Он будет запрашиваться каждый раз, когда вы заходите на сервер\n\n"\
				"\t{66CC66}Примечания:\n"\
				"\t- Пароль может состоять из русских и латинских символов\n"\
				"\t- Пароль чувствителен к регистру\n"\
				"\t- Длина пароля от 6-ти до 15-ти символов",
				"Далее", ""
			);
		}
	/*	case REGISTER_STATE_EMAIL:
		{
			Dialog
			(
				playerid, DIALOG_REGISTER, DIALOG_STYLE_INPUT,
				"{66CCFF}Email",
				"{FFFFFF}Введите адрес Вашей электронной почты\n"\
				"Используя его, вы сможете восстановить доступ к аккаунту\n"\
				"в случае взлома или если забудете пароль.\n\n"\
				"На email мы вышлем ссылку. В течение 14 дней Вы можете\n"\
				"перейти по ней для подтверждения почты.\n\n"\
				"Убедитесь в правильности ввода и нажмите \"Далее\"",
				"Далее", ""
			);
		}
		*/
		case REGISTER_STATE_REFER:
		{
			Dialog
			(
				playerid, DIALOG_REGISTER, DIALOG_STYLE_INPUT,
				"{66CCFF}Ник пригласившего игрока",
				"{FFFFFF}Если Вы узнали о нашем сервере от своего друга\n"\
				"который тут играет, укажите его ник в поле ниже\n\n"\
				"{66CC66}При достижении вами 4-го уровня он получит вознаграждение",
				"Ввести", "Пропустить"
			);
		}
		case REGISTER_STATE_SEX:
		{
			Dialog
			(
				playerid, DIALOG_REGISTER, DIALOG_STYLE_MSGBOX,
				"{66CCFF}Пол",
				"{FFFFFF}Выберите пол вашего персонажа",
				"Мужской", "Женский"
			);
		}
		case REGISTER_STATE_RULES:
		{
			ShowServerRules(playerid, true);
		}
		case REGISTER_STATE_CREATE_ACC:
		{
			if(CreatePlayerAccount(playerid))
			{
				SetPlayerData(playerid, P_ACCOUNT_STATE, ACCOUNT_STATE_REG_SKIN);

				SetSpawnInfo(playerid, 0, 0, 332.2033, -174.1066, 999.6743, 1.0, 0, 0, 0, 0, 0, 0);
				SpawnPlayer(playerid);

				SendClientMessage(playerid, 0xFFFFFFFF, "Регистрация завершена!");
				SendClientMessage(playerid, 0x66CC00FF, "Теперь выберите внешность Вашего персонажа");


			}
			else
			{
				SendClientMessage(playerid, 0xFF6600FF, "Ошибка создания аккаунта, перезайдите и повторите попытку");
				Kick:(playerid);
			}
		}
		default:
			return 1;
	}

	SetPlayerData(playerid, P_ACCOUNT_STEP_STATE, step);
	return 1;
}

stock ShowServerRules(playerid, bool: reg = false)
{
	Dialog
	(
		playerid, reg ? DIALOG_REGISTER : DIALOG_PLAYER_STATS, DIALOG_STYLE_MSGBOX,
		"{66CCFF}Правила сервера",
		"{FFCD00}1. Основное\n"\
		"{FFFFFF}- Запрещено использовать любые читы, трейнеры, моды или CLEO скрипты\n"\
		"- Запрещен DeathMatch (DM) - убийство и нанесение вреда игрокам без причины\n"\
		"- Запрещено убивать игроков на спавне (на месте, где они появляются в игре)\n"\
		"- Запрещены убийства путем наезда на него или стрельбы из авто\n"\
		"- Запрещено уходить на паузу в целях спасения от нападающих\n"\
		"- Запрещено использование возможностей сервера для создания неудобств другим игрокам\n\n"\
		"{FFCD00}2. Процесс общения\n"\
		"{FFFFFF}- Запрещен мат, оскорбление других игроков\n"\
		"- Запрещены угрозы другим игрокам (не относящиеся к игровому процессу)\n"\
		"- Запрещено писать транслитом (например \"ya zawel na server\")\n"\
		"- Запрещена любая реклама сторонних ресурсов\n"\
		"- Запрещено флудить (часто повторять одинаковые фразы, или фразы без смысловой нагрузки)\n\n"\
		"{FFCD00}3. Администрация\n"\
		"{FFFFFF}- Необходимо сообщать администрации сервера о любых случаях нарушения данных правил\n"\
		"- Администрация самостоятельно выбирает штрафные санкции для каждого конкретного случая\n"\
		"- Санкции могут применяться сразу после нарушения или через время (например, впоследствии поступления жалобы)\n"\
		"- Если штрафная санкция была применена к вам ошибочно, свяжитесь с администрацией",
		"Принять", "Отмена"
	);
}

stock GetPlayerHouseName(playerid)
{
	new name[32];
	new houseid = GetPlayerHouse(playerid);

	if(houseid != -1)
	{
		switch(GetPlayerData(playerid, P_HOUSE_TYPE))
		{
			case HOUSE_TYPE_HOME:
			{
				if(GetHouseData(houseid, H_ENTRACE) != -1)
				{
					format(name, sizeof name, "Подъезд %d (№%d на %d этаже)", GetHouseData(houseid, H_ENTRACE) + 1, GetHouseData(houseid, H_FLAT_ID) + 1, GetHouseData(houseid, H_FLAT_ID) / 4 + 1);
				}
				else format(name, sizeof name, "%s (№%d)", GetHouseData(houseid, H_NAME), houseid);
			}
			case HOUSE_TYPE_ROOM:
			{
				format(name, sizeof name, "В гостях (дом №%d)", houseid);
			}
			case HOUSE_TYPE_HOTEL:
			{
				format(name, sizeof name, "Гостиница (№%d на %d этаже)", (GetPlayerData(playerid, P_HOUSE_ROOM) % 12) + 1, (GetPlayerData(playerid, P_HOUSE_ROOM) / 12) + 1);
			}
		}
	}
	else name = "Бездомный";

	return name;
}

stock GetPlayerBizName(playerid)
{
	new name[32];
	new businessid = GetPlayerBusiness(playerid);

	if(businessid != -1)
	{
		format(name, sizeof name, "%s (№%d)", GetBusinessData(businessid, B_NAME),  businessid);
	}
	else name = "Нет";

	return name;
}

stock GetPlayerJobAndRankName(playerid)
{
	new team = GetPlayerTeamEx(playerid);
	new rang = GetPlayerJob(playerid);
	new fmt_rank[32];

	if(TEAM_GOVERNMENT <= team <= TEAM_OPG_LYTKARINSKAYA)
	{
		if(!(1 <= rang <= 10))
			rang = 1;

		format(fmt_rank, sizeof fmt_rank, rank_names[team - 1][rang - 1]);
	}
	else
	{
	    format(fmt_rank, sizeof fmt_rank, GetPlayerJobName(playerid));
	}

	return fmt_rank;
}

stock IsTeamSubdivision(team)
{
	if(TEAM_DPS <= team <= TEAM_FBI)
	{
		return true;
	}
	return false;
}

stock GetPlayerSubdivisionName(playerid)
{
	new player_team = GetPlayerTeamEx(playerid);

	if(IsTeamSubdivision(player_team))
		return team_subdivision_name[player_team - 4];

	return team_subdivision_name[0];
}

stock GetPlayerTeamStats(playerid)
{
	new fmt_text[110];

	format(fmt_text, sizeof fmt_text, "Организация:\t\t\t%s\n", GetPlayerTeamName(playerid));

	if(IsTeamSubdivision(GetPlayerTeamEx(playerid)))
	{
	    format(fmt_text, sizeof fmt_text, "%sПодразделение:\t\t%s\n", fmt_text, GetPlayerSubdivisionName(playerid));
	}

	return fmt_text;
}

stock GetPlayerGameStatus(playerid)
{
	new status[16];

	switch(GetPlayerLevel(playerid))
	{
	    case 0: status = "Ошибка";
	    case 1: status = "Без статуса";
	    case 2..5: status = "Новичок";
	    case 6..9: status = "Развивающийся";
	    case 10..14: status = "Освоившийся";
	    case 15..19: status = "Опытный игрок";
	    case 20..29: status = "Активный игрок";
	    default: status = "Легендарный";
	}

	if(GetPlayerTeamEx(playerid) && (GetPlayerJob(playerid) == 10)) status = "Лидер";
	if(GetPlayerAdminEx(playerid) != 0) status = "Администратор";

	return status;
}

stock ShowPlayerStats(playerid, to_player = -1)
{
	if(to_player < 0)
		to_player = playerid;

	new fmt_str[1024],
	    rank_value[3] = "—";

    if(1 <= GetPlayerTeamEx(playerid) < MAX_ORG)
	{
		if(1 <= GetPlayerJob(playerid) <= 10)
			valstr(rank_value, GetPlayerJob(playerid));
		else
			rank_value = "1";
	}

	new day, month, year;
    getdate(year, month, day);    

	format
	(
		fmt_str, sizeof fmt_str,
		"{FFFFFF}Имя:\t\t\t\t{0099FF}%s\n"\
		"{FFFFFF}Уровень:\t\t\t%d\n"\
		"Очки опыта:\t\t\t%d из %d\n"\
		"Номер телефона:\t\t%d\n"\
		"На счету телефона:\t\t%d руб\n"\
		"Законопослушность:\t\t%d\n"\
		"Уровень розыска:\t\t%d\n"\
		"Уровень улучшений:\t\t%d\n"\
		"Сила:\t\t\t\t%d\n"\
		"Наркотики:\t\t\t%d\n"\
		"Патроны:\t\t\t%d\n"\
		"Металл:\t\t\t%d\n"\
		"Пол:\t\t\t\t%s\n"\
		"%s:\t\t\t%s\n\n"\
		"%s"\
		"Работа / должность:\t\t%s\n"\
		"Ранг:\t\t\t\t%s\n\n"\
		"Проживание:\t\t\t%s\n"\
		"Бизнес:\t\t\t%s\n"\
		"Игровой статус:\t\t%s\n"\
		"Всего в игре:\t\t%d Часов\n\n\n"\
		"\t\tИстинная Россия\n"\
		"\t\t\t{FFFFFF}Статистика за %02d/%02d/%d",
		GetPlayerNameEx(playerid),
		GetPlayerLevel(playerid),
		GetPlayerExp(playerid),
		GetExpToNextLevel(playerid),
		GetPlayerPhone(playerid),
		GetPlayerData(playerid, P_PHONE_BALANCE), 
		GetPlayerData(playerid, P_LAW_ABIDING),
		GetPlayerSuspect(playerid),
		GetPlayerData(playerid, P_IMPROVEMENTS),
		GetPlayerData(playerid, P_POWER),
		GetPlayerData(playerid, P_DRUGS),
		GetPlayerData(playerid, P_AMMO),
		GetPlayerData(playerid, P_METALL),
		GetPlayerSexName(playerid),
		GetPlayerSex(playerid) ? ("Замужем за") : ("Женат на"),
		GetPlayerData(playerid, P_WIFE_NAME),
		GetPlayerTeamStats(playerid), 		// P_TEAM | P_SUBDIVISON
		GetPlayerJobAndRankName(playerid),
		rank_value, 			// P_JOB
		GetPlayerHouseName(playerid),
		GetPlayerBizName(playerid),
		GetPlayerGameStatus(playerid),
		GetPlayerData(playerid, P_TOTALHOUR),
		day, month, year
	);
	return Dialog(to_player, DIALOG_PLAYER_STATS, DIALOG_STYLE_MSGBOX, "{CC9900}Статистика игрока", fmt_str, "Назад", "Закрыть");
}



stock ShowPlayerCMDSDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_PLAYER_CMDS, DIALOG_STYLE_LIST,
		"{FFCD00}Список команд",
		""c_b"1. Транспорт\n"\
		"2. Общение\n"\
		"3. Дома\n"\
		"4. Бизнес и АЗС\n"\
		"5. Работы\n"\
		"6. Банды\n"\
		"7. Правительство\n"\
		"8. Армия\n"\
		"9. Полиция\n"\
		"10. СМИ\n"\
		"11. Больница\n"\
		"12. Лидеры\n"\
		"13. Общие",
		"Выбрать", "Назад"
	);
	return 1;
}

stock ShowPlayerSettings(playerid)
{
	static const
		chat_type_name[3][25] = {"{FF3333}Отключен", "{00CC00}Стандарт", "{0099FF}"SERVER_NAME};

	new s_info[256];
	format
	(
		s_info, sizeof s_info,
		"Основной чат\t\t%s\n"\
		"Чат организации\t%s\n"\
		"Ники над игроками\t%s\n"\
		"Ники в чате\t\t%s\n"\
		"ID игроков в чате\t%s\n"\
		"Управл. транспортом\t%s\n"\
		"Изменить место появления\n"\
		"{888888}[Сохранить настройки]",
		chat_type_name[GetPlayerSettingData(playerid, S_CHAT_TYPE)],
		GetPlayerSettingData(playerid, S_TEAM_CHAT) 	? ("{00CC00}Включен")  : ("{FF3333}Отключен"),
		GetPlayerSettingData(playerid, S_PLAYERS_NICK) 	? ("{00CC00}Включены") : ("{FF3333}Отключены"),
		GetPlayerSettingData(playerid, S_NICK_IN_CHAT) 	? ("{00CC00}Включены") : ("{FF3333}Отключены"),
		GetPlayerSettingData(playerid, S_ID_IN_CHAT) 	? ("{00CC00}Включены") : ("{FF3333}Отключены"),
		GetPlayerSettingData(playerid, S_VEH_CONTROL) 	? ("{00CC00}Клавиши и команды") : ("{FF9900}Только команды")
	);
	return Dialog(playerid, DIALOG_PLAYER_SETTINGS, DIALOG_STYLE_LIST, "{FFCD00}Личные настройки", s_info, "Вкл|Выкл", "Назад");
}

stock ShowPlayerSecuritySettings(playerid)
{
	Dialog
	(
		playerid, DIALOG_PLAYER_SECURITY_SETTINGS, DIALOG_STYLE_LIST,
		"{FFCD00}Настройки безопасности",
		"1. Информация о настройках\n"\
		"2. Мобильный телефон\n"\
		"3. 'Случайный' PIN-код\n"\
		"4. Google Authenticator\n"\
		"{00CC66}5. Изменить пароль\n"\
		"6. Изменить 'случайный' PIN-код\n"\
		"{0099FF}7. Статус безопасности\n"\
		"{999999}8. Подтвердить Email",
		"Выбрать", "Назад"
	);
}

stock ShowPlayerReportDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_REPORT, DIALOG_STYLE_INPUT,
		"{FFCD00}Связь с администрацией",
		"{FFFFFF}Вы собираетесь написать Администрации сервера\n\
		{FFFFFF}Перед тем как отправить сообщение\n\
		{FFFFFF}убедитесь, что один из пунктов помощи не дал Вам ответа на Ваш вопрос\n\
		{FF3300}Запрещено:\n\
		{FFFFFF}- флуд, сквернословие, оффтоп\n\
		{FFFFFF}- Выпрашивание игровых ценностей ('дать денег', 'дать лидерку', 'дать права')\n\
		{FFFFFF}- ложные сообщения о нарушении\n\n\
		{FF3300}За нарушение правил Администратор может:\n\
		{FFFFFF}- предупредить (warn)\n\
		{FFFFFF}- отключить от сервера (kick)\n\
		{FFFFFF}- лишить возможности писать (mute)\n\
		{FFFFFF}- заблокировать (ban)\n\n\
		{FFFFFF}Данные правила установлены для всех игроков {339966}LIGHTS-MOBILE.RU",
		"Отправить", "Назад"
	);
}

stock ShowPlayerAskDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_ASK, DIALOG_STYLE_INPUT,
		"{FFCD00}Связь с помощниками сервера",
		"{FFFFFF}Вы собираетесь задать вопрос помощникам сервера\n\
		{FFFFFF}Перед тем как отправить сообщение\n\
		{FFFFFF}убедитесь, что один из пунктов помощи не дал Вам ответа на Ваш вопрос\n\
		{FF3300}Запрещено:\n\
		{FFFFFF}- флуд, сквернословие, оффтоп\n\
		{FFFFFF}- Выпрашивание игровых ценностей ('дать денег', 'дать лидерку', 'дать права')\n\
		{FFFFFF}- ложные сообщения о нарушении\n\n\
		{FF3300}За нарушение правил Администратор может:\n\
		{FFFFFF}- предупредить (warn)\n\
		{FFFFFF}- отключить от сервера (kick)\n\
		{FFFFFF}- лишить возможности писать (mute)\n\
		{FFFFFF}- заблокировать (ban)\n\n\
		{FFFFFF}Данные правила установлены для всех игроков {339966}LIGHTS-MOBILE.RU",
		"Отправить", "Назад"
	);
}

stock ShowPlayerChangeNameDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_CHANGE_NAME, DIALOG_STYLE_INPUT,
		"{FFCD00}Изменение имени",
		"{FFFFFF}Вы можете изменить имя своего персонажа, если оно не соответствует RP правилам\n"\
		"Во всех остальных случаях смена имени осуществляется в {6699FF}/menu > Дополнительно.\n\n"\
		"{FFFFFF}RP ник имеет формат Имя_Фамилия.\n"\
		"Например: Andrey_Ivanov, Nikolas_Ryan, Kate_Valente и т. п.\n\n"\
		"Введите новое имя в поле ниже. Допустимы только латинские символы:",
		"Изменить", "Закрыть"
	);
}

stock ShowPlayerImprovementsDialog(playerid)
{
	new fmt_str[67 + 1];
	new dest[((sizeof(fmt_str)-1) * (sizeof(g_player_improvements))) + 10 + 1];

	new str_numeric[14 + 1];
	new my_i_level = GetPlayerData(playerid, P_IMPROVEMENTS);

	for(new idx = 0; idx < sizeof g_player_improvements; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "%d. %s\t\t", idx + 1, GetPlayerImprovementInfo(idx, I_NAME));
		if(idx == 2)
			strcat(fmt_str, "\t");

		if(my_i_level > idx)
		{
			strins(fmt_str, "{FFCD00}", 0);
			strcat(fmt_str, "Активно\n");
			strcat(dest, fmt_str);

			continue;
		}
		else if(my_i_level < idx)
		{
			strins(fmt_str, "{FF3333}", 0);
		}
		else
		{
			strcat(fmt_str, "{00CC00}");
		}
		strcat(dest, fmt_str);
		valfmt(str_numeric, GetPlayerImprovementInfo(idx, I_PRICE));

		format(fmt_str, sizeof fmt_str, "требуется %d уровень и %s руб\n", GetPlayerImprovementInfo(idx, I_LEVEL), str_numeric);
		strcat(dest, fmt_str);
	}
	strcat(dest, "Информация");

	return Dialog(playerid, DIALOG_PLAYER_IMPROVEMENTS, DIALOG_STYLE_LIST, "{FFCD00}Улучшения", dest, "Выбрать", "Назад");
}

stock SendMessageToAdmins(message[], color, a_level = 1)
{
	if(a_level < 1)
		a_level = 1;

	new count;
	foreach(new playerid : Player)
	{
		if(!IsPlayerLogged(playerid)) continue;
		if(GetPlayerAdminEx(playerid) < a_level) continue;

		SendClientMessage(playerid, color, message);
		count ++;
	}
	return count;
}

stock SendMessageToHelpers(message[], color, h_level = 1)
{
	if(h_level < 1)
		h_level = 1;

	new count;
	foreach(new playerid : Player)
	{
		if(!IsPlayerLogged(playerid)) continue;
		if(GetPlayerHelperEx(playerid) < h_level) continue;

		SendClientMessage(playerid, color, message);
		count ++;
	}
	return count;
}

stock SendMessageToTeam(team, message[], color = -1, playerid = -1)
{
	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(GetPlayerSettingData(i, S_TEAM_CHAT) == 0) continue;
		else if(GetPlayerTeamEx(i) != team) continue;
		else if(i == playerid) continue;

		SendClientMessage(i, color, message);
	}
	return 1;
}

stock SendMessageToPoliceTeam(message[], color = -1, playerid = -1)
{
	SendMessageToTeam(TEAM_DPS, message, color, playerid);
	SendMessageToTeam(TEAM_PPS, message, color, playerid);
	SendMessageToTeam(TEAM_FBI, message, color, playerid);

	return 1;
}

stock SendMessageToGang(message[], color = -1, playerid = -1)
{
	SendMessageToTeam(TEAM_OPG_ARZAMASKAYA, message, color, playerid);
	SendMessageToTeam(TEAM_OPG_BATYREVSKAYA, message, color, playerid);
	SendMessageToTeam(TEAM_OPG_LYTKARINSKAYA, message, color, playerid);

	return 1;
}

stock SendMessageToJob(to_job, message[], color = -1, playerid = -1, bool: org_chat = false)
{
	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(GetPlayerJob(i) != to_job) continue;
		else if(org_chat && !GetPlayerSettingData(i, S_TEAM_CHAT)) continue;
		else if(playerid == i) continue;

		SendClientMessage(i, color, message);
	}
	return 1;
}

stock HidePlayerDialog(playerid)
{
	return Dialog(playerid, -1, DIALOG_STYLE_MSGBOX, "NULL", "NULL", "NULL", "NULL");
}

stock Shuffle(array[], size = sizeof array)
{
	new
		index,
		rand,
		buffer;

	for(index = 0; index < size; index ++)
	{
		rand = random(size);
		buffer = array[index];

		array[index] = array[rand];
		array[rand] = buffer;
	}
}

stock ShowPlayerPinCodePTD(playerid, s_state)
{
	if(GetPlayerPinCodeState(playerid) != PIN_CODE_STATE_NONE) return ;
	pin_code_input[playerid][0] = 0;

	switch(s_state)
	{
		case PIN_CODE_STATE_SET:
			SendClientMessage(playerid, 0x3399FFFF, "Придумайте свой PIN-код и наберите его");

		case PIN_CODE_STATE_CHECK:
			SendClientMessage(playerid, 0xFFFF00FF, "Наберите Ваш текущий PIN-код");

		case PIN_CODE_STATE_CHANGE:
			SendClientMessage(playerid, 0xFFFF00FF, "Наберите новый PIN-код");

		case PIN_CODE_STATE_LOGIN_CHECK:
			SendClientMessage(playerid, 0xFFFFFFFF, "Система безопасности запрашивает ввод Вашего случайного PIN-кода");

		default:
			return ;

	}

	new values[10] = {0, 1, ...};
	new ch[2];
	Shuffle(values);

	new Float: add_pos_x, Float: add_pos_y;
	for(new idx = 0; idx < 10; idx ++)
	{
		add_pos_x = ((idx % 3) * 40.0);
		add_pos_y = ((idx / 3) * 40.0);

		if(idx == 9)
			add_pos_x += 40.0;

		valstr(ch, values[idx]);
		SetPlayerPinCodeValue(playerid, idx, values[idx]);

		pin_code_PTD[playerid][idx] = CreatePlayerTextDraw(playerid, 420.0 + add_pos_x, 170.0 + add_pos_y, ch);
		PlayerTextDrawTextSize(playerid, pin_code_PTD[playerid][idx], 445.0 + add_pos_x, 25.0);
		PlayerTextDrawLetterSize(playerid, pin_code_PTD[playerid][idx], 1.0, 3.0);
		PlayerTextDrawAlignment(playerid, pin_code_PTD[playerid][idx], 1);
		PlayerTextDrawBackgroundColor(playerid, pin_code_PTD[playerid][idx], 0x000000FF);
		PlayerTextDrawBoxColor(playerid, pin_code_PTD[playerid][idx], 0x80808080);
		PlayerTextDrawColor(playerid, pin_code_PTD[playerid][idx], 0xFFFFFFFF);
		PlayerTextDrawFont(playerid, pin_code_PTD[playerid][idx], 1);
		PlayerTextDrawSetOutline(playerid, pin_code_PTD[playerid][idx], 1);
		PlayerTextDrawSetProportional(playerid, pin_code_PTD[playerid][idx], 1);
		PlayerTextDrawSetShadow(playerid, pin_code_PTD[playerid][idx], 2);
		PlayerTextDrawUseBox(playerid, pin_code_PTD[playerid][idx], 1);
		PlayerTextDrawSetSelectable(playerid, pin_code_PTD[playerid][idx], 1);

		PlayerTextDrawShow(playerid, pin_code_PTD[playerid][idx]);
	}
	SelectTextDraw(playerid, 0x0066FFFF);

	SetPlayerPinCodeState(playerid, s_state);
}

stock HidePlayerPinCodePTD(playerid, bool: canel_select = true)
{
	if(GetPlayerPinCodeState(playerid) != PIN_CODE_STATE_NONE)
	{
		SetPlayerPinCodeState(playerid, PIN_CODE_STATE_NONE);

		if(canel_select)
			CancelSelectTextDraw(playerid);

		for(new idx = 0; idx < 10; idx ++)
		{
			PlayerTextDrawHide(playerid, pin_code_PTD[playerid][idx]);
			PlayerTextDrawDestroy(playerid, pin_code_PTD[playerid][idx]);
		}
	}
}

stock ShowCurrentTime(playerid)
{
	new
		hour, minute,
		year, month, day;

	gettime(hour, minute);
	getdate(year, month, day);

	SetPlayerChatBubble(playerid, "звонит в службу точного времени...", 0xDD90FFFF, 25.0, 7000);
	if(!IsPlayerInAnyVehicle(playerid))
		ApplyAnimationEx(playerid, "COP_AMBIENT", "Coplook_watch", 4.0, false, 0, 0, 0, 0, 0);

	new fmt_str[350];

	format(fmt_str, sizeof fmt_str, "~y~%d:%02d~n~~b~~h~%02d.%02d.%d", hour, minute, day, month, year);
	GameTextForPlayer(playerid, fmt_str, 3000, 1);

	format
	(
		fmt_str, sizeof fmt_str,
		"{FFFFFF}Здравствуйте!\n"\
		"Вы позвонили в службу точного времени\n\n"\
		"Сегодняшняя дата:\t\t{66CC00}%d %s %d г.\n"\
		"{FFFFFF}День недели:\t\t\t{66CC00}%s\n"\
		"{FFFFFF}Текущее время:\t\t{3399FF}%d:%02d\n\n"\
		"{FFFFFF}Время в игре за час:\t\t{FF7000}%d мин\n"\
		"{FFFFFF}Время в игре сегодня:\t{FF7000}%d ч %d мин\n"\
		"{FFFFFF}Время в игре вчера:\t\t{FF7000}%d ч %d мин",
		day,
		GetMonthName(month),
		year,
		GetDayName(GetDayOfWeek(year, month, day)),
		hour,
		minute,
		ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_HOUR), CONVERT_TIME_TO_MINUTES),
		ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_DAY), CONVERT_TIME_TO_HOURS),
		ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_DAY), CONVERT_TIME_TO_MINUTES),
		ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_DAY_PREV), CONVERT_TIME_TO_HOURS),
		ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_DAY_PREV), CONVERT_TIME_TO_MINUTES)
	);
	SendClientMessage(playerid, 0x99CC00FF, "Вы позвонили в службу точного времени");

	return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFCD00}Точное время", fmt_str, "Закрыть", "");
}

stock GetDayOfWeek(year, month, day)
{
    new a = (14 - month) / 12;
    new y = year + 4800 - a;
	new m = month + 12 * a - 3;
	new c_date = day + (153 * m + 2) / 5 + 365 * y + y / 4 - y / 100 + y / 400 - 32045;
	new day_of_week = c_date % 7 + 1;

    return day_of_week;
}

stock UpdateCharity()
{
	if(cache_is_valid(charity_cache_data))
	{
		cache_delete(charity_cache_data);
	}
	new Cache: result;

	result = mysql_query(mysql, "SELECT (SELECT a.name FROM accounts a WHERE a.id = c.uid) as name, SUM(c.money) as total FROM charity c GROUP BY c.uid ORDER BY total DESC LIMIT 25", true);
	charity_cache_data = result;
}

stock Dialog(playerid, dialogid, style, caption[], info[], button1[], button2[])
{
	SetPlayerData(playerid, P_LAST_DIALOG, dialogid);

	return ShowPlayerDialog(playerid, dialogid, style, caption, info, button1, button2);
}

stock abs(value)
{
	return value = -value;
}

stock IsNumeric(dest[], pos=0)
{
	new is_numeric = true;
	do
	{
		switch(dest[pos])
		{
			case '0'..'9': continue;
			default:
			{
				is_numeric = false;
				break;
			}
		}
	}
	while(dest[++pos]);

	return is_numeric;
}

stock valfmt(dest[], value, size = sizeof dest)
{
	new buffer[15 + 1];
	valstr(buffer, value);

	new pos = strlen(buffer);
	while((pos -= 3) > 0)
	{
		strins(buffer, ".", pos);
	}
	format(dest, size, "%s", buffer);
}

stock GetSubnet(dest[], ip[], size = sizeof dest)
{
	new pos, dots;
	do
	{
		if(ip[pos] == '.')
		{
			if(++dots == 2)
			{
				ip[pos] = 0;
				break;
			}
		}
	}
	while(ip[++pos]);

	format(dest, size, "%s", ip);
}

stock GetFamilyChatID(team)
{
	if(TEAM_GOVERNMENT <= team <= TEAM_RADIO)
	{
		return 1;
	}
	else if(TEAM_DPS <= team <= TEAM_FBI)
	{
		return 2;
	}
	else if(TEAM_OPG_ARZAMASKAYA <= team <= TEAM_OPG_LYTKARINSKAYA)
	{
		return team;
	}
	return 0;
}

stock GivePlayerMoneyEx(playerid, money, description[]="None", bool:save=true, bool:game_text=true)
{
	if(money < 0 && GetPlayerMoneyEx(playerid) < money) return -1;

	new fmt_str[185];
	AddPlayerData(playerid, P_MONEY, +, money);
	GivePlayerMoney(playerid, money);

	format(fmt_str, sizeof fmt_str, "INSERT INTO money_log (uid,uip,time,money,description) VALUES (%d,'%s',%d,%d,'%s')", GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), money, description);
	mysql_query(mysql, fmt_str, false);


	if(save)
	{
		format(fmt_str, sizeof fmt_str, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid), GetPlayerAccountID(playerid));
		mysql_query(mysql, fmt_str, false);
	}
	if(game_text)
	{
		format(fmt_str, sizeof fmt_str, "%s%d rub", money < 0 ? ("~r~") : ("~g~+"), money);
		GameTextForPlayer(playerid, fmt_str, 4000, 1);
	}

	return 1;
}

stock GivePlayerDonate(playerid, donate, description[]="None", bool:save=true)
{
	new fmt_str[185];
	AddPlayerData(playerid, P_DONATE_MONEY, +, donate);
	if(donate > 0) AddPlayerData(playerid, P_DONATE_TOTAL, +, donate);

	format(fmt_str, sizeof fmt_str, "INSERT INTO donate_log (uid,uip,time,donate,description) VALUES (%d,'%s',%d,%d,'%s')", GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), donate, description);
	mysql_query(mysql, fmt_str, false);

	if(save)
	{
		UpdatePlayerDatabaseInt(playerid, "donate_current", GetPlayerCurrentDonate(playerid));
		UpdatePlayerDatabaseInt(playerid, "donate_total", GetPlayerTotalDonate(playerid));
	}
	return 1;
}




stock BankLog(playerid, money, description[] = "None")
{
	new fmt_str[185];

	format(fmt_str, sizeof fmt_str, "[BANK] %s", description);

	format(fmt_str, sizeof fmt_str, "INSERT INTO money_log (uid,uip,time,money,description) VALUES (%d,'%s',%d,%d,'%s')", GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), money, fmt_str);
	mysql_query(mysql, fmt_str, false);

	return 1;
}

stock SendMessageInLocal(playerid, message[], color, Float: radius = 30.0)
{
	new virtual_world = GetPlayerVirtualWorld(playerid);
	new Float: x, Float: y, Float: z;
	GetPlayerPos(playerid, x, y, z);

	foreach(new idx : Player)
	{
		if(!IsPlayerLogged(idx)) continue;
		if(GetPlayerVirtualWorld(idx) != virtual_world) continue;
		if(!IsPlayerInRangeOfPoint(idx, radius, x, y, z)) continue;

		SendClientMessage(idx, color, message);
	}
	return 1;
}

stock Action(playerid, message[], Float:radius=25.0, bool:bubble=true)
{
	if(bubble)
		SetPlayerChatBubble(playerid, message, 0xDD90FFFF, radius, 7000);

	new fmt_str[128];

	format(fmt_str, sizeof fmt_str, "%s %s", GetPlayerNameEx(playerid), message);
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, radius);

	return 1;
}

stock EnablePlayerGPS(playerid, markertype, Float: x, Float: y, Float: z, message[] = "Место отмечено у Вас на GPS")
{
	SetPlayerGPSInfo(playerid, G_POS_X, x);
	SetPlayerGPSInfo(playerid, G_POS_Y, y);
	SetPlayerGPSInfo(playerid, G_POS_Z, z);

	SetPlayerMapIcon(playerid, 98, x, y, z, markertype, 0, MAPICON_GLOBAL);
	SetPlayerCheckpoint(playerid, x, y, z, 3.0, CP_ACTION_TYPE_GPS);
	TextDrawShowForPlayer(playerid, gps_on_TD[0]);

	if(strlen(message))
		SendClientMessage(playerid, 0xFFFF00FF, message);

	SetPlayerGPSInfo(playerid, G_ENABLED, GPS_STATUS_ON);

	return 1;
}

stock DisablePlayerGPS(playerid)
{
	if(GetPlayerGPSInfo(playerid, G_ENABLED) == GPS_STATUS_ON)
	{
		RemovePlayerMapIcon(playerid, 98);
		TextDrawHideForPlayer(playerid, gps_on_TD[0]);

		SetPlayerGPSInfo(playerid, G_ENABLED, GPS_STATUS_OFF);
	}
	return 1;
}

stock IsPlayerInRangeOfPlayer(playerid, to_player, Float: distance)
{
	new Float: x, Float: y, Float: z;
	GetPlayerPos(to_player, x, y, z);

	return IsPlayerInRangeOfPoint(playerid, distance, x, y, z);
}

stock GetPlayerMaxStorage(playerid, storage)
{
	new amount;

	switch(storage)
	{
		case STORAGE_METALL: amount = 20;
		case STORAGE_AMMO: amount = 250;
		case STORAGE_DRUGS: amount = 500;
	}

	return GetPlayerData(playerid, P_IMPROVEMENTS) >= 3 ? amount * 2 : amount;
}

stock GetPlayerOwnableCars(playerid)
{
	new count,
		query[70],
		Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM ownable_cars WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	count = cache_num_rows();

	cache_delete(result);

	return count;
}

stock IsPlayerHasDonations(playerid)
{
	new query[256 + 1];
	new Cache: result;
	new rows;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM `unitpay_payments` WHERE account = '%s' AND status = 1", GetPlayerNameEx(playerid));
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	cache_delete(result);

	if(rows) return 1;

	return 0;
}

stock GetPlayerLastDonation(playerid)
{
	new query[100],
		Cache: result,
		count;

	mysql_format(mysql, query, sizeof query, "SELECT sum FROM `unitpay_payments` WHERE account = '%s' ORDER BY id DESC LIMIT 1", GetPlayerNameEx(playerid));
	result = mysql_query(mysql, query, true);

	if(cache_num_rows())
		count = cache_get_row_int(0, 0);

	cache_delete(result);

	return count;
}

stock GetPlayerDonationCurrency(playerid)
{
	new query[100],
		Cache: result,
		currency[64];

	mysql_format(mysql, query, sizeof query, "SELECT currency FROM `unitpay_payments` WHERE account = '%s' AND activated = 1 ORDER BY id DESC LIMIT 1", GetPlayerNameEx(playerid));
	result = mysql_query(mysql, query, true);

	if(cache_num_rows())
		cache_get_row(0, 0, currency);

	cache_delete(result);

	return currency;
}


stock ShowPlayerDonations(playerid, name)
{
	new query[256],
		fmt_text[1400],
		Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM `unitpay_payments` WHERE `account`='%s' AND `status`=0", name);
	result = mysql_query(mysql, query, true);

	if(!cache_num_rows())
	{
			format
			(
				fmt_text, sizeof fmt_text,
				"{FFFFFF}\
				Вы еще ни разу не пополняли свой аккаунт.\n\
				Это можно сделать на сайте {33cc66}"#SERVER_SITE" {FFFFFF}в разделе {6699cc}\"Донат\".\
				"
			);


			Dialog
			(
				playerid, DIALOG_DONATIONS, DIALOG_STYLE_MSGBOX,
				"{FFCC00}Последние пополнения",
				fmt_text,
				"Назад", ""
			);

			cache_delete(result);
			return 1;
	}

	format(fmt_text, sizeof(fmt_text), "Дата и время\t\t\tСумма\n{FFFFFF}");

	for(new i = 0; i < cache_num_rows(); i++)
	{
	    new tmp_text[128], tmp_date[16];

	    cache_get_field_content(i, "dateComplete", tmp_date);
	    format(tmp_text, sizeof tmp_text, "\n%s\t\t%d.00 руб.", tmp_date, cache_get_field_content_int(i, "sum"));

	    strcat(fmt_text, tmp_text);
	}

	Dialog
	(
	    playerid,
	    DIALOG_DONATIONS,
	    DIALOG_STYLE_MSGBOX,
	    "{FFCC00}20 последних операций пополнения",
	    fmt_text,
	    "Назад", ""
	);
	cache_delete(result);
	return 1;
}

stock ShowPlayerConvertDialog(playerid)
{
//    new current_money = GetPVarInt(playerid, "convert_money"),
    new donate_price = g_doubling[DOUBLING_DONATE] ? GetDonatePrice(DONATE_PRICE_MONEY) * 2 : GetDonatePrice(DONATE_PRICE_MONEY);

    new fmt_text[200];
    format
    (
        fmt_text,
        sizeof fmt_text,
        "{FFFFFF}\
        Ставка: {009900}%d$\n\
        {FFFFFF}Наличие: {009900}%d\n\
  		\n\
        {6666CC}Введите количество, которое\n\
        Вы хотите конвертировать в игровые деньги:\
        ",
        donate_price,
        GetPlayerCurrentDonate(playerid)
    );

    Dialog(playerid, DIALOG_DONATE_CONVERT, DIALOG_STYLE_INPUT, "{ffcc00}Обмен валют (конвертер)", fmt_text, "Далее", "Назад");
}

stock ApplyAnimationEx(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync, anim_type=USE_ANIM_TYPE_NONE)
{
	SetPlayerData(playerid, P_USE_ANIM_TYPE, anim_type);

	if(forcesync == 0)
		forcesync = 1;

	return ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);
}

stock ResetSkin(playerid)
{
	if(GetPlayerData(playerid, P_OSKIN) && 1 <= GetPlayerTeamEx(playerid) < MAX_ORG)
		SetPlayerSkin(playerid, GetPlayerData(playerid, P_OSKIN));
	else
		SetPlayerSkin(playerid, GetPlayerData(playerid, P_SKIN));
	return 1;
}

stock InvitePlayer(playerid, org_id, give_rang = 1, bool: save = false)
{
	if(!(1 <= give_rang <= 10))
		give_rang = 1;

	new query[128];

	if(1 <= org_id < MAX_ORG)
	{
		SetPlayerTeamEx(playerid, org_id);
		SetPlayerData(playerid, P_JOB, give_rang);
	}
	else
	{
		SetPlayerTeamEx(playerid, 0);
		SetPlayerData(playerid, P_JOB, 0);
		//SetPlayerData(playerid, P_JOB, 0);
	}

	SetPlayerColorEx(playerid, g_organization[org_id][O_COLOR]);

	if(save)
	{
		//SetPlayerData(playerid, P_JOB, 0);

		if(1 <= org_id < MAX_ORG)
		{
			if(!GetPlayerSex(playerid))
				SetPlayerData(playerid, P_OSKIN, g_organization[org_id][O_SKINS][give_rang - 1]);
			else
				SetPlayerData(playerid, P_OSKIN, g_organization[org_id][O_WOMEN_SKIN]);
		}
		else SetPlayerData(playerid, P_OSKIN, 0);

		format(query, sizeof query, "UPDATE accounts SET team=%d,org_skin=%d,job=%d WHERE id=%d",\
			GetPlayerTeamEx(playerid), GetPlayerData(playerid, P_OSKIN), GetPlayerData(playerid, P_JOB), GetPlayerAccountID(playerid));
		mysql_query(mysql, query, false);

		if(give_rang == 10)
		{
			format(g_organization[org_id][O_LEADER], 64, GetPlayerNameEx(playerid));
			mysql_format(mysql, query, sizeof(query), "INSERT INTO `leaders`(`accout_id`, `name`, `frac_id`) VALUES ('%d', '%s', '%d')", GetPlayerAccountID(playerid), GetPlayerNameEx(playerid), org_id);
			//mysql_query(mysql, query, false);
		}

		ResetSkin(playerid);
	}

	return 1;
}

stock UnInvite(playerid, to_player, reason[] = "")
{
	if(!(1 <= GetPlayerTeamEx(to_player) < MAX_ORG)) return 0;

	new fmt_msg[110];

	if(playerid != to_player)
	{
		format(fmt_msg, sizeof fmt_msg, "%s[%d] уволил Вас из организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerTeamName(to_player));
		SendClientMessage(to_player, 0xFF6600FF, fmt_msg);

		if(GetPlayerTeamEx(playerid) == GetPlayerTeamEx(to_player))
		{
			format(fmt_msg, sizeof fmt_msg, "Вы уволили %s[%d] из своей организации", GetPlayerNameEx(to_player), to_player);
			SendClientMessage(playerid, 0x3399FFFF, fmt_msg);
		}
		else
		{
			format(fmt_msg, sizeof fmt_msg, "Вы уволили %s[%d] из организации \"%s\"", GetPlayerNameEx(to_player), to_player, GetPlayerTeamName(to_player));
			SendClientMessage(playerid, 0x3399FFFF, fmt_msg);
		}

		if(GetPlayerTeamEx(to_player) == TEAM_GOVERNMENT && IsValidDynamic3DTextLabel(GetPlayerData(to_player, P_ADVISOR_LABEL)))
		{
			DestroyDynamic3DTextLabel(GetPlayerData(to_player, P_ADVISOR_LABEL));
			SetPlayerData(to_player, P_ADVISOR_LABEL, Text3D: -1);
		}

		format(fmt_msg, sizeof fmt_msg, "Уволил %s[acc:%d] из организации %s. Причина: %s",
		GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), GetPlayerTeamName(to_player), reason);

		SendLog(playerid, LOG_TYPE_FRACTION, fmt_msg);
	}
	else
	{
		format(fmt_msg, sizeof fmt_msg, "Покинул организацию %s по собственному желанию", GetPlayerTeamName(to_player));
		SendLog(to_player, LOG_TYPE_FRACTION, fmt_msg);
	}
	if(!strcmp(g_organization[GetPlayerData(playerid, P_TEAM)][O_LEADER], GetPlayerNameEx(to_player)))
	{
		mysql_format(mysql, sctring, sizeof(sctring), "DELETE FROM `leaders` WHERE account_id = %d", GetPlayerAccountID(to_player));
		mysql_query(mysql, sctring, false);
		g_organization[GetPlayerData(playerid, P_TEAM)][O_LEADER] = EOS;
	}


	InvitePlayer(to_player, 0, 0, true);

	return 1;
}

stock SendPlayerOffer(playerid, to_player, type, value_1 = 0, value_2 = 0)
{
	if(GetPlayerOfferInfo(playerid, O_OUTCOMIG_PLAYER) == INVALID_PLAYER_ID)
	{
		new fmt_str[144];
		switch(type)
		{
			case OFFER_TYPE_HANDSHAKE:
			{
				format(fmt_str, sizeof fmt_str, "Игрок %s предлагает пожать Вам руку", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}для согласия или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s пожать руку", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_SELL_FUEL_ST:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает Вам купить заправочную станцию №%d \"%s\" по цене %d руб", GetPlayerNameEx(playerid), value_1, GetFuelStationData(value_1, FS_NAME), value_2);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}чтобы заключить сделку или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s купить Вашу заправочную станцию \"%s\" за %d руб", GetPlayerNameEx(to_player), GetFuelStationData(value_1, FS_NAME), value_2);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_FILL_CAR:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает заправить Ваш транспорт на %d л за %d руб", GetPlayerNameEx(playerid), value_1, value_2);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}чтобы согласиться или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s заправку транспорта на %d л за %d руб", GetPlayerNameEx(to_player), value_1, value_2);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_REPAIR_CAR:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает починить Ваш транспорт за %d руб", GetPlayerNameEx(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}чтобы согласиться или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s сделать ремонт транспорта за %d руб", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_SELL_BUSINESS:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает Вам купить бизнес №%d \"%s\" по цене %d руб", GetPlayerNameEx(playerid), value_1, GetBusinessData(value_1, B_NAME), value_2);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}чтобы заключить сделку или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s купить Ваш бизнес \"%s\" за %d руб", GetPlayerNameEx(to_player), GetBusinessData(value_1, B_NAME), value_2);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_BUSINESS_MANAGER:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает Вам стать сотрудником его предприятия (%s)", GetPlayerNameEx(playerid), GetBusinessData(value_1, B_NAME));
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}чтобы согласиться или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "%s получил предложение стать вашим сотрудником", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_SELL_HOME:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает Вам купить дом №%d по цене %d руб", GetPlayerNameEx(playerid), value_1, value_2);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}чтобы заключить сделку или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s купить Ваш дом по цене %d руб", GetPlayerNameEx(to_player), value_2);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_HOME_RENT_ROOM:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает Вам поселиться в своем доме №%d", GetPlayerNameEx(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}чтобы согласиться или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s поселиться в своем доме №%d", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_SELL_OWNABLE_CAR:
			{
				new model_id = GetVehicleData(value_2, V_MODELID);

				format(fmt_str, sizeof fmt_str, "%s предлагает Вам купить транспорт {33FF66}\"%s\" {3399FF}по цене %d руб", GetPlayerNameEx(playerid), GetVehicleInfo(model_id-400, VI_NAME), value_1);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}чтобы купить его или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s купить Ваш транспорт \"%s\" за %d руб", GetPlayerNameEx(to_player), GetVehicleInfo(model_id-400, VI_NAME), value_1);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_INVITE:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает Вам вступить в организацию \"%s\"", GetPlayerNameEx(playerid), GetPlayerTeamName(playerid));

				if(IsTeamSubdivision(GetPlayerTeamEx(playerid)))
					format(fmt_str, sizeof fmt_str, "%s, подразделение \"%s\"", fmt_str, GetPlayerSubdivisionName(playerid));
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}чтобы принять предложение или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s вступить в организацию \"%s\"", GetPlayerNameEx(to_player), GetPlayerTeamName(playerid));
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_FINVITE:
            {
                format(fmt_str, sizeof fmt_str, "{FFFFFF}%s предлагает Вам вступить в семью \"%s\"", GetPlayerNameEx(playerid), GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_NAME));
                SendClientMessage(to_player, 0x1E90FFFF, fmt_str);

                SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}чтобы принять предложение или {FF6600}N {FFFFFF}для отказа");

                format(fmt_str, sizeof fmt_str, "Вы предложили игроку {d8284c}%s {1E90FF}вступить в семью \"%s\"", GetPlayerNameEx(to_player), GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_NAME));
                SendClientMessage(playerid, 0x1E90FFFF, fmt_str);
            }
			case OFFER_TYPE_MEDHELP:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает Вам пройти курс платного лечения за %d руб", GetPlayerNameEx(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}чтобы пройти экспресс-лечение или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s пройти у Вас курс платного лечения за %d руб", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_HEAL:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает Вам пройти курс лечения за %d руб", GetPlayerNameEx(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}чтобы согласиться или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s пройти у Вас курс лечения за %d руб", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_CHANGE_SEX:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает сделать Вам операцию по смене пола за %d руб", GetPlayerNameEx(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}чтобы согласиться или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s операцию по смене пола за %d руб", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_SHOW_SKILL:
			{
				format(fmt_str, sizeof fmt_str, "%s хочет показать Вам свои навыки владения оружием", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}для просмотра или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s посмотреть на Ваши навыки владения оружием", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_CASINO_DICE:
			{
				format(fmt_str, sizeof fmt_str, "%s хочет сыграть с Вами в кости. Ставка: %d руб.", GetPlayerNameEx(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}чтобы согласиться или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s сыграть в кости. Ставка: %d руб.", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_GETHERE:
			{
				format(fmt_str, sizeof fmt_str, "%s хочет телепортировать Вас к себе", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}чтобы принять телепорт или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы запросили у %s разрешение на телепорт его к Вам", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_GIVE_CAR_KEY:
			{
				format(fmt_str, sizeof fmt_str, "%s хочет дать Вам ключи от своего транспотра", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}чтобы взять их или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили игроку %s взять ключи от своего транспорта", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_GIVE_MIC:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает Вам подключиться к радио-эфиру", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}чтобы согласиться или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s подключиться к радио-эфиру", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_GIVE_LIC:
			{
				new lic_names[3][34] = {"вождение базового уровня", "вождение профессионального уровня", "оружие"};

				format(fmt_str, sizeof fmt_str, "%s предлагает Вам купить лицензию на %s за %d руб.",
				GetPlayerNameEx(playerid), lic_names[value_1 - 1], value_2);

				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}чтобы согласиться или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s купить у Вас лицензию на %s за %d руб.",
				GetPlayerNameEx(to_player), lic_names[value_1 - 1], value_2);

				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_JAIL_FREE:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает Вам пересмотреть Ваше дело за %d руб.", GetPlayerNameEx(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}чтобы согласиться или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s пересмотреть его дело за %d руб.", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			/*
			case PROPOSITION_TYPE_SELL_GOODS:
			{
				new marketid = player_use_market[playerid];

				format(fmt_str, sizeof fmt_str, "%s предлагает Вам купить %s по цене %d руб", GetPlayerNameEx(playerid), market[marketid][m_name], value_1);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}чтобы сделать покупку или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s купить %s по цене %d руб", GetPlayerNameEx(to_player), market[marketid][m_name], value_1);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			*/
			default: return 1;
		}

		SetPlayerOfferInfo(playerid, O_OUTCOMIG_PLAYER, to_player);

		SetPlayerOfferInfo(to_player, O_INCOMING_PLAYER, playerid);
		SetPlayerOfferInfo(to_player, O_INCOMING_TYPE, type);

		SetPlayerOfferValue(to_player, 0, value_1);
		SetPlayerOfferValue(to_player, 1, value_2);
	}
	else SendClientMessage(playerid, 0xFFFFFFFF, "Используйте {FF9900}/cancel {FFFFFF}чтобы отозвать предыдущее предложение");

	return 1;
}

// ------------------------------------------
CMD:yes(playerid, params[])
{
	new offer_id = GetPlayerOfferInfo(playerid, O_INCOMING_PLAYER);
	new offer_type = GetPlayerOfferInfo(playerid, O_INCOMING_TYPE);

	new value_1 = GetPlayerOfferInfo(playerid, O_INCOMING_VALUE)[0];
	new value_2 = GetPlayerOfferInfo(playerid, O_INCOMING_VALUE)[1];

	if(offer_id != INVALID_PLAYER_ID)
	{
		if(IsPlayerConnected(offer_id) && IsPlayerLogged(offer_id))
		{
			if(GetPlayerOfferInfo(offer_id, O_OUTCOMIG_PLAYER) == playerid)
			{
				ClearPlayerOffer(offer_id);
			}
			else offer_type = -1;

			new Float: x, Float: y, Float: z;
			new Float: dist;

			GetPlayerPos(offer_id, x, y, z);

			if(offer_type != OFFER_TYPE_GETHERE)
				dist = GetPlayerDistanceFromPoint(playerid, x, y, z);

			else dist = 5.0;

			if(dist <= 10.0)
			{
				new fmt_str[144];

				switch(offer_type)
				{
					case OFFER_TYPE_SHOW_SKILL:
					{
						ShowPlayerSkills(offer_id, playerid);
						Action(offer_id, "показал свои навыки владения оружием", _, false);
					}

					case OFFER_TYPE_INVITE:
					{
						new team_id = GetPlayerTeamEx(offer_id);
						if((1 <= team_id < MAX_ORG) || !(1 <= GetPlayerTeamEx(playerid) < MAX_ORG))
						{
							InvitePlayer(playerid, team_id, 1, true);

							new fmt_msg[120];
							format(fmt_msg, sizeof fmt_msg, "Поздравляем! Вы вступили в организацию \"%s\"", GetPlayerTeamName(offer_id));
							if(IsTeamSubdivision(team_id))
								format(fmt_msg, sizeof fmt_msg, "%s и подразделение \"%s\"", fmt_msg, GetPlayerSubdivisionName(offer_id));

							SendClientMessage(playerid, 0x66CC00FF, fmt_msg);
							SendClientMessage(playerid, 0x3399FFFF, "Используйте {FFCC00}/menu > Команды сервера{3399FF}, чтобы узнать о новых возможностях");

							format(fmt_msg, sizeof fmt_msg, "%s принял Ваше предложение вступить в организацию", GetPlayerNameEx(playerid), value_1);
							SendClientMessage(offer_id, 0x66CC00FF, fmt_msg);

							GameTextForPlayer(offer_id, "~b~~h~yes", 4000, 1);

							format(fmt_msg, sizeof fmt_msg, "Принял %s[acc:%d] в организацию %s", GetPlayerNameEx(playerid), GetPlayerAccountID(playerid), GetPlayerTeamName(offer_id));
							SendLog(offer_id, LOG_TYPE_FRACTION, fmt_msg);

							AddPlayerData(playerid, P_QUEST_EXP_8, +, 1);
							UpdatePlayerDatabaseInt(playerid, "quest_exp_8", GetPlayerData(playerid, P_QUEST_EXP_8));

							if(GetPlayerData(playerid, P_QUEST_EXP_8) == 1)
							{
							    SendClientMessage(playerid, COR_SERVER, "[Квесты]: "c_b"Вы успешно выполнили квест "c_i"'Привет, большие деньги'. "c_b"Награда: "c_m"10000000$");
							    GivePlayerMoneyEx(playerid, 10000000, "Выполнение квеста");

							    SetPlayerData(playerid, P_QUEST_8, 1);
							    UpdatePlayerDatabaseInt(playerid, "quest_8", 1);
							    
							    AddPlayerData(playerid, P_TOP_5, +, 1);
								UpdatePlayerDatabaseInt(playerid, "TOP_Quest", GetPlayerData(playerid, P_TOP_5));
							}
						}
						else SendClientMessage(playerid, 0xCECECEFF, "При вступлении в организацию произошла ошибка");
					}
                    case OFFER_TYPE_FINVITE:
                    {
                        new fam_id = GetPlayerData(offer_id, P_FAMILY);

                        FInvitePlayer(playerid, fam_id, 1, true);

                        new fmt_msg[120];
                        format(fmt_msg, sizeof fmt_msg, "Поздравляем! Вы вступили в семью \"%s\"", GetFamilyData(fam_id, F_NAME));

                        SendClientMessage(playerid, 0x32a44bFF, fmt_msg);
                        SendClientMessage(playerid, 0x1E90FFFF, "Используйте {d8284c}/fmenu > помощь по семье{1E90FF}, чтобы узнать о новых возможностях");

                        format(fmt_msg, sizeof fmt_msg, "%s принял Ваше предложение вступить в семью", GetPlayerNameEx(playerid), value_1);
                        SendClientMessage(offer_id, 0x32a44bFF, fmt_msg);

                        format(fmt_msg, sizeof fmt_msg, "Принял %s[acc:%d] в семью %s", GetPlayerNameEx(playerid), GetPlayerAccountID(playerid), GetPlayerTeamName(offer_id));
                        SendLog(offer_id, LOG_TYPE_FRACTION, fmt_msg);

                        AddPlayerData(playerid, P_QUEST_EXP_7, +, 1);
						UpdatePlayerDatabaseInt(playerid, "quest_exp_7", GetPlayerData(playerid, P_QUEST_EXP_7));

						if(GetPlayerData(playerid, P_QUEST_EXP_7) == 1)
						{
						    SendClientMessage(playerid, COR_SERVER, "[Квесты]: "c_b"Вы успешно выполнили квест "c_i"'Лучше вместе, чем одному'. "c_b"Награда: "c_m"10000000$");
						    GivePlayerMoneyEx(playerid, 10000000, "Выполнение квеста");

						    SetPlayerData(playerid, P_QUEST_7, 1);
						    UpdatePlayerDatabaseInt(playerid, "quest_7", 1);
						    
						    AddPlayerData(playerid, P_TOP_5, +, 1);
							UpdatePlayerDatabaseInt(playerid, "TOP_Quest", GetPlayerData(playerid, P_TOP_5));
						}

                    }
					case OFFER_TYPE_HANDSHAKE:
					{
						if(!(IsPlayerInAnyVehicle(playerid) && IsPlayerInAnyVehicle(offer_id)))
						{
							if(0.5 <= dist <= 1.5)
							{
								new Float: to_x, Float: to_y;
								new Float: angle;

								GetPlayerPos(playerid, to_x, to_y, z);
								angle = GetAngleToPoint(x, y, to_x, to_y);

								SetPlayerFacingAngle(playerid, angle);
								SetPlayerFacingAngle(offer_id, angle + 180.0);

								format(fmt_str, sizeof fmt_str, "пожал(а) руку %s", GetPlayerNameEx(offer_id));
								Action(playerid, fmt_str, _, false);

								ApplyAnimationEx(playerid, "GANGS", "hndshkfa", 4.1, 0, 1, 1, 0, 0, 1);
								ApplyAnimationEx(offer_id, "GANGS", "hndshkfa", 4.1, 0, 1, 1, 0, 0, 1);
							}
							else
							{
								valstr(fmt_str, offer_id);
								callcmd::hi(playerid, fmt_str);
							}
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Вы либо игрок не должны находиться в транспорте");
					}
					case OFFER_TYPE_SELL_FUEL_ST:
					{
						if(GetPlayerFuelStation(offer_id) == value_1 && GetPlayerFuelStation(playerid) == -1)
						{
							if(GetPlayerMoneyEx(playerid) >= value_2)
							{
								new Float: f_pos_x = GetFuelStationData(value_1, FS_POS_X);
								new Float: f_pos_y = GetFuelStationData(value_1, FS_POS_Y);
								new Float: f_pos_z = GetFuelStationData(value_1, FS_POS_Z);

								if(IsPlayerInRangeOfPoint(playerid, 10.0, f_pos_x, f_pos_y, f_pos_z) && IsPlayerInRangeOfPoint(offer_id, 10.0, f_pos_x, f_pos_y, f_pos_z))
								{
									format(fmt_str, sizeof fmt_str, "Вы продали свою АЗС игроку %s за %d руб", GetPlayerNameEx(playerid), value_2);
									SendClientMessage(offer_id, 0x66CC00FF, fmt_str);

									format(fmt_str, sizeof fmt_str, "%s продал Вам заправочную станцию \"%s\" за %d руб", GetPlayerNameEx(offer_id), GetFuelStationData(value_1, FS_NAME), value_2);
									SendClientMessage(playerid, 0x66CC00FF, fmt_str);

									SellFuelStation(offer_id, playerid, value_2);
									SendClientMessage(playerid, 0xFFCD00FF, "Проверьте количество оплаченных дней аренды, при необходимости оплатить ее можно в банке");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Вы и продавец должны находиться рядом с заправкой которую хотите купить");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для заключения сделки");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "При заключении сделки произошла ошибка");
					}
					case OFFER_TYPE_FILL_CAR:
					{
						new vehicleid = GetPlayerVehicleID(playerid);
						new offer_vehicleid = GetPlayerVehicleID(offer_id);

						if(IsPlayerDriver(playerid))
						{
							if(GetPlayerJob(offer_id) == JOB_MECHANIC && IsPlayerInJob(offer_id) && IsPlayerInVehicle(offer_id, GetPlayerJobCar(offer_id)))
							{
								if((GetVehicleData(vehicleid, V_FUEL) + float(value_1)) <= 150.0)
								{
									if(GetPlayerMoneyEx(playerid) >= value_2)
									{
										if(GetPlayerJobLoadItems(offer_id) >= value_1)
										{
											GivePlayerMoneyEx(playerid, -value_2, "Заправка транспорта от механика", true, true);

											SetVehicleData(vehicleid, V_FUEL, GetVehicleData(vehicleid, V_FUEL) + float(value_1));
											SetPlayerJobLoadItems(offer_id, GetPlayerJobLoadItems(offer_id) - value_1);

											AddPlayerData(offer_id, P_MECHANIC_FILL_PAY, +, value_2);

											format(fmt_str, sizeof fmt_str, "Автомеханик %s заправил Ваш транспорт на %d л", GetPlayerNameEx(offer_id), value_1);
											SendClientMessage(playerid, 0x66CC00FF, fmt_str);

											format(fmt_str, sizeof fmt_str, "Вы заправили транспорт %s на %d л", GetPlayerNameEx(playerid), value_1);
											SendClientMessage(offer_id, 0x66CC00FF, fmt_str);

											format(fmt_str, sizeof fmt_str, "~g~+%d rub", value_2);
											GameTextForPlayer(offer_id, fmt_str, 4000, 1);

											format(fmt_str, sizeof fmt_str, "%s{FFFFFF}Автомеханик\n{999999}Топливо: %d л", GetPlayerData(offer_id, P_JOB_SERVICE_NAME), GetPlayerJobLoadItems(offer_id));
											UpdateVehicleLabel(offer_vehicleid, 0xCC9900FF, fmt_str);
										}
										else SendClientMessage(playerid, 0xCECECEFF, "При заправке произошла ошибка");
									}
									else SendClientMessage(playerid, 0x999999FF, "У Вас недостаточно денег чтобы заплатить автомеханику");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "В бензобак этого транспорта столько не поместится");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Автомеханик должен находиться в рабочем транспорте");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в транспорте за рулем");
					}
					case OFFER_TYPE_REPAIR_CAR:
					{
						new vehicleid = GetPlayerVehicleID(playerid);

						if(IsPlayerDriver(playerid))
						{
							if(GetPlayerJob(offer_id) == JOB_MECHANIC && IsPlayerInJob(offer_id) && IsPlayerInVehicle(offer_id, GetPlayerJobCar(offer_id)))
							{
								if(GetPlayerMoneyEx(playerid) >= value_1)
								{
									GivePlayerMoneyEx(playerid, -value_1, "Починка транспорта от механика", true, true);
									AddPlayerData(offer_id, P_MECHANIC_REPAIR_PAY, +, value_1);

									RepairVehicle(vehicleid);
									if(IsAOwnableCar(vehicleid)) SetVehicleData(vehicleid, V_HEALTH, 1000.0);

									SetPlayerChatBubble(playerid, "Repair", 0x3399FFFF, 10.0, 2000);
									SetPlayerChatBubble(offer_id, "Repair", 0x3399FFFF, 10.0, 2000);

									format(fmt_str, sizeof fmt_str, "Автомеханик %s починил Ваш транспорт за %d руб", GetPlayerNameEx(offer_id), value_1);
									SendClientMessage(playerid, 0x66CC00FF, fmt_str);

									format(fmt_str, sizeof fmt_str, "Вы починили транспорт %s за %d руб", GetPlayerNameEx(playerid), value_1);
									SendClientMessage(offer_id, 0x66CC00FF, fmt_str);

									format(fmt_str, sizeof fmt_str, "~g~+%d rub", value_1);
									GameTextForPlayer(offer_id, fmt_str, 4000, 1);
								}
								else SendClientMessage(playerid, 0x999999FF, "У Вас недостаточно денег чтобы заплатить автомеханику");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Автомеханик должен находиться в рабочем транспорте");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в транспорте за рулем");
					}
					case OFFER_TYPE_SELL_BUSINESS:
					{
						if(GetPlayerBusiness(offer_id) == value_1 && GetPlayerBusiness(playerid) == -1)
						{
							if(GetPlayerMoneyEx(playerid) >= value_2)
							{
								new Float: b_pos_x = GetBusinessData(value_1, B_POS_X);
								new Float: b_pos_y = GetBusinessData(value_1, B_POS_Y);
								new Float: b_pos_z = GetBusinessData(value_1, B_POS_Z);

								if(IsPlayerInRangeOfPoint(playerid, 7.0, b_pos_x, b_pos_y, b_pos_z) && IsPlayerInRangeOfPoint(offer_id, 7.0, b_pos_x, b_pos_y, b_pos_z))
								{
									format(fmt_str, sizeof fmt_str, "Вы продали свой бизнес игроку %s за %d руб", GetPlayerNameEx(playerid), value_2);
									SendClientMessage(offer_id, 0x66CC00FF, fmt_str);

									format(fmt_str, sizeof fmt_str, "%s продал Вам бизнес \"%s\" за %d руб", GetPlayerNameEx(offer_id), GetBusinessData(value_1, B_NAME), value_2);
									SendClientMessage(playerid, 0x66CC00FF, fmt_str);

									SellBusiness(offer_id, playerid, value_2);
									SendClientMessage(playerid, 0xFFCD00FF, "Проверьте количество оплаченных дней аренды, при необходимости оплатить ее можно в банке");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Вы и продавец должны находиться рядом с бизнесом который хотите купить");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для заключения сделки");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "При заключении сделки произошла ошибка");
					}
					case OFFER_TYPE_BUSINESS_MANAGER:
					{
						if(GetPlayerBusiness(offer_id) == value_1)
						{
							SetPVarInt(playerid, "biz_worker", value_1 + 1);

							format(fmt_str, sizeof fmt_str, "Вы приняли предложение от %s", GetPlayerNameEx(offer_id));
							SendClientMessage(playerid, 0x66CC00FF, fmt_str);

							format(fmt_str, sizeof fmt_str, "%s принял Ваше предложение", GetPlayerNameEx(playerid));
							SendClientMessage(offer_id, 0x66CC00FF, fmt_str);
						}
					}
					case OFFER_TYPE_SELL_HOME:
					{
						if(GetPlayerHouse(offer_id, HOUSE_TYPE_HOME) == value_1 && GetPlayerHouse(playerid) == -1)
						{
							if(GetPlayerMoneyEx(playerid) >= value_2)
							{
								if(IsPlayerInRangeOfHouse(playerid, value_1, 10.0) && IsPlayerInRangeOfHouse(offer_id, value_1, 10.0))
								{
									format(fmt_str, sizeof fmt_str, "Вы продали свой дом игроку %s за %d руб", GetPlayerNameEx(playerid), value_2);
									SendClientMessage(offer_id, 0x66CC00FF, fmt_str);

									format(fmt_str, sizeof fmt_str, "%s продал Вам cвой дом за %d руб", GetPlayerNameEx(offer_id), value_2);
									SendClientMessage(playerid, 0x66CC00FF, fmt_str);

									SellHouse(offer_id, playerid, value_2);
									SendClientMessage(playerid, 0xFFCD00FF, "Настоятельно рекомендуем проверить квартплату, при необходимости заплатить за дом в банке");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Вы и продавец должны находиться рядом с домом который хотите купить");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для заключения сделки");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "При заключении сделки произошла ошибка");
					}
					case OFFER_TYPE_HOME_RENT_ROOM:
					{
						if(GetPlayerHouse(offer_id, HOUSE_TYPE_HOME) == value_1 && GetPlayerHouse(playerid) == -1)
						{
							if(IsPlayerInRangeOfHouse(playerid, value_1, 10.0) && IsPlayerInRangeOfHouse(offer_id, value_1, 10.0))
							{
								new free_room = GetHouseFreeRoom(value_1);
								if(free_room != -1)
								{
									AddHouseRenter(value_1, free_room, playerid);

									format(fmt_str, sizeof fmt_str, "Вы поселили %s в своем доме", GetPlayerNameEx(playerid));
									SendClientMessage(offer_id, 0x66CC00FF, fmt_str);

									format(fmt_str, sizeof fmt_str, "%s поселил Вас в своем доме", GetPlayerNameEx(offer_id));
									SendClientMessage(playerid, 0x66CC00FF, fmt_str);

									GameTextForPlayer(offer_id, "~b~~h~Welcome", 4000, 1);
								}
								else SendClientMessage(playerid, 0x999999FF, "Все комнаты этого дома уже заняты");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Вы и арендодатель должны находиться рядом с домом в котором хотите снять комнату");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Произошла ошибка");
					}
					case OFFER_TYPE_SELL_OWNABLE_CAR:
					{
						if(GetPlayerOwnableCar(offer_id) == value_2 && GetPlayerOwnableCar(playerid) == INVALID_VEHICLE_ID)
						{
							new  Float: car_x, Float: car_y, Float: car_z;
							GetVehiclePos(value_2, car_x, car_y, car_z);

							if(IsPlayerInRangeOfPoint(playerid, 15.0, car_x, car_y, car_z) && IsPlayerInRangeOfPoint(offer_id, 15.0, car_x, car_y, car_z))
							{
								if(GetPlayerMoneyEx(playerid) >= value_1)
								{
									new index = GetVehicleData(value_2, V_ACTION_ID);

									format(fmt_str, sizeof fmt_str, "UPDATE accounts a, ownable_cars oc SET a.money=%d, oc.owner_id=%d WHERE a.id=%d AND oc.id=%d", GetPlayerMoneyEx(playerid)-value_1, GetPlayerAccountID(playerid), GetPlayerAccountID(playerid), GetOwnableCarData(index, OC_SQL_ID));
									mysql_query(mysql, fmt_str, false);

									if(!mysql_errno())
									{
										GivePlayerMoneyEx(playerid, -value_1, "Продажа авто с рук", false, true);

										GivePlayerMoneyEx(offer_id, value_1, "Продажа авто с рук", true, true);
										SetPlayerData(offer_id, P_OWNABLE_CAR, INVALID_VEHICLE_ID);

										SetOwnableCarData(index, OC_OWNER_ID, GetPlayerAccountID(playerid));
										SetPlayerData(playerid, P_OWNABLE_CAR, value_2);

										format(fmt_str, sizeof fmt_str, "%s продал Вам свой транспорт за %d руб", GetPlayerNameEx(offer_id), value_1);
										SendClientMessage(playerid, 0x66CC00FF, fmt_str);

										SendClientMessage(playerid, 0x66CC00FF, "Напишите {0099FF}/car {66CC00}чтобы узнать о возможностях");
										SendClientMessage(playerid, 0xFFFFFFFF, "Вам были переданы ключи от транспорта. Используйте {BBBB00}/lock 1");

										format(fmt_str, sizeof fmt_str, "Вы продали свой транспорт игроку %s за %d руб", GetPlayerNameEx(playerid), value_1);
										SendClientMessage(offer_id, 0x66CC00FF, fmt_str);
									}
									else SendClientMessage(playerid, 0xFF6600FF, "Произошла ошибка в базе данных");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для покупки");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Вы и продавец должны находиться рядом с транспортом который хотите купить");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Произошла ошибка");
					}

					case OFFER_TYPE_MEDHELP:
					{
						if(GetPlayerTeamEx(offer_id) == TEAM_HOSPITAL)
						{
							if(IsPlayerInRangeOfPoint(playerid, 70.0, 1131.1603, -8.5709, 1011.1254))
							{
								if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1)
								{
									if(GetPlayerMoneyEx(playerid) >= value_1)
									{
										GivePlayerMoneyEx(playerid, -value_1, "Курс лечения (купил)", true, true);
										GivePlayerMoneyEx(offer_id, value_1, "Курс лечения (провел)", true, true);

										SetPlayerHealthEx(playerid, 100.0);

										new fmt_msg[128];
										format(fmt_msg, sizeof fmt_msg, "Медицинский работник %s провел курс платного лечения", GetPlayerNameEx(offer_id));
										SendClientMessage(playerid, 0x66CC00FF, fmt_msg);

										format(fmt_msg, sizeof fmt_msg, "Вы провели курс платного лечения у пациента %s", GetPlayerNameEx(playerid));
										SendClientMessage(offer_id, 0x66CC00FF, fmt_msg);

										format(fmt_msg, sizeof fmt_msg, "[MED] Медицинский работник %s[%d] провел курс платного лечения у %s[%d] за %d руб.", GetPlayerNameEx(offer_id), offer_id, GetPlayerNameEx(playerid), playerid, value_1);
										SendMessageToTeam(TEAM_HOSPITAL, fmt_msg, 0x99CC99FF, offer_id);

										ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
										SetPlayerData(playerid, P_HOSPITAL, false);
										
										AddPlayerData(offer_id, P_PROGRESS_EXP_1, +, 1);
										UpdatePlayerDatabaseInt(offer_id, "ProgressExp1", GetPlayerData(offer_id, P_PROGRESS_EXP_1));

										if(GetPlayerData(offer_id, P_PROGRESS_EXP_1) == 1000)
										{
										    SendClientMessage(offer_id, COR_QUEST, "[Достижения]: "c_b"Вы успешно выполнили достижение "c_i"'Больница'. "c_b"Награда: "c_s"100 DONATE-RUB");
										    GivePlayerDonate(offer_id, 100, "Выполнение достижения / фракция");

										    SetPlayerData(offer_id, P_PROGRESS_1, 1);
										    UpdatePlayerDatabaseInt(offer_id, "Progress1", 1);
										    
										    AddPlayerData(offer_id, P_TOP_4, +, 1);
											UpdatePlayerDatabaseInt(offer_id, "TOP_Progress", GetPlayerData(offer_id, P_TOP_4));
										}
										
										AddPlayerData(offer_id, P_F_QUEST_EXP_5, +, 1);
										UpdatePlayerDatabaseInt(offer_id, "FracQuestExp5", GetPlayerData(offer_id, P_F_QUEST_EXP_5));

										if(GetPlayerData(offer_id, P_F_QUEST_EXP_5) == 100)
										{
										    SendClientMessage(offer_id, COR_QUEST, "[Квесты]: "c_b"Вы успешно выполнили квест "c_i"'Люди должный жить'. "c_b"Награда: "c_s"1 CASE(/opencase)");

									        AddPlayerData(offer_id, P_DONATE_CASE, +, 1);
											UpdatePlayerDatabaseInt(offer_id, "case", GetPlayerData(offer_id, P_DONATE_CASE));

										    SetPlayerData(offer_id, P_F_QUEST_5, 1);
										    UpdatePlayerDatabaseInt(offer_id, "FracQuest5", 1);
										    
										    AddPlayerData(offer_id, P_TOP_5, +, 1);
											UpdatePlayerDatabaseInt(offer_id, "TOP_Quest", GetPlayerData(offer_id, P_TOP_5));
										}
									
									}
									else SendClientMessage(playerid, 0x999999FF, "У Вас недостаточно денег, чтобы оплатить лечение");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться на стационарном лечении");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в больнице");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Произошла ошибка");
					}
					case OFFER_TYPE_HEAL:
					{
						new vehicleid = GetPlayerVehicleID(offer_id);

						if(GetPlayerTeamEx(offer_id) == TEAM_HOSPITAL)
						{
							if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_MED_CAR && GetPlayerVehicleID(playerid) == vehicleid)
							{
								if(GetPlayerMoneyEx(playerid) >= value_1)
								{
									GivePlayerMoneyEx(playerid, -value_1, "Курс лечения (купил) [veh]", true, true);
									GivePlayerMoneyEx(offer_id, value_1, "Курс лечения (провел) [veh]", true, true);

									SetPlayerHealthEx(playerid, 100.0);

									new fmt_msg[50];
									format(fmt_msg, sizeof fmt_msg, "Вы вылечились у медицинского работника %s", GetPlayerNameEx(offer_id));
									SendClientMessage(playerid, 0x66CC00FF, fmt_msg);

									format(fmt_msg, sizeof fmt_msg, "Вы вылечили пациента %s", GetPlayerNameEx(playerid));
									SendClientMessage(offer_id, 0x66CC00FF, fmt_msg);
									
									AddPlayerData(offer_id, P_PROGRESS_EXP_1, +, 1);
									UpdatePlayerDatabaseInt(offer_id, "ProgressExp1", GetPlayerData(offer_id, P_PROGRESS_EXP_1));

									if(GetPlayerData(offer_id, P_PROGRESS_EXP_1) == 1000)
									{
									    SendClientMessage(offer_id, COR_QUEST, "[Достижения]: "c_b"Вы успешно выполнили достижение "c_i"'Больница'. "c_b"Награда: "c_s"100 DONATE-RUB");
									    GivePlayerDonate(offer_id, 100, "Выполнение достижения / фракция");

									    SetPlayerData(offer_id, P_PROGRESS_1, 1);
									    UpdatePlayerDatabaseInt(offer_id, "Progress1", 1);
									    
									    AddPlayerData(offer_id, P_TOP_4, +, 1);
										UpdatePlayerDatabaseInt(offer_id, "TOP_Progress", GetPlayerData(offer_id, P_TOP_4));
									}
									
									AddPlayerData(offer_id, P_F_QUEST_EXP_5, +, 1);
									UpdatePlayerDatabaseInt(offer_id, "FracQuestExp5", GetPlayerData(offer_id, P_F_QUEST_EXP_5));

									if(GetPlayerData(offer_id, P_F_QUEST_EXP_5) == 100)
									{
									    SendClientMessage(offer_id, COR_QUEST, "[Квесты]: "c_b"Вы успешно выполнили квест "c_i"'Люди должный жить'. "c_b"Награда: "c_s"1 CASE(/opencase)");

								        AddPlayerData(offer_id, P_DONATE_CASE, +, 1);
										UpdatePlayerDatabaseInt(offer_id, "case", GetPlayerData(offer_id, P_DONATE_CASE));

									    SetPlayerData(offer_id, P_F_QUEST_5, 1);
									    UpdatePlayerDatabaseInt(offer_id, "FracQuest5", 1);
									    
									    AddPlayerData(offer_id, P_TOP_5, +, 1);
										UpdatePlayerDatabaseInt(offer_id, "TOP_Quest", GetPlayerData(offer_id, P_TOP_5));
									}
								}
								else SendClientMessage(playerid, 0x999999FF, "У Вас недостаточно денег, чтобы оплатить лечение");
							}
							else SendClientMessage(playerid, 0x999999FF, "Вы или медицинский работник находитесь не в машине скорой помощи");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Произошла ошибка");
					}
					case OFFER_TYPE_CHANGE_SEX:
					{
						if(GetPlayerTeamEx(offer_id) == TEAM_HOSPITAL)
						{
							if(IsPlayerInRangeOfPoint(playerid, 70.0, 1131.1603, -8.5709, 1011.1254))
							{
								if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1)
								{
									if(GetPlayerMoneyEx(playerid) >= value_1)
									{
										GivePlayerMoneyEx(playerid, -value_1, "Смена пола (купил)", true, true);
										GivePlayerMoneyEx(offer_id, value_1, "Смена пола (провел)", true, true);

										SetPlayerData(playerid, P_SEX, GetPlayerData(playerid, P_SEX) ^ 1);

										new fmt_msg[70];
										format(fmt_msg, sizeof fmt_msg, "Медработник %s сделал Вам операцию по смене пола", GetPlayerNameEx(offer_id));
										SendClientMessage(playerid, 0x66CC00FF, fmt_msg);

										format(fmt_msg, sizeof fmt_msg, "Операция у пациента %s была проведена успешно", GetPlayerNameEx(playerid));
										SendClientMessage(offer_id, 0x66CC00FF, fmt_msg);
									}
									else SendClientMessage(playerid, 0x999999FF, "У Вас недостаточно денег чтобы оплатить операцию");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться на стационарном лечении");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в больнице");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Произошла ошибка");
					}
					case OFFER_TYPE_CASINO_DICE:
					{
						new biz_id = GetPlayerInBiz(offer_id);

						if(biz_id != -1)
						{
							if(GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_CASINO)
							{
								new player_dice = random(6) + 1,
									offer_dice = random(6) + 1,
									winner,
									fmt_text[90];

								if(player_dice > offer_dice)
									winner = playerid;
								else if(player_dice < offer_dice)
									winner = offer_id;
								else
									winner = -1;

								format(fmt_text, sizeof fmt_text, "и %s бросили кости. Результат: {FFCD00}%d:%d",
								GetPlayerNameEx(offer_id), player_dice, offer_dice);

								Action(playerid, fmt_text, _, false);

								if(winner == -1)
								{
									SetPlayerChatBubble(playerid, "Ничья!", 0xFFCD00FF, 20.0, 2000);
									SetPlayerChatBubble(offer_id, "Ничья!", 0xFFCD00FF, 20.0, 2000);

									SendClientMessage(playerid, 0xFFCD00FF, "Выпало равное количество, Вы сыграли вничью");
									SendClientMessage(offer_id, 0xFFCD00FF, "Выпало равное количество, Вы сыграли вничью");
								}
								else
								{
									new loser = playerid == winner ? offer_id : playerid,
										winner_dice = playerid == winner ? player_dice : offer_dice,
										loser_dice = playerid == winner ? offer_dice : player_dice;

									new percent = value_1 / 100,
										cash = value_1,
										take_prods = random(5) + 6;

									new query[255];

									if(GetBusinessData(biz_id, B_PRODS) >= take_prods)
									{
										cash -= percent;

										AddBusinessData(biz_id, B_PRODS, -, take_prods);
										AddBusinessData(biz_id, B_BALANCE, +, percent);

										format(query, sizeof query, "UPDATE business SET products=%d, balance=%d WHERE id=%d", GetBusinessData(biz_id, B_PRODS), GetBusinessData(biz_id, B_BALANCE), GetBusinessData(biz_id, B_SQL_ID));
										mysql_query(mysql, query, false);

										mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(biz_id, B_SQL_ID), GetPlayerAccountID(winner), GetPlayerIpEx(winner), gettime(), percent, IsBusinessOwned(biz_id));
										mysql_query(mysql, query, false);
									}

									SendClientMessage(winner, 0x66CC33FF, "Поздравляем, Вы выиграли!");
									GivePlayerMoneyEx(winner, cash, "Игра в кости (выиграл)", true, true);

									SendClientMessage(loser, 0xFF5533FF, "К сожалению, Вы проиграли");
									GivePlayerMoneyEx(loser, -value_1, "Игра в кости (проиграл)", true, true);

									format(fmt_text, sizeof fmt_text, "Выпало: %d", winner_dice);
									SetPlayerChatBubble(winner, fmt_text, 0x66CC33FF, 20.0, 2000);

									format(fmt_text, sizeof fmt_text, "Выпало: %d", loser_dice);
									SetPlayerChatBubble(loser, fmt_text, 0xFF5533FF, 20.0, 2000);
								}
							}
							else SendClientMessage(playerid, 0x999999FF, "Произошла ошибка. Вы не в казино");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Произошла ошибка");
					}
					case OFFER_TYPE_GETHERE:
					{
						new Float: player_x,
							Float: player_y,
							Float: player_z;

						GetPlayerPos(offer_id, player_x, player_y, player_z);
						SetPlayerPosEx(playerid, player_x + 1, player_y + 1, player_z, 0.0, GetPlayerInterior(offer_id), GetPlayerVirtualWorld(offer_id), false);

						new fmt_msg[105];
						format(fmt_msg, sizeof fmt_msg, "Администратор %s телепортивал Вас к себе", GetPlayerNameEx(offer_id));
						SendClientMessage(playerid, -1, fmt_msg);

						format(fmt_msg, sizeof fmt_msg, "Вы телепортировали %s к себе", GetPlayerNameEx(playerid));
						SendClientMessage(offer_id, -1, fmt_msg);

						format(fmt_msg, sizeof fmt_msg, "[A] Администратор %s[%d] телепортировал к себе %s[%d]", GetPlayerNameEx(offer_id), offer_id, GetPlayerNameEx(playerid), playerid);
						SendMessageToAdmins(fmt_msg, 0x999999FF);
					}
					case OFFER_TYPE_GIVE_CAR_KEY:
					{
						new vehicleid = GetPlayerOwnableCar(offer_id);

						if(vehicleid != INVALID_VEHICLE_ID)
						{
							new fmt_text[80];

							format(fmt_text, sizeof fmt_text, "%s выдал Вам ключи от своего транспорта", GetPlayerNameEx(offer_id));
							SendClientMessage(playerid, 0x66CC00FF, fmt_text);

							SendClientMessage(playerid, -1, "Вам были переданы ключи от транспорта. Используйте {BBBB00}/lock 4");
							SendClientMessage(playerid, 0xCECECEFF, "После выхода из игры или выгрузки ТС с сервера они пропадут");

							format(fmt_text, sizeof fmt_text, "Вы дали игроку %s ключи от своего транспорта", GetPlayerNameEx(playerid));
							SendClientMessage(offer_id, 0x66CC00FF, fmt_text);

							SetPlayerData(playerid, P_ALLOWED_CAR, vehicleid);
						}
						else
						{
							if(GetPlayerOwnableCars(offer_id) == 0)
								SendClientMessage(playerid, 0x999999FF, "У игрока нет личного транспорта");
							else
								SendClientMessage(playerid, 0x999999FF, "Личный транспорт игрока не загружен на сервер");
						}
					}
					case OFFER_TYPE_GIVE_MIC:
					{
						SetPVarInt(playerid, "radio_mic", 1);

						new fmt_text[128];

						format(fmt_text, sizeof fmt_text, "%s дал Вам доступ к радио-эфиру", GetPlayerNameEx(offer_id));
						SendClientMessage(playerid, 0x66CC33FF, fmt_text);

						SendClientMessage(playerid, -1, "Вам был дан микрофон. Вы имеете доступ к радио-эфиру. Используйте: {BBBB00}/u");

						format(fmt_text, sizeof fmt_text, "Вы дали игроку %s доступ к радио-эфиру", GetPlayerNameEx(playerid));
						SendClientMessage(offer_id, 0x66CC33FF, fmt_text);

						format(fmt_text, sizeof fmt_text, "[СМИ] %s %s[%d] подключил %s[%d] к радио-эфиру",
						GetPlayerJobAndRankName(offer_id), GetPlayerNameEx(offer_id), offer_id, GetPlayerNameEx(playerid), playerid);

						SendMessageToTeam(GetPlayerTeamEx(offer_id), fmt_text, 0x99CC99FF, offer_id);
					}
					case OFFER_TYPE_GIVE_LIC:
					{
						new lic_names[3][34] = {"вождение базового уровня", "вождение профессионального уровня", "оружие"};

						new fmt_text[85];

						switch(value_1)
						{
							case 1..2:
							{
								AddPlayerData(playerid, P_DRIVING_LIC, +, 1);
								UpdatePlayerDatabaseInt(playerid, "driving_lic", GetPlayerData(playerid, P_DRIVING_LIC));
							}
							case 3:
							{
								SetPlayerData(playerid, P_WEAPON_LIC, 1);
								UpdatePlayerDatabaseInt(playerid, "weapon_lic", 1);
							}
						}

						format(fmt_text, sizeof fmt_text, "%s продал Вам лицензию на %s за %d рублей",
						GetPlayerNameEx(offer_id), lic_names[value_1 - 1], value_2);

						SendClientMessage(playerid, 0x3399FFFF, fmt_text);

						format(fmt_text, sizeof fmt_text, "Вы продали %s лицензию на %s за %d рублей",
						GetPlayerNameEx(playerid), lic_names[value_1 - 1], value_2);

						SendClientMessage(offer_id, 0x3399FFFF, fmt_text);
						SendClientMessage(offer_id, 0x3399FFFF, "К Вашей зарплате добавлено 10% от стоимости лицензии");

						new wage = value_2 / 10;

						format(fmt_text, sizeof fmt_text, "Покупка лицензии на %s у %s", lic_names[value_1 - 1], GetPlayerNameEx(offer_id));

						GivePlayerMoneyEx(playerid, -value_2, fmt_text, true, true);

						AddPlayerData(offer_id, P_WAGE, +, wage);
						UpdatePlayerDatabaseInt(offer_id, "wage", GetPlayerData(offer_id, P_WAGE));

						format(fmt_text, sizeof fmt_text, "~b~~h~+%d rub", wage);
						GameTextForPlayer(offer_id, fmt_text, 4000, 1);
					}
					case OFFER_TYPE_JAIL_FREE:
					{
						new fmt_text[80];

						format(fmt_text, sizeof fmt_text, "%s помог пересмотреть Ваше дело. Вы выпущены на свободу", GetPlayerNameEx(offer_id));
						SendClientMessage(playerid, 0x66CC33FF, fmt_text);

						format(fmt_text, sizeof fmt_text, "Вы пересмотрели дело %s. Игрок выпущен на свободу", GetPlayerNameEx(playerid));
						SendClientMessage(offer_id, 0x3399FFFF, fmt_text);

						format(fmt_text, sizeof fmt_text, "Стоимость услуги: %d руб. 10% этой суммы добавлено к Вашей зарплате", value_1);
						SendClientMessage(offer_id, 0x3399FFFF, fmt_text);

						GivePlayerMoneyEx(playerid, -value_1, "Оплата адвоката", true, true);

						UnjailPlayer(playerid);

						new wage = value_1 / 10;

						AddPlayerData(offer_id, P_WAGE, +, wage);
						UpdatePlayerDatabaseInt(offer_id, "wage", GetPlayerData(offer_id, P_WAGE));

						format(fmt_text, sizeof fmt_text, "~b~~h~+%d rub", wage);
						GameTextForPlayer(offer_id, fmt_text, 4000, 1);
						
						AddPlayerData(offer_id, P_PROGRESS_EXP_6, +, 1);
						UpdatePlayerDatabaseInt(offer_id, "ProgressExp6", GetPlayerData(offer_id, P_PROGRESS_EXP_6));

						if(GetPlayerData(offer_id, P_PROGRESS_EXP_6) == 500)
						{
						    SendClientMessage(offer_id, COR_QUEST, "[Достижения]: "c_b"Вы успешно выполнили достижение "c_i"'Мэрия'. "c_b"Награда: "c_s"100 DONATE-RUB");
						    GivePlayerDonate(offer_id, 100, "Выполнение достижения / фракция");

						    SetPlayerData(offer_id, P_PROGRESS_6, 1);
						    UpdatePlayerDatabaseInt(offer_id, "Progress6", 1);
						    
						    AddPlayerData(offer_id, P_TOP_4, +, 1);
							UpdatePlayerDatabaseInt(offer_id, "TOP_Progress", GetPlayerData(offer_id, P_TOP_4));
						}
						
						AddPlayerData(offer_id, P_F_QUEST_EXP_1, +, 1);
						UpdatePlayerDatabaseInt(offer_id, "FracQuestExp1", GetPlayerData(offer_id, P_F_QUEST_EXP_1));

						if(GetPlayerData(offer_id, P_F_QUEST_EXP_1) == 40)
						{
						    SendClientMessage(offer_id, COR_QUEST, "[Квесты]: "c_b"Вы успешно выполнили квест "c_i"'Невиновные люди должный быть на свободе'. "c_b"Награда: "c_s"1 CASE(/opencase)");
						    
                            AddPlayerData(offer_id, P_DONATE_CASE, +, 1);
							UpdatePlayerDatabaseInt(offer_id, "case", GetPlayerData(offer_id, P_DONATE_CASE));
	
						    SetPlayerData(offer_id, P_F_QUEST_1, 1);
						    UpdatePlayerDatabaseInt(offer_id, "FracQuest1", 1);
						    
						    AddPlayerData(offer_id, P_TOP_5, +, 1);
							UpdatePlayerDatabaseInt(offer_id, "TOP_Quest", GetPlayerData(offer_id, P_TOP_5));
						}
						
						
					}

					default:
						SendClientMessage(playerid, 0x999999FF, "В данный момент Вам ничего не предлагают");
				}
			}
			else SendClientMessage(playerid, 0x999999FF, "Игрок слишком далеко");
		}
		else SendClientMessage(playerid, 0x999999FF, "Игрок вышел из игры");

		ClearPlayerOffer(playerid);
	}
	else SendClientMessage(playerid, 0x999999FF, "В данный момент Вам ничего не предлагают");

	return 1;
}

CMD:no(playerid, params[])
{
	new offer_id = GetPlayerOfferInfo(playerid, O_INCOMING_PLAYER);

	if(offer_id != INVALID_PLAYER_ID)
	{
		if(GetPlayerOfferInfo(offer_id, O_OUTCOMIG_PLAYER) == playerid)
		{
			ClearPlayerOffer(offer_id);

			new fmt_str[64];
			format(fmt_str, sizeof fmt_str, "%s отказался от Вашего предложения", GetPlayerNameEx(playerid));
			SendClientMessage(offer_id, 0xFF6600FF, fmt_str);

			format(fmt_str, sizeof fmt_str, "Вы отказались от предложения игрока %s", GetPlayerNameEx(offer_id));
			SendClientMessage(playerid, 0xFF6600FF, fmt_str);

			GameTextForPlayer(offer_id, "~r~no", 4000, 1);
		}
		else SendClientMessage(playerid, 0xFF6600FF, "Вы отказались от предложения игрока");
	}
	else SendClientMessage(playerid, 0x999999FF, "В данный момент Вам ничего не предлагают");

	ClearPlayerOffer(playerid);
	return 1;
}

CMD:cancel(playerid, params[])
{
	new offer_id = GetPlayerOfferInfo(playerid, O_OUTCOMIG_PLAYER);

	if(offer_id != INVALID_PLAYER_ID)
	{
		if(GetPlayerOfferInfo(offer_id, O_INCOMING_PLAYER) == playerid)
		{
			ClearPlayerOffer(offer_id);

			new fmt_str[64];
			format(fmt_str, sizeof fmt_str, "%s отозвал свое предложение", GetPlayerNameEx(playerid));
			SendClientMessage(offer_id, 0xFF6600FF, fmt_str);

			format(fmt_str, sizeof fmt_str, "Вы отозвали свое предложение для %s", GetPlayerNameEx(offer_id));
			SendClientMessage(playerid, 0xFF6600FF, fmt_str);
		}
		else SendClientMessage(playerid, 0xFF6600FF, "Вы отозвали свое последнее предложение");

		ClearPlayerOffer(playerid);
	}
	else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет активных предложений");

	return 1;
}

CMD:hi(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, 0x999999FF, "Нельзя использовать в машине");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /hi [id игрока]");

	extract params -> new to_player;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	new Float: to_x, Float: to_y, Float: z;
	GetPlayerPos(to_player, to_x, to_y, z);

	new Float: dist = GetPlayerDistanceFromPoint(playerid, to_x, to_y, z);
	if(0.5 <= dist <= 1.5)
	{
		SendPlayerOffer(playerid, to_player, OFFER_TYPE_HANDSHAKE);
	}
	else if(dist < 20.0)
	{
		new fmt_str[35];

		new Float: x, Float: y;
		new Float: angle;

		GetPlayerPos(playerid, x, y, z);
		angle = GetAngleToPoint(to_x, to_y, x, y);

		SetPlayerFacingAngle(playerid, angle);

		format(fmt_str, sizeof fmt_str,"машет рукой %s", GetPlayerNameEx(to_player));
		Action(playerid, fmt_str, _, false);

		ApplyAnimationEx(playerid, "PED", "endchat_03", 4.1, 0, 1, 1, 0, 0, 1);
	}
	else SendClientMessage(playerid, 0x999999FF, "Вы находитесь слишком далеко от игрока");

	return 1;
}

CMD:me(playerid, params[])
{
	if(IsPlayerMuted(playerid))
		return SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать это");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /me [текст]");

	return Action(playerid, params);
}

CMD:do(playerid, params[])
{
	if(IsPlayerMuted(playerid))
		return SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать это");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /do [текст]");

	new fmt_str[128];
	SetPlayerChatBubble(playerid, params, 0xDD90FFFF, 25.0, 5000);

	format(fmt_str, sizeof fmt_str, "%s (%s)", params, GetPlayerNameEx(playerid));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	return 1;
}

CMD:try(playerid, params[])
{
	if(IsPlayerMuted(playerid))
		return SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать это");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /try [текст]");

	new fmt_str[128];

	format(fmt_str, sizeof fmt_str, "%s %s %s", GetPlayerNameEx(playerid), params, !random(3) ? ("{66CC00}| Удачно") : ("{FF6600}| Неудачно"));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	return 1;
}

CMD:w(playerid, params[])
{
	if(IsPlayerMuted(playerid))
		return SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать это");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /w [текст]");

	new fmt_str[128];
	SetPlayerChatBubble(playerid, params, 0xACCE90FF, 3.0, 5000);

	format(fmt_str, sizeof fmt_str, "%s шепчет: %s", GetPlayerNameEx(playerid), params);
	SendMessageInLocal(playerid, fmt_str, 0xACCE90FF, 3.0);

	return 1;
}

CMD:s(playerid, params[])
{
	if(GetPlayerLevel(playerid) < 11)
		return SendClientMessage(playerid, 0xCECECEFF, "Этим можно пользоваться со 2 уровня");

	if(IsPlayerMuted(playerid))
		return SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать это");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /s [текст]");

	if(IsAIP(params))
	{
        SendClientMessage(playerid, -1, "Подозрения в рекламе!");
        return false;
    }

	new fmt_str[128];
	SetPlayerChatBubble(playerid, params, 0xFFFFFFFF, 37.0, 5000);

	format(fmt_str, sizeof fmt_str, "%s[%d] крикнул: %s", GetPlayerNameEx(playerid), playerid, params);
	SendMessageInLocal(playerid, fmt_str, 0xFFFFFFFF, 37.0);

	ApplyAnimationEx(playerid, "ON_LOOKERS", "shout_01", 4.0, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:dev(playerid, params[])
{
	new Float:x, Float:y, Float:z;
	new Float:Angle;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, Angle);
	printf("%f,%f,%f,f", x, y, z, Angle);
	return 1;
}


CMD:repaircar(playerid, params[])
{
	if(GetPlayerRepCar(playerid) < 1) return Send(playerid, -1,"У вас нет рем. комплекса, купить его можно на АЗС");
	
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1, !"[Ошибка] {FFFFFF}Вы должны быть за рулём");
	
	SendClientMessage(playerid,-1, !"[Информация] {FFFFFF}Вы успешно починили свой транспорт");
	new vehicleid = GetPlayerVehicleID(playerid);
	
	SetVehicleHealth(vehicleid,1000);
	PlayerPlaySound(playerid, 1133, 0.0,0.0,0.0);
	

	RepairVehicle(vehicleid);
	
	AddPlayerData(playerid, P_REPCARID, -, 1);
	UpdatePlayerDatabaseInt(playerid, "repcarid",GetPlayerData(playerid, P_REPCARID));
	return 1;
}
CMD:n(playerid, params[])
{
	if(IsPlayerMuted(playerid))
		return SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать это");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /n [нон-рп сообщение]");

	if(IsAIP(params))
	{
        SendClientMessage(playerid, -1, "Подозрения в рекламе!");
        return false;
    }

	new fmt_str[128];
	SetPlayerChatBubble(playerid, params, 0x999999FF, 30.0, 5000);

	format(fmt_str, sizeof fmt_str, "(( %s[%d]: %s ))", GetPlayerNameEx(playerid), playerid, params);
	SendMessageInLocal(playerid, fmt_str, 0xCCCC99FF, 30.0);

	return 1;
}

CMD:lic(playerid, params[])
{
	if(!strlen(params))
		return SendClientMessage(playerid, 0x999999FF, "Используйте: /lic [id игрока]");

	extract params -> new to_player;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 4.0))
		return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	static const
		lic_names[3][32 + 1] = {"{FF9900}Отсутствует", "{00CC33}Базовый уровень", "{6699CC}Профессиональный уровень"};

	new fmt_str[64];

	format(fmt_str, sizeof fmt_str, "%s свои лицензии", to_player == playerid ? "просматривает" : "показал");

	Action(playerid, fmt_str, _, false);

	format(fmt_str, sizeof fmt_str, "Лицензии %s:", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, 0xFFFF00FF, fmt_str);

	format(fmt_str, sizeof fmt_str, "На транспорт: %s", lic_names[ GetPlayerData(playerid, P_DRIVING_LIC) ]);
	SendClientMessage(to_player, 0xFFFFFFFF, fmt_str);

	format(fmt_str, sizeof fmt_str, "На оружие:      %s", GetPlayerData(playerid, P_WEAPON_LIC) >= 1 ? ("{00CC33}Есть") : ("{FF9900}Отсутствует"));
	SendClientMessage(to_player, 0xFFFFFFFF, fmt_str);

	return 1;
}

CMD:pass(playerid, params[])
{
	extract params -> new to_player; else return SendClientMessage(playerid, 0x999999FF, "Используйте: /pass [id игрока]");

	if(!IsPlayerConnected(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0))
		return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	new fmt_str[128];
	Action(playerid, "показал свой паспорт", _, false);

	format(fmt_str, sizeof fmt_str, "Имя: %s  |  Возраст: %d  |  Пол: %s  |  Проживание: %s", GetPlayerNameEx(playerid), GetPlayerLevel(playerid), GetPlayerSexName(playerid), GetPlayerHouseName(playerid));
	SendClientMessage(to_player, 0xFFFFFFFF, fmt_str);

	format(fmt_str, sizeof fmt_str, "Работа: %s  |  Организация и подразделение: %s / %s", GetPlayerJobAndRankName(playerid), GetPlayerTeamName(playerid), GetPlayerSubdivisionName(playerid));
	SendClientMessage(to_player, 0xFFFFFFFF, fmt_str);

	format(fmt_str, sizeof fmt_str, "Телефон: %d  |  Уровень розыска: %d  |  Законопослушность: %d", GetPlayerPhone(playerid), GetPlayerSuspect(playerid), GetPlayerData(playerid, P_LAW_ABIDING));
	SendClientMessage(to_player, 0xFFFFFFFF, fmt_str);

	return 1;
}

CMD:gmx(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 13) return 1;

	server_restart = true;

	return GameModeExit();
}

/*CMD:hide(playerid)
{
	for(new idx; idx < sizeof logo_TD; idx ++)
		TextDrawHideForPlayer(playerid, logo_TD[idx]);
	return 1;
}*/

CMD:save_pos(playerid)
{
	new Float:POS[4];
	new fmt_str[64];
	GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
	GetPlayerFacingAngle(playerid, POS[3]);

	format(fmt_str, 64, "X: %f Y: %f Z: %f ANGLE: %f", POS[0], POS[1], POS[2], POS[3]);
	SendClientMessage(playerid, -1, fmt_str);
	return 1;
}
/*CMD:report(playerid, params[])
{
	//ShowPlayerReportDialog(playerid);
	ShowPlayerReportMenuDialog(playerid);
	return 1;
}*/
CMD:report(playerid)
{
	Dialog(playerid, 9182, DIALOG_STYLE_INPUT, !""c_server"Связь с администрацией", !"{33aa33}Вы собираетесь отправить запрос администрации.\n\
	{afafaf}Пожалуйста, чётко и грамотно сформулируйте запрос.\n\
	{afafaf}Также, при подаче жалобы на игрока, укажите его ID.\n\n\
	{afafaf}-> Запрещён оффтоп, исп. CapsLock, оскорбления и нецензурная брань.", !"Отправить", !"Назад");
	
	return true;
}
alias:report("rep")

CMD:vopros(playerid, params[])
{
//	ShowPlayerAskDialog(playerid);
	ShowPlayerReportMenuDialog(playerid);
	return 1;
}
alias:vopros("ask")

CMD:define(playerid)
{
	new string[1500], null = 0;
	if(GetPlayerAdminEx(playerid) > 0) {
		foreach(new i:Player)
		{
			if(GetPVarInt(i, "RepUn") > 0)
			{
				null++;
				format(string, sizeof(string), "%s\n{FFFFFF}%i. %s[%d] | Жалоба: %s [%s]", string, null, GetPlayerNameEx(i),i,RepInfo[i][Reptex], date("%hh:%ii:%ss", RepInfo[i][RepTime]));
			}
		}
		strcat(string, "\n\n{FFCC00}Ответить на жалобу: /pm [id] [ответ]");
		if(null == 0) return SendClientMessage(playerid, 0xAA3333AA,"Список репортов пуст");
		Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_LIST, "Репорт",string, "Обновить", "Закрыть");
	} else if(GetPlayerHelperEx(playerid) > 0) {
		foreach(new i:Player)
		{
			if(GetPVarInt(i, "AskUn") > 0)
			{
				null++;
				format(string, sizeof(string), "%s\n{FFFFFF}%i. %s[%d] | Вопрос: %s [%s]", string, null, GetPlayerNameEx(i),i,AskInfo[i][Asktex], date("%hh:%ii:%ss", AskInfo[i][AskTime]));
			}
		}
		strcat(string, "\n\n{FFCC00}Ответить на вопрос: /pm [id] [ответ]");
		if(null == 0) return SendClientMessage(playerid, 0xAA3333AA,"Список репортов пуст");
		Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_LIST, "Репорт",string, "Обновить", "Закрыть");
	}
	return 1;
}

CMD:mm(playerid, params[])
{
	Dialog
	(
		playerid, DIALOG_PLAYER_MENU, DIALOG_STYLE_LIST,
		"{0099CC}Меню игрока",
		""c_b"1. Статистика\n"\
		"2. Список команд\n"\
		"3. Личные настройки\n"\
		"4. Настройки безопасности\n"\
		"5. Связь с администрацией\n"\
		"6. Улучшения\n"\
		"7. Правила сервера\n"\
		"8. Изменить имя\n"\
		"9. Дополнительно\n"\
		"{FFFFCC}10. Активация промокода\n"\
		"11. Достижения\n"\
		"12. Квесты",
		"Выбрать", "Закрыть"
	);
	return 1;
}
alias:mm("mn")
//alias:mm("menu");


CMD:gps(playerid, params[])
{
	DisablePlayerGPS(playerid);

	Dialog
	(
		playerid, DIALOG_GPS, DIALOG_STYLE_LIST,
		"{FFCD00}GPS",
		""c_server"[1] "c_b"Общественные места\n"\
		""c_server"[2] "c_b"Транспортные узлы\n"\
		""c_server"[3] "c_b"Государственные организации\n"\
		""c_server"[4] "c_b"Базы банд и мафий\n"\
		""c_server"[5] "c_b"По работе\n"\
		""c_server"[6] "c_b"Банки\n"\
		""c_server"[7] "c_b"Контейнеры\n"\
		""c_server"[8] "c_b"Развлечения\n"\
		""c_i"GPS: "c_b"Найти ближайшую АЗС\n"\
		""c_i"GPS: "c_b"Найти ближайший Магазин Одежды\n"\
		""c_i"GPS: "c_b"Найти ближайший Магазин Оружия\n"\
		""c_i"GPS: "c_b"Найти ближайший Магазин 24/7\n"\
		""c_i"GPS: "c_b"Найти ближайшую СТО\n"\
		""c_i"GPS: "c_b"Найти ближайшее Казино\n"\
		""c_server"[New]: "c_b"Обмен монет",
		//"9. Найти ближайший банкомат",
		"Выбрать", "Закрыть"
	);
	return 1;
}

CMD:help(playerid, params[])
{
	Dialog
	(
		playerid, DIALOG_HELP, DIALOG_STYLE_LIST,
		"{00CC33}Помощь по игре",
		help_info_items,
		"Выбрать", "Закрыть"
	);

	return 1;
}


CMD:radio(playerid, params[])
{
	if(!IsPlayerDriver(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы не за рулем");

    if(GetPVarInt(playerid, "server_radio_enabled") == 1)
    {
        StopAudioStreamForPlayer(playerid);
        DeletePVar(playerid, "server_radio_enabled");

        SendClientMessage(playerid, COR_SERVER, "[Успешно]: "c_b"Вы выключили радио.");
        Action(playerid, "выключил(-а) радио", _, false);
    }

    Dialog
    (
        playerid, DIALOG_CAR_RADIO, DIALOG_STYLE_LIST,
        "{FFCD00}Онлайн радио",
        g_server_radio_items,
        "Выбрать", "Закрыть"
    );
    return 1;
}

CMD:play(playerid, params[])
{
    if(GetPlayerData(playerid, P_PLAY_PLAYER) <= 0) return SendClientMessage(playerid, 0xCECECEFF, "У Вас нету наушников!");

    if(GetPVarInt(playerid, "server_radio_enabled") == 1)
    {
        StopAudioStreamForPlayer(playerid);
        DeletePVar(playerid, "server_radio_enabled");

        SendClientMessage(playerid, COR_SERVER, "[Успешно]: "c_b"Вы выключили наушники.");
        Action(playerid, "выключил(-а) наушники.", _, false);
        RemovePlayerAttachedObject(playerid, 3);
    }

    Dialog
    (
        playerid, DIALOG_PLAY_RADIO, DIALOG_STYLE_LIST,
        "{FFCD00}Онлайн радио",
        g_server_radio_items,
        "Выбрать", "Закрыть"
    );
    return 1;
}

CMD:anim(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Анимации нельзя использовать в транспорте");

	if(PreLoadPlayerAnimList(playerid))
		return SendClientMessage(playerid, 0xFFFF00FF, "Список анимаций загружен. Введите команду еще раз");

	if(!strlen(params))
	{
		Dialog
		(
			playerid, DIALOG_ANIM_LIST, DIALOG_STYLE_LIST,
			"{9966FF}Анимации",
			anim_list_items,
			"Выбрать", "Закрыть"
		);
	}
	else
	{
		extract params -> new anim_id;

		if(!SetPlayerAnimation(playerid, anim_id-1))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте /anim(list) [номер анимации из списка]");
	}
	return 1;
}

alias:anim("animlist")

CMD:e(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!IsABike(vehicleid))
	{
		if(!IsPlayerDriver(playerid))
			return SendClientMessage(playerid, 0xCECECEFF, "Вы не за рулем");

		if(IsAOwnableCar(vehicleid))
		{
			new index = GetVehicleData(vehicleid, V_ACTION_ID);
			if(!GetOwnableCarData(index, OC_KEY_IN))
			{
				return GameTextForPlayer(playerid, "~n~~n~~n~~r~~h~NOT KEY~n~USE /key", 1200, 5);
			}
		}
		else if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_RENT_CAR && !(GetPlayerRentCar(playerid) == vehicleid && rent_cars_data[vehicleid - first_rent_car_id][rent_car_tenant_id] == playerid))
		{
			TogglePlayerControllable(playerid, true);
			return RemovePlayerFromVehicle(playerid);
		}
		else if(IsAJobCar(vehicleid))
		{
			if(GetPlayerJobCar(playerid) != vehicleid)
			{
				return RemovePlayerFromVehicle(playerid);
			}
		}

		if(GetVehicleData(vehicleid, V_FUEL) <= 0.0)
			return GameTextForPlayer(playerid, "~r~no fuel", 4000, 1);

	    engine = (GetVehicleParam(vehicleid, V_ENGINE) ^ VEHICLE_PARAM_ON);
		SetVehicleParam(vehicleid, V_ENGINE, engine);
	}
	return 1;
}

CMD:l(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!IsABike(vehicleid))
	{
		if(!IsPlayerDriver(playerid))
			return SendClientMessage(playerid, 0xCECECEFF, "Вы не за рулем");

		lights = (GetVehicleParam(vehicleid, V_LIGHTS) ^ VEHICLE_PARAM_ON);
		SetVehicleParam(vehicleid, V_LIGHTS, lights);
	}
	return 1;
}

CMD:sl(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!IsABike(vehicleid))
	{
		if(!IsPlayerDriver(playerid))
			return SendClientMessage(playerid, 0xCECECEFF, "Вы не за рулем");

		new limit = (GetVehicleData(vehicleid, V_LIMIT) ^ VEHICLE_PARAM_ON);
		SetVehicleData(vehicleid, V_LIMIT, limit);
	}
	return 1;
}

CMD:b(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(IsModelHasBootAndBonnet(GetVehicleModel(vehicleid)))
	{
		if(!IsPlayerDriver(playerid))
			return SendClientMessage(playerid, 0xCECECEFF, "Вы не за рулем");

		Dialog
		(
			playerid, DIALOG_OPEN_HOOD_OR_TRUNK, DIALOG_STYLE_MSGBOX,
			" ",
			"\t{CC9900}Управления авто",
			"Капот", "Багажник"
		);
	}
	return 1;
}

CMD:i(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!IsABike(vehicleid))
	{
		if(!IsPlayerDriver(playerid))
			return SendClientMessage(playerid, 0xCECECEFF, "Вы не за рулем");

		new stationid = GetNearestFuelStation(playerid, 10.0);
		if(stationid != -1)
		{
			FuelStationFillCar(playerid, vehicleid, stationid);
		}
		else SendClientMessage(playerid, 0xCECECEFF, "Поблизости нет заправочных станций");
	}
	return 1;
}

CMD:alarm(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!IsABike(vehicleid))
	{
		if(!IsPlayerDriver(playerid))
			return SendClientMessage(playerid, 0xCECECEFF, "Вы не за рулем");

		alarm = (GetVehicleData(vehicleid, V_ALARM) ^ VEHICLE_PARAM_ON);
		SetVehicleData(vehicleid, V_ALARM, alarm);
	}
	return 1;
}

CMD:charity(playerid, params[])
{
	new Cache: result;
	new rows;
	new money;
	new fmt_str[75];
	new string[1024];

	cache_set_active(charity_cache_data);
	rows = cache_num_rows();

	string = "Сумма\t\tИмя\n\n{FFFFFF}";
	for(new idx; idx < rows; idx ++)
	{
		cache_get_row(idx, 0, fmt_str);
		money = cache_get_row_int(idx, 1);

		format(fmt_str, sizeof fmt_str, "%d руб\t\t%s\n", money, fmt_str);
		strcat(string, fmt_str);
	}
	cache_set_active(Cache:0); //unset active cache

	format(fmt_str, sizeof fmt_str, "SELECT SUM(money) as money FROM charity WHERE uid=%d LIMIT 1", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, fmt_str, true);

	money = cache_get_row_int(0, 0);
	cache_delete(result);

	format(fmt_str, sizeof fmt_str, "\n{999999}Сумма Ваших пожертвований: %d руб", money);
	strcat(string, fmt_str);

	return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{00CC00}Топ 25 благотворителей", string, "Закрыть", "");
}

CMD:bank(playerid, params[])
{
	//if(GetPlayerLevel(playerid) < 4)
	//	return SendClientMessage(playerid, 0x999999FF, "Пользоваться государственными банками можно с 4 уровня");

	if(IsPlayerInRangeOfPoint(playerid, 35.0, 2902.8274,2509.2036,1051.0000))
	{
		ShowPlayerBankDialog(playerid);
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Вы не в банке");

	return 1;
}
CMD:time(playerid, params[])
{
    new
		hour, minute,
		year, month, day;
		
    gettime(hour, minute);
	getdate(year, month, day);

	new fmt_str[350];
	
    format(fmt_str, sizeof fmt_str, "~y~%d:%02d~n~~b~~h~%02d.%02d.%d", hour, minute, day, month, year);
	GameTextForPlayer(playerid, fmt_str, 3000, 1);
	
	if(!(GetPlayerData(playerid, P_MUTE) > 0 || GetPlayerData(playerid, P_WARN_TIME) > 0 || GetPlayerData(playerid, P_JAIL) > 0))
		return SendClientMessage(playerid, -1, "Используйте {6699FF}/c 060 {FFFFFF}(служба точного времени)");

	new fmt_msg[50];
	if(GetPlayerData(playerid, P_WARN_TIME) > 0)
	{
		format(fmt_msg, sizeof fmt_msg, "Время до снятия предупреждения: %d дней", ((GetPlayerData(playerid, P_WARN_TIME) - gettime()) / 86400) + 1);
		SendClientMessage(playerid, 0x66CC00FF, fmt_msg);
	}
    if(GetPlayerData(playerid, P_FMUTE) > 0)
	{
		format(fmt_msg, sizeof fmt_msg, "Время до разблокировки семейного чата: %d:%02d", floatround(GetPlayerData(playerid, P_FMUTE) / 60) /* % 60 */, (GetPlayerData(playerid, P_FMUTE) % 60));
		SendClientMessage(playerid, 0x32a44bFF, fmt_msg);
	}
	if(GetPlayerData(playerid, P_MUTE) > 0)
	{
		format(fmt_msg, sizeof fmt_msg, "Время до разблокировки чата: %d:%02d", floatround(GetPlayerData(playerid, P_MUTE) / 60) /* % 60 */, (GetPlayerData(playerid, P_MUTE) % 60));
		SendClientMessage(playerid, 0x66CC00FF, fmt_msg);
	}

	if(GetPlayerData(playerid, P_JAIL) > 0)
	{
		format(fmt_msg, sizeof fmt_msg, "Время до конца заключения: %d:%02d", floatround(GetPlayerData(playerid, P_JAIL) / 60) /* % 60 */, (GetPlayerData(playerid, P_JAIL) % 60));
		SendClientMessage(playerid, 0x66CC00FF, fmt_msg);
	}
	
	ShowTime(playerid);

	return 1;
}

/*CMD:take(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADER)
	{
		if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_LOADER)
		{
			//new TODO;

			return 1;
		}
	}
	return SendClientMessage(playerid, 0x999999FF, "Вы должны работать на погрузчике");
}*/

CMD:id(playerid, params[])
{
	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /id [имя или часть имени игрока]");

	new fmt_str[64];
	new count;

	foreach(new idx : Player)
	{
		if(!IsPlayerLogged(idx)) continue;

		if(strfind(GetPlayerNameEx(idx), params, true) != -1)
		{
			count ++;

			format(fmt_str, sizeof fmt_str, "%d. %s {66CC66}id %d", count, GetPlayerNameEx(idx), idx);
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

			if(count >= 5)
			{
				SendClientMessage(playerid, 0x999999FF, "Показаны первые 5 совпадений");
				break;
			}
		}
	}
	if(!count)
		SendClientMessage(playerid, 0x999999FF, "Совпадений не найдено");

	return 1;
}

CMD:buyf(playerid, params[])
{
	new factory_fuels = GetRepositoryData(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F, R_AMOUNT);

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться на нефтезаводе в рабочем транспорте");

	new modelid;
	new vehicleid = GetPlayerJobCar(playerid);

	if(vehicleid != INVALID_VEHICLE_ID)
		modelid = GetVehicleData(vehicleid, V_MODELID);

	if(IsPlayerInRangeOfPoint(playerid, 20.0, 2710.3369,-2383.5164,17.9063))  // для завода
	{
		if(GetPlayerTempJob(playerid) != TEMP_JOB_FACTORY_TRUCKER || modelid != 514)
			return SendClientMessage(playerid, 0xCECECEFF, "Вы не работаете в отделе доставки завода или заняли не ту линию");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 20.0, 2738.3379,-2273.0725,17.9063))  // для азс
	{
		if(GetPlayerJob(playerid) != JOB_TRUCKER || modelid != 514)
			return SendClientMessage(playerid, 0xCECECEFF, "Вы не работаете развозчиком топлива или заняли не ту линию");
	}
	else
		return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться на нефтезаводе");

	new total_litres = GetPlayerJobLoadItems(playerid);

	if(!IsPlayerInVehicle(playerid, vehicleid))
		return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться на нефтезаводе в рабочем транспорте");

	if(!strlen(params))
		return SendClientMessage(playerid, 0x999999FF, "Используйте: /buyf [кол-во в литрах]");

	if(!IsTrailerAttachedToVehicle(vehicleid))
		return SendClientMessage(playerid, 0xCECECEFF, "У Вашего транспорта отсутствует цистерна для топлива");

	extract params -> new load_fuel;

	if(!(1 <= load_fuel <= 8000))
		return SendClientMessage(playerid, 0x999999FF, "Можно загрузить от 1 до 8000 л топлива");

	if(factory_fuels < load_fuel)
		return SendClientMessage(playerid, 0x999999FF, "На нефтезаводе нет такого количества топлива");

	if((total_litres + load_fuel) > 8000)
		return SendClientMessage(playerid, 0xCECECEFF, "В цистерну столько не поместится");

	if(GetPlayerMoneyEx(playerid) < (load_fuel * 10))
		return SendClientMessage(playerid, 0x999999FF, "Недостаточно денег для покупки такого количества топлива");

	GivePlayerMoneyEx(playerid, -(load_fuel * 10), "Покупка топлива (нефтезавод)", true, false);

	SetRepositoryData(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F, R_AMOUNT, factory_fuels - load_fuel);
	UpdateRepository(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F);

	SetPlayerJobLoadItems(playerid, total_litres + load_fuel);

	new fmt_str[64];

	format(fmt_str, sizeof fmt_str, "Вы загрузили %d л топлива общей стоимостью %d руб", load_fuel, load_fuel * 10);
	SendClientMessage(playerid, 0xFFFF00FF, fmt_str);

	format(fmt_str, sizeof fmt_str, "~g~+ %d litres~n~~b~total %d litres", load_fuel, total_litres + load_fuel);
	GameTextForPlayer(playerid, fmt_str, 2000, 6);

	format(fmt_str, sizeof fmt_str, "Доставка топлива\n{FFFFFF}Загрузка %d / 8000 л", total_litres + load_fuel);
	UpdateVehicleLabel(vehicleid, 0xFF6600FF, fmt_str);

	return 1;
}

CMD:sellf(playerid, params[])
{
	new modelid;
	new vehicleid = GetPlayerJobCar(playerid);

	if(vehicleid != INVALID_VEHICLE_ID)
		modelid = GetVehicleData(vehicleid, V_MODELID);

	if(GetPlayerTempJob(playerid) != TEMP_JOB_FACTORY_TRUCKER || modelid != 514)
		return SendClientMessage(playerid, 0xCECECEFF, "Вы не работаете в службе доставки завода");

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, -1120.4103,2175.6133,38.0294))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться у склада топлива завода");

	new total_litres = GetPlayerJobLoadItems(playerid);

	new factory_fuels = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT);

	if(!strlen(params))
		return SendClientMessage(playerid, 0x999999FF, "Используйте: /sellf [кол-во в литрах]");

	extract params -> new sell_fuels;

	if(!(1 <= sell_fuels <= 8000))
		return SendClientMessage(playerid, 0x999999FF, "Можно продать от 1 до 8000 л топлива");

	if(vehicleid == INVALID_VEHICLE_ID || !IsTrailerAttachedToVehicle(vehicleid) || total_litres < sell_fuels)
		return SendClientMessage(playerid, 0x999999FF, "В Вашей фуре нет такого количества топлива или цистерна не прицеплена");

	if((factory_fuels + sell_fuels) > 1000000)
		return SendClientMessage(playerid, 0x999999FF, "Склад топлива завода заполнен");

	GivePlayerMoneyEx(playerid, (sell_fuels * 12), "Продажа топлива (завод)", true, true);

	SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT, factory_fuels + sell_fuels);
	UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL);

	SetPlayerJobLoadItems(playerid, total_litres - sell_fuels);
	AddPlayerData(playerid, P_JOB_WAGE, +, sell_fuels * 2);

	new fmt_str[64];

	format(fmt_str, sizeof fmt_str, "Вы продали заводу %d л топлива на сумму %d руб", sell_fuels, sell_fuels * 12);
	SendClientMessage(playerid, 0x66CC00FF, fmt_str);

	format(fmt_str, sizeof fmt_str, "Ваша чистая выручка составляет {FF9900}%d руб", sell_fuels * 2);
	SendClientMessage(playerid, 0x66CC00FF, fmt_str);

	format(fmt_str, sizeof fmt_str, "Доставка топлива\n{FFFFFF}Загрузка %d / 8000 л", total_litres - sell_fuels);
	UpdateVehicleLabel(vehicleid, 0xFF6600FF, fmt_str);

	return 1;
}

CMD:buyprod(playerid, params[])
{
	if(!(GetPlayerJob(playerid) == JOB_TRUCKER && IsPlayerInJob(playerid)))
		return SendClientMessage(playerid, 0x999999FF, "Вы должны работать дальнобойщиком");

	extract params -> new buy_prod_count; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /buyprod [кол-во]. Стоимость 1 продукта 24 руб.");

	if(!IsPlayerInRangeOfPoint(playerid, 20.0, -1046.5460,2203.9644,38.2055))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться у склада исходных материалов завода");

	else if(!IsPlayerInVehicle(playerid, GetPlayerJobCar(playerid)))
		return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться у склада исходных материалов завода в рабочем транспорте");

	else if(!(1 <= buy_prod_count <= 10000))
		return SendClientMessage(playerid, 0x999999FF, "Можно загрузить от 1 до 10000 шт. продуктов");

	else if(GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD, R_AMOUNT) < buy_prod_count)
		return SendClientMessage(playerid, 0x999999FF, "На складе исходных материалов нет такого количества продуктов");

	else if((buy_prod_count + GetPlayerJobLoadItems(playerid)) > 10000)
		return SendClientMessage(playerid, 0xCECECEFF, "В фургон столько не поместится, максимум 10000 шт.");

	if(GetPlayerMoneyEx(playerid) < (buy_prod_count * 24))
		return SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег для покупки такого количества продуктов");

	GivePlayerMoneyEx(playerid, -(buy_prod_count * 24), "Покупка продуктов (разв. продуктов)", true, true);

	SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + buy_prod_count);

	SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD, R_AMOUNT, GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD, R_AMOUNT) - buy_prod_count);
	UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD);

	new fmt_msg[64];

	format(fmt_msg, sizeof fmt_msg, "Вы купили %d продуктов на сумму %d руб.", buy_prod_count, buy_prod_count * 24);
	SendClientMessage(playerid, 0x66CC00FF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Текущее кол-во загруженных продуктов: %d из 10000", GetPlayerJobLoadItems(playerid));
	SendClientMessage(playerid, 0xFFFF00FF, fmt_msg);

	return 1;
}

/*CMD:bizlist(playerid, params[])
{
	if(!(GetPlayerJob(playerid) == JOB_TRUCKER && !GetPlayerTeamEx(playerid)))
		return SendClientMessage(playerid, 0x999999FF, "Вы должны работать дальнобойщиком");

	new vehicleid = GetPlayerVehicleID(playerid);

	if(vehicleid == -1)
		return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться в рабочем транспорте");

	if(GetVehicleData(vehicleid, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_TRUCKER || GetTruckIndex(vehicleid) != 0)
		return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться в транспорте для доставки продуктов");

	new text[1500];
	new fmt_str[75];
	new count;
	new status_color;

	for(new index; index < sizeof g_order; index ++)
	{
		if(!GetOrderData(index, O_AMOUNT)) continue;
		if(GetOrderData(index, O_TYPE) != ORDER_TYPE_BUSINESS) continue;
		SetPlayerListitemValue(playerid, count, index);

		if(GetPlayerData(playerid, P_ORDER) == index)
			status_color = 0xFFCC00FF;
		else if(GetOrderData(index, O_USED))
			status_color = 0xFF3300FF;
		else
			status_color = 0x66CC00FF;

		format(fmt_str, sizeof fmt_str, "Бизнес №%d:\t%d прод. по %d руб.\t|Итого: %d руб. {%06x}*\n",
		GetOrderData(index, O_COMPANY_ID), GetOrderData(index, O_AMOUNT), GetOrderData(index, O_PRICE), GetOrderData(index, O_AMOUNT) * GetOrderData(index, O_PRICE), status_color >>> 8);

		strcat(text, fmt_str);
		count ++;
	}
	if(!count) return SendClientMessage(playerid, 0xCECECEFF, "Сейчас нет ни одного заказа");

	Dialog(playerid, DIALOG_BIZ_ORDERS, DIALOG_STYLE_LIST, "{99FF00}Заказы продуктов от бизнесов", text, "Выполнить", "Закрыть");
	return 1;
}

CMD:fuellist(playerid, params[])
{
	if(!(GetPlayerJob(playerid) == JOB_TRUCKER && !GetPlayerTeamEx(playerid)))
		return SendClientMessage(playerid, 0x999999FF, "Вы должны работать дальнобойщиком");

	new vehicleid = GetPlayerVehicleID(playerid);

	if(vehicleid == -1)
		return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться в рабочем транспорте");

	if(GetVehicleData(vehicleid, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_TRUCKER || GetTruckIndex(vehicleid) != 1)
		return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться в транспорте для доставки топлива");

	new text[1500];
	new fmt_str[75];
	new count;
	new status_color;

	for(new index; index < sizeof g_order; index ++)
	{
		if(!GetOrderData(index, O_AMOUNT)) continue;
		if(GetOrderData(index, O_TYPE) != ORDER_TYPE_FUEL_STATION) continue;
		SetPlayerListitemValue(playerid, count, index);

		if(GetPlayerData(playerid, P_ORDER) == index)
			status_color = 0xFFCC00FF;
		else if(GetOrderData(index, O_USED))
			status_color = 0xFF3300FF;
		else
			status_color = 0x66CC00FF;

		format(fmt_str, sizeof fmt_str, "АЗС №%d:\t%d л. по %d руб.\t|Итого: %d руб. {%06x}*\n",
		GetOrderData(index, O_COMPANY_ID), GetOrderData(index, O_AMOUNT), GetOrderData(index, O_PRICE), GetOrderData(index, O_AMOUNT) * GetOrderData(index, O_PRICE), status_color >>> 8);

		strcat(text, fmt_str);
		count ++;
	}
	if(!count) return SendClientMessage(playerid, 0xCECECEFF, "Сейчас нет ни одного заказа");

	Dialog(playerid, DIALOG_FS_ORDERS, DIALOG_STYLE_LIST, "{99FF00}Заказы продуктов от АЗС", text, "Выполнить", "Закрыть");
	return 1;
}*/

CMD:buym(playerid, params[])
{
	new modelid;
	new vehicleid = GetPlayerJobCar(playerid);

	if(vehicleid != INVALID_VEHICLE_ID)
		modelid = GetVehicleData(vehicleid, V_MODELID);

	if(GetPlayerTempJob(playerid) != TEMP_JOB_FACTORY_TRUCKER || modelid != 406)
		return SendClientMessage(playerid, 0xCECECEFF, "Вы не работник службы доставки завода");

	if(!strlen(params))
		return SendClientMessage(playerid, 0x999999FF, "Используйте: /buym [кол-во в кг]");

	extract params -> new buy_metal_count;

	new metall_loaded_count = GetPlayerJobLoadItems(playerid);
	new miner_metal = GetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_AMOUNT);

	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2424.5317,1765.6780,-0.2507) || !IsPlayerInVehicle(playerid, vehicleid))
		return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться у склада шахты в рабочем транспорте");

	if(!(1 <= buy_metal_count <= 500))
		return SendClientMessage(playerid, 0x999999FF, "Можно загрузить от 1 до 500 кг металла");

	if(miner_metal < buy_metal_count)
		return SendClientMessage(playerid, 0x999999FF, "На складе шахты нет такого количества металла");

	if((metall_loaded_count + buy_metal_count) > 500)
		return SendClientMessage(playerid, 0xCECECEFF, "В фургон столько не поместится");

	if(GetPlayerMoneyEx(playerid) < (buy_metal_count * 15))
		return SendClientMessage(playerid, 0x999999FF, "Недостаточно денег для покупки такого количества металла");

	GivePlayerMoneyEx(playerid, -(buy_metal_count * 15), "Покупка металла (развозчик)", true, true);

	SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_AMOUNT, miner_metal - buy_metal_count);
	UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL);

	SetPlayerJobLoadItems(playerid, metall_loaded_count + buy_metal_count);

	new fmt_str[64];

	format(fmt_str, sizeof fmt_str, "Вы загрузили %d кг металла общей стоимостью %d руб", buy_metal_count, buy_metal_count * 15);
	SendClientMessage(playerid, 0xFFFF00FF, fmt_str);

	format(fmt_str, sizeof fmt_str, "Доставка металла\n{FFFFFF}Загрузка %d / 500 кг", metall_loaded_count + buy_metal_count);
	UpdateVehicleLabel(vehicleid, 0x3399FFFF, fmt_str);

	return 1;
}

CMD:sellm(playerid, params[])
{
	if(!strlen(params))
		return SendClientMessage(playerid, 0x999999FF, "Используйте: /sellm [кол-во в кг]");

	extract params -> new sell_metal_count;

	if(!IsPlayerInRangeOfPoint(playerid, 20.0, -1043.8157,2205.5217,38.1195))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться у склада металла завода");

	if(!(1 <= sell_metal_count <= 500))
		return SendClientMessage(playerid, 0x999999FF, "Можно продать от 1 до 500 кг металла");

	new factory_metal = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_AMOUNT);

	if((factory_metal + sell_metal_count) > 1_000_000)
		return SendClientMessage(playerid, 0xCECECEFF, "Склад металла завода заполнен");

	new fmt_str[90];

	new modelid;
	new vehicleid = GetPlayerJobCar(playerid);

	if(vehicleid != INVALID_VEHICLE_ID)
		modelid = GetVehicleData(vehicleid, V_MODELID);

	if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY_TRUCKER && IsPlayerInVehicle(playerid, vehicleid) && modelid == 406)
	{
		new metall_loaded_count = GetPlayerJobLoadItems(playerid);

		if(metall_loaded_count < sell_metal_count)
			return SendClientMessage(playerid, 0x999999FF, "В Вашем фургоне нет такого количества металла");

		metall_loaded_count -= sell_metal_count;
		SetPlayerJobLoadItems(playerid, metall_loaded_count);

		format(fmt_str, sizeof fmt_str, "Доставка металла\n{FFFFFF}Загрузка %d / 500 кг", metall_loaded_count);
		UpdateVehicleLabel(vehicleid, 0x3399FFFF, fmt_str);

		AddPlayerData(playerid, P_JOB_WAGE, +, sell_metal_count * 3);
		GivePlayerMoneyEx(playerid, (sell_metal_count * 18), "Продажа металла заводу (развозчик)", true, true);
	}
	else
	{
		if(GetPlayerData(playerid, P_METALL) < sell_metal_count)
			return SendClientMessage(playerid, 0x999999FF, "У Вас с собой нет такого количества металла");

		format(fmt_str, sizeof fmt_str, "UPDATE accounts SET money=%d,metall=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid) + (sell_metal_count * 18), GetPlayerData(playerid, P_METALL), GetPlayerAccountID(playerid));
		mysql_query(mysql, fmt_str, false);

		if(!mysql_errno())
		{
			AddPlayerData(playerid, P_METALL, -, sell_metal_count);
			GivePlayerMoneyEx(playerid, (sell_metal_count * 18), "Продажа металла заводу", false, true);
		}
		else
			return SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 13)");

	}
	format(fmt_str, sizeof fmt_str, "Вы продали заводу %d кг металла на сумму %d руб", sell_metal_count, sell_metal_count * 18);
	SendClientMessage(playerid, 0x66CC00FF, fmt_str);

	format(fmt_str, sizeof fmt_str, "Ваша чистая выручка составляет {FF9900}%d руб", sell_metal_count * 3);
	SendClientMessage(playerid, 0x66CC00FF, fmt_str);

	SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_AMOUNT, factory_metal + sell_metal_count);
	UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL);

	return 1;
}

CMD:takem(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_ARMY) return SendClientMessage(playerid, 0x999999FF, "Вы не военнослужащий");

	extract params -> new take_metal_count; else return SendClientMessage(playerid, 0x999999FF, "Используйте: /takem [кол-во в кг]");

	if(take_metal_count <= 0) return SendClientMessage(playerid, 0x999999FF, "Неверное количество металла");

	new army_metal = GetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL, R_AMOUNT);

	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2883.7095,1447.6533,1050.9984))
		return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться у склада воинской части");

	if(army_metal < take_metal_count)
		return SendClientMessage(playerid, 0x999999FF, "На складе воинской части нет такого количества металла");

	if((GetPlayerData(playerid, P_METALL) + take_metal_count) > GetPlayerMaxStorage(playerid, STORAGE_METALL))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы не можете унести с собой столько металла (максимум 20 кг)");

	AddPlayerData(playerid, P_METALL, +, take_metal_count);
	UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_METALL));

	SetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL, R_AMOUNT, army_metal - take_metal_count);
	UpdateRepository(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL);

	new fmt_str[128];

	format(fmt_str, sizeof fmt_str, "%s[%d] взял(а) на военном складе {00cc33}%d кг металла", GetPlayerNameEx(playerid), playerid, take_metal_count);
	SendMessageToTeam(TEAM_ARMY, fmt_str, 0x3399FFFF);

	return 1;
}

CMD:putm(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_ARMY) return SendClientMessage(playerid, 0x999999FF, "Вы не военнослужащий");

	extract params -> new put_metal_count; else return SendClientMessage(playerid, 0x999999FF, "Используйте: /putm [кол-во в кг]");

	if(put_metal_count <= 0) return SendClientMessage(playerid, 0x999999FF, "Неверное количество металла");

	new army_metal = GetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL, R_AMOUNT);

	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2883.7095,1447.6533,1050.9984))
		return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться у склада воинской части");

	if(GetPlayerData(playerid, P_METALL) < put_metal_count)
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет такого количества металла");

	AddPlayerData(playerid, P_METALL, -, put_metal_count);
	UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_METALL));

	SetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL, R_AMOUNT, army_metal + put_metal_count);
	UpdateRepository(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL);

	new fmt_str[128];

	format(fmt_str, sizeof fmt_str, "%s[%d] положил(а) на военный склад {00cc33}%d кг металла", GetPlayerNameEx(playerid), playerid, put_metal_count);
	SendMessageToTeam(TEAM_ARMY, fmt_str, 0x3399FFFF);

	return 1;
}

CMD:givemet(playerid, params[])
{
	extract params -> new to_player, give_metall_count; else return SendClientMessage(playerid, 0x999999FF, "Используйте: /givemet [id игрока] [кол-во в кг]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(give_metall_count <= 0) return SendClientMessage(playerid, 0x999999FF, "Неверное количество металла");

	if(give_metall_count > GetPlayerData(playerid, P_METALL))
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет такого количества металла");

	new fmt_text[80];

	if((GetPlayerData(to_player, P_METALL) + give_metall_count) > GetPlayerMaxStorage(to_player, STORAGE_METALL))
	{
		format(fmt_text, sizeof fmt_text, "Игрок не может унести с собой столько металла (максимум %d кг)", GetPlayerMaxStorage(to_player, STORAGE_METALL));
		SendClientMessage(playerid, 0xCECECEFF, fmt_text);
	}

	AddPlayerData(playerid, P_METALL, -, give_metall_count);
	UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_METALL));

	AddPlayerData(to_player, P_METALL, +, give_metall_count);
	UpdatePlayerDatabaseInt(to_player, "metall", GetPlayerData(to_player, P_METALL));

	format(fmt_text, sizeof fmt_text, "~b~-%d metall", give_metall_count);
	GameTextForPlayer(playerid, fmt_text, 4000, 1);

	format(fmt_text, sizeof fmt_text, "~b~+%d metall", give_metall_count);
	GameTextForPlayer(to_player, fmt_text, 4000, 1);

	format(fmt_text, sizeof fmt_text, "Вы передали металл игроку %s (%d кг.)", GetPlayerNameEx(to_player), give_metall_count);
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "Игрок %s передал Вам металл (%d кг.)", GetPlayerNameEx(playerid), give_metall_count);
	SendClientMessage(to_player, 0x3399FFFF, fmt_text);

	return 1;
}

/*CMD:givemyrub(playerid, params[])
{
	extract params -> new to_player, give; else return SendClientMessage(playerid, 0x999999FF, "Используйте: /givemyrub [id игрока] [кол-во]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(give <= 0) return SendClientMessage(playerid, 0x999999FF, "Неверное количество");

	if(give > GetPlayerData(playerid, P_DONATE_RUB))
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет такого количества донат-рублей");

	new fmt_text[80];

	AddPlayerData(playerid, P_DONATE_RUB, -, give);
	UpdatePlayerDatabaseInt(playerid, "rub", GetPlayerData(playerid, P_DONATE_RUB));

	AddPlayerData(to_player, P_DONATE_RUB, +, give);
	UpdatePlayerDatabaseInt(to_player, "rub", GetPlayerData(to_player, P_DONATE_RUB));

	format(fmt_text, sizeof fmt_text, "~b~-%d rub", give);
	GameTextForPlayer(playerid, fmt_text, 4000, 1);

	format(fmt_text, sizeof fmt_text, "~b~+%d rub", give);
	GameTextForPlayer(to_player, fmt_text, 4000, 1);

	format(fmt_text, sizeof fmt_text, "Вы передали донат рубли игроку %s в количестве %d", GetPlayerNameEx(to_player), give);
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "Игрок %s передал Вам донат-коины в количестве %d", GetPlayerNameEx(playerid), give);
	SendClientMessage(to_player, 0x3399FFFF, fmt_text);

	return 1;
}*/

CMD:givemycoins(playerid, params[])
{
	if (GetPlayerData(playerid, P_TOTALHOUR) < 30) {
		SendClientMessage(playerid, 0x999999FF, "Нужно отыграть 30 часов, чтобы передавать коины");
		return 1;
	}

	extract params -> new to_player, give; else return SendClientMessage(playerid, 0x999999FF, "Используйте: /givemycoins [id игрока] [кол-во]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(give <= 0) return SendClientMessage(playerid, 0x999999FF, "Неверное количество");

	if(give > GetPlayerData(playerid, P_COINS))
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет такого количества коинов");

	new fmt_text[80];

	AddPlayerData(playerid, P_COINS, -, give);
	UpdatePlayerDatabaseInt(playerid, "coins", GetPlayerData(playerid, P_COINS));

	AddPlayerData(to_player, P_COINS, +, give);
	UpdatePlayerDatabaseInt(to_player, "coins", GetPlayerData(to_player, P_COINS));

	format(fmt_text, sizeof fmt_text, "~b~-%d coin", give);
	GameTextForPlayer(playerid, fmt_text, 4000, 1);

	format(fmt_text, sizeof fmt_text, "~b~+%d coin", give);
	GameTextForPlayer(to_player, fmt_text, 4000, 1);

	format(fmt_text, sizeof fmt_text, "Вы передали монеты игроку %s в количестве %d", GetPlayerNameEx(to_player), give);
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "Игрок %s передал Вам монеты в количестве %d", GetPlayerNameEx(playerid), give);
	SendClientMessage(to_player, 0x3399FFFF, fmt_text);

	return 1;
}

CMD:givepatr(playerid, params[])
{
	extract params -> new to_player, give_ammo_count; else return SendClientMessage(playerid, 0x999999FF, "Используйте: /givepatr [id игрока] [кол-во патронов]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(give_ammo_count <= 0) return SendClientMessage(playerid, 0x999999FF, "Неверное количество патронов");

	if(give_ammo_count > GetPlayerData(playerid, P_AMMO))
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет такого количества патронов");

	new fmt_text[80];

	if((GetPlayerData(to_player, P_AMMO) + give_ammo_count) > GetPlayerMaxStorage(to_player, STORAGE_AMMO))
	{
		format(fmt_text, sizeof fmt_text, "Игрок не может унести с собой столько патронов (максимум %d шт)", GetPlayerMaxStorage(to_player, STORAGE_AMMO));
		SendClientMessage(playerid, 0xCECECEFF, fmt_text);
	}

	AddPlayerData(playerid, P_AMMO, -, give_ammo_count);
	UpdatePlayerDatabaseInt(playerid, "ammo", GetPlayerData(playerid, P_AMMO));

	AddPlayerData(to_player, P_AMMO, +, give_ammo_count);
	UpdatePlayerDatabaseInt(to_player, "ammo", GetPlayerData(playerid, P_AMMO));

	format(fmt_text, sizeof fmt_text, "~b~-%d patr.", give_ammo_count);
	GameTextForPlayer(playerid, fmt_text, 4000, 1);

	format(fmt_text, sizeof fmt_text, "~b~+%d patr.", give_ammo_count);
	GameTextForPlayer(to_player, fmt_text, 4000, 1);

	format(fmt_text, sizeof fmt_text, "Вы передали патроны игроку %s (%d шт.)", GetPlayerNameEx(to_player), give_ammo_count);
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "Игрок %s передал Вам патроны (%d шт.)", GetPlayerNameEx(playerid), give_ammo_count);
	SendClientMessage(to_player, 0x3399FFFF, fmt_text);

	return 1;
}

CMD:givedrugs(playerid, params[])
{
	extract params -> new to_player, give_drugs_count; else return SendClientMessage(playerid, 0x999999FF, "Используйте: /givedrugs [id игрока] [кол-во в г]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(give_drugs_count <= 0) return SendClientMessage(playerid, 0x999999FF, "Неверное количество наркотиков");

	if(give_drugs_count > GetPlayerData(playerid, P_DRUGS))
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет такого количества наркотиков");

	new fmt_text[80];

	if((GetPlayerData(to_player, P_DRUGS) + give_drugs_count) > GetPlayerMaxStorage(to_player, STORAGE_DRUGS))
	{
		format(fmt_text, sizeof fmt_text, "Игрок не может унести с собой столько наркотиков (максимум %d г)", GetPlayerMaxStorage(to_player, STORAGE_DRUGS));
		SendClientMessage(playerid, 0xCECECEFF, fmt_text);
	}

	AddPlayerData(playerid, P_DRUGS, -, give_drugs_count);
	UpdatePlayerDatabaseInt(playerid, "drugs", GetPlayerData(playerid, P_DRUGS));

	AddPlayerData(to_player, P_DRUGS, +, give_drugs_count);
	UpdatePlayerDatabaseInt(to_player, "drugs", GetPlayerData(playerid, P_DRUGS));

	format(fmt_text, sizeof fmt_text, "~b~-%d g.", give_drugs_count);
	GameTextForPlayer(playerid, fmt_text, 4000, 1);

	format(fmt_text, sizeof fmt_text, "~b~+%d g.", give_drugs_count);
	GameTextForPlayer(to_player, fmt_text, 4000, 1);

	format(fmt_text, sizeof fmt_text, "Вы передали патроны наркотики %s (%d г.)", GetPlayerNameEx(to_player), give_drugs_count);
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "Игрок %s передал Вам наркотики (%d г.)", GetPlayerNameEx(playerid), give_drugs_count);
	SendClientMessage(to_player, 0x3399FFFF, fmt_text);

	return 1;
}

CMD:msg(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) >= 6)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /msg [текст]");

		if(IsAIP(params))
		{
	   		SendClientMessage(playerid, -1, "Подозрения в рекламе!");
	       	return false;
	    }

		new fmt_str[128];

		format(fmt_str, sizeof fmt_str, "Администратор %s: %s", GetPlayerNameEx(playerid), params);
		SendClientMessageToAll(0xFFCD00FF, fmt_str);

		SendLog(playerid, LOG_TYPE_OOC_CHAT, params);
	}

	return 1;
}

alias:msg("o")

CMD:prefix(playerid, params[])
{
    if(GetPlayerAdminEx(playerid) < 13) return 1;


	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /prefix [id игрока] [префикс]");

	extract params -> new to_player, string: prefix[15];

	if(!IsPlayerConnected(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!strlen(prefix))
		return SendClientMessage(playerid, 0x999999FF, "Введите префикс");

	if(GetPlayerAdminEx(to_player))
	{

		format(GetPlayerData(to_player, P_PREFIX), 15, prefix);
        new fmt_msg[144];
        UpdatePlayerDatabaseString(to_player, "prefix", prefix);

        format(fmt_msg, sizeof(fmt_msg), "[A] %s установил префикс '%s' администратору: %s", GetPlayerNameEx(playerid), GetPlayerData(to_player, P_PREFIX), GetPlayerNameEx(to_player));
        SendMessageToAdmins(fmt_msg, -1);
        SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);
        return 1;
	}
	else
		return SendClientMessage(playerid, 0x999999FF, "Данный игрок не администратор!");

}

CMD:ears(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	g_admin_ears = g_admin_ears ^ true;

	new fmt_text[70];

	format(fmt_text, sizeof fmt_text, "Вы %s прослушку SMS", g_admin_ears ? "включили" : "выключили");
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] %s прослушку SMS", GetPlayerNameEx(playerid), playerid, g_admin_ears ? "включил" : "выключил");
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	format(fmt_text, sizeof fmt_text, "%s прослушку SMS", g_admin_ears ? "Включил" : "Выключил");

	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

/*CMD:ans(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) > 0 || GetPlayerHelperEx(playerid) > 0)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /ans [id игрока] [текст]");

		extract params -> new to_player, string: message[144 + 1];

		if(!IsPlayerConnected(to_player))
			return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

		if(!strlen(message))
		{
			SetPVarInt(playerid, "IdReport", params[0] + 1);
            Dialog
            (
            	playerid, DIALOG_AUTOREPORT, DIALOG_STYLE_LIST,
            	"{FFFFFF}Админ-помощник",
            	"Начал слежку за игроком\n\
            	Нарушений не замечено\n\
            	Игрок был наказан\n\
            	Не засоряйте пожалуйста репорт\n\
            	Приобретите данный пост(/buylead) или же подайте заявление на форум - forum.LIGHTS-MOBILE.RU\n\
            	Приобретите данный пост - /buyadm\n\
            	Чтобы получать новые промокоды подпишитесь на рассылку офф.группы - vk.com/truee.LIGHTS\n\
            	Наш сайт - LIGHTS-MOBILE.RU / Форум - forum.LIGHTS-MOBILE.RU / ВКонтакте - vk.com/truee.LIGHTS\n\
            	Вы можете подать жалобу на форум - forum.LIGHTS-MOBILE.RU\n\
            	Cвяжитесь с основателями проекта в ВКонтакте. Найти их страницы Вы можете в группе\n\
            	Пополнить счет Вы можете на сайте - LIGHTS-MOBILE.RU\n\
            	Пополните счёт аккаунта на сайте LIGHTS-MOBILE.RU и купите в /mm > Дополнительно",
            	"Далее", "Отмена"
            );
            SendClientMessage(playerid, -1, "Что бы ответить в ручную используйте /pm [id] [text]");
			return 1;
		}

		new fmt_str[128];

		format(fmt_str, sizeof fmt_str, "%s %s[%d] для %s[%d]: %s", GetPlayerAdminEx(playerid) ? "Администратор" : "Хелпер", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, message);
		if (to_player != playerid) {
			SendClientMessage(to_player, 0xFF9945FF, fmt_str);
		}
		SendMessageToAdmins(fmt_str, 0xFF9945FF);

		PlayerPlaySound(to_player, 1085, 0.0, 0.0, 0.0);

		strmid(RepInfo[to_player][Reptex], "",0,0,0);
	    DeletePVar(to_player, "RepUn");

		format(fmt_str, sizeof fmt_str, "Для %s[acc:%d]: %s", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), message);
		SendLog(playerid, LOG_TYPE_ADMIN_ANSWER, fmt_str);
	}
	return 1;
}
alias:ans("pm")*/

CMD:mp(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) >= 2)
	{
		if(!mp[MP_CREATE])
		{
			SendClientMessage(playerid, 0xCECECEFF, "Мероприятие не создано, создайте его");

			Dialog
			(
				playerid, DIALOG_MP_CREATE, DIALOG_STYLE_INPUT,
				"Создание мероприятия",
				"{FFFFFF}Для создания мероприятия введите\n"\
				"следующие параметры в окно ниже:\n\n"\
				"{33CC66}Параметры: Название, приз\n\n"\
				"{888888}Примечание:\n"\
				"{FFFFFF}- Название может содержать от 1 до 30 символов\n"\
				"- Приз от 1.000.000 до 10.000.000 (деньги)",
				"Далее", "Отмена"
			);
		}
		else
		{
			new fmt_str[1026];

		    format(fmt_str, sizeof fmt_str, \
			"{ffff00}1. {FFFFFF}Название: {ffff00}%s\n"\
			"{ffff00}2. {FFFFFF}Приз: {3399FF}$%d\n"\
			"{ffff00}3. {FFFFFF}Выдать всем скины\n"\
			"{ffff00}4. {FFFFFF}%s телепорт\n"\
			"{ffff00}5. {FFFFFF}Завершить мероприятие\n"\
			"{ffff00}6. {FFFFFF}Чат МП (/smp)",
		 	mp[MP_NAME],
		 	mp[MP_PRIZE],
		 	mp[MP_POS_X] ? ("Закрыть") : ("Открыть"));

			Dialog(playerid, DIALOG_MP_MENU, DIALOG_STYLE_LIST, "Панель МП", fmt_str, "Выбрать", "Закрыть");
		}
	}
	return 1;
}

CMD:gotomp(playerid, params[])
{
	if(!mp[MP_CREATE]) return SendClientMessage(playerid, 0xCECECEFF, "Мероптиятие не создано");

	if(!mp[MP_POS_X]) return SendClientMessage(playerid, 0xCECECEFF, "Координаты мероптиятия не выставлены");

	SetPlayerPos(playerid, mp[MP_POS_X], mp[MP_POS_Y], mp[MP_POS_Z]);

	SendClientMessage(playerid, -1, "Вы были телепортированы на мероприятие");

	SetPlayerData(playerid, P_LAST_MP, 1);

	return 1;
}

CMD:smp(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) >= 2)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /smp [текст]");

        new fmt_str[128];

		for(new i; i < MAX_PLAYERS; i ++)
		{
			if(!IsPlayerConnected(i)) continue;
			else if(!IsPlayerLogged(i)) continue;
			else if(GetPlayerData(i, P_LAST_MP) != 0) continue;

			format(fmt_str, sizeof fmt_str, "[МП] Администратор %s: %s", GetPlayerNameEx(playerid), params);
			SendClientMessage(playerid, 0x3399FFFF, fmt_str);
		}
	}
	return 1;
}


CMD:okay(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) >= 4)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используй: /okay [id игрока]");

		extract params -> new to_player;

		if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
			return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

		if(!GetPVarInt(to_player, "change_name_status"))
			return SendClientMessage(playerid, 0xCECECEFF, "Игрок не подавал запрос на смену ника");

		new player_name[20 + 1];
		GetPVarString(to_player, "change_name", player_name, sizeof(player_name));

		if(ChangePlayerName(to_player, player_name, true))
		{
			Dialog
			(
				to_player, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
				"{FFCD00}Имя изменено",
				"{66FF00}Заявка на изменение имени одобрена, новое имя установлено.\n\n"\
				"{FFFFFF}В следующий раз при входе в игру используйте свое новое имя. Для\n"\
				"этого нужно изменить его в окне клиента CRMP. Рекомендуем прямо\n"\
				"сейчас свернуть игру и сделать это.",
				"Ок", ""
			);
		}
		else SendClientMessage(playerid, 0xFF6600FF, "При смене ника произошла ошибка");

		new fmt_text[75];

		format(fmt_text, sizeof fmt_text, "[A] %s[%d] одобрил заявку на смену никнейма", GetPlayerNameEx(playerid), playerid);
		SendMessageToAdmins(fmt_text, 0x999999FF);

		DeletePVar(to_player, "change_name");
		DeletePVar(to_player, "change_name_status");

		format(fmt_text, sizeof fmt_text, "Одобрил заявку смены никнейма для %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
		SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);
	}

	return 1;
}

CMD:cc(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 7) return 1;

	for(new i = 0; i < 20; i++)
	{
		SendClientMessageToAll(-1, "");
	}
	SendClientMessageToAll(0xFFCD00FF, "Чат был очищен администрацией");

	new fmt_text[65];
	format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] очистил чат", GetPlayerNameEx(playerid), playerid);
	SendMessageToAdmins(fmt_text, 0x999999FF);

	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, "Очистил чат");

	return 1;
}

CMD:leave(playerid, params[])
{
	if(GetPlayerData(playerid, P_IMPROVEMENTS) < 2) return SendClientMessage(playerid, 0x999999FF, "Приобретите улучшение \"Решительность\", чтобы уволиться по собственному желанию");

	if(!GetPlayerTeamEx(playerid)) return SendClientMessage(playerid, 0x999999FF, "Вы не состоите в организации");

	new fmt_text[210];

	format
	(
		fmt_text, sizeof fmt_text,
		"{FFFFFF}Вы состоите в организации \"%s\".\n"\
		"Если Вы уволитесь, то потеряете все свои достижения в ней, такие как ранг.\n\n"\
		"Вы уверены, что хотите покинуть организацию?",
		GetTeamName(GetPlayerTeamEx(playerid))
	);

	Dialog(playerid, DIALOG_TEAM_LEAVE, DIALOG_STYLE_MSGBOX, "{FF5533}Предупреждение", fmt_text, "Да", "Нет");

	return 1;
}

CMD:awarn(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 9) return 1;
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /awarn [id игрока] [причина (необязательно)]");

	extract params -> new to_player, string:reason[66];

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!GetPlayerAdminEx(to_player))
	    return SendClientMessage(playerid, 0xCECECEFF, "Игрок не является администратором");

	if(GetPlayerAdminEx(to_player) > GetPlayerAdminEx(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Нельзя выдать предупреждение админу выше по рангу");

	//if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя выдать предупреждение самому себе");

	AddPlayerData(to_player, P_ADMIN_WARN, +, 1);

	new fmt_msg[144];
	format(fmt_msg, sizeof fmt_msg, "[A] %s выдал предупреждение администратору %s [%d|3]. Причина: %s", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player), GetPlayerData(to_player, P_ADMIN_WARN), reason);

	SendMessageToAdmins(fmt_msg, 0xFF5533FF);

	new uid = GetPlayerAccountID(to_player);
	new warns = GetPlayerData(to_player, P_ADMIN_WARN);

	format(fmt_msg, sizeof fmt_msg, "Выдал аварн %s[acc:%d] (%d/3). Причина: %d", GetPlayerNameEx(to_player), uid, warns, reason);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	if(warns >= 3)
	{
		SendClientMessage(to_player, 0xFF5533FF, "Ваш администраторский уровень аннулирован");

		warns = 0;

		SetPlayerData(to_player, P_ADMIN, 0);
		UpdatePlayerDatabaseInt(to_player, "admin", 0);
	}
	else SendClientMessage(to_player, 0xFF5533FF, "При получении 3-ёх предупреждений Вы будете сняты с поста администратора");

	format(fmt_msg, sizeof fmt_msg, "UPDATE accounts SET admin_warn=%d WHERE id=%d", warns, uid);
	mysql_query(mysql, fmt_msg, false);

	return 1;
}
CMD:unawarn(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 9) return 1;
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /unawarn [id игрока] [причина]");

	extract params -> new to_player, string: reason[66];
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

    if(!GetPlayerAdminEx(to_player))
	    return SendClientMessage(playerid, 0xCECECEFF, "Игрок не является администратором");

	SetPlayerData(to_player, P_ADMIN_WARN, 				0);

	UpdatePlayerDatabaseInt(to_player, "admin_warn", 	0);

	new fmt_msg[144];
	format(fmt_msg, sizeof fmt_msg, "[A] %s снял все предупреждения с администратора %s. Причина: %s", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player),reason);

	SendMessageToAdmins(fmt_msg, 0xFF5533FF);

	format(fmt_msg, sizeof fmt_msg, "Снял все аварны %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	return 1;
}
CMD:ahelp(playerid, params[])
{
	Dialog
	(
		playerid, DIALOG_HELPADM, DIALOG_STYLE_LIST,
		"{0099CC}Раздел помощи",
		"1. Команды администрации\n"\
		"2. Нормы нарушений\n"\
		"3. Правила админов\n"\
		"{FFFFCC}4. Лицензионное соглашение",
		"Выбрать", "Закрыть"
	);
	return 1;
}
CMD:cmdadm(playerid, params[])
{

    if(!strlen(params))
        return SendClientMessage(playerid, 0x999999FF, "Используйте: /cmdadm [ур. администратора]");

    extract params -> new type;

	switch(type)
    {
        case 1:
        {
			if(GetPlayerAdminEx(playerid) >= 1) SendClientMessage(playerid, 0xFFD700FF, "/ans - ответить игроку | /sp(off) - слежка за игроком");
			if(GetPlayerAdminEx(playerid) >= 1) SendClientMessage(playerid, 0xFFD700FF, "/slap - подбросить игрока | /a - админ чат | /admins - список администрации онлайн | /gm");

			return 1;
        }
        case 2:
        {
        	if(GetPlayerAdminEx(playerid) >= 2) SendClientMessage(playerid, 0xFFD700FF, "/weap - список оружия у игрока | /stats - статистика игрока | /hp - выдать хп");

            return 1;
        }
        case 3:
        {
			if(GetPlayerAdminEx(playerid) >= 3) SendClientMessage(playerid, 0xFFD700FF, "/kick - кикнуть игрока | /ears - включить прослушку SMS | /goto - тп к игроку | /spawn - заспавнить");

            return 1;
        }
        case 4:
        {
        	if(GetPlayerAdminEx(playerid) >= 4) SendClientMessage(playerid, 0xFFD700FF, "/mute - выдать бан чата | /unmute - снять бан чата");
    		if(GetPlayerAdminEx(playerid) >= 4) SendClientMessage(playerid, 0xFFD700FF, "/veh - заспавнить транспорт | /okay - одобрить заявку на смену ника");

            return 1;
        }
        case 5:
        {
       		if(GetPlayerAdminEx(playerid) >= 5) SendClientMessage(playerid, 0xFFD700FF, "/jail - посадить игрока | /unjail - выпустить игрока | /spcars - заспавнить весь транспорт");
			if(GetPlayerAdminEx(playerid) >= 5) SendClientMessage(playerid, 0xFFD700FF, "/skick - тихи кик игрока | /getv - тп транспорт игрока к игроку | /vget - тп авто к себе | /money - деньги игрока");

            return 1;
        }
        case 6:
        {
       		if(GetPlayerAdminEx(playerid) >= 6) SendClientMessage(playerid, 0xFFD700FF, "/warn - выдать варн | /unwarn - снять варн | /ban - выдать бан");
			if(GetPlayerAdminEx(playerid) >= 6) SendClientMessage(playerid, 0xFFD700FF, "/gethere - тп игрока к себе | /setfuel - заправить т/с | /o - общий чат");

            return 1;
        }
        case 7:
        {
       		if(GetPlayerAdminEx(playerid) >= 7) SendClientMessage(playerid, 0xFFD700FF, "Команды администратора пятого уровня.");
			if(GetPlayerAdminEx(playerid) >= 7) SendClientMessage(playerid, 0xFFD700FF, "/givegun - выдать оружие | /skin - выдать временный скин | /house - тп к дому");
			if(GetPlayerAdminEx(playerid) >= 7) SendClientMessage(playerid, 0xFFD700FF, "/biz - тп к бизу | /fuelstation - тп к АЗС | /cc - очистить чат | /vtp тп к т/с");
			if(GetPlayerAdminEx(playerid) >= 7) SendClientMessage(playerid, 0xFFD700FF, "/fly - вкл. fly режим | /get - информация об игроке | /lip - список аккаунтов с одним IP");

            return 1;
        }
        case 8:
        {
       		if(GetPlayerAdminEx(playerid) >= 8) SendClientMessage(playerid, 0xFFD700FF, "/templeader - сделать себя временным лд | /gzcolor - закрасить терру банды | /unban - разбанить игрока");

            return 1;
        }
        case 9:
        {
			if(GetPlayerAdminEx(playerid) >= 9) SendClientMessage(playerid, 0xFFD700FF, "/offban | /setskin | /getname");

            return 1;
        }
        case 10:
        {
       		if(GetPlayerAdminEx(playerid) >= 10) SendClientMessage(playerid, 0xFFD700FF, "/fullprods | /fullfuels");

            return 1;
        }
        case 11:
        {
            if(GetPlayerAdminEx(playerid) >= 11) SendClientMessage(playerid, 0xFFD700FF, "/createpromo | /agivelic | /setskills");

            return 1;
        }
        case 12:
        {
            if(GetPlayerAdminEx(playerid) >= 12) SendClientMessage(playerid, 0xFFD700FF, "/givecash | /givedonate | /setadmin | /admdown | /admup |/getlog");

            return 1;
        }
        case 13:
        {
            if(GetPlayerAdminEx(playerid) >= 13) SendClientMessage(playerid, 0xFFD700FF, "/doubling | /gmx | /sendcmd | /delacc | /addhouse | /addbiz");

            return 1;
        }
    }
    return SendClientMessage(playerid, 0x66CC00FF, "");
}

CMD:sp(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sp [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(GetPlayerSecretEx(to_player) >= 1)
		return SendClientMessage(playerid, 0xCECECEFF, "У игрока есть привелегия скрытность");

	if(GetPlayerSpectateData(playerid, S_PLAYER) == -1)
	{
		new Float: x,
			Float: y,
			Float: z,
			Float: a,
			skin = GetPlayerSkin(playerid);

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

		SetPlayerSpectateData(playerid, S_START_POS_X, x);
		SetPlayerSpectateData(playerid, S_START_POS_Y, y);
		SetPlayerSpectateData(playerid, S_START_POS_Z, z);
		SetPlayerSpectateData(playerid, S_START_ANGLE, a);

		SetPlayerSpectateData(playerid, S_START_INTERIOR, GetPlayerInterior(playerid));
		SetPlayerSpectateData(playerid, S_START_VIRTUAL_WORLD, GetPlayerVirtualWorld(playerid));

		SetSpawnInfo(playerid, 0, skin, x, y, z, a, 0, 0, 0, 0, 0, 0);
	}

	StartSpectate(playerid, to_player);

	new fmt_text[90];

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] следит за %s[%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	format(fmt_text, sizeof fmt_text, "Следит за %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:spoff(playerid, params[])
{
    if(GetPlayerAdminEx(playerid) < 1) return 1;

    if(GetPlayerSpectateData(playerid, S_PLAYER) != -1)
    {
        StopSpectate(playerid);
    }

    return 1;
}

CMD:weap(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 2) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /weap [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	new fmt_text[625],
		text[45];

	format
	(
		fmt_text,
		sizeof fmt_text,
		"\
		Слот\tОружие\t\tПатроны\n{FFFFFF}\
		"
	);

	for(new i = 0; i < 13; i++)
	{
		new weapon_id, weapon_ammo;

		GetPlayerWeaponData(to_player, i, weapon_id, weapon_ammo);

		format(text, sizeof text, "\n%d\t%s%s%d", i+1, GetWeaponName(weapon_id), weapon_dialog_tabulation[weapon_id], weapon_ammo);
		strcat(fmt_text, text);
	}

	Dialog
	(
		playerid,
		INVALID_DIALOG_ID,
		DIALOG_STYLE_MSGBOX,
		"{FFCC00}Оружия у игрока",
		fmt_text,
		"Закрыть",
		""
	);

	format(fmt_text, sizeof fmt_text, "Смотрит оружие %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:stats(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 2) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /stats [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	ShowPlayerStats(to_player, playerid);

	new fmt_text[55];

	format(fmt_text, sizeof fmt_text, "Смотрит статистику %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}



CMD:a(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) >= 1)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /a [текст]");

		new fmt_str[128];

		format(fmt_str, sizeof fmt_str, "%s %s[%d]: %s", GetPlayerData(playerid, P_PREFIX), GetPlayerNameEx(playerid), playerid, params);
		SendMessageToAdmins(fmt_str, 0x99CC00FF);

		SendLog(playerid, LOG_TYPE_ADMIN_CHAT, params);
	}

	return 1;
}

CMD:admins(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) == 0)
	{
		if(GetPlayerPremium(playerid) == 0)
		    return  SendClientMessage(playerid, 0xCECECEFF, "У Вас нет VIP аккаунта.");
	}

	new fmt_text[90],
		count;
	if(GetPlayerAdminEx(playerid) < 1) return 1;
	SendClientMessage(playerid, 0x66CC33FF, "Администраторы в сети:");
	for(new i; i < MAX_PLAYERS; i ++)
	{
		new admin_lvl = GetPlayerAdminEx(i);

		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(!(1 <= admin_lvl <= 13)) continue;

		format(fmt_text, sizeof fmt_text, "%s[%d] (%d lvl)", GetPlayerNameEx(i), i, admin_lvl);

		if(IsPlayerAFK(i))
			format(fmt_text, sizeof fmt_text, "%s {FF0000}AFK [%02d:%02d]", fmt_text, (floatround(GetPlayerData(i, P_AFK_TIME) / 60) % 60), GetPlayerData(i, P_AFK_TIME) % 60);

		else if(GetPlayerSpectateData(i, S_PLAYER) != -1)
			format(fmt_text, sizeof fmt_text, "%s {32a44b}/sp > %d", fmt_text, GetPlayerSpectateData(i, S_PLAYER));

		SendClientMessage(playerid, 0xFFFF00FF, fmt_text);
		count++;
	}
	if(!count) SendClientMessage(playerid, 0xffff00FF, "Нет администраторов в сети");

	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, "Смотрит список администрации");

	return 1;
}

CMD:admlist(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 13) return 1;

	new query[115],
		Cache: result,
		rows,
		admin,
		day_prev,
		day_last,
		name[21],
		last_login,
		last_date[6],
		list[sizeof query * 25 + 60] = "Имя\t\t\tРанг\tВ игре вчера\tВ игре сегодня\tСтатус\tПоследний Вход\n{FFFFFF}";

	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE admin > 0 ORDER BY last_login ASC");
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	for(new i; i < rows; i ++)
	{
		new day_time[4];

		admin = cache_get_field_content_int(i, "admin");
		day_prev = cache_get_field_content_int(i, "game_for_day_prev");
		day_last = cache_get_field_content_int(i, "game_for_day");

		day_time[0] = ConvertUnixTime(day_prev, CONVERT_TIME_TO_HOURS);
		day_time[1] = ConvertUnixTime(day_prev, CONVERT_TIME_TO_MINUTES);

		day_time[2] = ConvertUnixTime(day_last, CONVERT_TIME_TO_HOURS);
		day_time[3] = ConvertUnixTime(day_last, CONVERT_TIME_TO_MINUTES);

		last_login = cache_get_field_content_int(i, "last_login");
		timestamp_to_date(last_login, last_date[2], last_date[1], last_date[0], last_date[3], last_date[4], last_date[5]);


		cache_get_field_content(i, "name", name);

		new fix_tabulation[21] = "                    ";

		format
		(
			query, sizeof query,
			"\n{FFFFFF}%s%s\t%d ур.\t%s%d ч %d мин\t%s%d ч %d мин\t\t%s\t%02d.%02d.%d в %02d:%02d:%02d\n",
			name,
			fix_tabulation[strlen(name)],
			admin,
			day_time[0] >= 3 ? day_time[0] > 3 ? "{66CC33}" : "{FFCD00}" : "{FF5533}",
			day_time[0],
			day_time[1],
			day_time[2] >= 3 ? day_time[0] > 3 ? "{66CC33}" : "{FFCD00}" : "{FF5533}",
			day_time[2],
			day_time[3],
			IsPlayerConnected(GetPlayerID(name)) ? "{66CC33}Online" : "{FF5533}Offline",
			last_date[0], last_date[1], last_date[2],
			last_date[3], last_date[4], last_date[5]
		);

		strcat(list, query);
	}

	cache_delete(result);

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFCD00}Список администрации", list, "Закрыть", "");

	return 1;
}

CMD:admlist1(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 13) return 1;

	new query[115],
		Cache: result,
		rows,
		admin,
		day_prev,
		day_last,
		name[21],
		list[sizeof query * 25 + 60] = "Имя\t\t\tРанг\tВ игре вчера\tВ игре сегодня\tСтатус\n{FFFFFF}";

	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE admin > 0 ORDER BY admin DESC");
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	for(new i; i < rows; i ++)
	{
		new day_time[4];

		admin = cache_get_field_content_int(i, "admin");
		day_prev = cache_get_field_content_int(i, "game_for_day_prev");
		day_last = cache_get_field_content_int(i, "game_for_day");

		day_time[0] = ConvertUnixTime(day_prev, CONVERT_TIME_TO_HOURS);
		day_time[1] = ConvertUnixTime(day_prev, CONVERT_TIME_TO_MINUTES);

		day_time[2] = ConvertUnixTime(day_last, CONVERT_TIME_TO_HOURS);
		day_time[3] = ConvertUnixTime(day_last, CONVERT_TIME_TO_MINUTES);

		cache_get_field_content(i, "name", name);

		new fix_tabulation[21] = "                    ";

		format
		(
			query, sizeof query,
			"\n{FFFFFF}%s%s\t%d ур.\t%s%d ч %d мин\t%s%d ч %d мин\t\t%s",
			name,
			fix_tabulation[strlen(name)],
			admin,
			(day_time[0] >= 3) ? ((day_time[0] > 3) ? ("{66CC33}") : ("")) : ("{FF5533}"),
			day_time[0],
			day_time[1],
			(day_time[2] >= 3) ? ((day_time[2] > 3) ? ("{66CC33}") : ("")) : ("{FF5533}"),
			day_time[2],
			day_time[3],
			IsPlayerConnected(GetPlayerID(name)) ? "{66CC33}Online" : "{FF5533}Offline"
		);

		strcat(list, query);
	}

	cache_delete(result);

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Список администрации", list, "Закрыть", "");

	return 1;
}

CMD:get(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 7) return 1;

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /get [имя игрока]");

	if(!(3 <= strlen(params) <= 20))
		return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	extract params -> new string: name[21];

	new query[100];
	new Cache: result, user_id;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE name='%e' LIMIT 1", name);
	result = mysql_query(mysql, query);

	if(cache_num_rows())
		user_id = cache_get_field_content_int(0, "id");

	if(!cache_num_rows() || !user_id)
		return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден"), cache_delete(result);

	new reg_ip[16],
		last_ip[16],
		reg_date[6],
		reg_time = cache_get_field_content_int(0, "reg_time"),
		game_for_day = cache_get_field_content_int(0, "game_for_day"),
		game_for_day_prev = cache_get_field_content_int(0, "game_for_day_prev"),
		car_slots = cache_get_field_content_int(0, "car_slots");

	cache_get_field_content(0, "reg_ip", reg_ip);
	cache_get_field_content(0, "last_ip", last_ip);

	timestamp_to_date(reg_time, reg_date[2], reg_date[1], reg_date[0], reg_date[3], reg_date[4], reg_date[5]);

	new fmt_text[512];

	format
	(
		fmt_text, sizeof fmt_text,
		"\
		Номер аккаунта:\t\t%d\n\
		Наличные:\t\t\t%d\n\
		Осн. банк счет:\t\t%d\n\
		Уровень:\t\t\t%d\n\
		IP адрес (регистр.):\t\t%s\n\
		IP адрес (послед.):\t\t%s\n\
		Дата и время регистрации:\t\%02d.%02d.%d в %02d:%02d:%02d\n\
		Донат:\t\t\t\t%d (Всего: %d)\n\
		В игре сегодня:\t\t%d ч %d мин\n\
		В игре вчера:\t\t\t%d ч %d мин\n\n\
		Слоты для транспорта:\t%d\n\
		",
		user_id,
		cache_get_field_content_int(0, "money"),
		cache_get_field_content_int(0, "bank"),
		cache_get_field_content_int(0, "level"),
		reg_ip,
		last_ip,
		reg_date[0], reg_date[1], reg_date[2],
		reg_date[3], reg_date[4], reg_date[5],
		cache_get_field_content_int(0, "donate_current"),
		cache_get_field_content_int(0, "donate_total"),
		ConvertUnixTime(game_for_day, CONVERT_TIME_TO_HOURS),
		ConvertUnixTime(game_for_day, CONVERT_TIME_TO_MINUTES),
		ConvertUnixTime(game_for_day_prev, CONVERT_TIME_TO_HOURS),
		ConvertUnixTime(game_for_day_prev, CONVERT_TIME_TO_MINUTES),
		car_slots
	);

	cache_delete(result);

	mysql_format(mysql, query, sizeof query, "SELECT * FROM ownable_cars WHERE owner_id=%d", user_id);
	result = mysql_query(mysql, query, true);

	if(cache_num_rows())
	{
		for(new idx; idx < cache_num_rows(); idx ++)
		{
			new id = cache_get_field_content_int(idx, "id"),
				modelid = cache_get_field_content_int(idx, "model_id"),
				Float: x = cache_get_field_content_float(idx, "pos_x"),
				Float: y = cache_get_field_content_float(idx, "pos_y"),
				Float: z = cache_get_field_content_float(idx, "pos_z"),
				Float: health = cache_get_field_content_float(idx, "health"),
				number[7];

			cache_get_field_content(idx, "number", number);

			format(query, sizeof query, "\n%s [%d] - %s (%.1f, %.1f, %.1f) HP: %.1f", GetVehicleInfo(modelid - 400, VI_NAME), id, number, x, y, z, health);
			strcat(fmt_text, query);
		}
	}

	cache_delete(result);

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, name, fmt_text, "Закрыть", "");

	format(fmt_text, sizeof fmt_text, "Смотрит информацию об аккаунте %s[acc:%d]", name, user_id);
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, fmt_text);

	return 1;
}

CMD:money(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /money [имя игрока]");

	if(!(3 <= strlen(params) <= 20))
		return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	extract params -> new string: name[21];

	new query[90];
	new Cache: result, user_id;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE name='%e' LIMIT 1", name);
	result = mysql_query(mysql, query);

	if(cache_num_rows())
		user_id = cache_get_field_content_int(0, "id");

	if(!cache_num_rows() || !user_id)
		return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден"), cache_delete(result);

	new player_cash = cache_get_field_content_int(0, "money"),
		player_bank = cache_get_field_content_int(0, "bank"),
		player_wage = cache_get_field_content_int(0, "wage"),
		player_business = cache_get_field_content_int(0, "business"),
		player_fuel_st = cache_get_field_content_int(0, "fuel_st"),
		bank_accounts_money,
		fmt_text[310];

	cache_delete(result);

	mysql_format(mysql, query, sizeof query, "SELECT * FROM bank_accounts WHERE uid='%d'", user_id);
	result = mysql_query(mysql, query);

	if(cache_num_rows())
	{
		for(new i = 0; i < cache_num_rows(); i++)
			bank_accounts_money += cache_get_field_content_int(i, "balance");
	}

	cache_delete(result);

	format
	(
		fmt_text, sizeof fmt_text,
		"\
		Наличные деньги:\t\t\t%d руб\n\
		Осн.банковский счёт:\t\t\t%d руб\n\
		Временный З/П счёт:\t\t\t%d руб\n\n\
		На всех доп. банк. счетах:\t\t%d руб\n\n\
		",
		player_cash, player_bank, player_wage, bank_accounts_money
	);

	if(player_business != -1)
	{
		mysql_format(mysql, query, sizeof query, "SELECT balance FROM business WHERE owner_id='%d' LIMIT 1", user_id);
		result = mysql_query(mysql, query);

		format(query, sizeof query, "На счету бизнеса:\t\t\t%d руб\n", cache_get_row_int(0, 0));
		strcat(fmt_text, query);

		cache_delete(result);
	}
	else strcat(fmt_text, "Нет бизнеса\n");
	cache_delete(result);
	if(player_fuel_st != -1)
	{
		mysql_format(mysql, query, sizeof query, "SELECT balance FROM fuel_stations WHERE owner_id='%d' LIMIT 1", user_id);
		result = mysql_query(mysql, query);

		format(query, sizeof query, "На счету АЗС:\t\t\t\t%d руб", cache_get_row_int(0, 0));
		strcat(fmt_text, query);

		cache_delete(result);
	}
	else strcat(fmt_text, "Нет АЗС");

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, name, fmt_text, "Закрыть", "");

	format(fmt_text, sizeof fmt_text, "Смотрит информацию о деньгах %s[acc:%d]", params, user_id);
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, fmt_text);

	return 1;
}

CMD:getlog(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 12) return 1;

	if(!strlen(params))
	{
		SendClientMessage(playerid, 0xCECECEFF, "Используйте: /getlog [имя игрока] [идентификатор лога] [кол-во дней]");
		SendClientMessage(playerid, 0xCECECEFF, "Идентификаторы:");
		SendClientMessage(playerid, 0xCECECEFF, "1 - Администраторский чат");
		SendClientMessage(playerid, 0xCECECEFF, "2 - Ответы на репорты");
		SendClientMessage(playerid, 0xCECECEFF, "3 - Администраторские действия");
		SendClientMessage(playerid, 0xCECECEFF, "4 - Выдача администраторских прав");
		SendClientMessage(playerid, 0xCECECEFF, "5 - Выдача лидерских прав");
		SendClientMessage(playerid, 0xCECECEFF, "6 - СМС сообщения");
		SendClientMessage(playerid, 0xCECECEFF, "7 - Сообщения в общий чат");
		SendClientMessage(playerid, 0xCECECEFF, "8 - Вопросы/жалобы в репорт");
		SendClientMessage(playerid, 0xCECECEFF, "9 - Действия на посту лидера/заместителя");
		SendClientMessage(playerid, 0xCECECEFF, "10 - Действия главного администратора");

		return 1;
	}

	extract params -> new string:name[21], log_id, time_limit;

	if(!(LOG_TYPE_ADMIN_CHAT <= log_id <= LOG_TYPE_SUPERADMIN_ACTION))
		return SendClientMessage(playerid, 0x999999FF, "Неверный идентификатор");

	if(!(0 <= time_limit <= 30))
		return SendClientMessage(playerid, 0x999999FF, "Количество дней от 1 до 30. Используйте 0 для отображения всех действий");

	if(!(3 <= strlen(name) <= 20))
		return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	new query[144];
	new Cache: result,
		rows,
		user_id,
		admin;

	mysql_format(mysql, query, sizeof query, "SELECT id, admin FROM accounts WHERE name='%e' LIMIT 1", name);
	result = mysql_query(mysql, query);

	rows = cache_num_rows();

	if(rows)
	{
		user_id = cache_get_row_int(0, 0);
		admin = cache_get_row_int(0, 1);
	}

	cache_delete(result);

	if(rows && user_id)
	{
		if(GetPlayerAdminEx(playerid) >= admin)
		{
			mysql_format(mysql, query, sizeof query, "SELECT * FROM action_log WHERE acc_id=%d AND type=%d", user_id, log_id);

			new fmt_text[35];

			if(time_limit)
			{
				format(fmt_text, sizeof fmt_text, " AND time >= %d", gettime() - (time_limit * 86400));
				strcat(query, fmt_text);
			}

			result = mysql_query(mysql, query, true);

			rows = cache_num_rows();

			if(rows)
			{
				new log_name[10][37] =
				{
					"Администраторский чат",
					"Ответы на репорты",
					"Администраторские действия",
					"Выдача администраторских прав",
					"Выдача лидерских прав",
					"СМС сообщения",
					"Сообщения в общий чат",
					"Вопросы/жалобы в репорт",
					"Действия на посту лидера/заместителя",
					"Действия главного администратора"
				};

				format(query, sizeof query, "Найденные записи по параметру \"%s\" для игрока %s", log_name[log_id - 1], name);

				if(time_limit)
				{
					format(fmt_text, sizeof fmt_text, " за последние %d дн.", time_limit);
					strcat(query, fmt_text);
				}

				SendClientMessage(playerid, 0x66CC33FF, query);

				for(new idx; idx < rows; idx ++)
				{
					new desc[144],
						time[6],
						uip[17];

					cache_get_field_content(idx, "description", desc);
					cache_get_field_content(idx, "uip", uip);

					timestamp_to_date(cache_get_field_content_int(idx, "time"), time[2], time[1], time[0], time[3], time[4], time[5]);

					format
					(
						query, sizeof query,
						"#%d | %02d.%02d.%d в %02d:%02d:%02d | %s | %s",
						cache_get_field_content_int(idx, "id"),
						time[0], time[1], time[2], time[3], time[4], time[5],
						uip, desc
					);

					SendClientMessage(playerid, 0xFFCD00FF, query);
				}

				format(query, sizeof query, "Общее количество записей: %d", rows);
				SendClientMessage(playerid, 0x66CC33FF, query);
			}
			else SendClientMessage(playerid, 0x999999FF, "Записи в базе данных по данным параметрам не найдены");

			cache_delete(result);
		}
		else SendClientMessage(playerid, 0x999999FF, "Вы не можете просматривать логи администратора выше Вас рангом");
	}
	else SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	return 1;
}

CMD:lip(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 7) return 1;

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /lip [IP адрес]");

	new query[130],
		fmt_text[2300],
		Cache: result,
		rows;

	mysql_format(mysql, query, sizeof query, "SELECT name, reg_ip FROM accounts WHERE reg_ip = '%s' OR last_ip = '%s'", params, params);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	if(rows)
	{
		new l_acc_count;

		format(fmt_text, sizeof fmt_text, "IP: %s\n", params);

		for(new idx; idx < rows; idx ++)
		{
			new name[21],
				ip[17];

			cache_get_row(idx, 0, name);
			cache_get_row(idx, 1, ip);

			new bool: is_reg = false;

			if(!strcmp(ip, params, true))
				is_reg = true;

			else
				l_acc_count ++;

			format
			(
				query, sizeof query,
				"\n{FFFFFF}%d. %s - %s %s",
				idx + 1,
				name,
				is_reg ? "Reg" : "Last",
				IsPlayerConnected(GetPlayerID(name)) ? "{66CC33}[online]" : "{888888}[offline]"
			);

			strcat(fmt_text, query);
		}

		format(query, sizeof query, "{FF9900}Найдено аккаунтов: %d / %d", l_acc_count, rows);

		Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, query, fmt_text, "Закрыть", "");
	}
	else SendClientMessage(playerid, 0x999999FF, "Данный IP адрес не найден в базе данных");

	cache_delete(result);

	return 1;
}

CMD:kick(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;
	

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /kick [id игрока] [причина (необязательно)]");

	extract params -> new to_player;

	if(!IsPlayerConnected(to_player)) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	else if(GetPlayerAdminEx(to_player) > GetPlayerAdminEx(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя кикнуть администратора выше по рангу");

	new reason[31];
	sscanf(params, "{d}s[30]", reason);

	if(AntiSliv(playerid, "/kick")) return true;

	new fmt_msg[128];
	format(fmt_msg, sizeof fmt_msg, "Администратор %s кикнул игрока %s", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));

	if(strlen(reason) > 0)
		format(fmt_msg, sizeof fmt_msg, "%s. Причина: %s", fmt_msg, reason);

	SendClientMessageToAll(0xFF5533FF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Кикнул %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	Kick(to_player);

	return 1;
}

CMD:skick(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 13) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /skick [id игрока]");

	if(!IsPlayerConnected(to_player)) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	else if(GetPlayerAdminEx(to_player) > GetPlayerAdminEx(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя кикнуть администратора выше по рангу");

	new fmt_msg[128];

	if(GetPlayerAdminEx(playerid) < 6)
	{
		format(fmt_msg, sizeof fmt_msg, "[A] Администратор %s[%d] кикнул %s[%d] без лишнего шума", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
		SendMessageToAdmins(fmt_msg, 0x999999FF);
	}

	format(fmt_msg, sizeof fmt_msg, "Без шума кикнул %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	Kick(to_player);
	return 1;
}

CMD:mute(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;
	

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /mute [id игрока] [время в минутах] [причина (необязательно)]");

	extract params -> new to_player, mute_time, string: reason[30];

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!(1 <= mute_time <= 360)) return SendClientMessage(playerid, 0xCECECEFF, "Время должно быть не меньше 1 и не больше 360 минут");
	if(GetPlayerData(to_player, P_MUTE) > 0) return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока уже есть мут");
	if(GetPlayerAdminEx(to_player) > GetPlayerAdminEx(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя поставить затычку администратору выше по рангу");
	//else if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя поставить затычку самому себе");

	if(AntiSliv(playerid, "/mute")) return true;

	new fmt_msg[128];
	format(fmt_msg, sizeof fmt_msg, "Администратор %s поставил затычку игроку %s на %d мин", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player), mute_time);

	if(strlen(reason))
		format(fmt_msg, sizeof fmt_msg, "%s. Причина: %s", fmt_msg, reason);

	SendClientMessageToAll(0xFF5533FF, fmt_msg);

	SetPlayerData(to_player, P_MUTE, mute_time * 60);
	UpdatePlayerDatabaseInt(to_player, "mute", mute_time * 60);

	SendClientMessage(to_player, 0xCECECEFF, "Время до окончания бана чата: {CCCC00}/time");

	format(fmt_msg, sizeof fmt_msg, "Выдал %s[acc:%d] блокировку чата на %d мин. Причина: %s",
	GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), mute_time, reason);

	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	return 1;
}

CMD:unmute(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /unmute [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	else if(GetPlayerData(to_player, P_MUTE) <= 0) return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока нет мута");
	//else if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя снять затычку с самого себя");

	new fmt_msg[80];
	format(fmt_msg, sizeof fmt_msg, "Администратор %s снял затычку с игрока %s", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendClientMessageToAll(0xFF5533FF, fmt_msg);

	SetPlayerData(to_player, P_MUTE, 0);
	UpdatePlayerDatabaseInt(to_player, "mute", 0);

	SendClientMessage(to_player, 0x66CC00FF, "Доступ в чат восстановлен");

	format(fmt_msg, sizeof fmt_msg, "Снял блокировку чата у %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	return 1;
}

CMD:jail(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;
	

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /jail [id игрока] [время в минутах] [причина (необязательно)]");

	extract params -> new to_player, jail_time, string: reason[30];

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!(1 <= jail_time <= 360)) return SendClientMessage(playerid, 0xCECECEFF, "Время должно быть не меньше 1 и не больше 360 минут");
	if(GetPlayerData(to_player, P_JAIL) > 0) return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок уже сидит в тюрьме");
	//else if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя поставить затычку самому себе");

	if(AntiSliv(playerid, "/jail")) return true;

	new fmt_msg[128];
	format(fmt_msg, sizeof fmt_msg, "Администратор %s посадил в тюрьму игрока %s на %d мин", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player), jail_time);

	if(strlen(reason))
		format(fmt_msg, sizeof fmt_msg, "%s. Причина: %s", fmt_msg, reason);

	SendClientMessageToAll(0xFF5533FF, fmt_msg);

	SendClientMessage(to_player, 0xCECECEFF, "Время до окончания заключения: {CCCC00}/time");

	JailPlayer(to_player, jail_time);

	format(fmt_msg, sizeof fmt_msg, "Посадил в тюрьму %s[acc:%d] на %d мин. Причина: %s",
	GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), jail_time, reason);

	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	return 1;
}

CMD:unjail(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /unjail [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	else if(GetPlayerData(to_player, P_JAIL) <= 0) return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок не сидит в тюрьме");
	//else if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя снять затычку с самого себя");

	new fmt_msg[80];
	format(fmt_msg, sizeof fmt_msg, "Администратор %s выпустил из тюрьмы игрока %s", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendClientMessageToAll(0xFF5533FF, fmt_msg);

	SendClientMessage(to_player, 0x66CC00FF, "Вы были выпущены на свободу");

	UnjailPlayer(to_player);

	format(fmt_msg, sizeof fmt_msg, "Выпустил из тюрьмы %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	return 1;
}
CMD:getcam(playerid, params[])
{
						new
                        Float:fPX, Float:fPY, Float:fPZ,
                        Float:fVX, Float:fVY, Float:fVZ,
                        Float:object_x, Float:object_y, Float:object_z;

		                const
		                Float:fScale = 5.0;

		                GetPlayerCameraPos(playerid, fPX, fPY, fPZ);
		                GetPlayerCameraFrontVector(playerid, fVX, fVY, fVZ);

		                object_x = fPX + floatmul(fVX, fScale);
		                object_y = fPY + floatmul(fVY, fScale);
		                object_z = fPZ + floatmul(fVZ, fScale);

		                format(sctring, sizeof(sctring), "CameraPos: %f,%f,%f | LookAt: %f,%f,%f",fPX,fPY,fPZ,object_x,object_y,object_z);
		                print(sctring);
		                SendClientMessage(playerid, -1, sctring);
						return 1;
}
CMD:ban(playerid, params[])
{

	if(GetPlayerAdminEx(playerid) < 6) return 1;
	
    
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /ban [id игрока] [срок в дняй] [причина (необязательно)]");

	extract params -> new to_player, ban_time, string:reason[30];

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	new max_days = GetPlayerAdminEx(playerid) > 4 ? 365 : 30;

	new fmt_msg[128];

	if(!(1 <= ban_time <= max_days))
	{
		format(fmt_msg, sizeof fmt_msg, "Срок бана может быть от 1 до %d дней", max_days);

		return SendClientMessage(playerid, 0xCECECEFF, fmt_msg);
	}

	if(GetPlayerAdminEx(to_player) > GetPlayerAdminEx(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Нельзя забанить администратора выше по рангу");
	//if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя забанить самого себя");

	if(AntiSliv(playerid, "/ban")) return true;

	format(fmt_msg, sizeof fmt_msg, "Администратор %s забанил игрока %s на %d дней", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player), ban_time);

	if(strlen(reason) > 0)
		format(fmt_msg, sizeof fmt_msg, "%s. Причина: %s", fmt_msg, reason);

	SendClientMessageToAll(0xFF5533FF, fmt_msg);

	if(!strlen(reason)) reason = "None";

	format(fmt_msg, sizeof fmt_msg, "Забанил %s[acc:%d] на %d дней. Причина %s", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), reason);

	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, fmt_msg);

	AddBan(GetPlayerAccountID(to_player), gettime(), ban_time, GetPlayerIpEx(to_player), reason, GetPlayerNameEx(playerid));
	BanEx(to_player, reason);
	return 1;
}

CMD:unban(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 8) return 1;

	extract params -> new string: player_name[21];

	if(!strlen(player_name)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /unban [ник игрока]");

	new query[80],
		Cache: result,
		rows,
		uid,
		uip[16];

	mysql_format(mysql, query, sizeof query, "SELECT id, last_ip FROM accounts WHERE name='%s'", player_name);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	if(rows)
	{
		uid = cache_get_row_int(0, 0);
		cache_get_row(0, 1, uip);
	}

	cache_delete(result);

	if(!rows || !uid) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	mysql_format(mysql, query, sizeof query, "SELECT * FROM ban_list WHERE user_id=%d", uid);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	cache_delete(result);

	if(!rows) return SendClientMessage(playerid, 0x999999FF, "Аккаунт игрока не заблокирован");

	mysql_format(mysql, query, sizeof query, "DELETE FROM ban_list WHERE user_id=%d", uid);
	mysql_query(mysql, query, false);

	format(query, sizeof query, "unbanip %s", uip);
	SendRconCommand(query);

	SendRconCommand("reloadbans");

	format(query, sizeof query, "Администратор %s разбанил игрока %s", GetPlayerNameEx(playerid), player_name);

	SendClientMessageToAll(0xFF5533FF, query);

	format(query, sizeof query, "Разбанил %s[acc:%d]", player_name, uid);
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, query);

	return 1;
}

CMD:setskin(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 9) return 1;

	extract params -> new to_player, skin_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setskin [id игрока] [id скина]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(GetPlayerTeamEx(to_player)) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя сменить скин игроку, находящемуся в организации");

	if(!(1 <= skin_id <= 299)) return SendClientMessage(playerid, 0xCECECEFF, "ID скина от 1 до 299");


	SetPlayerData(to_player, P_SKIN, skin_id);
	UpdatePlayerDatabaseInt(to_player, "skin", skin_id);

	SetPlayerSkinInit(to_player);

	new fmt_text[100];

	format(fmt_text, sizeof fmt_text, "Администратор %s установил Вам скин №%d", GetPlayerNameEx(playerid), skin_id);
	SendClientMessage(to_player, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "Вы установили игроку %s скин №%d", GetPlayerNameEx(to_player), skin_id);
	SendClientMessage(playerid, -1, fmt_text);
	{
		format(fmt_text, sizeof fmt_text, "[A] %s[%d] установил %s[%d] скин №%d", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, skin_id);
		SendMessageToAdmins(fmt_text, 0xCECECEFF);
	}

	format(fmt_text, sizeof fmt_text, "Установил %s[acc:%d] скин %d", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), skin_id);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:offban(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 9) return 1;

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /offban [ник игрока] [кол-во дней] [причина (необязательно)]");

	extract params -> new string: player_name[21], days, string: reason[30];

	if(!(1 <= days <= 365)) return SendClientMessage(playerid, 0x999999FF, "Количество дней от 1 до 365");

	if(IsPlayerConnected(GetPlayerID(player_name))) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем находится на сервере");

	new query[144],
		Cache: result,
		rows,
		uid,
		admin,
		uip[16];

	mysql_format(mysql, query, sizeof query, "SELECT id, admin, last_ip FROM accounts WHERE name='%s'", player_name);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	if(rows)
	{
		uid = cache_get_row_int(0, 0);
		admin = cache_get_row_int(0, 1);
		cache_get_row(0, 2, uip);
	}

	cache_delete(result);

	if(!rows || !uid) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	if(GetPlayerAdminEx(playerid) < admin) return SendClientMessage(playerid, 0x999999FF, "Нельзя забанить администратора выше по рангу");

	mysql_format(mysql, query, sizeof query, "SELECT * FROM ban_list WHERE user_id=%d", uid);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	cache_delete(result);

	if(rows) return SendClientMessage(playerid, 0x999999FF, "Аккаунт игрока уже заблокирован");

	if(AntiSliv(playerid, "/offban")) return true;

	format(query, sizeof query, "Администратор %s забанил оффлайн игрока %s на %d дней", GetPlayerNameEx(playerid), player_name, days);

	if(strlen(reason) > 0)
		format(query, sizeof query, "%s. Причина: %s", query, reason);

	if(!strlen(reason)) reason = "None";

	SendClientMessageToAll(0xFF5533FF, query);

	format(query, sizeof query, "Оффлайн забанил %s[acc:%d] на %d дней. Причина: %s", player_name, uid, days, reason);
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, query);

	format(reason, sizeof reason, "[OFFLINE]%s", reason);

	AddBan(uid, gettime(), days, uip, reason, GetPlayerNameEx(playerid));

	return 1;
}

CMD:delacc(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 13) return 1;

	extract params -> new string:name[21], string:reason[30]; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /delacc [имя игрока] [причина]");

	new query[128],
		Cache: result,
		admin,
		rows;

	mysql_format(mysql, query, sizeof query, "SELECT admin FROM accounts WHERE name='%s' LIMIT 1", name);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	if(rows)
	{
		admin = cache_get_row_int(0, 0);

		if(admin && GetPlayerAdminEx(playerid) < 5)
		{
			SendClientMessage(playerid, 0x999999FF, "Вы не можете удалить аккаунт администратора выше Вас рангом");

			cache_delete(result);

			format(query, sizeof query, "Попытался удалить аккаунт %s", name);
			SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, query);

			return 1;
		}

		mysql_format(mysql, query, sizeof query, "DELETE FROM accounts WHERE name='%s' LIMIT 1", name);
		mysql_query(mysql, query, false);

		format(query, sizeof query, "Администратор %s удалил аккаунт игрока %s", GetPlayerNameEx(playerid), name);

		if(strlen(reason) > 0)
		{
			new fmt_text[45];

			format(fmt_text, sizeof fmt_text, ". Причина: %s", reason);
			strcat(query, fmt_text);
		}

		SendClientMessageToAll(0xFF5533FF, query);

		format(query, sizeof query, "Удалил аккаунт %s. Причина: %s", name, reason);
		SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, query);
	}
	else SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	cache_delete(result);

	return 1;
}

CMD:skin(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 7) return 1;

	extract params -> new to_player, skin_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /skin [id игрока] [id скина]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!(-1 <= skin_id <= 299) || skin_id == 0) return SendClientMessage(playerid, 0x999999FF, "ID скина от 1 до 299");

	if(skin_id != -1)
		SetPlayerSkin(to_player, skin_id);
	else
		SetPlayerSkin(to_player, GetPlayerSkinEx(to_player));

	new fmt_text[100];

	format(fmt_text, sizeof fmt_text, "Администратор %s выдал Вам %s скин", GetPlayerNameEx(playerid), skin_id != -1 ? "временный" : "прежний");
	SendClientMessage(to_player, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "Вы выдали игроку %s %s скин", GetPlayerNameEx(to_player), skin_id != -1 ? "временный" : "прежний");
	SendClientMessage(playerid, -1, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		if(skin_id != -1)
			format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] выдал %s[%d] скин №%d", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, skin_id);
		else
			format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] выдал %s[%d] прежний скин", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	format(fmt_text, sizeof fmt_text, "Выдал %s[acc:%d] скин %d", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), skin_id);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:house(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 7) return 1;

	extract params -> new house_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /house [номер дома]");

	if(!(0 <= house_id <= g_house_loaded-1)) return SendClientMessage(playerid, 0xCECECEFF, "Данного дома не существует на сервере");

	new Float: x,
		Float: y,
		Float: z,
		Float: angle;

	if(GetHouseData(house_id, H_ENTRACE) != -1)
	{
		EnterPlayerToEntrance(playerid, GetHouseData(house_id, H_ENTRACE));

		x = GetHouseData(house_id, H_POS_X);
		y = GetHouseData(house_id, H_POS_Y);
		z = GetHouseData(house_id, H_POS_Z);
	}
	else
	{
		x = GetHouseData(house_id, H_EXIT_POS_X);
		y = GetHouseData(house_id, H_EXIT_POS_Y);
		z = GetHouseData(house_id, H_EXIT_POS_Z);
		angle = GetHouseData(house_id, H_EXIT_ANGLE);
	}
	SetPlayerPosEx(playerid, x, y, z, angle);

	new fmt_text[35];

	format(fmt_text, sizeof fmt_text, "Вы телепортировались к дому №%d", house_id);
	SendClientMessage(playerid, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "Телепортировался к дому %d", house_id);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:biz(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 7) return 1;

	extract params -> new biz_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /biz [номер бизнеса]");

	if(!(0 <= biz_id <= g_business_loaded-1)) return SendClientMessage(playerid, 0xCECECEFF, "Данного бизнеса не существует на сервере");

	SetPlayerPosEx
	(
		playerid,
		GetBusinessData(biz_id, B_EXIT_POS_X),
		GetBusinessData(biz_id, B_EXIT_POS_Y),
		GetBusinessData(biz_id, B_EXIT_POS_Z),
		GetBusinessData(biz_id, B_EXIT_ANGLE)
	);

	new fmt_text[35];

	format(fmt_text, sizeof fmt_text, "Вы телепортировались к бизнесу №%d", biz_id);
	SendClientMessage(playerid, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "Телепортировался к бизнесу %d", biz_id);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:fuelstation(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 7) return 1;

	extract params -> new fs_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /fuelstation [номер АЗС]");

	if(!(0 <= fs_id <= g_fuel_station_loaded-1)) return SendClientMessage(playerid, 0xCECECEFF, "Данной АЗС не существует на сервере");

	SetPlayerPosEx
	(
		playerid,
		GetFuelStationData(fs_id, FS_POS_X),
		GetFuelStationData(fs_id, FS_POS_Y),
		GetFuelStationData(fs_id, FS_POS_Z),
		0.0
	);

	new fmt_text[35];

	format(fmt_text, sizeof fmt_text, "Вы телепортировались к АЗС №%d", fs_id);
	SendClientMessage(playerid, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "Телепортировался к АЗС %d", fs_id);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:inter(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;

	extract params -> new to_player, interior; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /inter [id игрока] [интерьер]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	SetPlayerInterior(to_player, interior);

	new fmt_text[110];

	format(fmt_text, sizeof fmt_text, "Вы установили %s[%d] интерьер %d", GetPlayerNameEx(to_player), to_player, interior);
	SendClientMessage(playerid, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "%s[%d] установил Вам интерьер %d", GetPlayerNameEx(playerid), playerid, interior);
	SendClientMessage(to_player, -1, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] установил %s[%d] интерьер №%d", GetPlayerNameEx(playerid), playerid,
		GetPlayerNameEx(to_player), to_player, interior);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	LinkVehicleToInterior(GetPlayerData(to_player, P_BUY_CAR), interior);

	format(fmt_text, sizeof fmt_text, "Установил %s[acc:%d] интерьер %d", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), interior);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:world(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;

	extract params -> new to_player, world; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /world [id игрока] [вирт.мир]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	SetPlayerVirtualWorld(to_player, world);

	new fmt_text[110];

	format(fmt_text, sizeof fmt_text, "Вы установили %s[%d] вирт.мир %d", GetPlayerNameEx(to_player), to_player, world);
	SendClientMessage(playerid, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "%s[%d] установил Вам вирт.мир %d", GetPlayerNameEx(playerid), playerid, world);
	SendClientMessage(to_player, -1, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] установил %s[%d] вирт.мир №%d", GetPlayerNameEx(playerid), playerid,
		GetPlayerNameEx(to_player), to_player, world);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	format(fmt_text, sizeof fmt_text, "Установил %s[acc:%d] вирт.мир %d", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), world);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:warn(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;
	
    
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /warn [id игрока] [причина (необязательно)]");

	extract params -> new to_player, string:reason[66];

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(GetPlayerAdminEx(to_player) > GetPlayerAdminEx(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Нельзя выдать предупреждение админу выше по рангу");

	//if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя выдать предупреждение самому себе");

	if(AntiSliv(playerid, "/warn")) return true;

	AddPlayerData(to_player, P_WARN, +, 1);
	SetPlayerData(to_player, P_WARN_TIME, gettime() + (86400 * 10));

	new fmt_msg[128];
	format(fmt_msg, sizeof fmt_msg, "Администратор %s выдал предупреждение игроку %s [%d|3]", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player), GetPlayerData(to_player, P_WARN));

	if(strlen(reason) > 0)
		format(fmt_msg, sizeof fmt_msg, "%s. Причина: %s", fmt_msg, reason);

	SendClientMessageToAll(0xFF5533FF, fmt_msg);

	InvitePlayer(to_player, 0, 0, true);

	new uid = GetPlayerAccountID(to_player);
	new warns = GetPlayerData(to_player, P_WARN);
	new warns_time = GetPlayerData(to_player, P_WARN_TIME);

	format(fmt_msg, sizeof fmt_msg, "Выдал варн %s[acc:%d] (%d/3). Причина: %d", GetPlayerNameEx(to_player), uid, warns, reason);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	if(warns >= 3)
	{
		SendClientMessage(to_player, 0xFF5533FF, "Аккаунт заблокирован на 10 дней");

		warns =
		warns_time = 0;

		AddBan(uid, gettime(), 10, GetPlayerIpEx(to_player), "получено 3 варна", GetPlayerNameEx(playerid));
		BanEx(to_player, "получено 3 варна");
	}
	else Kick:(to_player);

	format(fmt_msg, sizeof fmt_msg, "UPDATE accounts SET warn=%d,warn_time=%d WHERE id=%d", warns, warns_time, uid);
	mysql_query(mysql, fmt_msg, false);

	return 1;
}

CMD:unwarn(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /warn [id игрока] [причина (необязательно)]");

	extract params -> new to_player, string: reason[66];
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	SetPlayerData(to_player, P_WARN, 		0);
	SetPlayerData(to_player, P_WARN_TIME, 	0);

	UpdatePlayerDatabaseInt(to_player, "warn", 		0);
	UpdatePlayerDatabaseInt(to_player, "warn_time", 	0);

	new fmt_msg[128];
	format(fmt_msg, sizeof fmt_msg, "Администратор %s снял все предупреждения с игрока %s", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));

	if(strlen(reason) > 0)
		format(fmt_msg, sizeof fmt_msg, "%s. Причина: %s", fmt_msg, reason);

	SendClientMessageToAll(0xFF5533FF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Снял все варны %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	return 1;
}

CMD:spawn(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /spawn [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	SetPlayerSpawnInit(to_player);
	SpawnPlayer(to_player);

	new fmt_text[70];

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s[%d] заспавнил %s[%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
	}

	format(fmt_text, sizeof fmt_text, "Заспавнил %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:spcar(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	extract params -> new vehicleid; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /spcar [id авто]");

	if(IsPlayerInAnyVehicle(playerid) && vehicleid == 0) vehicleid = GetPlayerVehicleID(playerid);

	if(!IsValidVehicle(vehicleid)) return SendClientMessage(playerid, 0xCECECEFF, "Данного транспорта не существует на сервере");

	SetVehicleToRespawn(vehicleid);

	new fmt_msg[100];

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_msg, sizeof fmt_msg, "[A] Администратор %s[%d] зареспавнил авто [№%d]", GetPlayerNameEx(playerid), playerid, vehicleid);
		SendMessageToAdmins(fmt_msg, 0x999999FF);
	}

	format(fmt_msg, sizeof fmt_msg, "Зареспавнил авто №%d", vehicleid);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	return 1;
}

CMD:tp(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	ShowTeleportList(playerid);

	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, "Использует меню телепортов");

	return 1;
}

CMD:goto(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /goto [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

    if(GetPlayerSecretEx(to_player) >= 1)
	    return SendClientMessage(playerid, 0xCECECEFF, "У игрока есть привелегия скрытность");

	new Float: x, Float: y, Float: z, interior, virtual_world;
	GetPlayerPos(to_player, x, y, z);
	interior = GetPlayerInterior(to_player);
	virtual_world = GetPlayerVirtualWorld(to_player);

	SetPlayerPosEx(playerid, x + 1, y + 1, z, 0.0, interior, virtual_world, false);

	SetPlayerInHouse(playerid, GetPlayerInHouse(to_player));
	SetPlayerInBiz(playerid, GetPlayerInBiz(to_player));

	SendClientMessage(playerid, -1, "Вы были телепортированы");

	new fmt_msg[105];

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_msg, sizeof fmt_msg, "[A] Администратор %s[%d] телепортировался к %s[%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
		SendMessageToAdmins(fmt_msg, 0x999999FF);
	}

	format(fmt_msg, sizeof fmt_msg, "Телепортировался к %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	return 1;
}

alias:gethere("getp")

CMD:gethere(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /gethere [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(GetPlayerSecretEx(to_player) >= 1)
		return SendClientMessage(playerid, 0xCECECEFF, "У игрока есть привелегия скрытность");

	if(GetPlayerAdminEx(to_player) > GetPlayerAdminEx(playerid))
	{
		SendClientMessage(playerid, 0x66CC33FF, "Вы пытаетесь телепортировать к себе администратора Выше рангом, он должен подтвердить Ваше действие");
		SendPlayerOffer(playerid, to_player, OFFER_TYPE_GETHERE);
	}
	else
	{
		new Float: x, Float: y, Float: z;
		GetPlayerPos(playerid, x, y, z);
		SetPlayerPosEx(to_player, x + 1, y + 1, z, 0.0, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), false);

		SetPlayerInHouse(to_player, GetPlayerInHouse(playerid));
		SetPlayerInBiz(to_player, GetPlayerInBiz(playerid));

		new fmt_msg[105];
		format(fmt_msg, sizeof fmt_msg, "Администратор %s телепортивал Вас к себе", GetPlayerNameEx(playerid));
		SendClientMessage(to_player, -1, fmt_msg);

		format(fmt_msg, sizeof fmt_msg, "Вы телепортивали %s к себе", GetPlayerNameEx(to_player));
		SendClientMessage(playerid, -1, fmt_msg);

		if(GetPlayerAdminEx(playerid) <= 5)
		{
			format(fmt_msg, sizeof fmt_msg, "[A] Администратор %s[%d] телепортировал к себе %s[%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
			SendMessageToAdmins(fmt_msg, 0x999999FF);
		}

		format(fmt_msg, sizeof fmt_msg, "Телепортировал к себе %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
		SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);
	}

	return 1;
}

CMD:vtp(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 7) return 1;

	extract params -> new to_vehicleid; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /vtp [id транспорта]");
	if(!IsValidVehicle(to_vehicleid)) return SendClientMessage(playerid, 0xCECECEFF, "Данного транспорта не существует на сервере");

	new Float: x, Float: y, Float: z;
	GetVehiclePos(to_vehicleid, x, y, z);

	SetPlayerPosEx(playerid, x + 1, y + 1, z, 0.0, false);

	SendClientMessage(playerid, -1, "Вы были телепортированы");

	new fmt_msg[105];

	format(fmt_msg, sizeof fmt_msg, "Телепортировался к авто №%d", to_vehicleid);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_msg, sizeof fmt_msg, "[A] %s[%d] телепортировался к авто №%d", GetPlayerNameEx(playerid), playerid, to_vehicleid);
		SendMessageToAdmins(fmt_msg, 0x999999FF);
	}

	return 1;
}

CMD:vget(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	extract params -> new vehicleid; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /vget [id транспорта]");
	if(!IsValidVehicle(vehicleid)) return SendClientMessage(playerid, 0xCECECEFF, "Данного транспорта не существует на сервере");

	new Float: x, Float: y, Float: z;
	GetPlayerPos(playerid, x, y, z);

	SetVehiclePos(vehicleid, x + 2.0, y + 2.0, z);

	SendClientMessage(playerid, -1, "Вы телепортировали авто к себе");

	new fmt_msg[105];

	format(fmt_msg, sizeof fmt_msg, "Телепортировался к себе авто №%d", vehicleid);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_msg, sizeof fmt_msg, "[A] %s[%d] телепортировал к себе авто №%d", GetPlayerNameEx(playerid), playerid, vehicleid);
		SendMessageToAdmins(fmt_msg, 0x999999FF);
	}

	return 1;
}

CMD:getv(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /getv [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(GetPlayerOwnableCar(to_player) == INVALID_VEHICLE_ID)
		return SendClientMessage(playerid, 0x999999FF, "У игрока нет личного транспорта");

	new fmt_text[105],
		Float: x,
		Float: y,
		Float: z;

	GetPlayerPos(to_player, x, y, z);

	SetVehiclePos(GetPlayerOwnableCar(to_player), x + 2.0, y + 2.0, z);

	format(fmt_text, sizeof fmt_text, "Вы телепортировали к %s его личный транспорт", GetPlayerNameEx(to_player));
	SendClientMessage(playerid, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "Администратор %s телепортировал к Вам Ваш личный транспорт", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, -1, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s[%d] телепортировал к %s[%d] его личный транспорт", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	format(fmt_text, sizeof fmt_text, "Телепортировался к %s[acc:%d] его авто", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:fixcar(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /fixcar [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!IsPlayerInAnyVehicle(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Игрок должен находиться в транспорте");

	new fmt_text[93],
		vehicleid = GetPlayerVehicleID(to_player);

	RepairVehicle(vehicleid);
	if(IsAOwnableCar(vehicleid)) SetVehicleData(vehicleid, V_HEALTH, 1000.0);

	format(fmt_text, sizeof fmt_text, "Вы починили транспорт игрока %s", GetPlayerNameEx(to_player));
	SendClientMessage(playerid, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "Администратор %s починил Ваш транспорт", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, -1, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s[%d] починил транспорт игрока %s[%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	format(fmt_text, sizeof fmt_text, "Починил транспорт %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:setfuel(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	extract params -> new vehicleid, fuel; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setfuel [id транспорта] [кол-во топлива]");

	if(!IsValidVehicle(vehicleid)) return SendClientMessage(playerid, 0xCECECEFF, "Данного транспорта не существует на сервере");

	if(!(0 <= fuel <= 150)) return SendClientMessage(playerid, 0x999999FF, "Количество топлива от 0 до 150");

	SetVehicleData(vehicleid, V_FUEL, fuel);

	new fmt_text[80];

	format(fmt_text, sizeof fmt_text, "Вы установили %d топлива в ТС №%d", fuel, vehicleid);
	SendClientMessage(playerid, -1, fmt_text);

	if(GetPlayerAdminEx(playerid) >= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s[%d] установил %d топлива в ТС №%d", GetPlayerNameEx(playerid), playerid, fuel, vehicleid);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	format(fmt_text, sizeof fmt_text, "Установил %d топлива в авто №%d", fuel, vehicleid);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:settime(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	extract params -> new time; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /settime [время (0-23)]");

	if(!(0 <= time <= 23)) return SendClientMessage(playerid, 0x999999FF, "Время от 0 до 23 часов");

	SetWorldTime(time);

	new fmt_text[70];

	format(fmt_text, sizeof fmt_text, "Вы установили время %02d:00", time);
	SendClientMessage(playerid, -1, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s[%d] установил время на сервере на %02d:00", GetPlayerNameEx(playerid), playerid, time);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	format(fmt_text, sizeof fmt_text, "Установил время %02d:00 на сервере", time);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:setweather(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	extract params -> new weather; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setweather [погода (0-20)]");

	if(!(-1 <= weather <= 20))
	{
		SendClientMessage(playerid, 0x999999FF, "Погода от 0 до 20 (-1 - случайная смена погоды)");
		SendClientMessage(playerid, 0x999999FF, "Рекомендовано: 1, 3, 8, 9, 18");

		return 1;
	}

	if(weather != -1)
		SetWeather(weather);
	else
		SetRandomWeather();

	new fmt_text[70];

	if(weather != -1)
		format(fmt_text, sizeof fmt_text, "Вы установили погоду %d", weather);
	else
		format(fmt_text, sizeof fmt_text, "Вы установили случайную погоду");

	SendClientMessage(playerid, -1, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		if(weather != -1)
			format(fmt_text, sizeof fmt_text, "[A] %s[%d] установил погоду на сервере на %d", GetPlayerNameEx(playerid), playerid, weather);
		else
			format(fmt_text, sizeof fmt_text, "[A] %s[%d] установил случайную погоду на сервере", GetPlayerNameEx(playerid), playerid);

		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	format(fmt_text, sizeof fmt_text, "Установил погоду №%d на сервере", weather);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:payday(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 13) return 1;

	OnPayDay();

	new fmt_text[50];

	SendClientMessage(playerid, -1, "Вы включили PayDay");

	format(fmt_text, sizeof fmt_text, "[A] %s[%d] инициировал PayDay", GetPlayerNameEx(playerid), playerid);
	SendMessageToAdmins(fmt_text, 0x999999FF);

	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, "Инициировал PayDay");

	return 1;
}

CMD:gzcolor(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 8) return 1;

	extract params -> new gang_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /gzcolor [id банды] (0-Свободная зона, 1-Арзамасская ОПГ, 2-Батыревская ОПГ, 3-Лыткаринская ОПГ)");

	if(!(0 <= gang_id <= 3))
		return SendClientMessage(playerid, 0x999999FF, "Банды: 0-Свободная зона, 1-Арзамасская ОПГ, 2-Батыревская ОПГ, 3-Лыткаринская ОПГ");

	new gang_zone_id = -1;

	for(new idx; idx < g_gang_zones_loaded; idx ++)
	{
		if(!IsPlayerInDynamicArea(playerid, GetGangZoneData(idx, GZ_AREA))) continue;

		gang_zone_id = idx;
		break;
	}

	if(gang_zone_id == -1)
		return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться на нужной территории");

	SetGangZoneData(gang_zone_id, GZ_GANG, gang_id);
	SaveGangZone(gang_zone_id);

	GangZoneShowForAll(GetGangZoneData(gang_zone_id, GZ_ZONE), gang_zone_colors[ GetGangZoneData(gang_zone_id, GZ_GANG) ]);

	new fmt_text[75];

	SendClientMessage(playerid, -1, "Вы изменили банду, владеющую данной территорией");

	format(fmt_text, sizeof fmt_text, "[A] %s[%d] изменил банду у территории №%d на %d", GetPlayerNameEx(playerid), playerid, gang_zone_id, gang_id);
	SendMessageToAdmins(fmt_text, 0x999999FF);

	format(fmt_text, sizeof fmt_text, "Изменил банду у территории №%d на %d", gang_zone_id, gang_id);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:sellproperty(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 13) return 1;

	SellDebtorsProperty();

	new fmt_text[75];

	SendClientMessage(playerid, -1, "Вы инициировали продажу имущества должников");

	format(fmt_text, sizeof fmt_text, "[A] %s[%d] инициировал продажу имущества должников", GetPlayerNameEx(playerid), playerid);
	SendMessageToAdmins(fmt_text, 0x999999FF);

	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, "Иницировал продажу имущества должников");

	return 1;
}

CMD:sellhotels(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 13) return 1;

	SellDebtorsHotels();

	new fmt_text[90];

	SendClientMessage(playerid, -1, "Вы инициировали продажу номеров с задолженностью в отеле");

	format(fmt_text, sizeof fmt_text, "[A] %s[%d] инициировал продажу номеров с задолженностью в отеле", GetPlayerNameEx(playerid), playerid);
	SendMessageToAdmins(fmt_text, 0x999999FF);

	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, "Инициировал продажу номеров в отеле");

	return 1;
}

CMD:setprods(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	extract params -> new biz_id, amount; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setprods [id бизнеса] [кол-во]");

	if(!(0 <= amount <= 10000))
		return SendClientMessage(playerid, 0x999999FF, "Количество продуктов от 0 до 10000");

	if(!(0 <= biz_id <= g_business_loaded - 1))
		return SendClientMessage(playerid, 0x999999FF, "Данного бизнеса не существует на сервере");

	SetBusinessData(biz_id, B_PRODS, amount);

	new fmt_text[90];

	format(fmt_text, sizeof fmt_text, "UPDATE business SET products=%d WHERE id=%d", GetBusinessData(biz_id, B_PRODS), GetBusinessData(biz_id, B_SQL_ID));
	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы установили %d продуктов в бизнесе №%d", amount, biz_id);
	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	format(fmt_text, sizeof fmt_text, "[A] %s[%d] установил %d продуктов в бизнесе №%d", GetPlayerNameEx(playerid), playerid, amount, biz_id);
	SendMessageToAdmins(fmt_text, 0x999999FF);

	return 1;
}

CMD:fullprods(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 13) return 1;

	extract params -> new amount; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /fullprods [кол-во]");

	if(!(0 <= amount <= 10000))
		return SendClientMessage(playerid, 0x999999FF, "Количество продуктов от 0 до 10000");

	for(new biz_id; biz_id < g_business_loaded - 1; biz_id ++)
		SetBusinessData(biz_id, B_PRODS, amount);

	new fmt_text[90];

	format(fmt_text, sizeof fmt_text, "UPDATE business SET products=%d", amount);
	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы установили %d продуктов во всех бизнесах", amount);
	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	format(fmt_text, sizeof fmt_text, "[A] %s[%d] установил %d продуктов во всех бизнесах", GetPlayerNameEx(playerid), playerid, amount);
	SendMessageToAdmins(fmt_text, 0x999999FF);

	return 1;
}

CMD:setfuels(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	extract params -> new fs_id, amount; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setfuels [id АЗС] [кол-во]");

	if(!(0 <= amount <= 10000))
		return SendClientMessage(playerid, 0x999999FF, "Количество топлива от 0 до 10000");

	if(!(0 <= fs_id <= g_fuel_station_loaded-1))
		return SendClientMessage(playerid, 0x999999FF, "Данной АЗС не существует на сервере");

	SetFuelStationData(fs_id, FS_FUELS, amount);

	new fmt_text[90];

	format(fmt_text, sizeof fmt_text, "UPDATE fuel_stations SET fuels=%d WHERE id=%d", GetFuelStationData(fs_id, FS_FUELS), GetFuelStationData(fs_id, FS_SQL_ID));
	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы установили %d топлива в АЗС №%d", amount, fs_id);
	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	format(fmt_text, sizeof fmt_text, "[A] %s[%d] установил %d топлива в АЗС №%d", GetPlayerNameEx(playerid), playerid, amount, fs_id);
	SendMessageToAdmins(fmt_text, 0x999999FF);

	return 1;
}

CMD:fullfuels(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 13) return 1;

	extract params -> new amount; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /fullfuels [кол-во]");

	if(!(0 <= amount <= 10000))
		return SendClientMessage(playerid, 0x999999FF, "Количество топлива от 0 до 10000");

	for(new fs_id; fs_id < g_fuel_station_loaded - 1; fs_id ++)
		SetFuelStationData(fs_id, FS_FUELS, amount);

	new fmt_text[90];

	format(fmt_text, sizeof fmt_text, "UPDATE fuel_stations SET fuels=%d", amount);
	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы установили %d топлива во всех АЗС", amount);
	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	format(fmt_text, sizeof fmt_text, "[A] %s[%d] установил %d топлива во всех АЗС", GetPlayerNameEx(playerid), playerid, amount);
	SendMessageToAdmins(fmt_text, 0x999999FF);

	return 1;
}
/*
CMD:addbiz(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 13) return 1;

	extract params -> new type, price, rent_price; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /addbiz [тип] [стоимость] [цена аренды]");

	new fmt_text[300];

	if(!(1 <= type <= 11))
		return SendClientMessage(playerid, 0x999999FF, "Типы бизнесов: 1-24/7, 2-Клуб, 3-Управление стат., 4-Риэлторск., 5-Одежда, 6-Отель, 7-Авторынок, 8-Казино, 9-Сотовый салон 10 - Тюнинг салон 11-Магазин оружия");

	if(price < 1) return SendClientMessage(playerid, 0x999999FF, "Стоимость бизнеса не может быть меньше 1");

	if(rent_price < 1) return SendClientMessage(playerid, 0x999999FF, "Стоимость аренды не может быть меньше 1");

	new Cache: result,
		idx = g_business_loaded;

	GetPlayerPos(playerid, g_business[idx][B_POS_X], g_business[idx][B_POS_Y], g_business[idx][B_POS_Z]);

	SetBusinessData(idx, B_PRICE,			price);
	SetBusinessData(idx, B_RENT_PRICE,		rent_price);
	SetBusinessData(idx, B_TYPE,			type);

	format
	(
		fmt_text, sizeof fmt_text,
		"INSERT INTO business \
		(type, price, rent_price, x, y, z)\
		VALUES ('%d', '%d', '%f', '%f', '%f', '%f')",
		type, price, rent_price,
		GetBusinessData(idx, B_POS_X),
		GetBusinessData(idx, B_POS_Y),
		GetBusinessData(idx, B_POS_Z)
	);

	result = mysql_query(mysql, fmt_text, true);

	SetBusinessData(idx, B_SQL_ID, 		cache_insert_id());

	cache_delete(result);

	g_business_loaded ++;

	CreatePickup(1318, 23, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 0, PICKUP_ACTION_TYPE_BIZ_ENTER, idx);

	UpdateBusinessLabel(idx);

	new city[MAX_ZONES_NAME + 1], area[MAX_ZONES_NAME + 1];
	GetCityName(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), city);
	GetAreaName(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), area);
	format(fmt_text, sizeof fmt_text, "[A] %s[%d] создал бизнес №%d (%s / %s)", GetPlayerNameEx(playerid), playerid, idx, x, city, area);

	SendMessageToAdmins(fmt_text, 0x66CC33FF);

	SendClientMessage(playerid, 0x3399FFFF, "Используйте {FFFF00}/bsetexitpos{3399FF}, чтобы завершить создание бизнеса");

	return 1;
}
*/

CMD:addbiz(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 13) return 1;

	extract params -> new type, price, rent_price; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /addbiz [тип] [стоимость] [цена аренды]");

	new fmt_text[320];

	if(!(1 <= type <= 11))
		return SendClientMessage(playerid, 0x999999FF, "Типы бизнесов: 1-24/7, 2-Клуб, 3-Управление стат., 4-Риэлторск., 5-Одежда, 6-Отель, 7-Авторынок, 8-Казино, 9-Сотовый салон 10 - Тюнинг салон 11-Магазин оружия");

	if(price < 1) return SendClientMessage(playerid, 0x999999FF, "Стоимость бизнеса не может быть меньше 1");

	if(rent_price < 1) return SendClientMessage(playerid, 0x999999FF, "Стоимость аренды не может быть меньше 1");

	new Cache: result,
		idx = g_business_loaded;

	GetPlayerPos(playerid, g_business[idx][B_POS_X], g_business[idx][B_POS_Y], g_business[idx][B_POS_Z]);

	SetBusinessData(idx, B_PRICE,			price);
	SetBusinessData(idx, B_RENT_PRICE,		rent_price);
	SetBusinessData(idx, B_TYPE,			type);

	SetBusinessData(idx, B_INTERIOR,		type-1);



	format
	(
		fmt_text, sizeof fmt_text,
		"INSERT INTO business \
		(type, price, rent_price, x, y, z, interior)\
		VALUES ('%d', '%d', '%f', '%f', '%f', '%f', '%d')",
		type, price, rent_price,
		GetBusinessData(idx, B_POS_X),
		GetBusinessData(idx, B_POS_Y),
		GetBusinessData(idx, B_POS_Z),
		type-1
	);

	result = mysql_query(mysql, fmt_text, true);

	SetBusinessData(idx, B_SQL_ID, 		cache_insert_id());
	
	cache_delete(result);

	g_business_loaded ++;

	CreatePickup(1318, 23, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 0, PICKUP_ACTION_TYPE_BIZ_ENTER, idx);

	UpdateBusinessLabel(idx);

	new city[MAX_ZONES_NAME + 1], area[MAX_ZONES_NAME + 1];
	GetCityName(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), city);
	GetAreaName(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), area);
	format(fmt_text, sizeof fmt_text, "[A] %s[%d] создал бизнес №%d (%s / %s)", GetPlayerNameEx(playerid), playerid, idx, city, area);

	SendMessageToAdmins(fmt_text, 0x66CC33FF);

	SendClientMessage(playerid, 0x3399FFFF, "Используйте {FFFF00}/bsetexitpos{3399FF}, чтобы завершить создание бизнеса");

	return 1;
}

CMD:bsetexitpos(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 13) return 1;

	extract params -> new biz_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /bsetexitpos [id бизнеса]");

	if(!(0 <= biz_id <= g_business_loaded - 1)) return SendClientMessage(playerid, 0x999999FF, "Данного бизнеса не существует на сервере");

	GetPlayerPos(playerid, g_business[biz_id][B_EXIT_POS_X], g_business[biz_id][B_EXIT_POS_Y], g_business[biz_id][B_EXIT_POS_Z]);
	GetPlayerFacingAngle(playerid, g_business[biz_id][B_EXIT_ANGLE]);

	new fmt_text[144];

	format
	(
		fmt_text, sizeof fmt_text,
		"UPDATE business SET exit_x='%f', exit_y='%f', exit_z='%f', exit_angle='%f' WHERE id=%d",
		GetBusinessData(biz_id, B_EXIT_POS_X),
		GetBusinessData(biz_id, B_EXIT_POS_Y),
		GetBusinessData(biz_id, B_EXIT_POS_Z),
		GetBusinessData(biz_id, B_EXIT_ANGLE),
		GetBusinessData(biz_id, B_SQL_ID)
	);

	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы успешно изменили координаты выхода у бизнеса №%d", biz_id);

	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	return 1;
}

CMD:bsetpos(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 13) return 1;

	extract params -> new biz_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /bsetpos [id бизнеса]");

	if(!(0 <= biz_id <= g_business_loaded - 1)) return SendClientMessage(playerid, 0x999999FF, "Данного бизнеса не существует на сервере");

	GetPlayerPos(playerid, g_business[biz_id][B_POS_X], g_business[biz_id][B_POS_Y], g_business[biz_id][B_POS_Z]);

	new fmt_text[144];

	format
	(
		fmt_text, sizeof fmt_text,
		"UPDATE business SET x='%f', y='%f', z='%f' WHERE id=%d",
		GetBusinessData(biz_id, B_POS_X),
		GetBusinessData(biz_id, B_POS_Y),
		GetBusinessData(biz_id, B_POS_Z),
		GetBusinessData(biz_id, B_SQL_ID)
	);

	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы успешно изменили координаты входа у бизнеса №%d (%s)", biz_id, GetBusinessData(biz_id, B_NAME));
	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	SendClientMessage(playerid, -1, "Не забудьте использовать /bsetexitpos id Для изменения координат выхода");
	UpdateBusinessLabel(biz_id);
	return 1;
}

CMD:addfuelst(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 13) return 1;

	extract params -> new price, rent_price; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /addfuelst [стоимость] [цена аренды]");

	if(price < 1) return SendClientMessage(playerid, 0xCECECEFF, "Стоимость бензоколонки не может быть меньше 1");

	if(rent_price < 1) return SendClientMessage(playerid, 0xCECECEFF, "Стоимость бензоколонки не может быть меньше 1");

	new Cache: result,
		idx = g_fuel_station_loaded;

	GetPlayerPos(playerid, g_fuel_station[idx][FS_POS_X], g_fuel_station[idx][FS_POS_Y], g_fuel_station[idx][FS_POS_Z]);

	new fmt_text[256];

	format
	(

		fmt_text, sizeof fmt_text,
		"INSERT INTO `fuel_stations`\
		(`price`,`rent_price`,`fuels`, `fuel_price`, `buy_fuel_price`, `balance`, `x`, `y`, `z`)\
		VALUES('%d','%d','100','50','50','100000','%f','%f','%f')",
		price, rent_price,
		GetFuelStationData(idx, FS_POS_X),
		GetFuelStationData(idx, FS_POS_Y),
		GetFuelStationData(idx, FS_POS_Z)
	);


	result = mysql_query(mysql, fmt_text, true);

	SetFuelStationData(idx, FS_SQL_ID, 		cache_insert_id());

	cache_delete(result);

	g_fuel_station_loaded ++;

	SetFuelStationData(idx, FS_LABEL, CreateDynamic3DTextLabel("бензоколонка", 0xFFFF00FF, GetFuelStationData(idx, FS_POS_X), GetFuelStationData(idx, FS_POS_Y), GetFuelStationData(idx, FS_POS_Z) + 0.3, 6.50));

	UpdateFuelStationLabel(idx);

	format(fmt_text, sizeof fmt_text, "[A] %s[%d] создал заправку №%d", GetPlayerNameEx(playerid), playerid, idx);

	SendMessageToAdmins(fmt_text, 0x66CC33FF);
	return 1;
}

/*CMD:addpadik(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 13) return 1;

	new fmt_text[300];


	new Cache: result,
		idx = g_entera;

	GetPlayerPos(playerid, g_house[idx][H_POS_X], g_house[idx][H_POS_Y], g_house[idx][H_POS_Z]);

	SetHouseData(idx, H_PRICE,			price);
	SetHouseData(idx, H_RENT_PRICE,		rent_price);
	SetHouseData(idx, H_TYPE,			type);

	SetHouseData(idx, H_ENTRACE,		-1);

	format
	(
		fmt_text, sizeof fmt_text,
		"INSERT INTO houses \
		(type, price, rent_price, x, y, z)\
		VALUES ('%d', '%d', '%f', '%f', '%f', '%f')",
		type, price, rent_price,
		GetHouseData(idx, H_POS_X),
		GetHouseData(idx, H_POS_Y),
		GetHouseData(idx, H_POS_Z)
	);

	result = mysql_query(mysql, fmt_text, true);

	SetHouseData(idx, H_SQL_ID, 		cache_insert_id());

	cache_delete(result);

	g_house_loaded ++;

	UpdateHouse(idx);

	new city[MAX_ZONES_NAME + 1], area[MAX_ZONES_NAME + 1];
	GetCityName(GetHouseData(idx, H_POS_X), GetHouseData(idx, H_POS_Y), city);
	GetAreaName(GetHouseData(idx, H_POS_X), GetHouseData(idx, H_POS_Y), area);
	format(fmt_text, sizeof fmt_text, "[A] %s[%d] создал дом №%d (%s / %s)", GetPlayerNameEx(playerid), playerid, idx, city, area);

	SendMessageToAdmins(fmt_text, 0x66CC33FF);

	SendClientMessage(playerid, 0x3399FFFF, "Используйте {FFFF00}/setexitpos и /setcarpos{3399FF}, чтобы завершить создание дома");

	return 1;
}

*/
CMD:addhouse(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 13) return 1;

	extract params -> new type, price, rent_price; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /addhouse [тип] [стоимость] [цена аренды]");

	new fmt_text[300];

	if(!(0 <= type <= sizeof g_house_type - 1))
	{
		SendClientMessage(playerid, 0x999999FF, "Типы домов:");

		for(new i; i < sizeof g_house_type; i ++)
		{
			format(fmt_text, sizeof fmt_text, "%d. %s", i, GetHouseTypeInfo(i, HT_NAME));

			SendClientMessage(playerid, 0xCECECEFF, fmt_text);
		}

		return 1;
	}

	if(price < 1) return SendClientMessage(playerid, 0x999999FF, "Стоимость дома не может быть меньше 1");

	if(rent_price < 1) return SendClientMessage(playerid, 0x999999FF, "Стоимость аренды не может быть меньше 1");

	new Cache: result,
		idx = g_house_loaded;

	GetPlayerPos(playerid, g_house[idx][H_POS_X], g_house[idx][H_POS_Y], g_house[idx][H_POS_Z]);

	SetHouseData(idx, H_PRICE,			price);
	SetHouseData(idx, H_RENT_PRICE,		rent_price);
	SetHouseData(idx, H_TYPE,			type);

	SetHouseData(idx, H_ENTRACE,		-1);

	format
	(
		fmt_text, sizeof fmt_text,
		"INSERT INTO houses \
		(type, price, rent_price, x, y, z)\
		VALUES ('%d', '%d', '%f', '%f', '%f', '%f')",
		type, price, rent_price,
		GetHouseData(idx, H_POS_X),
		GetHouseData(idx, H_POS_Y),
		GetHouseData(idx, H_POS_Z)
	);

	result = mysql_query(mysql, fmt_text, true);

	SetHouseData(idx, H_SQL_ID, 		cache_insert_id());

	cache_delete(result);

	g_house_loaded ++;

	UpdateHouse(idx);

	new city[MAX_ZONES_NAME + 1], area[MAX_ZONES_NAME + 1];
	GetCityName(GetHouseData(idx, H_POS_X), GetHouseData(idx, H_POS_Y), city);
	GetAreaName(GetHouseData(idx, H_POS_X), GetHouseData(idx, H_POS_Y), area);
	format(fmt_text, sizeof fmt_text, "[A] %s[%d] создал дом №%d (%s / %s)", GetPlayerNameEx(playerid), playerid, idx, city, area);

	SendMessageToAdmins(fmt_text, 0x66CC33FF);

	SendClientMessage(playerid, 0x3399FFFF, "Используйте {FFFF00}/setexitpos и /setcarpos{3399FF}, чтобы завершить создание дома");

	return 1;
}

CMD:setexitpos(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 13) return 1;

	extract params -> new house_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setexitpos [id дома]");

	if(!(0 <= house_id <= g_house_loaded - 1)) return SendClientMessage(playerid, 0x999999FF, "Данного дома не существует на сервере");

	GetPlayerPos(playerid, g_house[house_id][H_EXIT_POS_X], g_house[house_id][H_EXIT_POS_Y], g_house[house_id][H_EXIT_POS_Z]);
	GetPlayerFacingAngle(playerid, g_house[house_id][H_EXIT_ANGLE]);

	new fmt_text[144];

	format
	(
		fmt_text, sizeof fmt_text,
		"UPDATE houses SET exit_x='%f', exit_y='%f', exit_z='%f', exit_angle='%f' WHERE id=%d",
		GetHouseData(house_id, H_EXIT_POS_X),
		GetHouseData(house_id, H_EXIT_POS_Y),
		GetHouseData(house_id, H_EXIT_POS_Z),
		GetHouseData(house_id, H_EXIT_ANGLE),
		GetHouseData(house_id, H_SQL_ID)
	);

	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы успешно изменили координаты выхода у дома №%d", house_id);

	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	return 1;
}

CMD:setcarpos(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 13) return 1;

	extract params -> new house_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setcarpos [id дома]");

	if(!(0 <= house_id <= g_house_loaded - 1)) return SendClientMessage(playerid, 0x999999FF, "Данного дома не существует на сервере");

	GetPlayerPos(playerid, g_house[house_id][H_CAR_POS_X], g_house[house_id][H_CAR_POS_Y], g_house[house_id][H_CAR_POS_Z]);
	GetPlayerFacingAngle(playerid, g_house[house_id][H_CAR_ANGLE]);

	new fmt_text[144];

	format
	(
		fmt_text, sizeof fmt_text,
		"UPDATE houses SET car_x='%f', car_y='%f', car_z='%f', car_angle='%f' WHERE id=%d",
		GetHouseData(house_id, H_CAR_POS_X),
		GetHouseData(house_id, H_CAR_POS_Y),
		GetHouseData(house_id, H_CAR_POS_Z),
		GetHouseData(house_id, H_CAR_ANGLE),
		GetHouseData(house_id, H_SQL_ID)
	);

	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы успешно изменили координаты спавна авто у дома №%d", house_id);

	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	return 1;
}

CMD:getname(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 9) return 1;

	extract params -> new user_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /getname [номер аккаунта]");

	new name[21],
		fmt_text[120];

	format(name, sizeof name, "%s", GetPlayerNameBySqlID(user_id));

	if(strcmp(name, "none", true))
	{
		format(fmt_text, sizeof fmt_text, "Имя: %s / Номер аккаунта: %d", name, user_id);

		SendClientMessage(playerid, 0x3399FFFF, fmt_text);
	}
	else SendClientMessage(playerid, 0x999999FF, "Данный аккаунт не найден в базе данных");

	return 1;
}

CMD:slap(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /slap [id игрока]");
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	new Float: x, Float: y, Float: z, fmt_text[85];
	GetPlayerPos(to_player, x, y, z);

	SetPlayerPos(to_player, x, y, z + 5);
	PlayerPlaySound(to_player, 1130, 0.0, 0.0, 0.0);

	format(fmt_text, sizeof fmt_text, "Вы подбросили игрока %s", GetPlayerNameEx(to_player));
	SendClientMessage(playerid, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "Администратор %s подбросил Вас", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, -1, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s[%d] подбросил игрока %s[%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	format(fmt_text, sizeof fmt_text, "Подбросил %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:hp(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 2) return 1;

	extract params -> new to_player, health; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /hp [id игрока] [количество здоровья]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	else if(GetPlayerAdminEx(playerid) == 1 && to_player != playerid)
		return SendClientMessage(playerid, 0x999999FF, "Администраторам 1-го уровня доступно изменение только своего уровня здоровья");

	else if(!(0 <= health <= 100)) return SendClientMessage(playerid, 0x999999FF, "Уровень здоровья от 0 до 100");

	SetPlayerData(to_player, P_HEALTH, health);
	SetPlayerHealthEx(to_player, health);

	if(GetPlayerData(to_player, P_HOSPITAL))
		SetPlayerData(to_player, P_HOSPITAL, false);

	new fmt_msg[105];
	format(fmt_msg, sizeof fmt_msg, "Администратор %s изменил Вам уровень здоровья", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, -1, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Вы изменили %s уровень здоровья", GetPlayerNameEx(to_player));
	SendClientMessage(playerid, -1, fmt_msg);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_msg, sizeof fmt_msg, "[A] Администратор %s[%d] изменил уровень здоровья %s[%d] на %d", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, health);
		SendMessageToAdmins(fmt_msg, 0x999999FF);
	}

	format(fmt_msg, sizeof fmt_msg, "Установил %s[acc:%d] уровень здоровья на %d", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), health);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	return 1;
}

CMD:spcars(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	new vehicles_count;

	for(new i = 1; i < MAX_VEHICLES; i++)
	{
	    if(!IsValidVehicle(i)) continue;
	    else if(IsVehicleOccupied(i)) continue;
	    else if(IsTrailerAttachedToAnyVehicle(i)) continue;

	    SetVehicleToRespawn(i);
	    vehicles_count++;
	}

	new fmt_text[90];

	format(fmt_text, sizeof fmt_text, "Вы зареспавнили весь незанятый транспорт. Всего зареспавнено: %d шт.", vehicles_count);
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] зареспавнил весь незанятый транспорт", GetPlayerNameEx(playerid), playerid);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, "Зареспавнил весь незанятый транспорт");

	return 1;
}

CMD:setleader(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	if(!strlen(params))
	{
		SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setleader [id игрока] [организация]");

		SendClientMessage(playerid, 0xCECECEFF, "1 - Правительство области");
		SendClientMessage(playerid, 0xCECECEFF, "2 - Воинская часть");
		SendClientMessage(playerid, 0xCECECEFF, "3 - Городская больница");
		SendClientMessage(playerid, 0xCECECEFF, "4 - ГТРК «Ритм»");
		SendClientMessage(playerid, 0xCECECEFF, "5 - Отдел полиции №1 (ГИБДД)");
		SendClientMessage(playerid, 0xCECECEFF, "6 - Отдел полиции №2 (УМВД)");
		SendClientMessage(playerid, 0xCECECEFF, "7 - ФСБ");
		SendClientMessage(playerid, 0xCECECEFF, "8 - Арзамасская ОПГ");
		SendClientMessage(playerid, 0xCECECEFF, "9 - Батыревская ОПГ");
		SendClientMessage(playerid, 0xCECECEFF, "10- Лыткаринская ОПГ");

		return 1;
	}
	extract params -> new player:to_player, org_id;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(!(0 <= org_id < MAX_ORG)) return SendClientMessage(playerid, 0x999999FF, "Неверный идентификатор организации");

	new fmt_msg[155];

	if(!org_id)
	{
	    format(fmt_msg, sizeof fmt_msg, "Администратор %s[%d] снял Вас с должности лидера организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerTeamName(to_player));
		SendClientMessage(to_player, 0xFFFF00FF, fmt_msg);
		format(fmt_msg, sizeof fmt_msg, "[A] %s[%d] снял %s[%d] с должности лидера организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, GetPlayerTeamName(to_player));
		SendMessageToAdmins(fmt_msg, 0x999999FF);
		return InvitePlayer(to_player, 0, 0, true);
	}

	InvitePlayer(to_player, org_id, 10, true);

	if(IsTeamSubdivision(org_id))
		format(fmt_msg, sizeof fmt_msg, "Администратор %s[%d] назначил Вас лидером подразделения \"%s\", организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerSubdivisionName(to_player), GetPlayerTeamName(to_player));
	else
		format(fmt_msg, sizeof fmt_msg, "Администратор %s[%d] назначил Вас лидером организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerTeamName(to_player));
	SendClientMessage(to_player, 0xFFFF00FF, fmt_msg);

	if(IsTeamSubdivision(org_id))
		format(fmt_msg, sizeof fmt_msg, "[A] %s[%d] назначил %s[%d] лидером подразделения \"%s\", организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, GetPlayerSubdivisionName(to_player), GetPlayerTeamName(to_player));
	else
		format(fmt_msg, sizeof fmt_msg, "[A] %s[%d] назначил %s[%d] лидером организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, GetPlayerTeamName(to_player));
	SendMessageToAdmins(fmt_msg, 0x999999FF);

	if(org_id)
		format(fmt_msg, sizeof fmt_msg, "Назначил %s[acc:%d] лидером %s[%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), GetTeamName(org_id), org_id);
	else
		format(fmt_msg, sizeof fmt_msg, "Снял %s[acc:%d] с поста лидера", GetPlayerNameEx(to_player), to_player);
	SendLog(playerid, LOG_TYPE_SET_LEADER, fmt_msg);

	return 1;
}

CMD:givegun(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 7) return 1;

	extract params -> new to_player, weapon_id, weapon_ammo; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /givegun [id игрока] [id оружия] [кол-во патронов]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!(1 <= weapon_id <= 46) || (19 <= weapon_id <= 21)) return SendClientMessage(playerid, 0x999999FF, "ID оружия от 1 до 46");
	if(!(1 <= weapon_ammo <= 1000)) return SendClientMessage(playerid, 0x999999FF, "Количество патронов от 1 до 1000");

	GivePlayerWeapon(to_player, weapon_id, weapon_ammo);

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "Администратор %s[%d] выдал Вам %s и %d патр.", GetPlayerNameEx(playerid), playerid, GetWeaponName(weapon_id), weapon_ammo);
	SendClientMessage(to_player, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "Вы выдали игроку %s[%d] %s и %d патр.", GetPlayerNameEx(to_player), to_player, GetWeaponName(weapon_id), weapon_ammo);
	SendClientMessage(playerid, -1, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] выдал %s[%d] %s [%d патр]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, GetWeaponName(weapon_id), weapon_ammo);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	format(fmt_text, sizeof fmt_text, "Выдал %s[acc:%d] %s[%d патр]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), GetWeaponName(weapon_id), weapon_ammo);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:templeader(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 8) return 1;

	if(!strlen(params))
	{
		SendClientMessage(playerid, 0xCECECEFF, "Используйте: /templeader [организация]");

		SendClientMessage(playerid, 0xCECECEFF, "1 - Правительство области");
		SendClientMessage(playerid, 0xCECECEFF, "2 - Воинская часть");
		SendClientMessage(playerid, 0xCECECEFF, "3 - Городская больница");
		SendClientMessage(playerid, 0xCECECEFF, "4 - ГТРК «Ритм»");
		SendClientMessage(playerid, 0xCECECEFF, "5 - Отдел полиции №1 (ГИБДД)");
		SendClientMessage(playerid, 0xCECECEFF, "6 - Отдел полиции №2 (УМВД)");
		SendClientMessage(playerid, 0xCECECEFF, "7 - ФСБ");
		SendClientMessage(playerid, 0xCECECEFF, "8 - Арзамасская ОПГ");
		SendClientMessage(playerid, 0xCECECEFF, "9 - Батыревская ОПГ");
		SendClientMessage(playerid, 0xCECECEFF, "10- Лыткаринская ОПГ");

		return 1;
	}
	extract params -> new org_id;

	if(!(0 <= org_id < MAX_ORG)) return SendClientMessage(playerid, 0x999999FF, "Неверный идентификатор организации");

	new fmt_msg[155];

	if(!org_id)
	{
		SendClientMessage(playerid, 0xFFFF00FF, "Вы сняли с себя временное лидерство");
		format(fmt_msg, sizeof fmt_msg, "[A] %s[%d] снял с себя временное лидерство организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerTeamName(playerid));
		SendMessageToAdmins(fmt_msg, 0x999999FF);
		return InvitePlayer(playerid, 0, 0, true);
	}

	InvitePlayer(playerid, org_id, 10, false);

	if(IsTeamSubdivision(org_id))
		format(fmt_msg, sizeof fmt_msg, "Вы взяли временное лидерство подразделения \"%s\", организации \"%s\"", GetPlayerSubdivisionName(playerid), GetPlayerTeamName(playerid));
	else
		format(fmt_msg, sizeof fmt_msg, "Вы взяли временное лидерство организации \"%s\"", GetPlayerTeamName(playerid));
	SendClientMessage(playerid, 0xFFFF00FF, fmt_msg);

	if(IsTeamSubdivision(org_id))
		format(fmt_msg, sizeof fmt_msg, "[A] %s[%d] взял временное лидерство подразделения \"%s\", организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerSubdivisionName(playerid), GetPlayerTeamName(playerid));
	else
		format(fmt_msg, sizeof fmt_msg, "[A] %s[%d] взял временное лидерство организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerTeamName(playerid));
	SendMessageToAdmins(fmt_msg, 0x999999FF);

	if(org_id)
		format(fmt_msg, sizeof fmt_msg, "Взял временное лидерство %s[%d]", GetTeamName(org_id), org_id);
	else
		format(fmt_msg, sizeof fmt_msg, "Cнял себя с временного лидерства");
	SendLog(playerid, LOG_TYPE_SET_LEADER, fmt_msg);

	return 1;
}

CMD:agivelic(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 11) return 1;

	extract params -> new to_player, license; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /agivelic [id игрока] [тип] (1-Базовый уровень 2-Профессиональный уровень 3-На оружие)");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	new fmt_text[144];

	switch(license)
	{
		case 1:
		{
			SetPlayerData(to_player, P_DRIVING_LIC, GetPlayerData(to_player, P_DRIVING_LIC) ^ 1);
			UpdatePlayerDatabaseInt(to_player, "driving_lic", GetPlayerData(to_player, P_DRIVING_LIC));

			format(fmt_text, sizeof fmt_text, "Администратор %s[%d] %s лицензию на вождение Базового уровня", GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_DRIVING_LIC) ? "выдал Вам" : "забрал у Вас");
			SendClientMessage(to_player, 0x3399FFFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "Вы %s %s[%d] лицензию на вождение Базового уровня", GetPlayerData(to_player, P_DRIVING_LIC) ? "выдали" : "забрали у", GetPlayerNameEx(to_player), to_player);
			SendClientMessage(playerid, 0x66CC00FF, fmt_text);

			format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] %s %s[%d] лицензию на вождение Базового уровня", GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_DRIVING_LIC) ? "выдал" : "забрал у", GetPlayerNameEx(to_player), to_player);
			SendMessageToAdmins(fmt_text, 0x999999FF);
		}
		case 2:
		{
			SetPlayerData(to_player, P_DRIVING_LIC, GetPlayerData(to_player, P_DRIVING_LIC) == 2 ? 0 : 2);
			UpdatePlayerDatabaseInt(to_player, "driving_lic", GetPlayerData(to_player, P_DRIVING_LIC));

			format(fmt_text, sizeof fmt_text, "Администратор %s[%d] %s лицензию на вождение Профессионального уровня", GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_DRIVING_LIC) == 2 ? "выдал Вам" : "забрал у Вас");
			SendClientMessage(to_player, 0x3399FFFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "Вы %s %s[%d] лицензию на вождение Профессионального уровня", GetPlayerData(to_player, P_DRIVING_LIC) == 2 ? "выдали" : "забрали у", GetPlayerNameEx(to_player), to_player);
			SendClientMessage(playerid, 0x66CC00FF, fmt_text);

			format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] %s %s[%d] лицензию на вождение Профессионального уровня", GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_DRIVING_LIC) == 2 ? "выдал" : "забрал у", GetPlayerNameEx(to_player), to_player);
			SendMessageToAdmins(fmt_text, 0x999999FF);
		}
		case 3:
		{
			SetPlayerData(to_player, P_WEAPON_LIC, GetPlayerData(to_player, P_WEAPON_LIC) ^ 1);
			UpdatePlayerDatabaseInt(to_player, "weapon_lic", GetPlayerData(to_player, P_WEAPON_LIC));

			format(fmt_text, sizeof fmt_text, "Администратор %s[%d] %s лицензию на оружие", GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_WEAPON_LIC) ? "выдал Вам" : "забрал у Вас");
			SendClientMessage(to_player, 0x3399FFFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "Вы %s %s[%d] лицензию на оружие", GetPlayerData(to_player, P_WEAPON_LIC) ? "выдали" : "забрали у", GetPlayerNameEx(to_player), to_player);
			SendClientMessage(playerid, 0x66CC00FF, fmt_text);

			format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] %s %s[%d] лицензию на оружие", GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_WEAPON_LIC) ? "выдал" : "забрал у", GetPlayerNameEx(to_player), to_player);
			SendMessageToAdmins(fmt_text, 0x999999FF);
		}
		default: return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /agivelic [id игрока] [тип] (1-Базовый уровень 2-Профессиональный уровень 3-На оружие)");
	}

	format(fmt_text, sizeof fmt_text, "Выдал %s[acc:%d] лицензию %d", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), license);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:setskills(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 11) return 1;

	extract params -> new to_player, set_code, set_value; else {

	    SendClientMessage(playerid, 0xCECECEFF, "Использование: /setskills [id игрока] [навык] [значение]");
	    SendClientMessage(playerid, 0xCECECEFF, "Коды навыков:");
		SendClientMessage(playerid, 0xCECECEFF, "1 - Colt 45");
	    SendClientMessage(playerid, 0xCECECEFF, "2 - SD Pistol");
	    SendClientMessage(playerid, 0xCECECEFF, "3 - Desert Eagle");
	    SendClientMessage(playerid, 0xCECECEFF, "4 - Shotgun");
	    SendClientMessage(playerid, 0xCECECEFF, "5 - MP5");
	    SendClientMessage(playerid, 0xCECECEFF, "6 - AK47");
	    SendClientMessage(playerid, 0xCECECEFF, "7 - M4");
	    SendClientMessage(playerid, 0xCECECEFF, "8 - Sniper Rifle");
		SendClientMessage(playerid, 0xCECECEFF, "9 - Sawnoff");
		SendClientMessage(playerid, 0xCECECEFF, "10 - Combat SG");
		SendClientMessage(playerid, 0xCECECEFF, "11 - Micro Uzi");
	    SendClientMessage(playerid, 0x999999FF, "12 - Сила");
	    return 1;
	}

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!(0 <= set_value <= 100)) return SendClientMessage(playerid, 0x999999FF, "Значение навыка от 0 до 100");

	new tmp_skill_name[32], query[128];

	switch(set_code)
	{
		case 1:
	    {
	        SetPlayerData(to_player, P_SKILL_COLT, set_value);
			tmp_skill_name = "Colt 45";
			UpdatePlayerDatabaseInt(to_player, "skill_colt", set_value);
	    }
	    case 2:
	    {
	        SetPlayerData(to_player, P_SKILL_SDPISTOL, set_value);
			tmp_skill_name = "SD Pistol";
			UpdatePlayerDatabaseInt(to_player, "skill_sdpistol", set_value);
	    }
	    case 3:
	    {
	        SetPlayerData(to_player, P_SKILL_DEAGLE, set_value);
			tmp_skill_name = "Desert Eagle";
			UpdatePlayerDatabaseInt(to_player, "skill_deagle", set_value);
	    }
	    case 4:
	    {
	        SetPlayerData(to_player, P_SKILL_SHOTGUN, set_value);
			tmp_skill_name = "Shotgun";
			UpdatePlayerDatabaseInt(to_player, "skill_shotgun", set_value);
	    }
	    case 5:
	    {
	        SetPlayerData(to_player, P_SKILL_MP5, set_value);
			tmp_skill_name = "MP5";
			UpdatePlayerDatabaseInt(to_player, "skill_mp5", set_value);
	    }
	    case 6:
	    {
	        SetPlayerData(to_player, P_SKILL_AK47, set_value);
			tmp_skill_name = "AK47";
			UpdatePlayerDatabaseInt(to_player, "skill_ak47", set_value);
	    }
	    case 7:
	    {
	        SetPlayerData(to_player, P_SKILL_M4, set_value);
			tmp_skill_name = "M4";
			UpdatePlayerDatabaseInt(to_player, "skill_m4", set_value);
	    }
	    case 8:
	    {
	        SetPlayerData(to_player, P_SKILL_SNIPER_RIFLE, set_value);
			tmp_skill_name = "Sniper Rifle";
			UpdatePlayerDatabaseInt(to_player, "skill_sniper_rifle", set_value);
	    }
		case 9:
	    {
	        SetPlayerData(to_player, P_SKILL_SAWNOFF, set_value);
			tmp_skill_name = "Sawnoff";
			UpdatePlayerDatabaseInt(to_player, "skill_sawnoff", set_value);
	    }
		case 10:
	    {
	        SetPlayerData(to_player, P_SKILL_COMBAT_SG, set_value);
			tmp_skill_name = "Combat SG";
			UpdatePlayerDatabaseInt(to_player, "skill_combat_sg", set_value);
	    }
		case 11:
	    {
	        SetPlayerData(to_player, P_SKILL_MICRO_UZI, set_value);
			tmp_skill_name = "Micro Uzi";
			UpdatePlayerDatabaseInt(to_player, "skill_micro_uzi", set_value);
	    }
	    case 12:
	    {
	        SetPlayerData(to_player, P_POWER, set_value);
			tmp_skill_name = "Сила";
			UpdatePlayerDatabaseInt(to_player, "power", set_value);
	    }
	    default: return SendClientMessage(playerid, 0x999999FF, "Неверно введен код навыка");
	}

	SetPlayerSkillsInit(to_player);

	format(query, sizeof query, "Администратор %s изменил Вам уровень навыка %s на %d", GetPlayerNameEx(playerid), tmp_skill_name, set_value);
	SendClientMessage(to_player, 0x3399FFFF, query);

	format(query, sizeof query, "Вы изменили игроку %s уровень навыка %s на %d", GetPlayerNameEx(to_player), tmp_skill_name, set_value);
	SendClientMessage(playerid, 0x66CC00FF, query);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(query, sizeof query, "[A] Администратор %s[%d] изменил %s[%d] уровень навыка %s на %d", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, tmp_skill_name, set_value);
		SendMessageToAdmins(query, 0x999999FF);
	}

	format(query, sizeof query, "Изменил %s[acc:%d] уровень навыка %s на %d", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), tmp_skill_name, set_value);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, query);

	return 1;
}

CMD:tdd(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 13) return 1;

	extract params -> new id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /td [id игрока] [уровень администратора]");

	

	PlayerTextDrawShow(playerid, speedometr_PTD[playerid][id]);
	return 1;
}


CMD:setadm(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 13) return 1;

	extract params -> new to_player, admin_lvl; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setadm [id игрока] [уровень администратора]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	else if(!(0 <= admin_lvl <= 13)) return SendClientMessage(playerid, 0x999999FF, "Уровень администратора от 0 до 6");
	else if(to_player == playerid) return SendClientMessage(playerid, 0x999999FF, "Вы не можете изменять свой уровень администратора");
	else if(admin_lvl > GetPlayerAdminEx(playerid)) return SendClientMessage(playerid, 0x999999FF, "Вы не можете устанавливать уровень больше своего");

	new fmt_msg[144];

	if(GetPlayerAccountID(to_player) == 1)
	{
		format(fmt_msg, sizeof fmt_msg, "Царь, глупый мальчишка %s[%d] попытался изменить твой уровень администратора");
		SendClientMessage(to_player, 0xFF5533FF, fmt_msg);

		return SendClientMessage(playerid, 0xFF5533FF, "ТЫ ОХУЕЛ, СУКА, КОМАРА НЕ ТРОЖЬ!");
	}

	if(GetPlayerAdminEx(to_player) > GetPlayerAdminEx(playerid)) return SendClientMessage(playerid, 0x999999FF, "Вы не можете изменять уровень администратора выше Вас рангом");

	SetPlayerData(to_player, P_ADMIN, admin_lvl);
	UpdatePlayerDatabaseInt(to_player, "admin", admin_lvl);

	AdminAuthorization(to_player);

	format(fmt_msg, sizeof fmt_msg, "%s выдал Вам права администратора %d уровня", GetPlayerNameEx(playerid), admin_lvl);
	SendClientMessage(to_player, 0x3399FFFF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Вы выдали %s права администратора %d уровня", GetPlayerNameEx(to_player), admin_lvl);
	SendClientMessage(playerid, 0x3399FFFF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "[A] %s[%d] установил %s[%d] уровень администратора %d",
	GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, admin_lvl);

	SendMessageToAdmins(fmt_msg, 0xFF5533FF, 4);

	format(fmt_msg, sizeof fmt_msg, "Установил %s[acc:%d] уровень администратора %d", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), admin_lvl);
	SendLog(playerid, LOG_TYPE_SET_ADMIN, fmt_msg);

	return 1;
}

CMD:admdown(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 12) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /admdown [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!GetPlayerAdminEx(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Игрок не администратор");

	if(GetPlayerAdminEx(to_player) == 1)
		return SendClientMessage(playerid, 0x999999FF, "Нельзя понизить до 0 уровня. Используйте /deladmin для снятия");

	if(GetPlayerAdminEx(to_player) >= GetPlayerAdminEx(playerid))
		return SendClientMessage(playerid, 0x999999FF, "Вы не можете понизить уровень администратора выше Вас");

	AddPlayerData(to_player, P_ADMIN, -, 1);
	UpdatePlayerDatabaseInt(to_player, "admin", GetPlayerAdminEx(to_player));

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "Главный администратор %s[%d] понизил Ваш уровень администратора до %d",
	GetPlayerNameEx(playerid), playerid, GetPlayerAdminEx(to_player));

	SendClientMessage(to_player, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] понизил уровень администратора %s[%d] до %d",
	GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, GetPlayerAdminEx(to_player));

	SendMessageToAdmins(fmt_text, 0xFF5533FF);

	format(fmt_text, sizeof fmt_text, "Понизил %s[acc:%d] до адм. уровня %d",
	GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), GetPlayerAdminEx(to_player));

	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, fmt_text);

	return 1;
}

CMD:admup(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 12) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /admup [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!GetPlayerAdminEx(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Игрок не администратор");

	if(GetPlayerAdminEx(to_player) > 8)
		return SendClientMessage(playerid, 0x999999FF, "Нельзя повысить игрока выше чем 5");

	if(GetPlayerAdminEx(to_player) >= GetPlayerAdminEx(playerid))
		return SendClientMessage(playerid, 0x999999FF, "Вы не можете повысить уровень у главного администратора");

	AddPlayerData(to_player, P_ADMIN, +, 1);
	UpdatePlayerDatabaseInt(to_player, "admin", GetPlayerAdminEx(to_player));

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "Администратор %s[%d] повысил Ваш уровень администратора до %d",
	GetPlayerNameEx(playerid), playerid, GetPlayerAdminEx(to_player));

	SendClientMessage(to_player, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "[A] %s[%d] повысил уровень администратора %s[%d] до %d",
	GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, GetPlayerAdminEx(to_player));

	SendMessageToAdmins(fmt_text, 0xFF5533FF);

	format(fmt_text, sizeof fmt_text, "Повысил %s[acc:%d] до адм. уровня %d",
	GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), GetPlayerAdminEx(to_player));

	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, fmt_text);

	return 1;
}

CMD:deladmin(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /deladmin [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!GetPlayerAdminEx(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Игрок не администратор");

	if(GetPlayerAdminEx(to_player) >= GetPlayerAdminEx(playerid))
		return SendClientMessage(playerid, 0x999999FF, "Нельзя снять главного администратора");

	SetPlayerData(to_player, P_ADMIN, 0);
	UpdatePlayerDatabaseInt(to_player, "admin", 0);

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "Главный администратор %s[%d] снял Вас с поста администратора", GetPlayerNameEx(playerid), playerid);
	SendClientMessage(to_player, 0xFF5533FF, fmt_text);

	format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] снял %s[%d] с поста администратора",
	GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);

	SendMessageToAdmins(fmt_text, 0xFF5533FF);

	format(fmt_text, sizeof fmt_text, "Снял %s[acc:%d] с поста администратора", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, fmt_text);

	return 1;
}

CMD:setadmin(playerid, params[])
{
	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setadmin [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(GetPlayerAdminEx(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Игрок уже стоит на посту администратора");

	SetPlayerData(to_player, P_ADMIN, 1);
	UpdatePlayerDatabaseInt(to_player, "admin", 1);

	new fmt_text[128];

	AdminAuthorization(to_player);

	format(fmt_text, sizeof fmt_text, "Главный администратор %s[%d] поставил Вас на пост администратора", GetPlayerNameEx(playerid), playerid);
	SendClientMessage(to_player, 0xFF5533FF, fmt_text);

	format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] поставил %s[%d] на пост администратора",
	GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);

	SendMessageToAdmins(fmt_text, 0xFF5533FF);

	format(fmt_text, sizeof fmt_text, "Поставил %s[acc:%d] на пост администратора", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, fmt_text);

	return 1;
}

CMD:sendcmd(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 13) return 1;

	extract params -> new to_player, string:c_command[20], string:c_params[128]; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sendcmd [id игрока] [команда] [параметры]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	new fmt_text[144];

	if(strfind(c_command, "w        	") != -1
	|| strfind(c_command, "ban") != -1
	|| strfind(c_command, "offban") != -1
	|| strfind(c_command, "warn") != -1)
	{
		//format(fmt_text, sizeof fmt_text, "[A] %s[%d] попытался использовать от имени %s[%d] кмд: /%s %s",
		//GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, c_command, c_params);

		SendMessageToAdmins(fmt_text, 0x999999FF, 5);

		return 1;
	}

	format(fmt_text, sizeof fmt_text, "cmd_%s", c_command);

	CallLocalFunction(fmt_text, "is", to_player, c_params);

	format(fmt_text, sizeof fmt_text, "Отправил от имени %s[acc:%d] кмд: /%s %s", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), c_command, c_params);
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, fmt_text);

	return 1;
}

CMD:fly(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 7) return 1;

	new fmt_text[55],
		bool: fly_status;

	if(StartFly(playerid))
		fly_status = true;

	else
		StopFly(playerid);

	format(fmt_text, sizeof fmt_text, "Вы %s Fly-режим", fly_status ? "включили" : "выключили");
	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s[%d] %s Fly-режим", GetPlayerNameEx(playerid), playerid, fly_status ? "включил" : "выключил");
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	format(fmt_text, sizeof fmt_text, "%s Fly-режим", fly_status ? "Включил" : "Выключил");
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}
CMD:td(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 12) return 1;

	extract params -> new to_player, cash; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /givecash [id игрока] [cумма]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!(1 <= cash <= 1_000_000)) return SendClientMessage(playerid, 0xCECECEFF, "Можно выдавать от 1 до 1000000 рублей за один раз");

	new reason[144];
	format(reason, sizeof reason, "Выдача денег от админа %s", GetPlayerNameEx(playerid));
	GivePlayerMoneyEx(to_player, cash, reason, true, true);

	format(reason, sizeof reason, "Администратор %s выдал Вам %d рублей", GetPlayerNameEx(playerid), cash);
	SendClientMessage(to_player, 0xFFFFFFFF, reason);

	format(reason, sizeof reason, "[A] %s[%d] выдал деньги %s[%d] кол-во %d руб, в итоге у игрока %d руб", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, cash, GetPlayerMoneyEx(to_player));
	SendMessageToAdmins(reason, 0xFFFF00FF);

	format(reason, sizeof reason, "Выдал %s[acc:%d] %d руб", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), cash);
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, reason);

	return 1;
}



CMD:givecash(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 12) return 1;

	extract params -> new to_player, cash; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /givecash [id игрока] [cумма]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!(-25_000_000 <= cash <= 25_000_000)) return SendClientMessage(playerid, 0xCECECEFF, "Можно выдавать до 25кк рублей за один раз");

	new reason[144];
	format(reason, sizeof reason, "Выдача денег от админа %s", GetPlayerNameEx(playerid));
	GivePlayerMoneyEx(to_player, cash, reason, true, true);

	format(reason, sizeof reason, "Администратор %s выдал Вам %d рублей", GetPlayerNameEx(playerid), cash);
	SendClientMessage(to_player, 0xFFFFFFFF, reason);

	format(reason, sizeof reason, "[A] %s[%d] выдал деньги %s[%d] кол-во %d руб, в итоге у игрока %d руб", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, cash, GetPlayerMoneyEx(to_player));
	SendMessageToAdmins(reason, 0xFFFF00FF);

	format(reason, sizeof reason, "Выдал %s[acc:%d] %d руб", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), cash);
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, reason);

	return 1;
}



CMD:givedonate(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 12) return 1;

	extract params -> new to_player, donate; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /givedonate [id игрока] [cумма]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!(-25_000 <= donate <= 1_000)) return SendClientMessage(playerid, 0xCECECEFF, "Можно выдавать от 1 до 1000 доната за один раз");

	new reason[144];
	format(reason, sizeof reason, "Выдача доната от админа %s", GetPlayerNameEx(playerid));
	GivePlayerDonate(to_player, donate, reason, true);

	format(reason, sizeof reason, "Администратор %s выдал Вам %d доната", GetPlayerNameEx(playerid), donate);
	SendClientMessage(to_player, 0xFFFFFFFF, reason);

	format(reason, sizeof reason, "[A] %s[%d] выдал донат %s[%d] кол-во %d руб, в итоге у игрока %d руб",
	GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, donate, GetPlayerDonateMoney(to_player));
	SendMessageToAdmins(reason, 0xFFFF00FF);

	format(reason, sizeof reason, "Выдал %s[acc:%d] %d руб доната", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), donate);
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, reason);

	return 1;
}



CMD:doubling(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 13) return 1;

	Dialog
	(
		playerid, DIALOG_SET_DOUBLING, DIALOG_STYLE_LIST,
		"{FFCC00}Удвоение",
		"\
		1. Удвоение доната\n\
		2. Удвоение очков опыта\n\
		3. Удвоение зарплаты на подработках\
		",
		"Выбор", "Отмена"
	);

	return 1;
}

CMD:setstats(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	extract params -> new to_player, set_code, set_value; else {

		SendClientMessage(playerid, 0xCECECEFF, "Использование: /setstats [id игрока] [код] [значение]");
		SendClientMessage(playerid, 0xCECECEFF, "Код: 1 - Уровень | 2 - Работа");

		return 1;
	}

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	new fmt_msg[128];

	switch(set_code)
	{
		case 1:
		{
			if(!(1 <= set_value <= 25)) return SendClientMessage(playerid, 0xFF6600FF, "Уровень от 1 до 25");

			SetPlayerData(to_player, P_LEVEL, set_value);

			SetPlayerScore(to_player, set_value);

			format(fmt_msg, sizeof fmt_msg, "Администратор %s изменил Вам уровень на %d", GetPlayerNameEx(playerid), set_value);
			SendClientMessage(to_player, 0x3399FFFF, fmt_msg);

			format(fmt_msg, sizeof fmt_msg, "Вы изменили игроку %s уровень на %d", GetPlayerNameEx(to_player), set_value);
			SendClientMessage(playerid, 0x66CC00FF, fmt_msg);
		}
		case 2:
		{
			if(!(0 <= set_value <= 6)) return SendClientMessage(playerid, 0xFF6600FF, "Ид работы от 0 до 6");
			SetPlayerData(to_player, P_JOB, set_value);

			format(fmt_msg, sizeof fmt_msg, "Администратор %s установил Вам работу %s", GetPlayerNameEx(playerid), GetPlayerJobAndRankName(to_player));
			SendClientMessage(to_player, 0x3399FFFF, fmt_msg);

			format(fmt_msg, sizeof fmt_msg, "Вы установили игроку %s работу %s", GetPlayerNameEx(to_player), GetPlayerJobAndRankName(to_player));
			SendClientMessage(playerid, 0x66CC00FF, fmt_msg);
		}
		default: return SendClientMessage(playerid, 0xFF6600FF, "Ошибка: Неверно введен код");
	}

	mysql_format(mysql, fmt_msg, sizeof fmt_msg, "UPDATE accounts SET level=%d,job=%d WHERE id=%d", GetPlayerLevel(to_player), GetPlayerJob(to_player), GetPlayerAccountID(to_player));
	mysql_query(mysql, fmt_msg, false);

	return 1;
}

CMD:pay(playerid, params[])
{
	extract params -> new to_player, cash; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /pay [id игрока] [сумма]");

	if(!PlayerTotalOnline(playerid, 24))
			return SendClientMessage(playerid, 0x999999FF, "Для перевода денег необходимо отыграть 24 часа");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0))
		return SendClientMessage(playerid, 0x999999FF, "Игрок находится далеко от Вас");

	new fmt_text[75],
		max_money = 10000000;

	if(!(1 <= cash <= max_money))
	{
		format(fmt_text, sizeof fmt_text, "Сумма должна быть от 1 до %d рублей", max_money);

		SendClientMessage(playerid, 0xCECECEFF, fmt_text);
		return 1;
	}

	format(fmt_text, sizeof fmt_text, "+%d", cash);
	SetPlayerChatBubble(to_player, fmt_text, 0x00CC00FF, 10.0, 5000);

	format(fmt_text, sizeof fmt_text, "-%d", cash);
	SetPlayerChatBubble(playerid, fmt_text, 0xFF6600FF, 10.0, 5000);

	format(fmt_text, sizeof fmt_text, "Передача денег от %s", GetPlayerNameEx(playerid));
	GivePlayerMoneyEx(to_player, cash, fmt_text, true, true);

	format(fmt_text, sizeof fmt_text, "Передача денег игроку %s", GetPlayerNameEx(to_player));
	GivePlayerMoneyEx(playerid, -cash, fmt_text, true, true);

	format(fmt_text, sizeof fmt_text, "%s передал Вам деньги %d руб", GetPlayerNameEx(playerid), cash);
	SendClientMessage(to_player, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "Вы передали игроку %s деньги %d руб", GetPlayerNameEx(to_player), cash);
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	Action(playerid, "достал кошелёк и передал деньги", _, false);

	return 1;
}

CMD:agm(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;
    if(GetPVarInt(playerid,"agm") == 0)
    {
        SetPVarInt(playerid,"agm", 1);
        SetPlayerHealth(playerid, 0x7F800000);
        SendClientMessage(playerid, -1, "AGM ON");
    }
    else
    {
        SetPVarInt(playerid,"agm", 0);
        SetPlayerHealth(playerid, 100.0);
        SendClientMessage(playerid, -1, "AGM OFF");
    }
    return 1;
}
CMD:infocont(playerid)
{
	new stringcont[200];
	format(stringcont, sizeof(stringcont), "\
	{FFFFFF}Контейнеров в порту\t\t%d\n\
	{FFFF00}Контейнера пополняются каждый PayDay",
	cont1+cont3);
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{4488FC}>> {FFFFFF}Порт", stringcont, "Понятно", "");
}
CMD:add_cont(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 13) return 1;
	SendClientMessage(playerid,-1, !"[Информация] {FFFFFF}Вы пополнили обычный контейнер");
	SendClientMessage(playerid,-1, !"[Информация] {FFFFFF}Вы пополнили вещевой контейнер");
	cont1 +=5;
	SendClientMessageToAll(0xFFCD00FF, "{ff6a00}[Контейнера] В порт было доставлено 10 контейнеров");
	cont3 +=5;
	return true;
}
CMD:az(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;
	SetPlayerPos(playerid,-788.0145,-456.9666,741.1032);
	SetPlayerVirtualWorld(playerid,0);
	if(!sscanf(params,"u",params[0]))
	{
		SetPlayerPos(params[0],-788.0145,-456.9666,741.1032);
		SetPlayerInterior(params[0],0);
		SetPlayerVirtualWorld(params[0],0);
		SendClientMessage(params[0],-1, !"Администратор телепортировал вас на собеседование.");
	}
	return true;
}
CMD:debug(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 13) return 1;
	new string[32];
	format(string, sizeof(string), "Your virtual world: %i, %i", GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid));
	SendClientMessage(playerid, 0xFFFFFFFF, string);
	return 1;
}

CMD:givecase(playerid, params[])
{
    if(GetPlayerAdminEx(playerid) != 13) return 1;
    
	extract params -> new to_player, give; else return SendClientMessage(playerid, 0x999999FF, "Используйте: /givecase [id игрока] [кол-во]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(give <= 0) return SendClientMessage(playerid, 0x999999FF, "Неверное количество");

	new fmt_text[80];

	AddPlayerData(to_player, P_DONATE_CASE, +, give);
	UpdatePlayerDatabaseInt(to_player, "case", GetPlayerData(to_player, P_DONATE_CASE));

	format(fmt_text, sizeof fmt_text, "~b~+%d case", give);
	GameTextForPlayer(to_player, fmt_text, 4000, 1);

	format(fmt_text, sizeof fmt_text, "Вы передали донат кейсы игроку %s в количестве %d", GetPlayerNameEx(to_player), give);
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "Администратор %s передал Вам донат-кейсы в количестве %d", GetPlayerNameEx(playerid), give);
	SendClientMessage(to_player, 0x3399FFFF, fmt_text);

	return 1;
}

CMD:givecoins(playerid, params[])
{
    if(GetPlayerAdminEx(playerid) != 13) return 1;

	extract params -> new to_player, give; else return SendClientMessage(playerid, 0x999999FF, "Используйте: /givecoins [id игрока] [кол-во]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(give <= 0) return SendClientMessage(playerid, 0x999999FF, "Неверное количество");

	new fmt_text[80];

	AddPlayerData(to_player, P_COINS, +, give);
	UpdatePlayerDatabaseInt(to_player, "case", GetPlayerData(to_player, P_COINS));

	format(fmt_text, sizeof fmt_text, "~b~+%d coins", give);
	GameTextForPlayer(to_player, fmt_text, 4000, 1);

	format(fmt_text, sizeof fmt_text, "Вы передали монеты игроку %s в количестве %d", GetPlayerNameEx(to_player), give);
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "Администратор %s передал Вам монеты в количестве %d", GetPlayerNameEx(playerid), give);
	SendClientMessage(to_player, 0x3399FFFF, fmt_text);

	return 1;
}

CMD:apanel(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 13) return 1;

	Dialog
	(
		playerid, DIALOG_ADMIN_PANEL, DIALOG_STYLE_LIST,
		"{FFCD00}Управление сервером",
		"\
		1. Список администраторов\n\
		2. Список лидеров\n\
		{66CC33}3. Управление платными услугами\n\
		{FF3300}4. Управление игроками\n\
		{ffff00}5. [FD] НАСТРОЙКИ АНТИЧИТА{ffffff}\n\
		{ffff00}6. [FD] Управление ценами / сервером{ffffff}\n\
		{ffff00}7. [FD] Раздача админки{ffffff}",
		"Выбор", "Отмена"
	);

	return 1;
}

CMD:sethelper(playerid, params[])
{
    if(GetPlayerAdminEx(playerid) < 5) return 1;

    extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sethelper [id игрока]");

    if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
        return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

    if(GetPlayerHelperEx(to_player))
        return SendClientMessage(playerid, 0x999999FF, "Игрок уже стоит на посту хелпера");

    SetPlayerData(to_player, P_HELPER, 1);
    UpdatePlayerDatabaseInt(to_player, "helper", 1);

    new fmt_text[128];

    format(fmt_text, sizeof fmt_text, "Администратор %s[%d] поставил Вас на пост хелпера", GetPlayerNameEx(playerid), playerid);
    SendClientMessage(to_player, 0xFF5533FF, fmt_text);

    format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] поставил %s[%d] на пост хелпера",
    GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);

    SendMessageToAdmins(fmt_text, 0xFF5533FF);

    format(fmt_text, sizeof fmt_text, "Поставил %s[acc:%d] на пост хелпера", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
    SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, fmt_text);

    return 1;
}

CMD:delhelper(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 13) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /delhelper [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!GetPlayerHelperEx(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Игрок не хелпер");

	SetPlayerData(to_player, P_HELPER, 0);
	UpdatePlayerDatabaseInt(to_player, "helper", 0);

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "Главный администратор %s[%d] снял Вас с поста хелпера", GetPlayerNameEx(playerid), playerid);
	SendClientMessage(to_player, 0xFF5533FF, fmt_text);

	format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] снял %s[%d] с поста хелпера",
	GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);

	SendMessageToAdmins(fmt_text, 0xFF5533FF);

	format(fmt_text, sizeof fmt_text, "Снял %s[acc:%d] с поста хелпера", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, fmt_text);

	return 1;
}

CMD:offdeladmin(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 9) return 1;

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /offdeladmin [ник игрока]");

	extract params -> new string: player_name[21];

	if(IsPlayerConnected(GetPlayerID(player_name))) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем находится на сервере");

	new query[144],
		Cache: result,
		rows,
		uid,
		//admin,
		uip[16];

	mysql_format(mysql, query, sizeof query, "SELECT id, admin, last_ip FROM accounts WHERE name='%s'", player_name);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	if(rows)
	{
		uid = cache_get_row_int(0, 0);
	//	admin = cache_get_row_int(0, 1);
		cache_get_row(0, 2, uip);
	}

	cache_delete(result);

	if(!rows || !uid) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");


	cache_delete(result);


	format(query, sizeof query, "Администратор %s снял %s с поста администратора[Офлайн]", GetPlayerNameEx(playerid), player_name);

	SendMessageToAdmins(query, 0xFF5533FF);

	new id = GetPlayerID(player_name);
	if (id != INVALID_PLAYER_ID) {
		SetPlayerData(id, P_ADMIN, 0);
		UpdatePlayerDatabaseInt(id, "admin", 0);
	}
	mysql_format(mysql, query, sizeof query, "UPDATE `accounts` SER `admin`=0 WHERE `id`=%i LIMIT 1", uid);
	mysql_query(mysql, query, false);
	return 1;
}

CMD:offdelhelper(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 13) return 1;

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /offdelhelper [ник игрока]");

	extract params -> new string: player_name[21];

	if(IsPlayerConnected(GetPlayerID(player_name))) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем находится на сервере");

	new query[144],
		Cache: result,
		rows,
		uid,
		//admin,
		uip[16];

	mysql_format(mysql, query, sizeof query, "SELECT id, admin, last_ip FROM accounts WHERE name='%s'", player_name);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	if(rows)
	{
		uid = cache_get_row_int(0, 0);
		//admin = cache_get_row_int(0, 1);
		cache_get_row(0, 2, uip);
	}

	cache_delete(result);

	if(!rows || !uid) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");


	cache_delete(result);


	format(query, sizeof query, "Администратор %s снял %s с поста хелпера[Офлайн]", GetPlayerNameEx(playerid), player_name);

	SendMessageToAdmins(query, 0xFF5533FF);

	new id = GetPlayerID(player_name);
	if (id != INVALID_PLAYER_ID) {
		SetPlayerData(id, P_HELPER, 0);
		UpdatePlayerDatabaseInt(id, "helper", 0);
	}
	mysql_format(mysql, query, sizeof query, "UPDATE `accounts` SER `helper`=0 WHERE `id`=%i LIMIT 1", uid);
	mysql_query(mysql, query, false);
	return 1;
}

CMD:topmoney(playerid)
{
	new string[256];
	format(string, 256, "SELECT * FROM `accounts` ORDER BY money DESC LIMIT 10");
	mysql_tquery(mysql, string, "TopMoney", "d",playerid);

	return 1;
}

public: TopMoney(playerid)
{
	new name[24], cash,rows,fields, string[2000];
	cache_get_data(rows, fields);
	if(rows)
	{
		for(new i; i < rows; i++)
		{
			name[0] = EOS;
			cash = 0;
			cache_get_field_content(i, "name", name, mysql);
			cash = cache_get_field_content_int(i, "money", mysql);
			format(string, sizeof(string), "%s\n"c_b"Ник: "c_server"%s\t "c_b"| \t"c_b"Денег: "c_server"%d", string, name, cash);
			strcat(string, string, 0);
		}
	}

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Топ 10 игроков по деньгам", string, "Закрыть", "");

	return 1;
}
//                                      =============================
//                              	=====================================
//                              =============================================
//                          =====================================================
//                      =============================================================
//                  =====================================================================
//				=============================================================================
//			=====================================================================================
//		=============================================================================================
//=========================================================================================================|
//>>>>>>>>>>==========----------__________| ГРОМОВ ЛОХ by Система |__________----------==========<<<<<<<<<<|
//=========================================================================================================|
//      =============================================================================================
//          =====================================================================================
//              =============================================================================
//                  =====================================================================
//                      =============================================================
//                          =====================================================
//                              =============================================
//                                  =====================================
//                                      =============================
CMD:history(playerid, params[])
{
	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /history [имя игрока]");

	if(!(3 <= strlen(params) <= 20))
		return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	extract params -> new string: name[21];

	new query[128];
	new Cache: result, user_id;

	mysql_format(mysql, query, sizeof query, "SELECT id FROM accounts WHERE name='%e' LIMIT 1", name);
	result = mysql_query(mysql, query);

	if(cache_num_rows())
		user_id = cache_get_row_int(0, 0);

	cache_delete(result);

	if(!user_id)
		return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	format(query, sizeof query, "SELECT name FROM change_names WHERE owner_id=%d ORDER BY id DESC LIMIT 45", user_id);
	mysql_tquery(mysql, query, "ShowChangeNameHistory", "is", playerid, name);

	return 1;
}

CMD:call(playerid, params[])
{
	if(!GetPlayerPhone(playerid))
		return SendClientMessage(playerid, 0x999999FF, "У Вас нет телефона. Его можно купить в сотовом салоне");

	if(GetPlayerPhoneCall(playerid, PC_INCOMING_PLAYER) != INVALID_PLAYER_ID || GetPlayerPhoneCall(playerid, PC_OUTCOMING_PLAYER) != INVALID_PLAYER_ID)
		return SendClientMessage(playerid, 0x999999FF, "Закончите текущий разговор");

	if(!GetPlayerPhoneCall(playerid, PC_ENABLED))
		return SendClientMessage(playerid, 0x999999FF, "Ваш телефон отключен");

	if(GetPlayerData(playerid, P_PHONE_BALANCE) >= 5)
	{
		new number;
		if(sscanf(params, "d", number))
		{
			Dialog
			(
				playerid, DIALOG_PHONE_CALL, DIALOG_STYLE_INPUT,
				"{FFCD00}Наберите номер",
				"{6699CC}Номера государственных служб:\n\n\
				{FFFFFF}Полиция\t\t\t{66CC00}02\n\
				{FFFFFF}Скорая помощь\t\t{66CC00}03\n\
				{FFFFFF}Такси\t\t\t\t{66CC00}555\n\
				{FFFFFF}Механик\t\t\t{66CC00}090\n\
				{FFFFFF}Мэрия\t\t\t\t{66CC00}022\n\
				{FFFFFF}Служба точного времени\t{66CC00}060\n\
				{FFFFFF}Оператор связи\t\t{66CC00}111",
				"Позвонить", "Отмена"
			);
			return 1; // (TODO)
		}

		switch(number)
		{
			case 02: return 1;
			case 03: return 1;
			case 555: return 1;
			case 090: return 1;
			case 022: return 1;

			case 060:
			{
				ShowCurrentTime(playerid);
			}
			case 111:
			{
				new fmt_str[175];
				SetPlayerPhoneUseState(playerid, true);

				format
				(
					fmt_str, sizeof fmt_str,
					"{FFFFFF}Здравствуйте! Вы позвонили оператору.\n"\
					"На счету Вашего мобильного телефона {00FF00}%d руб\n\n"\
					"{FFFFFF}Пополнить его можно в любом банкомате.\n"\
					"Всего доброго!",
					GetPlayerData(playerid, P_PHONE_BALANCE)
				);
				Dialog(playerid, DIALOG_PHONE_CALL_BALANCE, DIALOG_STYLE_MSGBOX, "{FFCD00}Оператор сотовой связи", fmt_str, "Ок", "Отмена");
			}

			default:
			{
				new subscriber = GetPlayerIDByPhone(number);

				if(number < 1)
					return SendClientMessage(playerid, 0x999999FF, "Данный номер не обслуживается");

				if(subscriber == INVALID_PLAYER_ID)
					return SendClientMessage(playerid, 0xCECECEFF, "Набранный Вами номер не обслуживается");

				if(subscriber == playerid || GetPlayerPhoneCall(subscriber, PC_INCOMING_PLAYER) != INVALID_PLAYER_ID || GetPlayerPhoneCall(subscriber, PC_OUTCOMING_PLAYER) != INVALID_PLAYER_ID)
					return SendClientMessage(playerid, 0x999999FF, "Абонент занят");

				if(!GetPlayerPhoneCall(subscriber, PC_ENABLED))
					return SendClientMessage(playerid, 0x999999FF, "Телефон абонента вне зоны доступа");

				SetPlayerPhoneCall(playerid, PC_OUTCOMING_PLAYER, subscriber);
				SetPlayerPhoneCall(subscriber, PC_INCOMING_PLAYER, playerid);

				new fmt_str[90];

				format(fmt_str, sizeof fmt_str, "Исходящий звонок | Номер: %d {FFCD00}| Ожидание ответа от %s...", number, GetPlayerNameEx(subscriber));
				SendClientMessage(playerid, 0x66CC00FF, fmt_str);

				format(fmt_str, sizeof fmt_str, "Входящий звонок | Номер: %d {FFCD00}| Вызывает %s", GetPlayerPhone(playerid), GetPlayerNameEx(playerid));
				SendClientMessage(subscriber, 0x3399FFFF, fmt_str);

				SendClientMessage(subscriber, 0xFFFFFFFF, "Используйте {00CC00}/p {FFFFFF}чтобы ответить или {FF6600}/h {FFFFFF}чтобы отклонить вызов");
				SetPlayerPhoneUseState(playerid, true);
			}
		}
	}
	else
	{
		SendClientMessage(playerid, 0xCECECEFF, "На счету недостаточно средств");
		SendClientMessage(playerid, 0xCECECEFF, "Пополнить мобильный телефон можно в любом банкомате");
	}

	return 1;
}
//alias:call("c");

CMD:p(playerid, params[])
{
	if(GetPlayerPhoneCall(playerid, PC_TIME) != -1) return 1;

	new caller = GetPlayerPhoneCall(playerid, PC_INCOMING_PLAYER);
	if(caller != INVALID_PLAYER_ID)
	{
		SetPlayerPhoneCall(caller, PC_TIME, 0);
		SetPlayerPhoneCall(playerid, PC_TIME, 0);

		new fmt_str[64];
		format(fmt_str, sizeof fmt_str, "Вы ответили на звонок %s", GetPlayerNameEx(caller));
		SendClientMessage(playerid, 0xDD90FFFF, fmt_str);

		format(fmt_str, sizeof fmt_str, "%s ответил на Ваш звонок", GetPlayerNameEx(playerid));
		SendClientMessage(caller, 0xDD90FFFF, fmt_str);

		SetPlayerPhoneUseState(playerid, true, false);
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Нет входящих вызовов");

	return 1;
}

CMD:h(playerid, params[])
{
	new caller = GetPlayerPhoneCall(playerid, PC_INCOMING_PLAYER);
	new call_to = GetPlayerPhoneCall(playerid, PC_OUTCOMING_PLAYER);

	if(call_to != INVALID_PLAYER_ID)
	{
		if(GetPlayerPhoneCall(call_to, PC_INCOMING_PLAYER) == playerid)
		{
			ClearPlayerPhoneCall(call_to);
			SendClientMessage(call_to, 0xFF9944FF, "Звонок окончен");

			SetPlayerPhoneUseState(call_to, false);
		}
		SendClientMessage(playerid, 0xFF9944FF, "Звонок окончен");
	}
	else if(caller != INVALID_PLAYER_ID)
	{
		if(GetPlayerPhoneCall(caller, PC_OUTCOMING_PLAYER) == playerid)
		{
			ClearPlayerPhoneCall(caller);
			SendClientMessage(caller, 0xFF9944FF, "Звонок окончен");

			SetPlayerPhoneUseState(caller, false);
		}
		if(GetPlayerPhoneCall(playerid, PC_TIME) != -1)
		{
			SendClientMessage(playerid, 0xFF9944FF, "Звонок окончен");
		}
		else SendClientMessage(playerid, 0xFF9944FF, "Вы отклонили входящий вызов");
	}
	else return 1;

	ClearPlayerPhoneCall(playerid);
	SetPlayerPhoneUseState(playerid, false);

	return 1;
}

CMD:sms(playerid, params[])
{
	if(!GetPlayerPhone(playerid))
		return SendClientMessage(playerid, 0x999999FF, "У Вас нет телефона. Его можно купить в сотовом салоне");

	if(!GetPlayerPhoneCall(playerid, PC_ENABLED))
		return SendClientMessage(playerid, 0x999999FF, "Ваш телефон отключен");

	if(GetPlayerData(playerid, P_PHONE_BALANCE) >= 5)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sms [номер телефона] [сообщение]");

		extract params -> new number, string:message[66];

		if(IsAIP(message))
		{
	   		SendClientMessage(playerid, -1, "Подозрения в рекламе!");
	       	return false;
	    }

		if(number < 550)
			return SendClientMessage(playerid, 0x999999FF, "Данный номер не обслуживается");

		new subscriber = GetPlayerIDByPhone(number);

		if(subscriber != INVALID_PLAYER_ID)
		{
			if(!GetPlayerPhoneCall(subscriber, PC_ENABLED))
				return SendClientMessage(playerid, 0x999999FF, "Не удается отправить сообщение. Телефон абонента недоступен");

			if(!strlen(message))
				return SendClientMessage(playerid, 0xCECECEFF, "Введите сообщение для отправки");

			if(strlen(message) > 64)
				return SendClientMessage(playerid, 0xCECECEFF, "Слишком длинное сообщение");

			AddPlayerData(playerid, P_PHONE_BALANCE, -, 5);
			GameTextForPlayer(playerid, "SMS ~n~~y~-5 rub", 4000, 1);

			new fmt_str[128];

			format(fmt_str, sizeof fmt_str, "SMS: %s | Отправитель: %s [т.%d]", message, GetPlayerNameEx(playerid), GetPlayerPhone(playerid));
			SendClientMessage(subscriber, 0xFFFF00FF, fmt_str);
			SetPlayerChatBubble(subscriber, "SMS <<", 0xFFFF00FF, 5.0, 1500);

			format(fmt_str, sizeof fmt_str, "SMS: %s | Получатель: %s [т.%d]", message, GetPlayerNameEx(subscriber), GetPlayerPhone(subscriber));
			SendClientMessage(playerid, 0xFFFF00FF, fmt_str);
			SetPlayerChatBubble(playerid, "SMS >>", 0xFFFF00FF, 5.0, 1500);

			format(fmt_str, sizeof fmt_str, "UPDATE accounts SET phone_balance=%d WHERE id=%d LIMIT 1", GetPlayerData(playerid, P_PHONE_BALANCE), GetPlayerAccountID(playerid));
			mysql_tquery(mysql, fmt_str, "", "");

			if(g_admin_ears)
			{
				format(fmt_str, sizeof fmt_str, "[A] SMS: %s | от %s[%d] к %s[%d]", message, GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(subscriber), subscriber);
				SendMessageToAdmins(fmt_str, 0xFFFF00FF);
			}

			format(fmt_str, sizeof fmt_str, "Для %s[acc:%d]: %s", GetPlayerNameEx(subscriber), GetPlayerAccountID(subscriber), message);
			SendLog(playerid, LOG_TYPE_SMS_CHAT, fmt_str);
		}
		else SendClientMessage(playerid, 0x999999FF, "Телефон находится вне зоны доступа");
	}
	else
	{
		SendClientMessage(playerid, 0xCECECEFF, "На счету недостаточно средств");
		SendClientMessage(playerid, 0xCECECEFF, "Пополнить мобильный телефон можно в любом банкомате");
	}
	return 1;
}

CMD:eject(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || !IsPlayerDriver(playerid))
		return SendClientMessage(playerid, 0x999999FF, "Вы должны сидеть за рулем транспорта");

	if(!strlen(params))
		return SendClientMessage(playerid, 0x999999FF, "Используйте: /eject [id игрока]");

	extract params -> new to_player;

	if(vehicleid != GetPlayerVehicleID(to_player) || playerid == to_player)
		return SendClientMessage(playerid, 0x999999FF, "Игрок должен сидеть в Вашем транспорте");

	RemovePlayerFromVehicle(to_player);

	new fmt_str[64];
	format(fmt_str, sizeof fmt_str, "%s выкинул Вас из своего транспорта", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, 0x3399FFFF, fmt_str);

	format(fmt_str, sizeof fmt_str, "Вы выкинули %s из своего транспорта", GetPlayerNameEx(to_player));
	SendClientMessage(playerid, 0x3399FFFF, fmt_str);

	return 1;
}

CMD:book(playerid, params[])
{
	if(!GetPlayerPhone(playerid))
		return SendClientMessage(playerid, 0x999999FF, "У Вас нет телефона. Его можно купить в сотовом салоне");

	return ShowPlayerPhoneBook(playerid);
}

CMD:add(playerid, params[])
{
	if(!GetPlayerPhone(playerid))
		return SendClientMessage(playerid, 0x999999FF, "У Вас нет телефона. Его можно купить в сотовом салоне");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /add [id игрока] [номер телефона]");

	extract params -> new to_player, string: number[10];

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!IsPlayerPhoneBookInit(playerid))
		InitPlayerPhoneBook(playerid);

	if(GetPlayerPhoneBookContacts(playerid) >= MAX_PHONE_BOOK_CONTACTS)
		return SendClientMessage(playerid, 0xCECECEFF, "Записная книжка заполнена. Удалите ненужные контакты");

	if((3 <= strlen(number) <= 9) && IsNumeric(number) && strval(number) > 0)
		return AddPhoneBookContact(playerid, GetPlayerNameEx(to_player), number);

	SetPVarString(playerid, "add_contact_name", GetPlayerNameEx(to_player));
	new fmt_str[64 + 1];

	format(fmt_str, sizeof fmt_str, "{FFFFFF}Введите номер телефона для контакта %s", GetPlayerNameEx(to_player));
	return Dialog(playerid, DIALOG_PHONE_BOOK_ADD_CONTACT, DIALOG_STYLE_INPUT, "{FFCD00}Добавление нового контакта", fmt_str, "Добавить", "Отмена");
}

CMD:buyfuelst(playerid, params[])
{
	if(GetPlayerFuelStation(playerid) != -1)
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас уже есть заправка. Чтобы купить другую необходимо продать старую");

	new stationid = GetNearestFuelStation(playerid, 10.0);
	if(stationid != -1)
	{

//		if(!PlayerTotalOnline(playerid, 5))
//			return SendClientMessage(playerid, 0x999999FF, "Для покупки бизнеса необходимо отыграть 5 часов");

		SetPVarInt(playerid, "buy_fuel_st", stationid);

		new fmt_str[256];
		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Название:\t\t\t{339999}%s\n"\
			"{FFFFFF}Стоимость:\t\t\t{6699FF}%d руб\n"\
			"{FFFFFF}Плата за аренду:\t\t{6699FF}%d руб в день\n\n"\
			"{669966}Вы уверены что хотите купить эту заправку?",
			GetFuelStationData(stationid, FS_NAME),
			GetFuelStationData(stationid, FS_PRICE),
			GetFuelStationData(stationid, FS_RENT_PRICE)
		);
		Dialog(playerid, DIALOG_FUEL_STATION_BUY, DIALOG_STYLE_MSGBOX, "{33AACC}Покупка заправочной станции", fmt_str, "Да", "Нет");
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Вы должны быть рядом с заправкой, которую хотите купить");

	return 1;
}

CMD:fuelst(playerid, params[])
{
	new stationid = GetPlayerFuelStation(playerid);
	if(stationid != -1)
	{
		new fmt_str[1024];
		new city[MAX_ZONES_NAME + 1], area[MAX_ZONES_NAME + 1];
		GetCityName(GetFuelStationData(stationid, FS_POS_X), GetFuelStationData(stationid, FS_POS_Y), city);
		GetAreaName(GetFuelStationData(stationid, FS_POS_X), GetFuelStationData(stationid, FS_POS_Y), area);
		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Название:\t\t\t\t{339999}%s\n"\
			"{FFFFFF}Номер заправки:\t\t\t%d\n"\
			"Владелец:\t\t\t\t%s\n"\
			"Город / область:\t\t\t%s\n"\
			"Район:\t\t\t\t\t%s\n"\
			"Уровень улучшений:\t\t\t%d\n"\
			"Количество топлива:\t\t\t%d из %d\n"\
			"Цена топлива:\t\t\t%d руб за 1 л\n"\
			"Закупочная цена:\t\t\t%d руб за 1 л\n"\
			"Бюджет заправки:\t\t\t%d руб\n"\
			"АЗС арендована на:\t\t\t%d/30 дней\n"\
			"Гос. стоимость:\t\t\t%d руб\n"\
			"Аренда территории:\t\t\t%d руб в день\n"\
			"Акцизный сбор:\t\t\t%s\n"\
			"Статус:\t\t\t\t\t%s\n\n"\
			"{669966}Для открытия панели управления заправочной станцией\n"\
			"нажмите кнопку \"Изменить\"",
			GetFuelStationData(stationid, FS_NAME),
			stationid,
			GetFuelStationData(stationid, FS_OWNER_NAME),
			city,
			area,
			GetFuelStationData(stationid, FS_IMPROVEMENTS),
			GetFuelStationData(stationid, FS_FUELS),
			GetFuelStationMaxFuel(stationid),
			GetFuelStationData(stationid, FS_FUEL_PRICE),
			GetFuelStationData(stationid, FS_BUY_FUEL_PRICE),
			GetFuelStationData(stationid, FS_BALANCE),
			GetFuelStationData(stationid, FS_RENT_DATE) <= gettime() ? 0 :
			GetElapsedTime(GetFuelStationData(stationid, FS_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
			GetFuelStationData(stationid, FS_PRICE),
			GetFuelStationData(stationid, FS_IMPROVEMENTS) < 4 ? GetFuelStationData(stationid, FS_RENT_PRICE) : GetFuelStationData(stationid, FS_RENT_PRICE) / 2,
			GetFuelStationData(stationid, FS_IMPROVEMENTS) < 4 ? ("Взымается") : ("Не взымается"),
			GetFuelStationData(stationid, FS_LOCK_STATUS) ? ("{CC3333}Станция закрыта") : ("{66CC33}Станция открыта")
		);
		Dialog(playerid, DIALOG_FUEL_STATION_INFO, DIALOG_STYLE_MSGBOX, "{33AACC}Информация о заправке", fmt_str, "Изменить", "Отмена");
	}
	else SendClientMessage(playerid, 0x999999FF, "У Вас нет заправки");

	return 1;
}

CMD:sellfuelst(playerid, params[])
{
	new stationid = GetPlayerFuelStation(playerid);
	if(stationid != -1)
	{
		Dialog
		(
			playerid, DIALOG_FUEL_STATION_SELL, DIALOG_STYLE_MSGBOX,
			"{FFCD00}Продажа заправочной станции",
			"{FFFFFF}Вы уверены что хотите продать свою заправочную станцию государству?\n\n"\
			"Вам будет возвращена ее стоимость за вычитом 30%\n"\
			"Также будет возвращено 60% от стоимости купленных улучшений\n\n"\
			"Если Вы хотите продать заправочную станцию другому игроку,\n"\
			"используйте команду /sellmyfuelst",
			"Да", "Нет"
		);
	}
	else SendClientMessage(playerid, 0x999999FF, "У Вас нет заправки");

	return 1;
}

CMD:sellmyfuelst(playerid, params[])
{
	new stationid = GetPlayerFuelStation(playerid);
	if(stationid != -1)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sellmyfuelst [id игрока] [стоимость]");

		extract params -> new to_player, price;

		if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
			return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

		if(price < 1)
			return SendClientMessage(playerid, 0xCECECEFF, "Укажите стоимость продажи");

		new Float: f_pos_x = GetFuelStationData(stationid, FS_POS_X);
		new Float: f_pos_y = GetFuelStationData(stationid, FS_POS_Y);
		new Float: f_pos_z = GetFuelStationData(stationid, FS_POS_Z);

		if(GetPlayerMoneyEx(to_player) < price)
			return SendClientMessage(playerid, 0xCECECEFF, "У покупателя нет такого количества средств");

		if(!(IsPlayerInRangeOfPoint(playerid, 10.0, f_pos_x, f_pos_y, f_pos_z) && IsPlayerInRangeOfPoint(to_player, 10.0, f_pos_x, f_pos_y, f_pos_z)))
			SendClientMessage(playerid, 0xCECECEFF, "Вы и покупатель должны находиться рядом с заправкой которую хотите продать");

		SendPlayerOffer(playerid, to_player, OFFER_TYPE_SELL_FUEL_ST, stationid);
	}
	else SendClientMessage(playerid, 0x999999FF, "У Вас нет заправки");

	return 1;
}

CMD:fuel(playerid, params[])
{
	new fmt_str[41];
	new string[40 * (MAX_FUEL_STATIONS+2) + 1] = "№ АЗС\t\tСтоимость 1 л\t\tВ наличии\t\tНазвание АЗС\n\n{FFFFFF}";

	for(new idx; idx < g_fuel_station_loaded; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "%d\t\t\t%d руб\t\t%d л\t\t%s\n", idx, GetFuelStationData(idx, FS_FUEL_PRICE), GetFuelStationData(idx, FS_FUELS), GetFuelStationData(idx, FS_NAME));
		strcat(string, fmt_str);
	}
	return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFCD00}Заправочные станции", string, "Закрыть", "");
}

/*CMD:buyrepaircar(playerid)
{
    ShowPlayerBuyRepairCar(playerid);
}

stock ShowPlayerBuyRepairCar(playerid)
{
	new stationid = GetPVarInt(playerid, "buy_jerrican_in_fuelst");
	DeletePVar(playerid, "buy_jerrican_in_fuelst");

	if(IsPlayerInRangeOfPoint(playerid, 10.0, GetFuelStationData(stationid, FS_POS_X), GetFuelStationData(stationid, FS_POS_Y), GetFuelStationData(stationid, FS_POS_Z)))
	{
		new price = 100000;
		if(GetPlayerMoneyEx(playerid) >= price)
		{
			new query[150];

			if(IsFuelStationOwned(stationid))
			{

				AddFuelStationData(stationid, FS_FUELS, -, 15);
				AddFuelStationData(stationid, FS_BALANCE, +, 100000);

				format(query, sizeof query, "UPDATE accounts a,fuel_stations f SET a.money=%d,f.fuels=%d,f.balance=%d WHERE a.id=%d AND f.id=%d", GetPlayerMoneyEx(playerid)-price, GetFuelStationData(stationid, FS_FUELS), GetFuelStationData(stationid, FS_BALANCE), GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID));
			}
			else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));

			mysql_query(mysql, query, false);
			if(!mysql_errno())
			{
				new buy_fuel_pay = GetPVarInt(playerid, "buy_fuel_pay_j");
				SetPVarInt(playerid, "buy_fuel_pay_j", buy_fuel_pay + 100000);

				GivePlayerMoneyEx(playerid, 100000, "Покупка канистры на АЗС", false, true);

				SetPVarInt(playerid, "have_jerrican", 1);
			//	SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 1650, A_OBJECT_BONE_LEFT_HAND, 0.15, 0.0, 0.0, 0.0, -90.0, 180.0, 1.0, 1.0, 1.0, 0);
			
			    AddPlayerData(playerid, P_REPCARID, +, 1);
				UpdatePlayerDatabaseInt(playerid, "repcarid",GetPlayerData(playerid, P_REPCARID));

				SendClientMessage(playerid, 0x66CC00FF, "Вы купили рем. комплекс");
				SendClientMessage(playerid, 0x3399FFFF, "введите /repaircar чтобы починить машину");
				//SendClientMessage(playerid, 0xCECECEFF, "Примечание: Вы не должны двигаться во время заправки. ПКМ - правая кнопка мышки");
			}
			else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 19)");
		}
		else SendClientMessage(playerid, 0x999999FF, "Недостаточно денег для покупки канистры");
	}
}*/

CMD:buyrepaircar(playerid, params[])
{
    ShowPlayerBuyRepairCarDialog(playerid, GetNearestFuelStation(playerid, 10.0));
}

CMD:buyfuel(playerid, params[])
{
	ShowPlayerBuyJerricanDialog(playerid, GetNearestFuelStation(playerid, 10.0));

	return 1;
}

CMD:fill(playerid, params[])
{
	if(GetPlayerJob(playerid) != JOB_MECHANIC)
		return SendClientMessage(playerid, 0xCECECEFF, "Вы не автомеханик");

	if(!IsPlayerInJob(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны работать автомехаником");

	new job_car = GetPlayerJobCar(playerid);
	if(!IsPlayerInVehicle(playerid, job_car) || GetVehicleData(job_car, V_ACTION_ID) == VEHICLE_ACTION_ID_NONE)
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны работать автомехаником и находиться в рабочем транспорте");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Использование: /fill [id игрока] [кол-во топлива] [стоимость]");

	extract params -> new to_player, fill_fuel_count, fill_price;

	if(!IsPlayerConnected(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 15.0))
		return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	if(!IsPlayerDriver(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Клиент должен находиться за рулем");

	if(1 <= GetPlayerJobLoadItems(playerid) <= fill_fuel_count)
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет такого количества топлива");

	if(!(1 <= fill_price <= 1500))
		return SendClientMessage(playerid, 0xCECECEFF, "Стоимость должна быть до 1500 рублей");

	if(GetPlayerMoneyEx(to_player) < fill_price)
		return SendClientMessage(playerid, 0xCECECEFF, "У клиента нет с собой столько денег");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_FILL_CAR, fill_fuel_count, fill_price);
	return 1;
}

CMD:repair(playerid, params[])
{
	if(GetPlayerJob(playerid) != JOB_MECHANIC)
		return SendClientMessage(playerid, 0xCECECEFF, "Вы не автомеханик");

	if(!IsPlayerInJob(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны работать автомехаником");

	new job_car = GetPlayerJobCar(playerid);
	if(!IsPlayerInVehicle(playerid, job_car) || GetVehicleData(job_car, V_ACTION_ID) == VEHICLE_ACTION_ID_NONE)
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны работать автомехаником и находиться в рабочем транспорте");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Использование: /repair [id игрока] [стоимость]");

	extract params -> new to_player, repair_price;

	if(!IsPlayerConnected(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 15.0))
		return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	if(!IsPlayerDriver(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Клиент должен находиться за рулем");

	new Float: vehicle_health;
	GetVehicleHealth(GetPlayerVehicleID(to_player), vehicle_health);
	if(vehicle_health < 350.0 && !IsPlayerInRangeOfPoint(playerid, 80.0, 1180.0962,2500.5166,12.4769)) return SendClientMessage(playerid, 0xCECECEFF, "Транспорт клиента очень сильно поврежден, отвезите его на стоянку автомехаников {CCCC00}(/gps)");

	if(!(1 <= repair_price <= 8000))
		return SendClientMessage(playerid, 0xCECECEFF, "Стоимость должна быть до 8000 рублей");

	if(GetPlayerMoneyEx(to_player) < repair_price)
		return SendClientMessage(playerid, 0xCECECEFF, "У клиента нет с собой столько денег");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_REPAIR_CAR, repair_price);
	return 1;
}

CMD:getfuel(playerid, params[])
{
	if(GetPlayerJob(playerid) != JOB_MECHANIC)
		return SendClientMessage(playerid, 0xCECECEFF, "Вы не автомеханик");

	if(!IsPlayerInJob(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны работать автомехаником");

	new job_car = GetPlayerJobCar(playerid);
	if(!IsPlayerInVehicle(playerid, job_car) || GetVehicleData(job_car, V_ACTION_ID) == VEHICLE_ACTION_ID_NONE)
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны работать автомехаником и находиться в рабочем транспорте");

	new stationid = GetNearestFuelStation(playerid, 10.0);
	if(stationid != -1)
	{
		SetPVarInt(playerid, "nearest_fuel_st", stationid);

		if(IsFuelStationOwned(stationid))
		{
			if(GetFuelStationData(stationid, FS_FUELS) < 10)
				return SendClientMessage(playerid, 0xFF6600FF, "Хранилище этой АЗС пусто");
		}

		new fmt_str[150];
		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Топливо на АЗС:\t\t%d/10000 л\n"\
			"Стоимость 1 литра:\t%d руб\n\n"\
			"Введите кол-во бензина, которое хотите закупить\n"\
			"(число должно быть кратным 10)",
			GetFuelStationData(stationid, FS_FUELS),
			GetFuelStationData(stationid, FS_FUEL_PRICE)
		);
		Dialog(playerid, DIALOG_FUEL_STATION_BUY_FUEL_M, DIALOG_STYLE_INPUT, "{FFCD00}Закупка топлива", fmt_str, "Купить", "Отмена");
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Поблизости нет заправочных станций");

	return 1;
}

CMD:rentcar(playerid, params[])
{
	if(GetPlayerRentCar(playerid) != INVALID_VEHICLE_ID && playerid == rent_cars_data[GetPlayerRentCar(playerid) - first_rent_car_id][rent_car_tenant_id])
		return SendClientMessage(playerid, 0xFF6600FF, "Используйте /unrent чтобы разорвать текущий договор аренды");

	new vehicleid = GetPlayerVehicleID(playerid);
	if(GetVehicleData(vehicleid, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_RENT_CAR)
		return SendClientMessage(playerid, 0x999999FF, "Вы должны быть в машине, которую можно арендовать");

	SetPlayerData(playerid, P_RENT_CAR, vehicleid);
	rent_cars_data[vehicleid - first_rent_car_id][rent_car_tenant_id] = playerid;

	Dialog(playerid, -1, DIALOG_STYLE_MSGBOX, " ", " ", " ", " ");

	SendClientMessage(playerid, 0x66CC00FF, "Вы взяли транспорт в аренду");
	SendClientMessage(playerid, -1, "Используйте {00CC66}/lock 2 {FFFFFF}для открытия и закрытия дверей");
	SendClientMessage(playerid, -1, "Чтобы разорвать договор аренды введите {00CC66}/unrent");
	SendClientMessage(playerid, 0x999999FF, "Если Вы попадете в больницу или разобьете транспорт");
	SendClientMessage(playerid, 0x999999FF, "То договор будет расторгнут. Если Вы не закроете транспорт");
	SendClientMessage(playerid, 0x999999FF, "То его может арендовать другой игрок и Вы потеряете его");

	TogglePlayerControllable(playerid, true);

	return 1;
}

CMD:unrent(playerid, params[])
{
	new vehicleid = GetPlayerRentCar(playerid);
	if(!(vehicleid != INVALID_VEHICLE_ID && playerid == rent_cars_data[vehicleid - first_rent_car_id][rent_car_tenant_id]))
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет договора аренды транспорта");

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		RemovePlayerFromVehicle(playerid);

	SetPlayerData(playerid, P_RENT_CAR, INVALID_VEHICLE_ID);
	rent_cars_data[vehicleid - first_rent_car_id][rent_car_tenant_id] = INVALID_PLAYER_ID;

	SendClientMessage(playerid, 0xFFFF00FF, "Договор аренды транспорта расторгнут");
	return 1;
}

CMD:unfcar(playerid)
{
    new vehicleid = GetPlayerData(playerid, P_FRACTION_CAR);
	if (vehicleid == INVALID_VEHICLE_ID) {
		return;
	}
    if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_ORG_CAR)
    {
        SetPlayerData(playerid, P_FRACTION_CAR, INVALID_VEHICLE_ID);
        DestroyVehicle(vehicleid);
        SendClientMessage(playerid, -1, "Вы удалили транспорт!");
    }
    else
    	SendClientMessage(playerid, -1, "{808080}Ошибка:{FFFFFF} Вы не брали транспорт");
}

CMD:business(playerid, params[])
{
	new businessid = GetPlayerBusiness(playerid);
	if(businessid != -1)
	{
/*		static const
			music_name[6][9] = {"Отключен", "Звук 1", "Звук 2", "Звук 3", "Звук 4", "Звук 5"};

		if(GetBusinessData(businessid, B_ENTER_MUSIC) > sizeof music_name - 1)
		{
			SetBusinessData(businessid, B_ENTER_MUSIC, sizeof music_name - 1);
		}

		new fmt_str[1024];
		new city[MAX_ZONES_NAME + 1], area[MAX_ZONES_NAME + 1];
		GetCityName(GetBusinessData(businessid, B_POS_X), GetBusinessData(businessid, B_POS_Y), city);
		GetAreaName(GetBusinessData(businessid, B_POS_X), GetBusinessData(businessid, B_POS_Y), area);
		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Название:\t\t\t\t{339999}%s\n"\
			"{FFFFFF}Номер бизнеса:\t\t\t%d\n"\
			"Владелец:\t\t\t\t%s\n"\
			"Город / область:\t\t\t%s\n"\
			"Район:\t\t\t\t\t%s\n"\
			"Плата за вход:\t\t\t%d руб\n"\
			"Количество продуктов:\t\t%d из %d\n"\
			"Стоимость 1 продукта:\t\t%d руб\n"\
			"Уровень улучшений:\t\t\t%d\n"\
			"Баланс предприятия:\t\t\t%d руб\n"\
			"Бизнес арендован на:\t\t%d/30 дней\n"\
			"Звук при входе:\t\t\t{%s}%s\n"\
			"{FFFFFF}Гос. стоимость:\t\t\t%d руб\n"\
			"Аренда помещения:\t\t\t%d руб в день\n"\
			"Тип аренды:\t\t\t\t%s\n"\
			"Статус:\t\t\t\t\t%s\n\n"\
			"{669966}Для открытия панели управления вашим бизнесом\n"\
			"нажмите кнопку \"Изменить\"",
			GetBusinessData(businessid, B_NAME),
			businessid,
			GetBusinessData(businessid, B_OWNER_NAME),
			city,
			area,
			GetBusinessData(businessid, B_ENTER_PRICE),
			GetBusinessData(businessid, B_PRODS),
			GetBusinessMaxProd(businessid),
			GetBusinessData(businessid, B_PROD_PRICE),
			GetBusinessData(businessid, B_IMPROVEMENTS),
			GetBusinessData(businessid, B_BALANCE),
			GetBusinessData(businessid, B_RENT_DATE) <= gettime() ? 0 :
			GetElapsedTime(GetBusinessData(businessid, B_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
			!GetBusinessData(businessid, B_ENTER_MUSIC) ? ("FF3333") : ("33CC00"),
			music_name[GetBusinessData(businessid, B_ENTER_MUSIC)],
			GetBusinessData(businessid, B_PRICE),
			GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? (GetBusinessData(businessid, B_RENT_PRICE)) : (GetBusinessData(businessid, B_RENT_PRICE) / 2),
			GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? ("Полная") : ("Льготная"),
			GetBusinessData(businessid, B_LOCK_STATUS) ? ("{CC3333}Бизнес закрыт") : ("{66CC33}Бизнес открыт")
		);
		Dialog(playerid, DIALOG_BIZ_INFO, DIALOG_STYLE_MSGBOX, "{33AACC}Информация о бизнесе", fmt_str, "Изменить", "Отмена");*/
		
		CreateBusinessMenuTextDraws(playerid);
	}
	else SendClientMessage(playerid, 0x999999FF, "У Вас нет бизнеса");

	return 1;
}

CMD:buybiz(playerid, params[])
{
	if(GetPlayerBusiness(playerid) != -1)
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас уже есть бизнес. Чтобы купить другой необходимо продать старый");

	new businessid = GetNearestBusiness(playerid, 4.0);
	if(businessid != -1)
	{

//		if(!PlayerTotalOnline(playerid, 5))
//			return SendClientMessage(playerid, 0x999999FF, "Для покупки бизнеса необходимо отыграть 5 часов");

		if(IsBusinessNoBuy(businessid))
			return SendClientMessage(playerid, 0xCECECEFF, "Данный тип бизнеса в разработке, его еще нельзя купить!");

		SetPVarInt(playerid, "buy_biz_id", businessid);

		new fmt_str[256];
		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Название:\t\t\t{339999}%s\n"\
			"{FFFFFF}Стоимость:\t\t\t{6699FF}%d руб\n"\
			"{FFFFFF}Плата за аренду:\t\t{6699FF}%d руб в день\n\n"\
			"{669966}Вы уверены что хотите купить этот бизнес?",
			GetBusinessData(businessid, B_NAME),
			GetBusinessData(businessid, B_PRICE),
			GetBusinessData(businessid, B_RENT_PRICE)
		);
		Dialog(playerid, DIALOG_BIZ_BUY, DIALOG_STYLE_MSGBOX, "{33AACC}Покупка нового бизнеса", fmt_str, "Да", "Нет");
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Вы должны быть рядом с бизнесом, который хотите купить");

	return 1;
}

CMD:sellbiz(playerid, params[])
{
	new businessid = GetPlayerBusiness(playerid);
	if(businessid != -1)
	{
		Dialog
		(
			playerid, DIALOG_BIZ_SELL, DIALOG_STYLE_MSGBOX,
			"{FFCD00}Продажа бизнеса",
			"{FFFFFF}Вы уверены что хотите продать свой бизнес государству?\n\n"\
			"Вам будет возвращено его стоимость за вычитом 30%\n"\
			"Также будет возвращено 60% от стоимости купленных улучшений\n\n"\
			"Если Вы хотите продать бизнес другому игроку,\n"\
			"используйте команду /sellmybiz",
			"Да", "Нет"
		);
	}
	else SendClientMessage(playerid, 0x999999FF, "У Вас нет бизнеса");

	return 1;
}

CMD:sellmybiz(playerid, params[])
{
	new businessid = GetPlayerBusiness(playerid);
	if(businessid != -1)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sellmybiz [id игрока] [стоимость]");

		extract params -> new to_player, price;

		if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
			return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

		if(price < 1)
			return SendClientMessage(playerid, 0xCECECEFF, "Укажите стоимость продажи");

		new Float: b_pos_x = GetBusinessData(businessid, B_POS_X);
		new Float: b_pos_y = GetBusinessData(businessid, B_POS_Y);
		new Float: b_pos_z = GetBusinessData(businessid, B_POS_Z);

		if(GetPlayerMoneyEx(to_player) < price)
			return SendClientMessage(playerid, 0xCECECEFF, "У покупателя нет такого количества средств");

		if(!(IsPlayerInRangeOfPoint(playerid, 7.0, b_pos_x, b_pos_y, b_pos_z) && IsPlayerInRangeOfPoint(to_player, 7.0, b_pos_x, b_pos_y, b_pos_z)))
			SendClientMessage(playerid, 0xCECECEFF, "Вы и покупатель должны находиться рядом с бизнесом который хотите продать");

		SendPlayerOffer(playerid, to_player, OFFER_TYPE_SELL_BUSINESS, businessid, price);
	}
	else SendClientMessage(playerid, 0x999999FF, "У Вас нет бизнеса");

	return 1;
}

CMD:bizmusic(playerid, params[])
{
	new businessid = GetPlayerBusiness(playerid);
	if(businessid != -1)
	{
		if(GetBusinessData(businessid, B_IMPROVEMENTS) >= 4)
		{
			new fmt_str[13 + 1];
			new string[(sizeof fmt_str - 1) * (sizeof g_business_sound) + 1];

			string = "1. Отключен\n";
			for(new idx = 1; idx <= sizeof g_business_sound; idx ++)
			{
				format(fmt_str, sizeof fmt_str, "%d. Звук №%d\n", idx + 1, idx);
				strcat(string, fmt_str);
			}
			Dialog(playerid, DIALOG_BIZ_ENTER_MUSIC, DIALOG_STYLE_LIST, "{FFCD00}Звук при входе в бизнес", string, "Выбрать", "Закрыть");
		}
		else SendClientMessage(playerid, 0xCECECEFF, "Для использование этой функции необходим 4 уровень улучшения бизнеса");
	}
	else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет бизнеса");

	return 1;
}

CMD:manager(playerid, params[])
{
	new businessid = GetPlayerBusiness(playerid);
	if(businessid != -1)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /manager [id игрока]");

		extract params -> new to_player;

		if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
			return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

		if(!IsPlayerInRangeOfPlayer(playerid, to_player, 10.0))
			return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится слишком далеко");

		SendPlayerOffer(playerid, to_player, OFFER_TYPE_BUSINESS_MANAGER, businessid);
	}
	else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет бизнеса");

	return 1;
}

CMD:buy(playerid, params[])
{
	new businessid = GetPlayerInBiz(playerid),
		fmt_price[1024];
	if(businessid != -1)
	{
		if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_SHOP_24_7))
		{
			Dialog
			(
				playerid, DIALOG_BIZ_SHOP_24_7, DIALOG_STYLE_LIST,
				"{0099FF}Магазин 24/7",
                "1. Аптечка (2 шт)\t\t{00CC00}300 $\n"\
                "2. Наушники\t\t\t{00CC00}2500 $\n"\
                "3. Фотоаппарат (15 снимков)\t{00CC00}200 $\n"\
                "4. Букет цветов\t\t{00CC00}150 $\n"\
                "5. Трость\t\t\t{00CC00}600 $\n"\
                "6. Парашют\t\t\t{00CC00}800 $\n"\
                "7. Лотерейный билет\t\t{00CC00}400 $\n"\
                "8. Маска\t\t\t{00CC00}110 $\n"\
                "9. Мобильный телефон\t{00CC00}5000 руб\n"\
				"10. Изменить номер\t\t{00CC00}2000 руб\n"\
				"11. Изменить цвет телефона\t{00CC00}200 руб\n"\
				"12. Пополнить счёт телефона",
				"Купить", "Отмена"
			);
		}
		else if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_CELL_SALON))
		{
			Dialog
			(
				playerid, DIALOG_BIZ_CELL_SALON, DIALOG_STYLE_LIST,
				"{FFCD00}Сотовый салон",
				"1. Мобильный телефон\t{00CC00}2100 руб\n"\
				"2. Изменить номер\t\t{00CC00}450 руб\n"\
				"3. Изменить цвет телефона\t{00CC00}200 руб\n"\
				"4. Пополнить счёт телефона",
				"Купить", "Отмена"
			);
		}
		else if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_SHOP_GUN))
		{
		    
		    if(GetPlayerWeaponLic(playerid) != 1) return Send(playerid,-1,"У вас нет лицензии на оружие, получить ее можно у лицензера в мэрии.");
		    
  		    format(fmt_price, sizeof fmt_price,
			"{ffff00}1. {FFFFFF}Катана\t{ffff00}20000$\n"\
			"{ffff00}2. {FFFFFF}Бензопила\t{ffff00}100000$\n"\
			"{ffff00}3. {FFFFFF}Нож\t\t{ffff00}20000$\n"\
			"{ffff00}4. {FFFFFF}Бита\t\t{ffff00}20000$\n"\
			"{ffff00}5. {FFFFFF}Полицейская дубинка\t\t{ffff00}20000$\n"\
			"{ffff00}6. {FFFFFF}Кастет\t\t{ffff00}20000$\n"\
			"{ffff00}7. {FFFFFF}Дезерт Игл\t\t{ffff00}100000$\n"\
			"{ffff00}8. {FFFFFF}Дробовик\t\t{ffff00}100000$\n"\
			"{ffff00}9. {FFFFFF}MP5\t\t{ffff00}100000$\n"\
			"{ffff00}10. {FFFFFF}Винтовка М4\t\t{ffff00}100000$"
			);

			Dialog
			(
				playerid, DIALOG_BIZ_SHOP_GUN, DIALOG_STYLE_LIST,
				"Магазин оружия",
				fmt_price,
				"Купить", "Отмена"
			);
		}
		else SendClientMessage(playerid, 0xCECECEFF, "Вы должны быть в продуктовом магазине/сотовом салоне");
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Вы должны быть в продуктовом магазине/сотовом салоне");

	return 1;
}

CMD:healme(playerid, params[])
{
	if(GetPlayerData(playerid, P_MED_CHEST) <= 0)
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет с собой аптечки");

	AddPlayerData(playerid, P_MED_CHEST, -, 1);
	UpdatePlayerDatabaseInt(playerid, "healme", GetPlayerData(playerid, P_MED_CHEST));
	SetPlayerHealthEx(playerid, 60.0, true);

	GameTextForPlayer(playerid, "~b~+60 hp", 4000, 1);
	SendClientMessage(playerid, 0x3399FFFF, "Вы использовали аптечку. Здоровье пополнено на 60 единиц");

	ApplyAnimationEx(playerid, "ped", "gum_eat", 4.0, 0, 0, 0, 0, 0, 1);

	return 1;
}

CMD:present(playerid, params[])
{
	if(!IsPlayerHaveWeapon(playerid, WEAPON_FLOWER))
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет цветов");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /present [id игрока]");

	extract params -> new to_player;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 3.0))
		return SendClientMessage(playerid, 0xCECECEFF, "Игрок слишком далеко");

	if(IsPlayerHaveWeapon(to_player, WEAPON_FLOWER))
		return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока уже есть букет цветов");

	new fmt_str[64];

	new Float: angle;
	new Float: to_x, Float: to_y;
	new Float: x, Float: y, Float: z;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerPos(to_player, to_x, to_y, z);

	angle = GetAngleToPoint(to_x, to_y, x, y);

	SetPlayerFacingAngle(playerid, angle);
	SetPlayerFacingAngle(to_player, angle + 180.0);

	ApplyAnimationEx(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimationEx(to_player, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0, 0);

	format(fmt_str, sizeof fmt_str, "%s получил(а) от Вас цветы", GetPlayerNameEx(to_player));
	SendClientMessage(playerid, 0x3399FFFF, fmt_str);

	format(fmt_str, sizeof fmt_str, "%s подарил(а) Вам цветы", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, 0x3399FFFF, fmt_str);

	SetTimerEx("PresentFlowersToPlayer", 1500, false, "ii", playerid, to_player);
	return 1;
}

CMD:mask(playerid, params[])
{
	if(GetPlayerData(playerid, P_MASK) != 1)
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет с собой маски");

	SetPlayerData(playerid, P_MASK, 600 + 1);
	SetPlayerColorEx(playerid, 0x00000000);

	ApplyAnimationEx(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0, 0);
	SetPlayerChatBubble(playerid, "Надевает маску", 0xFF9900FF, 15.0, 5000);

	GameTextForPlayer(playerid, "~b~~h~invisible on", 2500, 4);
	SendClientMessage(playerid, 0x3399FFFF, "Ваше месторасположение на GPS скрыто на 10 минут");

	return 1;
}

CMD:dis(playerid)
{
    if(GetPlayerTeamEx(playerid) != TEAM_FBI) return SendClientMessage(playerid, 0x999999FF, "Доступно только ФСБ!");
    
	SetPlayerColorEx(playerid, 0x00000000);


	GameTextForPlayer(playerid, "~b~~h~invisible on", 2500, 4);
	SendClientMessage(playerid, 0x3399FFFF, "Вы успешно замаскировались!");

	return 1;
}

CMD:offdis(playerid)
{
    if(GetPlayerTeamEx(playerid) != TEAM_FBI) return SendClientMessage(playerid, 0x999999FF, "Доступно только ФСБ!");
    
    GameTextForPlayer(playerid, "~b~~h~invisible off", 2500, 4);
    
    SetPlayerColorEx(playerid, GetPlayerTeamColor(playerid));
    
    return 1;
}


/*CMD:gate(playerid, params[])
{
	if(!CheckNearestGate(playerid))
	{
		CallRemoteFunction("FS_PlayerUseButton", "i", playerid);
	}
	return 1;
}*/

CMD:home(playerid, params[])
{
	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
	if(houseid != -1)
	{
		new fmt_str[1024];
		new entranceid = GetHouseData(houseid, H_ENTRACE);
		new city[MAX_ZONES_NAME + 1], area[MAX_ZONES_NAME + 1];

		format(fmt_str, sizeof fmt_str, "{FFFFFF}Тип / название:\t\t\t{339999}%s\n", GetHouseData(houseid, H_NAME));
		if(entranceid != -1)
		{
			GetCityName(GetEntranceData(entranceid, E_POS_X), GetEntranceData(entranceid, E_POS_Y), city);
			GetAreaName(GetEntranceData(entranceid, E_POS_X), GetEntranceData(entranceid, E_POS_Y), area);
			format
			(
				fmt_str, sizeof fmt_str,
				"%s{FFFFFF}Номер подъезда:\t\t\t%d\n"\
				"Номер квартиры:\t\t\t%d\n"\
				"Город / область:\t\t\t%s\n"\
				"Район:\t\t\t\t\t%s\n",
				fmt_str,
				entranceid + 1,
				GetHouseData(houseid, H_FLAT_ID) + 1,
				city,
				area
			);
		}
		else
		{
			GetCityName(GetHouseData(houseid, H_POS_X), GetHouseData(houseid, H_POS_Y), city);
			GetAreaName(GetHouseData(houseid, H_POS_X), GetHouseData(houseid, H_POS_Y), area);
			format
			(
				fmt_str, sizeof fmt_str,
				"%s{FFFFFF}Номер дома:\t\t\t\t%d\n"\
				"Город / область:\t\t\t%s\n"\
				"Район:\t\t\t\t\t%s\n",
				fmt_str,
				houseid,
				city,
				area
			);
		}

		format
		(
			fmt_str, sizeof fmt_str,
			"%sСтоимость:\t\t\t\t%d руб\n"\
			"Дом оплачен на:\t\t\t%d/30 дней\n"\
			"Количество комнат:\t\t\t%d\n"\
			"Уровень улучшений:\t\t\t%d\n"\
			"Модель домашнего авто:\t\t{FF3333}Нет\n"\
			"{FFFFFF}Квартплата:\t\t\t\t%d руб в день\n"\
			"Тип квартплаты:\t\t\t%s\n"\
			"Статус:\t\t\t\t\t%s\n\n"\
			"{669966}Для открытия панели управления вашим домом\n"\
			"нажмите кнопку \"Изменить\"",
			fmt_str,
			GetHouseData(houseid, H_PRICE),
			GetHouseData(houseid, H_RENT_DATE) <= gettime() ? 0 :
			GetElapsedTime(GetHouseData(houseid, H_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
			GetHouseTypeInfo(GetHouseData(houseid, H_TYPE), HT_ROOMS),
			GetHouseData(houseid, H_IMPROVEMENTS),
			GetHouseData(houseid, H_IMPROVEMENTS) < 4 ? (GetHouseData(houseid, H_RENT_PRICE)) : (GetHouseData(houseid, H_RENT_PRICE) / 2),
			GetHouseData(houseid, H_IMPROVEMENTS) < 4 ? ("Обычная") : ("Пониженная"),
			GetHouseData(houseid, H_LOCK_STATUS) ? ("{CC3333}Дом закрыт") : ("{66CC33}Дом открыт")
		);
		Dialog(playerid, DIALOG_HOUSE_INFO, DIALOG_STYLE_MSGBOX, "{33AACC}Информация о доме", fmt_str, "Изменить", "Отмена");
	}
	else SendClientMessage(playerid, 0x999999FF, "У Вас нет дома");

	return 1;
}

CMD:sellhome(playerid, params[])
{
	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
	if(houseid != -1)
	{
		Dialog
		(
			playerid, DIALOG_HOUSE_SELL, DIALOG_STYLE_MSGBOX,
			"{FFCD00}Продажа дома",
			"{FFFFFF}Вы уверены что хотите продать свой дом государству?\n\n"\
			"Вам будет возвращено ее стоимость за вычитом 30%\n"\
			"Также будет возвращено 60% от стоимости купленных улучшений\n\n"\
			"Если Вы хотите продать дом другому игроку,\n"\
			"используйте команду /sellmyhome",
			"Да", "Нет"
		);
	}
	else SendClientMessage(playerid, 0x999999FF, "У Вас нет дома");

	return 1;
}

CMD:sellmyhome(playerid, params[])
{
	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
	if(houseid != -1)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sellmyhome [id игрока] [стоимость]");

		extract params -> new to_player, price;

		new house_price = GetHouseData(houseid, H_PRICE);

		if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
			return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

		if(GetPlayerHouse(to_player) != -1)
			return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока уже есть дом");

		if(!((house_price / 3) <= price <= (house_price * 3)))
			return SendClientMessage(playerid, 0xCECECEFF, "Стоимость не должна быть дороже или дешевле в 3 раза от стоимости дома");

		if(GetPlayerMoneyEx(to_player) < price)
			return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока нет такой суммы");

		if(!(IsPlayerInRangeOfHouse(playerid, houseid, 10.0) && IsPlayerInRangeOfHouse(to_player, houseid, 10.0)))
			return SendClientMessage(playerid, 0xCECECEFF, "Вы и покупатель должны находиться около дома который хотите продать");

		SendPlayerOffer(playerid, to_player, OFFER_TYPE_SELL_HOME, houseid, price);
	}
	else SendClientMessage(playerid, 0x999999FF, "У Вас нет дома");

	return 1;
}

CMD:live(playerid, params[])
{
	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
	if(houseid != -1)
	{
		new type = GetHouseData(houseid, H_TYPE);
		new rooms = GetHouseTypeInfo(type, HT_ROOMS);

		if(GetHouseRentersCount(houseid) >= rooms)
			return SendClientMessage(playerid, 0x999999FF, "Все комнаты Вашего дома уже заняты");

		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /live [id игрока]"); // [кол-во дней] [цена (необязательно)]

		extract params -> new to_player, days, price;

		if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
			return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

		if(GetPlayerHouse(to_player) != -1)
			return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока уже есть дом");

		/*
		if(!(300 <= price <= 10_000))
			return SendClientMessage(playerid, 0xCECECEFF, "Цена аренды должна быть от 300 до 10000 руб");

		else if(!(1 <= days <= 30))
			return SendClientMessage(playerid, 0xCECECEFF, "Кол-во дней аренды должно быть от 0 до 30");

		if(GetPlayerMoneyEx(to_player) < price)
			return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока нет такой суммы");
		*/

		if(!(IsPlayerInRangeOfHouse(playerid, houseid, 10.0) && IsPlayerInRangeOfHouse(to_player, houseid, 10.0)))
			return SendClientMessage(playerid, 0xCECECEFF, "Вы и арендатор должны находиться около дома который хотите сдать в аренду");

		SendPlayerOffer(playerid, to_player, OFFER_TYPE_HOME_RENT_ROOM, houseid);
	}
	else SendClientMessage(playerid, 0x999999FF, "У Вас нет дома");

	return 1;
}

CMD:liveout(playerid, params[])
{
	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_ROOM);
	if(houseid != -1)
	{
		Dialog
		(
			playerid, DIALOG_HOUSE_EVICT, DIALOG_STYLE_MSGBOX,
			"{FF9900}Выселение из дома",
			"{FFFFFF}Вы действительно хотите выселиться из дома?",
			"Да", "Нет"
		);
	}
	else SendClientMessage(playerid, 0x999999FF, "Вы нигде не проживаете");

	return 1;
}

CMD:makestore(playerid, params[])
{
	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
	if(houseid != -1)
	{
		if(GetHouseData(houseid, H_IMPROVEMENTS) >= 5)
		{
			if(GetPlayerInHouse(playerid) == houseid)
			{
				new type = GetHouseData(houseid, H_TYPE);
				if(IsPlayerInRangeOfPoint(playerid, 50.0, GetHouseTypeInfo(type, HT_ENTER_POS_X), GetHouseTypeInfo(type, HT_ENTER_POS_Y), GetHouseTypeInfo(type, HT_ENTER_POS_Z)))
				{
					Dialog
					(
						playerid, DIALOG_HOUSE_MOVE_STORE, DIALOG_STYLE_MSGBOX,
						"{FFCD00}Шкаф",
						"{FFFFFF}Вы хотите разместить шкаф в этом месте?",
						"Да", "Нет"
					);
				}
				else SendClientMessage(playerid, 0x999999FF, "Вы должны находиться у себя в доме");
			}
			else SendClientMessage(playerid, 0x999999FF, "Вы должны находиться у себя в доме");
		}
		else SendClientMessage(playerid, 0x999999FF, "Необходим 5 уровень улучшений для дома");
	}
	else SendClientMessage(playerid, 0x999999FF, "Функция доступна владельцам недвижимости");

	return 1;
}

CMD:use(playerid, params[])
{
	new house_id = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);

	if(house_id == -1) return SendClientMessage(playerid, 0x999999FF, "Функция доступна владельцам недвижимости");

	if(GetPlayerInHouse(playerid) != house_id) return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться в своём доме");

	if(GetHouseData(house_id, H_IMPROVEMENTS) < 5) return SendClientMessage(playerid, 0x999999FF, "Необходим 5 уровень улучшений для дома");

	if(!IsPlayerInRangeOfPoint(playerid, 3.0, GetHouseData(house_id, H_STORE_X), GetHouseData(house_id, H_STORE_Y), GetHouseData(house_id, H_STORE_Z)))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться у своего шкафа");

	Dialog
	(
		playerid, DIALOG_HOUSE_STORE, DIALOG_STYLE_LIST,
		"{FFCC00}Шкаф",
		"1. Положить металл\n\
		2. Положить наркотики\n\
		3. Положить оружие\n\
		4. Положить одежду\n\
		{99FF99}5. Взять металл\n\
		{99FF99}6. Взять наркотики\n\
		{99FF99}7. Взять оружие\n\
		{99FF99}8. Взять одежду",
		"Далее", "Закрыть"
	);

	return 1;
}

CMD:homelock(playerid, params[])
{
	new hotel_id = GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL);
	new room_id = GetPlayerData(playerid, P_HOUSE_ROOM);

	if(hotel_id != -1)
	{
		if(GetHotelData(hotel_id, room_id, H_STATUS))
		{
			SetHotelData(hotel_id, room_id, H_STATUS, false);

			GameTextForPlayer(playerid, "~g~~h~OЏKP‘ЏO", 2000, 4);
			SendClientMessage(playerid, 0x66CC00FF, "Номер открыт");
		}
		else
		{
			SetHotelData(hotel_id, room_id, H_STATUS, true);

			GameTextForPlayer(playerid, "~r~~h~€AKP‘ЏO", 2000, 4);
			SendClientMessage(playerid, 0xFF6600FF, "Номер закрыт");
		}

		new query[64];
		format(query, sizeof query, "UPDATE hotels SET status=%d WHERE id=%d LIMIT 1", GetHotelData(hotel_id, room_id, H_STATUS), GetHotelData(hotel_id, room_id, H_SQL_ID));
		mysql_query(mysql, query, false);
	}
	else SendClientMessage(playerid, 0x999999FF, "Вы не снимаете номер в гостинице");

	return 1;
}

CMD:exit(playerid, params[])
{
	if(GetPlayerInHouse(playerid) != -1)
	{
		new houseid = GetPlayerInHouse(playerid);
		if(GetHouseData(houseid, H_IMPROVEMENTS) > 5)
		{
			Dialog
			(
				playerid, DIALOG_ACTION_EXIT_HOUSE, DIALOG_STYLE_LIST,
				"{FFCC00}Выход",
				"1. Улица\n\
				2. Гараж",
				"Далее", "Закрыть"
			);
		}
		else
			ExitPlayerFromHouse(playerid, 3.0);
	}
	else if(GetPlayerData(playerid, P_IN_HOTEL_ROOM) != -1)
	{
		ExitPlayerFromHotelRoom(playerid);
	}
	else if(!GetPlayerInterior(playerid))
	{
		SendClientMessage(playerid, 0xCECECEFF, "Вы не в помещении");
	}

	return 1;
}

CMD:lift(playerid, params[])
{
	new entranceid = GetPlayerInEntrance(playerid);
	if(entranceid != -1)
	{
		new floor = GetPlayerInEntranceFloor(playerid);
		if(floor != -1)
		{
			if(!floor)
			{
				if(!IsPlayerInRangeOfPoint(playerid, 1.5, 30.5405, 1403.6593, 1508.4163))
					return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться около лифта");
			}
			else
			{
				if(!IsPlayerInRangeOfPoint(playerid, 1.5, 11.1776, 1377.5216, 1508.4163))
					return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться около лифта");
			}
			ShowPlayerEntranceFloorsLift(playerid, entranceid, floor);
		}
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Вы не в подъезде");

	return 1;
}

CMD:lock(playerid, params[])
{
	if(!strlen(params))
		return SendClientMessage(playerid, 0x999999FF, "Используйте: /lock [тип] (1-Личный транспорт 2-Арендованная машина 3-Рабочий транспорт 4-Доверенный транспорт)");

	extract params -> new type;

	new Float: radius = 20.0;
	new vehicleid = INVALID_VEHICLE_ID;

	switch(type)
	{
		case 1:
		{
			vehicleid = GetPlayerOwnableCar(playerid);

			if(vehicleid == INVALID_VEHICLE_ID)
			{
				if(GetPlayerOwnableCars(playerid) == 0)
					return SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
				else
					return SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
			}
		}
		case 2:
		{
			vehicleid = GetPlayerRentCar(playerid);

			if(vehicleid == INVALID_VEHICLE_ID)
				return SendClientMessage(playerid, 0x999999FF, "У Вас нет арендованной машины");
		}
		case 3:
		{
			vehicleid = GetPlayerJobCar(playerid);

			if(vehicleid == INVALID_VEHICLE_ID)
				return SendClientMessage(playerid, 0x999999FF, "Вы не можете использовать эту функцию");
		}
		case 4:
		{
			vehicleid = GetPlayerAllowedCar(playerid);

			if(vehicleid == INVALID_VEHICLE_ID)
				return SendClientMessage(playerid, 0x999999FF, "У Вас нет доверенного транспорта");
		}
		default:
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /lock [тип] (1-Личный транспорт 2-Арендованная машина 3-Рабочий транспорт 4-Доверенный транспорт)");
	}

	new Float: x, Float: y, Float: z;
	GetVehiclePos(vehicleid, x, y, z);

	if(IsPlayerInRangeOfPoint(playerid, radius, x, y, z))
	{
		new status = GetVehicleParam(vehicleid, V_LOCK);
		if(status)
		{
			if(type == 1)
			{
				Action(playerid, "открыл личный транспорт", _, true);
			}
			GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~ЏPAмCЊOPЏ~g~ OЏKP‘Џ", 3000, 3);
		}
		else
		{
			if(type == 1)
			{
				Action(playerid, "закрыл личный транспорт", _, true);
			}
			GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~ЏPAмCЊOPЏ~r~ €AKP‘Џ", 3000, 3);
		}
		SetVehicleParam(vehicleid, V_LOCK, status ^ VEHICLE_PARAM_ON);
	}
	else SendClientMessage(playerid, 0x999999FF, "Вы должны стоять рядом с транспортом");

	return 1;
}

CMD:key(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		if(GetPlayerOwnableCar(playerid) != INVALID_VEHICLE_ID || GetPlayerAllowedCar(playerid) != INVALID_VEHICLE_ID)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(!IsABike(vehicleid))
			{
				if(vehicleid == GetPlayerOwnableCar(playerid) || vehicleid == GetPlayerAllowedCar(playerid))
				{
					new index = GetVehicleData(vehicleid, V_ACTION_ID);
					new bool: status = GetOwnableCarData(index, OC_KEY_IN);

					if(status)
					{
						if(GetVehicleParam(vehicleid, V_ENGINE) == VEHICLE_PARAM_ON)
						{
							SetVehicleParam(vehicleid, V_ENGINE, VEHICLE_PARAM_OFF);
						}
						Action(playerid, "вытащил ключ из замка зажигания", _, false);
					}
					else Action(playerid, "вставил ключ в замок зажигания", _, false);

					SetOwnableCarData(index, OC_KEY_IN, status ^ true);
				//	SpeedometrKeyStatusInit(playerid, vehicleid);
				}
				else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в личном/доверенном транспорте");
			}
		}
		else
		{
			if(GetPlayerOwnableCars(playerid) == 0)
				SendClientMessage(playerid, 0x999999FF, "У Вас нет личного/доверенного транспорта");
			else
				SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
		}
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в транспорте");

	return 1;
}

CMD:getmycar(playerid, params[])
{
	new vehicleid = GetPlayerOwnableCar(playerid);
	if(vehicleid != INVALID_VEHICLE_ID)
	{
		new price = 300;
		new i_have_home = (GetPlayerHouse(playerid, HOUSE_TYPE_HOME) != -1 || GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) != -1);

		if(GetPlayerGPSInfo(playerid, G_ENABLED) == GPS_STATUS_OFF)
		{
			if(GetPlayerMoneyEx(playerid) >= price || i_have_home)
			{
				if(!i_have_home)
					GivePlayerMoneyEx(playerid, -price, "Метка ТС на GPS", true, true);

				new Float: x, Float: y, Float: z;
				GetVehiclePos(vehicleid, x, y, z);

				EnablePlayerGPS(playerid, 55, x, y, z, "Местоположение Вашего транспорта отмечено на GPS");
				return 1;
			}
			else SendClientMessage(playerid, 0x999999FF, "Недостаточно денег");
		}
		else SendClientMessage(playerid, 0xCECECEFF, "На Вашем GPS уже отмечено место");
	}
	else
	{
		if(GetPlayerOwnableCars(playerid) == 0)
			SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
		else
			SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
	}

	return 0;
}

/*CMD:sellfcar(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	new action_id = GetVehicleData(vehicleid, V_ACTION_ID);

	if(g_family_car[action_id][F_OWNER_ID] != GetPlayerData(playerid, P_FAMILY) + 1)
	{
		if(GetPlayerData(playerid, P_FAMILY_RANK) != 10)
			return SendClientMessage(playerid, 0x999999FF, "Вы не лидер семьи");

		new model_id = GetVehicleData(vehicleid, V_MODELID);
		if(model_id)
		{
			new fmt_str[256];

			new price = GetVehicleInfo(model_id-400, VI_PRICE);
			new percent = price * 20 / 100;

			format
			(
				fmt_str, sizeof fmt_str,
				"{FFFFFF}Модель:\t%s (№%d)\n"\
				"Стоимость:\t%d руб\n\n"\
				"Вы уверены что хотите продать транспорт?\n"\
				"На Ваш банковский счет семьи будет начислено %d руб",
				GetVehicleName(vehicleid),
				model_id,
				price,
				price - percent
			);
			Dialog(playerid, DIALOG_FAMILY_CAR_SELL, DIALOG_STYLE_MSGBOX, "{FFCD00}Продажа семейного транспорта", fmt_str, "Да", "Нет");
		}
	}
	else
	{
		SendClientMessage(playerid, 0x999999FF, "Это не транспорт вашей семьи.");
	}

	return 1;
}*/

CMD:sellcar(playerid, params[])
{
	new vehicleid = GetPlayerOwnableCar(playerid);
	if(vehicleid != INVALID_VEHICLE_ID)
	{
		new model_id = GetVehicleData(vehicleid, V_MODELID);
		if(model_id)
		{
			new fmt_str[256];

			new price = GetVehicleInfo(model_id-400, VI_PRICE);
			new percent = price * 20 / 100;

			format
			(
				fmt_str, sizeof fmt_str,
				"{FFFFFF}Модель:\t%s (№%d)\n"\
				"Стоимость:\t%d руб\n\n"\
				"Вы уверены что хотите продать транспорт?\n"\
				"На Ваш банковский счет будет начислено %d руб\n\n"\
				"Если Вы хотите продать его другому игроку,\n"\
				"используйте команду /sellmycar",
				GetVehicleName(vehicleid),
				model_id,
				price,
				price - percent
			);
			Dialog(playerid, DIALOG_OWNABLE_CAR_SELL, DIALOG_STYLE_MSGBOX, "{FFCD00}Продажа личного транспорта", fmt_str, "Да", "Нет");
		}
	}
	else
	{
		if(GetPlayerOwnableCars(playerid) == 0)
			SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
		else
			SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
	}

	return 1;
}

CMD:sellmycar(playerid, params[])
{
	new vehicleid = GetPlayerOwnableCar(playerid);
	if(vehicleid != INVALID_VEHICLE_ID)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sellmycar [id игрока] [стоимость]");

		extract params -> new to_player, price;

		new model_id = GetVehicleData(vehicleid, V_MODELID);
		if(model_id)
		{
			new car_price = GetVehicleInfo(model_id-400, VI_PRICE);

			if(!IsPlayerConnected(to_player) || to_player == playerid)
				return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

			if((GetPlayerOwnableCars(to_player) + 1) > GetPlayerCarSlots(to_player))
				return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока нет свободных слотов для транспорта");

			if(GetPlayerOwnableCar(to_player) != INVALID_VEHICLE_ID)
				return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок должен выгрузить его личный транспорт с сервера {888888}(/car > 7)");

			if(!(3000 <= price <= (car_price * 2)))
				return SendClientMessage(playerid, 0xCECECEFF, "Стоимость должа быть от 3000 рублей и не дороже в 2 раза гос. стоимости ТС");

			if(GetPlayerMoneyEx(to_player) < price)
				return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока нет такой суммы");

			new  Float: car_x, Float: car_y, Float: car_z;
			GetVehiclePos(vehicleid, car_x, car_y, car_z);

			if(IsPlayerInRangeOfPoint(playerid, 15.0, car_x, car_y, car_z) && IsPlayerInRangeOfPoint(to_player, 15.0, car_x, car_y, car_z))
			{
				SendPlayerOffer(playerid, to_player, OFFER_TYPE_SELL_OWNABLE_CAR, price, vehicleid);
			}
			else SendClientMessage(playerid, 0xCECECEFF, "Вы и покупатель должны находиться около ТС");
		}
	}
	else
	{
		if(GetPlayerOwnableCars(playerid) == 0)
			SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
		else
			SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
	}

	return 1;
}

CMD:allow(playerid, params[])
{
	new vehicleid = GetPlayerOwnableCar(playerid);
	if(vehicleid == INVALID_VEHICLE_ID)
	{
		if(GetPlayerOwnableCars(playerid) == 0)
			return SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
		else
			return SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
	}

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /allow [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	new fmt_text[71];

	if(GetPlayerAllowedCar(to_player) == vehicleid)
	{
		format(fmt_text, sizeof fmt_text, "Вы забрали у %s ключи от Вашего личного транспорта", GetPlayerNameEx(to_player));
		SendClientMessage(playerid, 0x3399FFFF, fmt_text);

		format(fmt_text, sizeof fmt_text, "%s забрал у Вас ключи от своего личного транспорта", GetPlayerNameEx(playerid));
		SendClientMessage(to_player, 0xFF5533FF, fmt_text);

		SetPlayerData(to_player, P_ALLOWED_CAR, INVALID_VEHICLE_ID);
	}
	else
	{
		if(!IsPlayerInRangeOfPlayer(playerid, to_player, 10.0)) return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится слишком далеко");

		SendPlayerOffer(playerid, to_player, OFFER_TYPE_GIVE_CAR_KEY);
	}

	return 1;
}

CMD:park(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в транспорте");

	new vehicleid = GetPlayerOwnableCar(playerid);
	if(vehicleid == INVALID_VEHICLE_ID)
	{
		if(GetPlayerOwnableCars(playerid) == 0)
			return SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
		else
			return SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
	}

	if(vehicleid != GetPlayerVehicleID(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в личном транспорте");

	new green_zone_id = GetPVarInt(playerid, "player_in_green_zone") - 1;

	if(green_zone_id != -1)
	{
		if(!g_green_zones[green_zone_id][GZ_ALLOW_PARK])
		{
			new fmt_text[144];

			format(fmt_text, sizeof fmt_text, "На территории {FFFF00}'%s' {3399FF}парковка личного транспорта запрещена. Выберите другое место для парковки", g_green_zones[green_zone_id][GZ_NAME]);
			SendClientMessage(playerid, 0x3399FFFF, fmt_text);

			return 1;
		}
	}

	new index = GetVehicleData(vehicleid, V_ACTION_ID);

	GetVehiclePos(vehicleid, GetOwnableCarData(index, OC_POS_X), GetOwnableCarData(index, OC_POS_Y), GetOwnableCarData(index, OC_POS_Z));
	GetVehicleZAngle(vehicleid, GetOwnableCarData(index, OC_ANGLE));

	SaveOwnableCar(vehicleid);
	return SendClientMessage(playerid, 0x66CC00FF, "Транспорт припаркован");
}

CMD:car(playerid, params[])
{
	if(GetPlayerOwnableCar(playerid) != INVALID_VEHICLE_ID)
	{
		Dialog
		(
			playerid, DIALOG_OWNABLE_CAR, DIALOG_STYLE_LIST,
			"{FFCD00}Система управления транспортом",
			"1. {669900}Открыть {FFFFFF}или {FF3300}закрыть {FFFFFF}транспорт\n"\
			"2. Вставить / вытащить ключи\n"\
			"3. Отметить транспорт на GPS {FF6600}(300 руб)\n"\
			"4. Содержимое багажника\n"\
			"5. Документы на транспорт\n"\
			"{888888}6. Припарковать транспорт\n"\
 			"{888888}7. Выгрузить транспорт с сервера",
			"Выбрать", "Закрыть"
		);
	}
	else
	{
		new fmt_text[640],
			Cache: result,
			id;

		mysql_format(mysql, fmt_text, sizeof fmt_text, "SELECT * FROM ownable_cars WHERE owner_id='%d'", GetPlayerAccountID(playerid));
		result = mysql_query(mysql, fmt_text, true);

		new rows = cache_num_rows();

		if(!rows)
			SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");

		else
		{
			if(rows == 1)
			{
				id = cache_get_field_content_int(0, "id");

				ShowOwnableCarLoadDialog(playerid, id);
			}
			else
			{
				new query[60],
					model_id,
					car_number[7];

				format(fmt_text, sizeof fmt_text, "");

				for(new i = 0; i < rows; i ++)
				{
					id = cache_get_field_content_int(i, "id");
					model_id = cache_get_field_content_int(i, "model_id") - 400;
					cache_get_field_content(i, "number", car_number);

					format(query, sizeof query, "{FFFFFF}%d. %s {888888}[%s]\n", i + 1, GetVehicleInfo(model_id, VI_NAME), car_number);
					strcat(fmt_text, query);
					SetPlayerListitemValue(playerid, i, id);
				}

				Dialog
				(
					playerid, DIALOG_OWNABLE_CAR_LIST, DIALOG_STYLE_LIST,
					"{FFCD00}Выберите транспорт",
					fmt_text,
					"Выбрать", "Закрыть"
				);
			}
		}

		cache_delete(result);
	}

	return 1;
}

CMD:trunk(playerid, params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		new vehicleid;
		new Float: x, Float: y, Float: z;
		new Float: angle, Float: distance;

		while((++vehicleid) < MAX_VEHICLES)
		{
			if(!GetVehicleData(vehicleid, V_MODELID)) continue;

			GetCoordVehicle(vehicleid, VEHICLE_COORD_TYPE_BOOT, x, y, z, angle, distance);
			if(!IsPlayerInRangeOfPoint(playerid, 1.0, x, y, z)) continue;

			ShowTrunkDialog(playerid, vehicleid, false);
			break;
		}
	}
	return 1;
}


/*CMD:ta(playerid, params[])
{
	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /ta [vehicleid] [item] [amount]");

	extract params -> new vehicleid, item, amount;

	if(AddTrunkItem(vehicleid, item, amount))
	{
		new fmt_str[128];

		format(fmt_str, sizeof fmt_str, "Вы положили \"%s\" в багажник, кол-во: %d %s", GetItemInfo(item, I_NAME), amount, GetItemInfo(item, I_NAME_COUNT));
		SendClientMessage(playerid, 0x3399FFFF, fmt_str);
	}
	else SendClientMessage(playerid, 0x999999FF, "Неверный тип предмета");

	return 1;
}*/


/*CMD:finit(playerid, params[])
{
	new query[128];

	new floor, flat;
	for(new idx; idx < 46; idx ++)
	{
		for(floor = 0; floor < GetEntranceData(idx, E_FLOORS); floor ++)
		{
			for(flat = 0; flat < 4; flat ++)
			{
				format(query, sizeof query, "INSERT INTO houses (price,rent_price,type,entrance) VALUES (%d,%d,%d,%d)", 400000 + (!random(3) ? 50000 : 100000), 500, 0, idx);
				mysql_query(mysql, query, false);
			}
		}
	}
	return 1;
}*/
/*
CMD:money(playerid, params[])
{
	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /money [кол-во]");

	extract params -> new money;

	if(!(1 <= money <= 100_000))
		return SendClientMessage(playerid, 0xCECECEFF, "За раз можно взять от 1 до 100.000");

	return GivePlayerMoneyEx(playerid, money, "test", true, true);
}*/
/*
CMD:test(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(IsAOwnableCar(vehicleid))
	{
		new index = GetVehicleData(vehicleid, V_ACTION_ID);
		new bool: param = GetOwnableCarData(index, OC_KEY_IN);

		SetOwnableCarData(index, OC_KEY_IN, param ^ true);
	}
	//SetRandomWeather();

	//new fmt_str[32];

	//format(fmt_str, sizeof fmt_str, "in_biz: %d", GetPlayerInBiz(playerid));
	//SendClientMessage(playerid, 0xCECECEFF, fmt_str);

	//new param = GetPVarInt(playerid, "test");
	//SetPVarInt(playerid, "test", param ^ 1);

	//extract params-> new itemid;
	//GivePlayerDrinkItem(playerid, itemid);


	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используй: /test [action id]");

	extract params -> new action_id;
	SetPlayerSpecialAction(playerid, action_id);


	return 1;
}
*/

/*CMD:veh(playerid, params[])
{
    if(!GetPlayerAdminCMDAllow(playerid, CMD_VEH))
	{
		SendClientMessage(playerid, -1, "У вас не куплена данная комманда /adonate -> покупка платных команд");
		return 1;
	}

    extract params -> new model_id, color_1, color_2; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /veh [id модели] [цвет 1] [цвет 2] [доступ игроков (не обязательно)]");

    if(!(400 <= model_id <= 611)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте модель от 400 до 611");

    new status;

    sscanf(params, "{d}{d}{d}d", status);

    if(!(0 <= status <= 1))
        return SendClientMessage(playerid, 0x999999FF, "Доступ игроков к транспорту: 0 - Нет доступа, 1 - Доступно любому игроку");

    new Float: x,
        Float: y,
        Float: z,
        Float: a;

    GetPlayerPos(playerid, x, y, z);
    GetPlayerFacingAngle(playerid, a);

    new vehicleid = CreateVehicle(model_id, x, y, z, a, color_1, color_2, -1, 0, VEHICLE_ACTION_TYPE_ADMIN_CAR, status);
    PutPlayerInVehicle(playerid, vehicleid, 0);

    new fmt_text[100];

    if(GetPlayerAdminEx(playerid) <= 5)
    {
        format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] создал транспорт (%d, %d, %d)",
        GetPlayerNameEx(playerid), playerid, model_id, color_1, color_2);

        SendMessageToAdmins(fmt_text, 0x999999FF);
    }

    format(fmt_text, sizeof fmt_text, "Создал транспорт (%d, %d, %d)", model_id, color_1, color_2);
    SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

    return 1;
}
*/

CMD:dvall(playerid)
{
    if(GetPlayerAdminEx(playerid) < 10) return 1;

    new total_car = 0;
    for(new i = 0; i < MAX_VEHICLES; i++)
    {
        if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_ADMIN_CAR)
        {
            DestroyVehicle(i);
            total_car ++;
        }

    }

    format(sctring, sizeof(sctring), "{FF0000}[SYSTEM] {FFFFFF}Вы удалили {00ff00}%i {FFFFFF}автомобилей созданных на сервере!", total_car);
    SendClientMessage(playerid, -1, sctring);
    format(sctring, sizeof(sctring), "[A] %s[%d] удалил весь созданный транспорт на сервере. (%i шт)",GetPlayerNameEx(playerid), playerid, total_car);
    SendMessageToAdmins(sctring, 0x999999FF);
    return 1;
}

CMD:veh(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 8) return 1;

	extract params -> new model_id, color_1, color_2; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /vec [id модели] [цвет 1] [цвет 2] [доступ игроков (не обязательно)]");

	if(!(400 <= model_id <= 611)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте модель от 400 до 611");

	new status;

	sscanf(params, "{d}{d}{d}d", status);

	if(!(0 <= status <= 1))
		return SendClientMessage(playerid, 0x999999FF, "Доступ игроков к транспорту: 0 - Нет доступа, 1 - Доступно любому игроку");

	new Float: x,
		Float: y,
		Float: z,
		Float: a;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	new vehicleid = CreateVehicle(model_id, x, y, z, a, color_1, color_2, -1, 0, VEHICLE_ACTION_TYPE_ADMIN_CAR, status);
	PutPlayerInVehicle(playerid, vehicleid, 0);

	new fmt_text[100];

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] создал транспорт (%d, %d, %d)",
		GetPlayerNameEx(playerid), playerid, model_id, color_1, color_2);

		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	format(fmt_text, sizeof fmt_text, "Создал транспорт (%d, %d, %d)", model_id, color_1, color_2);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}
CMD:coord(playerid)
{
	new Float:x, Float:y, Float:z; // ??????????
	GetPlayerPos(playerid, x, y, z); // ?????????? ??????????
	printf("%f,%f,%f.", x, y, z);
	return true;
}
CMD:pos(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) == 0) return 1;

	new Float: x, Float: y, Float: z, interior, virtual_world;

	if(sscanf(params, "P<,>fff", x, y, z))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /pos [x y z]");

	sscanf(params, "P<,>{fff}dd", interior, virtual_world);

	return SetPlayerPosEx(playerid, x, y, z, interior, virtual_world);
}

CMD:d(playerid, params[])
{
	if(!GetPlayerTeamEx(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Вы не состоите в организациях");
	else if(TEAM_OPG_ARZAMASKAYA <= GetPlayerTeamEx(playerid) <= TEAM_OPG_LYTKARINSKAYA) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна для сотрудников гос. организаций");
	else if(IsPlayerMuted(playerid) > 0) return SendClientMessage(playerid, 0xFF6600FF, "Доступ в чат заблокирован. Время до разблокировки: {66CC33}/time");
	else if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /d [текст]");

	new fmt_msg[144];

	format(fmt_msg, sizeof fmt_msg, "[D] %s %s[%d]: %s", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, params);

	if(IsAIP(params))
	{
      	SendClientMessage(playerid, -1, "Подозрения в рекламе!");
       	return false;
    }

	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		if(!IsPlayerLogged(i)) continue;
		if(!GetPlayerTeamEx(i)) continue;
		if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

		SendClientMessage(i, 0xFF9999FF, fmt_msg);
	}

	SetPlayerChatBubble(playerid, "сказал(а) что-то в рацию организаций", 0xDD99FFAA, 10.0, 4000);

	return 1;
}

CMD:dd(playerid, params[])
{
	if(!GetPlayerTeamEx(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Вы не состоите в организациях");
	else if(TEAM_OPG_ARZAMASKAYA <= GetPlayerTeamEx(playerid) <= TEAM_OPG_LYTKARINSKAYA) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна для сотрудников гос. организаций");
	else if(IsPlayerMuted(playerid) > 0) return SendClientMessage(playerid, 0xFF6600FF, "Доступ в чат заблокирован. Время до разблокировки: {66CC33}/time");
	else if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /dd [текст]");

	new fmt_msg[144];

	format(fmt_msg, sizeof fmt_msg, "(( [D] %s %s[%d]: %s ))", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, params);

	if(IsAIP(params))
	{
      	SendClientMessage(playerid, -1, "Подозрения в рекламе!");
       	return false;
    }

	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		if(!IsPlayerLogged(i)) continue;
		if(!GetPlayerTeamEx(i)) continue;
		if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

		SendClientMessage(i, 0xFF9999FF, fmt_msg);
	}

	SetPlayerChatBubble(playerid, "сказал(а) что-то в рацию организаций", 0xDD99FFAA, 10.0, 4000);

	return 1;
}

CMD:r(playerid, params[])
{
	if(!(GetPlayerTeamEx(playerid) || GetPlayerJob(playerid))) return SendClientMessage(playerid, 0xCECECEFF, "Вы нигде не работаете/не состоите в организациях");
	else if(IsPlayerMuted(playerid) > 0) return SendClientMessage(playerid, 0xCECECEFF, "Доступ в чат заблокирован. Время до разблокировки: {66CC33}/time");
	else if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /r [текст]");

	new fmt_msg[144];

	format(fmt_msg, sizeof fmt_msg, "[R] %s %s[%d]: %s", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, params);

	if(!GetPlayerTeamEx(playerid))
		SendMessageToJob(GetPlayerJob(playerid), fmt_msg), SendClientMessage(playerid,-1,"Работаит");//	SendMessageToJob(GetPlayerJob(playerid), fmt_msg, 0x33CC66FF, _, true);
	else
	    SendMessageToTeam(GetPlayerTeamEx(playerid), fmt_msg, 0x33CC66FF);

	SetPlayerChatBubble(playerid, "сказал(а) что-то в рацию", 0xDD99FFAA, 10.0, 4000);
	return 1;
}

CMD:rn(playerid, params[])
{
	if(!(GetPlayerTeamEx(playerid) || GetPlayerJob(playerid))) return SendClientMessage(playerid, 0xCECECEFF, "Вы нигде не работаете/не состоите в организациях");
	// else if(TEAM_GANG_GROVE <= GetPlayerTeamEx(playerid) <= TEAM_GANG_AZTECAS) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна для сотрудников гос. организаций");
	else if(IsPlayerMuted(playerid) > 0) return SendClientMessage(playerid, 0xCECECEFF, "Доступ в чат заблокирован. Время до разблокировки: {66CC33}/time");
	else if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /rn [текст]");

	new fmt_msg[144];

	format(fmt_msg, sizeof fmt_msg, "(( OOC: [R] %s %s[%d]: %s ))", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, params);

	if(1 <= GetPlayerTeamEx(playerid) < MAX_ORG)
		SendMessageToTeam(GetPlayerTeamEx(playerid), fmt_msg, 0x33CC66FF);
	else
		SendMessageToJob(GetPlayerJob(playerid), fmt_msg, 0x33CC66FF, _);

	SetPlayerChatBubble(playerid, "сказал(а) что-то в рацию", 0xDD99FFAA, 10.0, 4000);
	return 1;
}

/*CMD:ff(playerid, params[])
{
	if(!(1 <= GetPlayerTeamEx(playerid) < MAX_ORG)) return SendClientMessage(playerid, 0x999999FF, "Вы не состоите в организациях");
	if(IsPlayerMuted(playerid) > 0) return SendClientMessage(playerid, 0xFF6600FF, "Доступ в чат заблокирован. Время до разблокировки: {66CC33}/time");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /ff [текст]");

	new fmt_msg[144];
	format(fmt_msg, sizeof fmt_msg, "(( [F] %s %s[%d]: %s ))", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, params);

	if(IsAIP(params))
	{
      	SendClientMessage(playerid, -1, "Подозрения в рекламе!");
       	return false;
    }

	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		if(!IsPlayerLogged(i)) continue;
		if(!GetPlayerTeamEx(i)) continue;
		if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

		if(GetFamilyChatID(GetPlayerTeamEx(i)) != GetFamilyChatID(GetPlayerTeamEx(playerid))) continue;

		SendClientMessage(i, 0x6699CCFF, fmt_msg);
	}
	return 1;
}*/

/*CMD:r(playerid, params[])
{
	if(!(1 <= GetPlayerTeamEx(playerid) < MAX_ORG)) return SendClientMessage(playerid, 0x999999FF, "Вы не состоите в организациях");
	if(IsPlayerMuted(playerid) > 0) return SendClientMessage(playerid, 0xFF6600FF, "Доступ в чат заблокирован. Время до разблокировки: {66CC33}/time");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /f [текст]");

	new fmt_msg[144];
	format(fmt_msg, sizeof fmt_msg, "[F] %s %s[%d]: %s", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, params);

	if(IsAIP(params))
	{
      	SendClientMessage(playerid, -1, "Подозрения в рекламе!");
       	return false;
    }

	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		if(!IsPlayerLogged(i)) continue;
		if(!GetPlayerTeamEx(i)) continue;
		if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

		if(GetFamilyChatID(GetPlayerTeamEx(i)) != GetFamilyChatID(GetPlayerTeamEx(playerid))) continue;

		SendClientMessage(i, 0x6699CCFF, fmt_msg);
	}
	return 1;
}*/

CMD:gnews(playerid, params[])
{
	if(!(TEAM_GOVERNMENT <= GetPlayerTeamEx(playerid) <= TEAM_FBI)) return SendClientMessage(playerid, 0x999999FF, "Вам недоступна данная функция");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна лидерам организации и их заместителям");
	if(IsPlayerMuted(playerid) > 0) return SendClientMessage(playerid, 0xFF6600FF, "Доступ в чат заблокирован. Время до разблокировки: {66CC33}/time");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /gnews [текст]");

	if(IsAIP(params))
	{
      	SendClientMessage(playerid, -1, "Подозрения в рекламе!");
       	return false;
    }

	new fmt_msg[170 + 1];
	format(fmt_msg, sizeof fmt_msg, "Гос.новости: %s[%d]: %s", GetPlayerNameEx(playerid), playerid, params);
	SendClientMessageToAll(0x4466CCFF,  fmt_msg);

	return 1;
}
alias:gnews("gov")

CMD:invite(playerid, params[])
{
	if(!(1 <= GetPlayerTeamEx(playerid) < MAX_ORG)) return SendClientMessage(playerid, 0x999999FF, "Вам недоступна данная функция");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна лидерам организации и их заместителям");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /invite [id игрока]");

	extract params -> new to_player;
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	if(1 <= GetPlayerTeamEx(to_player) < MAX_ORG) return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок уже состоит в организации");
	if(GetPlayerData(to_player, P_WARN)) return SendClientMessage(playerid, 0xCECECEFF, "У игрока есть предупреждения");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 10.0)) return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится слишком далеко");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_INVITE);
	return 1;
}

CMD:uninvite(playerid, params[])
{
	if(!(1 <= GetPlayerTeamEx(playerid) < MAX_ORG)) return SendClientMessage(playerid, 0x999999FF, "Вам недоступна данная функция");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна лидерам организации и их заместителям");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /uninvite [id игрока] [причина]");

	extract params -> new to_player, string:reason[32];

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!(1 <= strlen(reason) <= 32))
		return SendClientMessage(playerid, 0xCECECEFF, "Введите причину увольнения");
	/*
	if(GetPlayerTeamEx(playerid) == TEAM_GOVERNMENT && GetPlayerJob(playerid) >= 10)
	{
		if(!(1 <= GetPlayerTeamEx(to_player) <= TEAM_PPS) || GetPlayerJob(to_player) == 10)
			return SendClientMessage(playerid, 0xCECECEFF, "Вы можете уволить любого сотрудника гос. организации, кроме ФСБ");
	}
	else
	{*/

	if(GetPlayerTeamEx(to_player) != GetPlayerTeamEx(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок не состоит в Вашей организации");

	if(GetPlayerJob(to_player) >= GetPlayerJob(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Нельзя уволить уволить заместителя/лидера организации");

	// }

	UnInvite(playerid, to_player, reason);

	return 1;
}

CMD:rang(playerid, params[])
{
	if(!(1 <= GetPlayerTeamEx(playerid) < MAX_ORG)) return SendClientMessage(playerid, 0x999999FF, "Вам недоступна данная функция");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна лидерам организации и их заместителям");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /rang [id игрока] [+/-]");
	extract params -> new to_player, string:give_rang[2];
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(GetPlayerTeamEx(to_player) != GetPlayerTeamEx(playerid)) return SendClientMessage(playerid, 0x999999FF, "Этот игрок не состоит в Вашей организации");
	if(GetPlayerJob(to_player) >= 10) return SendClientMessage(playerid, 0x999999FF, "Нельзя повысить или понизить лидера организации");

	new current_rang = GetPlayerJob(to_player);

	new fmt_msg[75];
	if(give_rang[0] == '+')
	{
		if((current_rang + 1) >= GetPlayerJob(playerid)) return SendClientMessage(playerid, 0x999999FF, "Нельзя повысить больше своего ранга");

		GetPlayerJob(to_player)++;
		format(fmt_msg, sizeof fmt_msg, "Ваш ранг в организации был повышен до %d (%s)", GetPlayerJob(to_player), GetPlayerJobAndRankName(to_player));
		SendClientMessage(to_player, 0x3399FFFF, fmt_msg);
	}
	else if(give_rang[0] == '-')
	{
		if((current_rang - 1) < 1) return SendClientMessage(playerid, 0x999999FF, "Нельзя понизить ниже 1 ранга");

		GetPlayerJob(to_player)--;
		format(fmt_msg, sizeof fmt_msg, "Ваш ранг в организации был понижен до %d (%s)", GetPlayerJob(to_player), GetPlayerJobAndRankName(to_player));
		SendClientMessage(to_player, 0x3399FFFF, fmt_msg);
	}
	else return SendClientMessage(playerid, 0xCECECEFF, "Введите действие: '+' чтобы повысить или '-' чтобы понизить");

	if(GetPlayerTeamEx(to_player) == TEAM_GOVERNMENT && IsValidDynamic3DTextLabel(GetPlayerData(to_player, P_ADVISOR_LABEL)))
	{
		DestroyDynamic3DTextLabel(GetPlayerData(to_player, P_ADVISOR_LABEL));
		SetPlayerData(to_player, P_ADVISOR_LABEL, Text3D: -1);
	}

	if(!GetPlayerSex(to_player))
	{
		SetPlayerData(playerid, P_OSKIN, GetTeamData(GetPlayerTeamEx(to_player), O_SKINS)[GetPlayerJob(to_player)-1]);
		ResetSkin(to_player);
	}

	format(fmt_msg, sizeof fmt_msg, "Вы %s ранг %s[%d] до %d (%s)", (give_rang[0] == '+') ? ("повысили") : ("понизили"),  GetPlayerNameEx(to_player), to_player, GetPlayerJob(to_player), GetPlayerJobAndRankName(to_player));
	SendClientMessage(playerid, 0x3399FFFF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "UPDATE accounts SET org_skin=%d,job=%d WHERE id=%d", GetPlayerData(to_player, P_OSKIN), GetPlayerJob(to_player), GetPlayerAccountID(to_player));
	mysql_query(mysql, fmt_msg, false);

	format(fmt_msg, sizeof fmt_msg, "%s %s[acc:%d] до %d (%s)", (give_rang[0] == '+') ? ("Повысил") : ("Понизил"),  GetPlayerNameEx(to_player), to_player, GetPlayerJob(to_player), GetPlayerJobAndRankName(to_player));

	SendLog(playerid, LOG_TYPE_FRACTION, fmt_msg);

	return 1;
}

CMD:changeskin(playerid, params[])
{
	if(!(1 <= GetPlayerTeamEx(playerid) < MAX_ORG)) return SendClientMessage(playerid, 0x999999FF, "Вам недоступна данная функция");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0x999999FF, "Функция доступна лидерам организации и их заместителям");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /changeskin [id игрока]");
	extract params -> new to_player;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(GetPlayerTeamEx(to_player) != GetPlayerTeamEx(playerid)) return SendClientMessage(playerid, 0x999999FF, "Этот игрок не состоит в Вашей организации");
	if(GetPlayerSex(to_player)) return SendClientMessage(playerid, 0x999999FF, "Нельзя изменить внешность игрокам с женским полом");

	new team_id = GetPlayerTeamEx(playerid);

	new fmt_str[18];
	new text[(sizeof fmt_str) * 10];
	new old_skin;
	new count;

	SetPVarInt(playerid, "change_team_skin_playerid", to_player);

	for(new i; i < 10; i ++)
	{
		if(old_skin == GetTeamData(team_id, O_SKINS)[i]) continue;

		SetPlayerListitemValue(playerid, count, i);
		count ++;

		old_skin = GetTeamData(team_id, O_SKINS)[i];
		format(fmt_str, sizeof fmt_str, "Скин %d (id %d)\n", count, old_skin);
		strcat(text, fmt_str);
	}
	Dialog(playerid, DIALOG_TEAM_CHANGE_SKIN, DIALOG_STYLE_LIST, "Выберите внешность для игрока:", text, "Ок", "Отмена");

	return 1;
}

CMD:showall(playerid, params[])
{
	if(!(1 <= GetPlayerTeamEx(playerid) < MAX_ORG)) return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная функция");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна лидерам организации и их заместителям");

	new query[75];
	format(query, sizeof query, "SELECT name, score, job FROM accounts WHERE team = %d ORDER BY job DESC", GetPlayerTeamEx(playerid));
	mysql_tquery(mysql, query, "ShowOrgAllPlayers", "i", playerid);
	return 1;
}

public: ShowOrgAllPlayers(playerid)
{
	new rows = cache_num_rows();

	new p_name[21];
	new lvl, rang;

	new fmt_str[33];
	new text[1290] = "Уровень\tРанг\tИмя\n\n{FFFFFF}";

	new idx, j = rows;
	if(j > 45)
		j = 45;

	for(idx = 0; idx < j; idx ++)
	{
		cache_get_row(idx, 0, p_name);
		lvl = cache_get_row_int(idx, 1);
		rang = cache_get_row_int(idx,2);

		format(fmt_str, sizeof fmt_str, "%d\t%d\t%s\n", lvl, rang, p_name);
		strcat(text, fmt_str);
	}

	format(fmt_str, sizeof fmt_str, "{00CC00}Показаны %d/%d игроков", idx, rows);
	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, fmt_str, text, "Закрыть", "");
	return 1;
}

CMD:find(playerid, params[])
{
	if(!(GetPlayerTeamEx(playerid) || GetPlayerJob(playerid))) return SendClientMessage(playerid, 0xCECECEFF, "Вы нигде не работаете/не состоите в организациях");

	ShowTeamStructureDialog(playerid, GetPlayerTeamEx(playerid));
	return 1;
}

stock ShowTeamStructureDialog(playerid, teamid)
{
	new string[1500];
	new fmt_str[40];

	if(teamid)
	{
		string = "Уровень\tРанг\tТелефон\tИмя\n\n{FFFFFF}";

		for(new i; i < MAX_PLAYERS; i ++)
		{
			if(!IsPlayerConnected(i)) continue;
			else if(!IsPlayerLogged(i)) continue;
			else if(GetPlayerTeamEx(i) != teamid) continue;

			format(fmt_str, sizeof fmt_str, "%d\t\t%d\t%d\t\t%s", GetPlayerLevel(i), GetPlayerJob(i), GetPlayerPhone(i), GetPlayerNameEx(i));
			strcat(string, fmt_str);

			if(IsPlayerAFK(i))
				strcat(string, "-AFK");

			strcat(string, "\n");
		}

		if(IsTeamSubdivision(teamid))
			Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFCC00}Члены подразделения online", string, "Закрыть", "");
		else
			Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFCC00}Члены организации online", string, "Закрыть", "");
	}
	else
	{
		string = "Уровень\tТелефон\tИмя\n\n{FFFFFF}";

		for(new i; i < MAX_PLAYERS; i ++)
		{
			if(!IsPlayerConnected(i)) continue;
			else if(!IsPlayerLogged(i)) continue;
			else if(GetPlayerJob(i) != GetPlayerJob(playerid)) continue;

			format(fmt_str, sizeof fmt_str, "%d\t%d%s%s", GetPlayerLevel(i), GetPlayerPhone(i), GetPlayerPhone(i) > 0 ? ("\t") : ("\t\t"), GetPlayerNameEx(i));
			strcat(string, fmt_str);

			if(IsPlayerAFK(i))
				strcat(string, "-AFK");

			if(IsPlayerInJob(i))
				strcat(string, " *");

			strcat(string, "\n");
		}

		Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFCC00}Сотрудники online", string, "Закрыть", "");
	}
	return 1;
}

CMD:leaders(playerid, params[])
{
	new fmt_text[75],
		list[sizeof fmt_text * 10 + 50] = "Организация - Должность - Имя - Телефон{FFFFFF}\n";

	foreach(new i : Player)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(!GetPlayerTeamEx(i)) continue;
		else if(GetPlayerJob(i) != 10) continue;

		format(fmt_text, sizeof fmt_text, "\n%s - %s - %s[%d] - %d", GetTeamName(GetPlayerTeamEx(i)), GetPlayerJobAndRankName(i), GetPlayerNameEx(i), i, GetPlayerPhone(i));
		strcat(list, fmt_text);
	}

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFCD00}Лидеры онлайн", list, "Закрыть", "");

	return 1;
}

CMD:liclist(playerid, params[])
{
	new fmt_text[78],
		list[sizeof fmt_text * 10 + 50] = "Организация - Должность - Имя - Телефон{FFFFFF}\n";

	foreach(new i : Player)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(GetPlayerTeamEx(i) != TEAM_GOVERNMENT) continue;
		else if(GetPlayerJob(i) != 6) continue;

		format(fmt_text, sizeof fmt_text, "\nПравительство - Лицензёр - %s[%d] - тел. %d", GetPlayerNameEx(i), i, GetPlayerPhone(i));
		strcat(list, fmt_text);
	}

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFCD00}Лицензёры онлайн", list, "Закрыть", "");

	return 1;
}

CMD:debtorsell(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT) return SendClientMessage(playerid, 0x999999FF, "Функция доступна сотрудникам правительства");
	if(GetPlayerJob(playerid) < 4) return SendClientMessage(playerid, 0xCECECEFF, "Команда доступна сотрудникам правительства с 4 ранга");

	Dialog
	(
		playerid, DIALOG_DEBTOR_SELL_LIST, DIALOG_STYLE_LIST,
		"Выберите действие",
		"1. Выселить должника из жилья\n\
		2. Забрать предприятие у должника\n\
		3. Забрать АЗС у должника",
		"Далее", "Закрыть"
	);
	return 1;
}

CMD:debtorlist(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT) return SendClientMessage(playerid, 0x999999FF, "Функция доступна сотрудникам правительства");
	if(GetPlayerJob(playerid) < 3) return SendClientMessage(playerid, 0xCECECEFF, "Команда доступна сотрудникам правительства с 3 ранга");

	Dialog
	(
		playerid, DIALOG_DEBTORLIST, DIALOG_STYLE_LIST,
		"Выберите тип собственности",
		"1. Жилье\n\
		2. Предприятия\n\
		3. Заправочные станции",
		"Выбрать", "Закрыть"
	);
	return 1;
}

stock ShowDebtorListDialog(playerid, type)
{
	new
		fmt_str[36 + 1],
		text[((sizeof fmt_str) * 20) + 1],
		cur_time = gettime(),
		idx,
		count;

	if(type == 0)
	{
		for(idx = 0, count = 0; idx < g_house_loaded; idx ++)
		{
			if(count > 20) break;
			if(GetHouseData(idx, H_OWNER_ID) < 1) continue;
			if((((GetHouseData(idx, H_RENT_DATE) - cur_time) / 86400) + 1) > 0) continue;
			if(GetHouseData(idx, H_EVICTION)) continue;

			SetPlayerListitemValue(playerid, count, idx);
			count ++;

			if(GetHouseData(idx, H_TYPE))
			{
				format(fmt_str, sizeof fmt_str, "кв. %d под. %d (%s)\n", idx % 6 + 1, GetHouseData(idx, H_ENTRACE) + 1, "Нижегородская обл.");
			}
			else
			{
				format(fmt_str, sizeof fmt_str, "%d (%s)\n", idx, "Нижегородская обл.");
			}
			strcat(text, fmt_str);
		}
		if(!count) return SendClientMessage(playerid, 0xCECECEFF, "Должников по оплате аренды за жилье нет");

		Dialog(playerid, DIALOG_DEBTORLIST_HOUSE, DIALOG_STYLE_LIST, "{FFCC00}Жилье должников", text, "Отметить", "Назад");
	}
	else if(type == 1)
	{
		for(idx = 0, count = 0; idx < g_business_loaded; idx ++)
		{
			if(count > 20) break;
			if(GetBusinessData(idx, B_OWNER_ID) < 1) continue;
			if((((GetBusinessData(idx, B_RENT_DATE) - cur_time) / 86400) + 1) > 0) continue;
			if(GetBusinessData(idx, B_EVICTION)) continue;

			SetPlayerListitemValue(playerid, count, idx);
			count ++;

			format(fmt_str, sizeof fmt_str, "%d (%s)\n", idx, "Нижегородская обл.");
			strcat(text, fmt_str);
		}
		if(!count) return SendClientMessage(playerid, 0xCECECEFF, "Должников по оплате аренды за предприятия нет");

		Dialog(playerid, DIALOG_DEBTORLIST_BIZ, DIALOG_STYLE_LIST, "{FFCC00}Предприятия должников", text, "Отметить", "Назад");
	}
	else
	{
		for(idx = 0, count = 0; idx < g_fuel_station_loaded; idx ++)
		{
			if(count > 20) break;
			if(GetFuelStationData(idx, FS_OWNER_ID) < 1) continue;
			if((((GetFuelStationData(idx, FS_RENT_DATE) - cur_time) / 86400) + 1) > 0) continue;
			if(GetFuelStationData(idx, FS_EVICTION)) continue;

			SetPlayerListitemValue(playerid, count, idx);
			count ++;

			format(fmt_str, sizeof fmt_str, "%d (%s)\n", idx, "Нижегородская обл.");
			strcat(text, fmt_str);
		}
		if(!count) return SendClientMessage(playerid, 0xCECECEFF, "Должников по оплате аренды за АЗС нет");

		Dialog(playerid, DIALOG_DEBTORLIST_FUEL_ST, DIALOG_STYLE_LIST, "{FFCC00}Заправочные станции должников", text, "Отметить", "Назад");
	}

	return 1;
}

stock SellDebtorsProperty()
{
	new cur_time = gettime(),
		query[180];

	for(new i; i < g_house_loaded; i ++)
	{
		if(!GetHouseData(i, H_EVICTION)) continue;
		if(GetHouseData(i, H_RENT_DATE) < cur_time) continue;

		format(query, sizeof query, "UPDATE houses SET owner_id='0',lock='0',eviction='0' WHERE id='%d'", GetHouseData(i, H_SQL_ID));
		mysql_query(mysql, query, false);

		new owner_player = GetPlayerIDBySqlID(GetHouseData(i, H_OWNER_ID));
		if(IsPlayerConnected(owner_player) && IsPlayerLogged(owner_player)) {
			SetPlayerData(owner_player, P_HOUSE, -1);
			SetPlayerData(owner_player, P_HOUSE_ROOM, -1);
			SetPlayerData(owner_player, P_HOUSE_TYPE, -1);
			mysql_format(mysql, query, sizeof query, "UPDATE accounts SET `house`=-1,`house_room`=-1,`house_type`=-1 WHERE `id`=%d LIMIT 1", GetPlayerAccountID(owner_player));
			mysql_query(mysql, query, false);
		} else {
			mysql_format(mysql, query, sizeof query, "UPDATE accounts SET `house`=-1,`house_room`=-1,`house_type`=-1 WHERE `id`=%d LIMIT 1", GetHouseData(i, H_OWNER_ID));
			mysql_query(mysql, query, false);
		}
		SetHouseData(i, H_OWNER_ID, 0);
		SetHouseData(i, H_IMPROVEMENTS,		0);

		SetHouseData(i, H_EVICTION, 0);

		SetHouseData(i, H_RENT_DATE,		0);
		SetHouseData(i, H_LOCK_STATUS,		false);

		UpdateHouse(i);

		HouseHealthInit(i);
		HouseStoreInit(i);
	}

	for(new i; i < g_business_loaded; i ++)
	{
		if(!GetBusinessData(i, B_EVICTION)) continue;
		if(GetBusinessData(i, B_RENT_DATE) < cur_time) continue;

		format(query, sizeof query, "UPDATE business SET owner_id='0',products='0',prod_price='0',lock='0',eviction='0' WHERE id='%d'", GetBusinessData(i, B_SQL_ID));
		mysql_query(mysql, query, false);

		new owner_player = GetPlayerIDBySqlID(GetBusinessData(i, B_OWNER_ID));
		if(IsPlayerConnected(owner_player) && IsPlayerLogged(owner_player)) {
			SetPlayerData(owner_player, P_BUSINESS, -1);
			mysql_format(mysql, query, sizeof query, "UPDATE accounts SET `business`=-1 WHERE `id`=%d LIMIT 1", GetPlayerAccountID(owner_player));
			mysql_query(mysql, query, false);
		} else {
			mysql_format(mysql, query, sizeof query, "UPDATE accounts SET `business`=-1 WHERE `id`=%d LIMIT 1", GetBusinessData(i, B_OWNER_ID));
			mysql_query(mysql, query, false);
		}

		SetBusinessData(i, B_OWNER_ID, 0);
		SetBusinessData(i, B_IMPROVEMENTS, 		0);

		SetBusinessData(i, B_EVICTION, 0);

		SetBusinessData(i, B_PRODS, 			0);
		SetBusinessData(i, B_PROD_PRICE,		0);

		SetBusinessData(i, B_BALANCE,			0);
		SetBusinessData(i, B_RENT_DATE,			0);
		SetBusinessData(i, B_ENTER_MUSIC,		0);
		SetBusinessData(i, B_LOCK_STATUS,		false);

		BusinessHealthPickupInit(i);

		format(query, sizeof query, "DELETE FROM business_gps WHERE bid=%d", i);
		mysql_query(mysql, query, false);

		g_business_gps_init = false;

		//format(query, sizeof query, "UPDATE business_profit SET view=0 WHERE bid=%d AND view=1", GetBusinessData(i, B_SQL_ID));
		//mysql_query(mysql, query, false);

		CallLocalFunction("UpdateBusinessLabel", "i", i);
	}

	for(new i; i < g_fuel_station_loaded; i ++)
	{
		if(!GetFuelStationData(i, FS_EVICTION)) continue;
		if(GetFuelStationData(i, FS_RENT_DATE) < cur_time) continue;

		format(query, sizeof query, "UPDATE fuel_stations SET owner_id='0',fuels='1000',fuel_price='3',lock='0',eviction='0' WHERE id='%d'", GetFuelStationData(i, FS_SQL_ID));
		mysql_query(mysql, query, false);

		new owner_player = GetPlayerIDBySqlID(GetFuelStationData(i, FS_OWNER_ID));
		if(IsPlayerConnected(owner_player) && IsPlayerLogged(owner_player)) {
			SetPlayerData(owner_player, P_FUEL_ST, -1);
			format(query, sizeof query, "UPDATE accounts SET `fuel_st`=-1 WHERE `id`=%d LIMIT 1", GetPlayerAccountID(owner_player));
			mysql_query(mysql, query, false);
		} else {
			format(query, sizeof query, "UPDATE accounts SET `fuel_st`=-1 WHERE `id`=%d LIMIT 1", GetFuelStationData(i, FS_OWNER_ID));
			mysql_query(mysql, query, false);
		}

		SetFuelStationData(i, FS_OWNER_ID, 0);
		SetFuelStationData(i, FS_IMPROVEMENTS, 0);

		SetFuelStationData(i, FS_EVICTION, 0);

		SetFuelStationData(i, FS_FUELS, 		1000);
		SetFuelStationData(i, FS_FUEL_PRICE,	3);
		SetFuelStationData(i, FS_BUY_FUEL_PRICE,0);

		SetFuelStationData(i, FS_BALANCE,		0);
		SetFuelStationData(i, FS_RENT_DATE,		0);
		SetFuelStationData(i, FS_LOCK_STATUS,	false);

		//format(query, sizeof query, "UPDATE fuel_stations_profit SET view=0 WHERE fid=%d AND view=1",  GetFuelStationData(i, FS_SQL_ID));
		//mysql_query(mysql, query, false);

		CallLocalFunction("UpdateFuelStationLabel", "i", i);
	}

	return 1;
}

stock SellDebtorsHotels()
{
	new cur_time = gettime();
	new query[200];

	mysql_format(mysql, query, sizeof query, "UPDATE accounts a,hotels h SET a.house=-1,a.house_room=0,a.house_type=-1,h.owner_id=0,h.rent_time=0,h.status=1 WHERE a.id=h.owner_id AND h.rent_time < %d", cur_time);
	mysql_query(mysql, query, false);

	new hotel_owner_playerid;

	for(new h_id, r_id; h_id < MAX_HOTELS; h_id ++)
	{
		for(r_id = 0; r_id < MAX_HOTEL_ROOMS; r_id ++)
		{
			if(GetHotelData(h_id, r_id, H_RENT_DATE) < cur_time) continue;

			GetPlayerID(GetHotelData(h_id, r_id, H_OWNER_NAME), hotel_owner_playerid);

			SetHotelData(h_id, r_id, H_OWNER_ID, 0);
			SetHotelData(h_id, r_id, H_RENT_DATE, 0);

			if(IsPlayerConnected(hotel_owner_playerid) && IsPlayerLogged(hotel_owner_playerid))
			{
				if(GetPlayerHouse(hotel_owner_playerid, HOUSE_TYPE_HOTEL) == h_id)
				{
					SetPlayerData(hotel_owner_playerid, P_HOUSE, 		-1);
					SetPlayerData(hotel_owner_playerid, P_HOUSE_ROOM, 	-1);
					SetPlayerData(hotel_owner_playerid, P_HOUSE_TYPE, 	-1);

					SendClientMessage(hotel_owner_playerid, 0xFF6600FF, "Вы были выселены из гостиницы за неуплату услуг");
				}
			}
		}
	}
	return 1;
}

CMD:smenu(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) != 5) return SendClientMessage(playerid, 0x999999FF, "Функция доступна советникам правительства");

	Dialog
	(
		playerid, DIALOG_ADVISOR_MENU, DIALOG_STYLE_LIST,
		"{33CC66}Меню советника",
		"1. Показать/скрыть бейджик\n\
		2. Показать/скрыть рацию организации\n\
		3. Показать состав организации",
		"Выбрать", "Закрыть"
	);
	return 1;
}

CMD:givelic(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) != 6) return SendClientMessage(playerid, 0x999999FF, "Функция доступна только лицензерам");

	if(!strlen(params))
	{
		SendClientMessage(playerid, 0xCECECEFF, "Используйте: /givelic [id игрока] [идентификатор лицензии] [цена]");
		SendClientMessage(playerid, 0x999999FF, "Индификаторы лицензий: 1 - Вод. права базового уровня | 2 - Вод. права профессионального уровня | 3 - На оружие");
		return 1;
	}

	extract params -> new to_player, lic_id, price;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0))
		return SendClientMessage(playerid, 0x999999FF, "Игрок слишком далеко");

	if(!(1 <= lic_id <= 3)) return SendClientMessage(playerid, 0x999999FF, "Неверный идентификатор лицензии");

	switch(lic_id)
	{
		case 1:
		{
			if(GetPlayerData(to_player, P_DRIVING_LIC) >= 1)
				return SendClientMessage(playerid, 0x999999FF, "У игрока уже есть лицензия на вождение базового уровня");
		}
		case 2:
		{
			if(GetPlayerData(to_player, P_DRIVING_LIC) == 2)
				return SendClientMessage(playerid, 0x999999FF, "У игрока уже есть лицензия на вождение профессионального уровня");
		}
		case 3:
		{
			if(GetPlayerData(to_player, P_WEAPON_LIC) == 1)
				return SendClientMessage(playerid, 0x999999FF, "У игрока уже есть лицензия на оружие");
		}
	}

	new lic_price_limits[3][2] =
	{
		{1000, 	10000},
		{10000, 30000},
		{30000, 50000}
	};

	if(!(lic_price_limits[lic_id - 1][0] <= price <= lic_price_limits[lic_id - 1][1]))
	{
		new fmt_text[60];

		format(fmt_text, sizeof fmt_text, "Стоимость лицензии должна быть от %d до %d рублей",
		lic_price_limits[lic_id - 1][0], lic_price_limits[lic_id - 1][1]);

		SendClientMessage(playerid, 0x999999FF, fmt_text);

		return 1;
	}

	if(GetPlayerMoneyEx(to_player) < price)
		return SendClientMessage(playerid, 0x999999FF, "У игрока нет такой суммы денег");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_GIVE_LIC, lic_id, price);

	return 1;
}

CMD:free(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) != 7) return SendClientMessage(playerid, 0x999999FF, "Функция доступна только адвокатам");

	extract params -> new to_player, price; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /free [id игрока] [цена]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0))
		return SendClientMessage(playerid, 0x999999FF, "Игрок слишком далеко");

	if(!GetPlayerData(to_player, P_JAIL))
		return SendClientMessage(playerid, 0x999999FF, "Игрок не находится в тюрьме");

	if(!(500 <= price <= 50000))
		return SendClientMessage(playerid, 0x999999FF, "Стоимость должна быть от 500 до 50.000 рублей");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_JAIL_FREE, price);

	return 1;
}

CMD:medhelp(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_HOSPITAL) return SendClientMessage(playerid, 0x999999FF, "Вы не медицинский работник");
	if(!IsPlayerInRangeOfPoint(playerid, 99.0, 2038.0170,1419.8960,999.1563)) return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в больнице");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Использование: /medhelp [id игрока] [стоимость лечения]");
	extract params -> new to_player, price;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "Пациент слишком далеко");
	if(GetPlayerData(to_player, P_OCCUPIED_BED) == -1) return SendClientMessage(playerid, 0x999999FF, "Этот игрок не лежит в больнице");
	if(!(100 <= price <= 5000)) return SendClientMessage(playerid, 0xCECECEFF, "Стоимость лечения должна быть от 100 до 5000 рублей");
	if(GetPlayerMoneyEx(to_player) < price) return SendClientMessage(playerid, 0x999999FF, "У пациента нет с собой столько денег");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_MEDHELP, price);
	return 1;
}

CMD:medbed(playerid, params[])
{
    if(IsPlayerInRangeOfPoint(playerid, 100.0, 2035.7643,1416.3625,999.7344))
    {
        if(GetPlayerHealthEx(playerid) >= 75)
        {
            return SendClientMessage(playerid, 0xCECECEFF, "Вы не нуждаетесь в лечении");
        }
        new bedid = -1;

        for(new i; i < sizeof g_med_bed_pos; i++)
        {
            if(!IsPlayerInRangeOfPoint(playerid, 2.5, g_med_bed_pos[i][0], g_med_bed_pos[i][1], g_med_bed_pos[i][2])) continue;
            bedid = i;
            break;
        }

        if(bedid == -1) return 1;
        else if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1) return SendClientMessage(playerid, 0xCECECEFF, "Вы уже заняли койку");
        else if(g_med_bed_used[bedid]) return SendClientMessage(playerid, 0xCECECEFF, "Эта койка занята");

        else
        {
            SetPlayerData(playerid, P_OCCUPIED_BED, bedid);

            g_med_bed_used[bedid] = true;

            new fmt_msg[85];

            format(fmt_msg, sizeof fmt_msg, "Койка №%d\n\n{ffff00}Пациент:\n%s", bedid + 1, GetPlayerNameEx(playerid));
            UpdateDynamic3DTextLabelText(g_med_bed_label[bedid], 0xFFFFFFFF, fmt_msg);

            format(fmt_msg, sizeof fmt_msg, "Вы заняли койку №%d. В зависимости от состояния здоровья лечение может занять время", bedid + 1);
            SendClientMessage(playerid, 0x32a44bFF, fmt_msg);

            SendClientMessage(playerid, -1, "Чтобы выписаться подойдите к врачу или выйдите за пределы больницы");
        }
        SetTimer("HospitalTreatment", (random(5) + 1) * 1000, false);
    }

    return 1;
}

CMD:out(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_HOSPITAL) return SendClientMessage(playerid, 0x999999FF, "Вы не медицинский работник");
	if(!IsPlayerInRangeOfPoint(playerid, 99.0, 2038.0170,1419.8960,999.1563)) return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в больнице");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /out [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");
	if(GetPlayerData(to_player, P_OCCUPIED_BED) == -1) return SendClientMessage(playerid, 0x999999FF, "Игрок должен находиться на лечении");

	ClearMedBed(to_player, GetPlayerData(playerid, P_OCCUPIED_BED));
	SetPlayerData(to_player, P_HOSPITAL, false);

	SetPlayerChatBubble(to_player, "Выписан", 0x66CC00FF, 10.0, 2000);

	new fmt_msg[60];
	format(fmt_msg, sizeof fmt_msg, "Медицинский работник %s выписал Вас из больницы", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, 0x3399FFFF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Вы выписали %s из больницы", GetPlayerNameEx(to_player));
	SendClientMessage(playerid, 0x3399FFFF, fmt_msg);
	return 1;
}

CMD:heal(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_HOSPITAL) return SendClientMessage(playerid, 0x999999FF, "Вы не медицинский работник");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Использование: /heal [id игрока] [цена за лечение]");
	extract params -> new to_player, price;

	new vehicleid = GetPlayerVehicleID(playerid);

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(playerid)) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(GetVehicleData(vehicleid, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_MED_CAR || GetPlayerVehicleID(to_player) != vehicleid) return SendClientMessage(playerid, 0x999999FF, "Вы или Ваш пациент находитесь не в машине скорой помощи");
	if(!(0 <= price <= 5000)) return SendClientMessage(playerid, 0xCECECEFF, "Стоимость лечения должна быть от 0 до 5000 рублей");
	if(GetPlayerMoneyEx(to_player) < price) return SendClientMessage(playerid, 0x999999FF, "У пациента нет с собой столько денег");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_HEAL, price);
	return 1;
}

CMD:changesex(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_HOSPITAL) return SendClientMessage(playerid, 0x999999FF, "Вы не медицинский работник");
	if(!IsPlayerInRangeOfPoint(playerid, 99.0, 2038.0170,1419.8960,999.1563)) return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться в больнице");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Использование: /changesex [id игрока] [стоимость операции]");
	extract params -> new to_player, price;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");
	if(GetPlayerData(to_player, P_OCCUPIED_BED) == -1) return SendClientMessage(playerid, 0xCECECEFF, "Игрок должен находиться на стационарном лечении");
	if(!(500000 <= price <= 1000000)) return SendClientMessage(playerid, 0xCECECEFF, "Стоимость операции должна быть от 500000 до 1000000 рублей");
	if(GetPlayerMoneyEx(to_player) < price) return SendClientMessage(playerid, 0x999999FF, "У пациента нет с собой столько денег");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_CHANGE_SEX, price);
	return 1;
}

CMD:cuff(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0x999999FF, "Вы не работник правоохранительных органов");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /cuff [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	if(GetPlayerData(to_player, P_CUFFED)) return SendClientMessage(playerid, 0x999999FF, "Игрок уже закован в наручники");

	SetPlayerSpecialAction(to_player, SPECIAL_ACTION_CUFFED);
//	SetPlayerAttachedObject(to_player, A_OBJECT_SLOT_HAND, 19418, A_OBJECT_BONE_RIGHT_HAND, -0.011, 0.028, -0.022, -15.600012, -33.699977, -81.700035, 0.891999, 1.00, 1.168);
	SetPlayerData(to_player, P_CUFFED, true);

	new fmt_str[90];

	format(fmt_str, sizeof fmt_str, "%s %s надел на %s наручники", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	return 1;
}

CMD:uncuff(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid) && GetPlayerAdminEx(playerid) == 0) return SendClientMessage(playerid, 0x999999FF, "Вы не работник правоохранительных органов");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /uncuff [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	if(!GetPlayerData(to_player, P_CUFFED)) return SendClientMessage(playerid, 0x999999FF, "Игрок не закован в наручники");

	SetPlayerSpecialAction(to_player, SPECIAL_ACTION_NONE);
	RemovePlayerAttachedObject(to_player, A_OBJECT_SLOT_HAND);
	SetPlayerData(to_player, P_CUFFED, false);

	new fmt_str[90];

	format(fmt_str, sizeof fmt_str, "%s %s снял с %s наручники", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	return 1;
}

CMD:putpl(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0x999999FF, "Вы не работник правоохранительных органов");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /putpl [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	if(!GetPlayerData(to_player, P_CUFFED)) return SendClientMessage(playerid, 0x999999FF, "Игрок не закован в наручники");

	new vehicle_id = GetPlayerVehicleID(playerid);
	if(!vehicle_id) return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться в автомобиле");

	if(!IsPlayerInPoliceCar(playerid))
		return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться в служебном транспорте");

	new bool: is_there_some_free_places;

	for(new i = 2; i < 3; i++)
	{
		if(IsVehicleSeatOccupied(vehicle_id, i)) continue;
		PutPlayerInVehicle(to_player, vehicle_id, i);
		is_there_some_free_places = true;
		break;
	}

	if(!is_there_some_free_places) return SendClientMessage(playerid, 0x999999FF, "Задние места Вашего автомобиля заняты");

	new fmt_str[90];

	format(fmt_str, sizeof fmt_str, "%s %s посадил %s в машину", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	return 1;
}

CMD:search(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0x999999FF, "Вы не работник правоохранительных органов");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /search [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	new fmt_text[110],
		bool: some_is_found;

	format(fmt_text, sizeof fmt_text, "%s %s произвёл обыск у %s", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendMessageInLocal(playerid, fmt_text, 0xDD90FFFF, 25.0);

	if(GetPlayerData(to_player, P_DRUGS))
	{
		format(fmt_text, sizeof fmt_text, "У %s[%d] обнаружено %d г наркотиков", GetPlayerData(to_player, P_DRUGS));
		SendClientMessage(playerid, 0xFFFF00FF, fmt_text);

		some_is_found = true;
	}
	if(GetPlayerData(to_player, P_AMMO))
	{
		format(fmt_text, sizeof fmt_text, "У %s[%d] обнаружено %d патронов", GetPlayerData(to_player, P_AMMO));
		SendClientMessage(playerid, 0xFFFF00FF, fmt_text);

		some_is_found = true;
	}

	if(!some_is_found) SendClientMessage(playerid, 0xFFFF00FF, "Ничего не найдено");

	return 1;
}

CMD:su(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0x999999FF, "Вы не работник правоохранительных органов");

	extract params -> new criminalid, string:message[66]; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /su [id игрока] [причина]");

	if(!IsPlayerConnected(criminalid) || !IsPlayerLogged(criminalid) || criminalid == playerid) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, criminalid, 6.0)) return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	if(!strlen(message)) return SendClientMessage(playerid, 0x999999FF, "Введите причину");

	if(GetPlayerSuspect(criminalid) >= 6) return SendClientMessage(playerid, 0x999999FF, "Игрок имеет максимальный уровень розыска");

	new fmt_text[255];

	AddPlayerData(criminalid, P_SUSPECT, +, 1);
	SetPlayerSuspectInit(criminalid);
	UpdatePlayerDatabaseInt(criminalid, "suspect", GetPlayerData(criminalid, P_SUSPECT));

	format(fmt_text, sizeof fmt_text, "%s объявил Вас в розыск. Причина: %s. Текущий уровень розыска %d", GetPlayerNameEx(playerid), message, GetPlayerSuspect(criminalid));
	SendClientMessage(criminalid, 0x3399FFFF, fmt_text);
	format(fmt_text, sizeof fmt_text, "Вы объявили %s в розыск. Причина: %s. Текущий уровень розыска %d", GetPlayerNameEx(criminalid), message, GetPlayerSuspect(criminalid));
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "%s %s[%d] объявил %s[%d] в розыск [%d/6], причина: %s", GetPlayerJobAndRankName(playerid),
	GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(criminalid), criminalid, GetPlayerSuspect(criminalid), message);

	SendMessageToPoliceTeam(fmt_text, 0xFFC000FF, playerid);
	
	AddPlayerData(playerid, P_PROGRESS_EXP_3, +, 1);
	UpdatePlayerDatabaseInt(playerid, "ProgressExp3", GetPlayerData(playerid, P_PROGRESS_EXP_3));

	if(GetPlayerData(playerid, P_PROGRESS_EXP_3) == 500)
	{
	    SendClientMessage(playerid, COR_QUEST, "[Достижения]: "c_b"Вы успешно выполнили достижение "c_i"'Полиция №2'. "c_b"Награда: "c_s"100 DONATE-RUB");
	    GivePlayerDonate(playerid, 100, "Выполнение достижения / фракция");

	    SetPlayerData(playerid, P_PROGRESS_3, 1);
	    UpdatePlayerDatabaseInt(playerid, "Progress3", 1);
	    
	    AddPlayerData(playerid, P_TOP_4, +, 1);
		UpdatePlayerDatabaseInt(playerid, "TOP_Progress", GetPlayerData(playerid, P_TOP_4));
	}

	return 1;
}

CMD:clear(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0x999999FF, "Вы не работник правоохранительных органов");

	extract params -> new criminalid; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /clear [id игрока]");

	if(!IsPlayerConnected(criminalid) || !IsPlayerLogged(criminalid) || criminalid == playerid) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!GetPlayerSuspect(criminalid)) return SendClientMessage(playerid, 0x999999FF, "Игрок не имеет розыска");

	new fmt_text[255];

	SetPlayerData(criminalid, P_SUSPECT, 0);
	SetPlayerSuspectInit(criminalid);
	UpdatePlayerDatabaseInt(criminalid, "suspect", 0);

	format(fmt_text, sizeof fmt_text, "%s удалил Вас из базы разыскиваемых", GetPlayerNameEx(playerid));
	SendClientMessage(criminalid, 0x3399FFFF, fmt_text);
	format(fmt_text, sizeof fmt_text, "Вы удалили %s из базы разыскиваемых", GetPlayerNameEx(criminalid));
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "%s %s[%d] удалил %s[%d] из базы разыскиваемых людей", GetPlayerJobAndRankName(playerid),
	GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(criminalid), criminalid);

	SendMessageToPoliceTeam(fmt_text, 0xFFC000FF, playerid);

	return 1;
}

CMD:arrest(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0x999999FF, "Вы не работник правоохранительных органов");

	extract params -> new criminalid; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /arrest [id игрока]");

	if(!IsPlayerConnected(criminalid) || !IsPlayerLogged(criminalid) || criminalid == playerid) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!GetPlayerData(criminalid, P_CUFFED)) return SendClientMessage(playerid, 0x999999FF, "Игрок не в наручниках");

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 2576.0847,-2416.1118,22.4946) ||
		!IsPlayerInRangeOfPoint(criminalid, 10.0, 2576.0847,-2416.1118,22.4946)) return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться у здания Отделения Полиции №2");

	JailPlayer(criminalid, GetPlayerSuspect(criminalid) * 5);

	SetPlayerData(criminalid, P_SUSPECT, 0);
	UpdatePlayerDatabaseInt(criminalid, "suspect", 0);

	SetPlayerSuspectInit(criminalid);

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "Вы задержали преступника %s[%d] и заключили его под стражу", GetPlayerNameEx(criminalid), criminalid);
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "%s %s[%d] задержал Вас и заключил под стражу", GetPlayerJobAndRankName(playerid),
	GetPlayerNameEx(playerid), playerid);
	SendClientMessage(criminalid, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "%s %s[%d] заключил %s[%d] под стражу", GetPlayerJobAndRankName(playerid),
	GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(criminalid), criminalid);
	SendMessageToPoliceTeam(fmt_text, 0xFFC000FF, playerid);

	SendClientMessage(criminalid, 0xCECECEFF, "Время до окончания заключения: {CCCC00}/time");
	
	AddPlayerData(playerid, P_PROGRESS_EXP_4, +, 1);
	UpdatePlayerDatabaseInt(playerid, "ProgressExp4", GetPlayerData(playerid, P_PROGRESS_EXP_4));

	if(GetPlayerData(playerid, P_PROGRESS_EXP_4) == 500)
	{
	    SendClientMessage(playerid, COR_QUEST, "[Достижения]: "c_b"Вы успешно выполнили достижение "c_i"'Полиция №3'. "c_b"Награда: "c_s"100 DONATE-RUB");
	    GivePlayerDonate(playerid, 100, "Выполнение достижения / фракция");

	    SetPlayerData(playerid, P_PROGRESS_4, 1);
	    UpdatePlayerDatabaseInt(playerid, "Progress4", 1);
	    
	    AddPlayerData(playerid, P_TOP_4, +, 1);
		UpdatePlayerDatabaseInt(playerid, "TOP_Progress", GetPlayerData(playerid, P_TOP_4));
	}
	
	AddPlayerData(playerid, P_F_QUEST_EXP_3, +, 1);
	UpdatePlayerDatabaseInt(playerid, "FracQuestExp3", GetPlayerData(playerid, P_F_QUEST_EXP_3));

	if(GetPlayerData(playerid, P_F_QUEST_EXP_3) == 40)
	{
	    SendClientMessage(playerid, COR_QUEST, "[Квесты]: "c_b"Вы успешно выполнили квест "c_i"'Преступники должный быть в тюрьме'. "c_b"Награда: "c_s"1 CASE(/opencase)");

        AddPlayerData(playerid, P_DONATE_CASE, +, 1);
		UpdatePlayerDatabaseInt(playerid, "case", GetPlayerData(playerid, P_DONATE_CASE));

	    SetPlayerData(playerid, P_F_QUEST_3, 1);
	    UpdatePlayerDatabaseInt(playerid, "FracQuest3", 1);
	    
	    AddPlayerData(playerid, P_TOP_5, +, 1);
		UpdatePlayerDatabaseInt(playerid, "TOP_Quest", GetPlayerData(playerid, P_TOP_5));
	}

	return 1;
}

CMD:m(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0x999999FF, "Вы не работник правоохранительных органов");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /m [текст]");

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "<< %s %s[%d]: %s >>", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, params);
	SendMessageInLocal(playerid, fmt_text, 0xFFFF00FF, 60.0);

	return 1;
}

CMD:takelic(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_DPS) return SendClientMessage(playerid, 0x999999FF, "Вы не работник ГИБДД");

	extract params -> new to_player, string:message[66]; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /takelic [id игрока] [причина]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	if(!strlen(message)) return SendClientMessage(playerid, 0x999999FF, "Введите причину");

	if(!GetPlayerData(to_player, P_DRIVING_LIC)) return SendClientMessage(playerid, 0x999999FF, "У игрока нет прав");

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "%s[%d] забрал у Вас права. Причина: %s", GetPlayerNameEx(playerid), playerid, message);
	SendClientMessage(to_player, 0x3399FFFF, fmt_text);
	format(fmt_text, sizeof fmt_text, "Вы забрали у %s[%d] права. Причина: %s", GetPlayerNameEx(to_player), to_player, message);
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "%s %s[%d] забрал у %s[%d] %s права, причина: %s", GetPlayerJobAndRankName(playerid),
	GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, GetPlayerData(to_player, P_DRIVING_LIC) == 2 ? "проф." : "базовые", message);

	SendMessageToPoliceTeam(fmt_text, 0xFFC000FF, playerid);

	SetPlayerData(to_player, P_DRIVING_LIC, 0);
	UpdatePlayerDatabaseInt(to_player, "driving_lic", 0);

	return 1;
}

CMD:wanted(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0x999999FF, "Вы не работник правоохранительных органов");

	new fmt_text[40],
		fmt_list[1024] = "Розыск\tИмя{FFFFFF}\n";

	foreach(new i : Player)
	{
		if(!GetPlayerSuspect(i)) continue;
		format(fmt_text, sizeof fmt_text, "\n%d\t\t%s", GetPlayerSuspect(i), GetPlayerNameEx(i));
		strcat(fmt_list, fmt_text);
	}

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{ffcd00}Список разыскиваемых", fmt_list, "Закрыть", "");

	return 1;
}

CMD:setmark(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0x999999FF, "Вы не работник правоохранительных органов");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setmark [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!GetPlayerSuspect(to_player)) return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок не в розыске");

	new Float: x,
		Float: y,
		Float: z;

	GetPlayerPos(to_player, x, y, z);

	EnablePlayerGPS(playerid, 37, x, y, z, "{66cc33}В последний раз преступника видели на отмеченном месте");

	return 1;
}

CMD:ticket(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_DPS) return SendClientMessage(playerid, 0x999999FF, "Вы не работник ГИБДД");

	extract params -> new to_player, amount, string:message[64]; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /ticket [id игрока] [сумма штрафа] [причина]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	if(!(1 <= amount <= 50_000)) return SendClientMessage(playerid, 0x999999FF, "Сумма штрафа может быть от 1 до 50.000 рублей");

	if(!strlen(message)) return SendClientMessage(playerid, 0x999999FF, "Введите причину");

	CreateTicket(to_player, amount, GetPlayerNameEx(playerid), message);

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "%s[%d] выписал Вам штраф в размере %d руб. Причина: %s", GetPlayerNameEx(playerid), playerid, amount, message);
	SendClientMessage(to_player, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "Вы выписали %s[%d] штраф в размере %d руб. Причина: %s", GetPlayerNameEx(to_player), to_player, amount, message);
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "%s %s[%d] выписал %s[%d] штраф (%d руб), причина: %s", GetPlayerJobAndRankName(playerid),
	GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, amount, message);

	SendMessageToTeam(GetPlayerTeamEx(playerid), fmt_text, 0xFFC000FF, playerid);

	new Cache: result,
		id;

	result = mysql_query(mysql, "SELECT id FROM tickets ORDER BY id DESC LIMIT 1", true);

	id = cache_get_row_int(0, 0);

	cache_delete(result);

	new day, month, year;

	getdate(year, month, day);

	format(fmt_text, sizeof fmt_text, "Номер штрафа: #%d | Дата: %02d-%02d-%d", id, day, month, year);
	SendClientMessage(playerid, 0xFFCD00FF, fmt_text);
	
	AddPlayerData(playerid, P_PROGRESS_EXP_2, +, 1);
	UpdatePlayerDatabaseInt(playerid, "ProgressExp2", GetPlayerData(playerid, P_PROGRESS_EXP_2));

	if(GetPlayerData(playerid, P_PROGRESS_EXP_2) == 500)
	{
	    SendClientMessage(playerid, COR_QUEST, "[Достижения]: "c_b"Вы успешно выполнили достижение "c_i"'Полиция №1'. "c_b"Награда: "c_s"100 DONATE-RUB");
	    GivePlayerDonate(playerid, 100, "Выполнение достижения / фракция");

	    SetPlayerData(playerid, P_PROGRESS_2, 1);
	    UpdatePlayerDatabaseInt(playerid, "Progress2", 1);
	    
	    AddPlayerData(playerid, P_TOP_4, +, 1);
		UpdatePlayerDatabaseInt(playerid, "TOP_Progress", GetPlayerData(playerid, P_TOP_4));
	}

	return 1;
}

CMD:delticket(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_DPS) return SendClientMessage(playerid, 0x999999FF, "Вы не сотрудник ГИБДД");

	extract params -> new ticket_id; else return SendClientMessage(playerid, 0xCECECEFF, "/delticket [номер штрафа]");

	new query[144],
		Cache: result,
		rows,
		uid,
		reason[64],
		player_name[21],
		status,
		amount;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM tickets WHERE id=%d", ticket_id);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	uid = cache_get_field_content_int(0, "uid");
	status = cache_get_field_content_int(0, "status");
	amount = cache_get_field_content_int(0, "amount");

	cache_get_field_content(0, "description", reason);

	cache_delete(result);

	mysql_format(mysql, query, sizeof query, "SELECT name FROM accounts WHERE id=%d", uid);
	result = mysql_query(mysql, query, true);

	cache_get_row(0, 0, player_name);

	cache_delete(result);

	if(!rows) return SendClientMessage(playerid, 0x999999FF, "Штраф с таким номером не найден");

	if(status) return SendClientMessage(playerid, 0x999999FF, "Вы не можете удалить уже оплаченный штраф");

	mysql_format(mysql, query, sizeof query, "DELETE FROM tickets WHERE id=%d", ticket_id);
	mysql_query(mysql, query, false);

	format(query, sizeof query, "Вы удалили штраф #%d из базы данных ГИБДД", ticket_id);
	SendClientMessage(playerid, 0x66CC33FF, query);

	format(query, sizeof query, "%s %s[%d] удалил штраф #%d (%s,%s,%d руб) из базы данных ГИБДД", GetPlayerJobAndRankName(playerid),
	GetPlayerNameEx(playerid), playerid, ticket_id, player_name, reason, amount);

	SendMessageToTeam(GetPlayerTeamEx(playerid), query, 0xFFC000FF, playerid);

	return 1;
}

CMD:tickets(playerid, params[])
{
	new query[128],
		Cache: result,
		rows;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM tickets WHERE uid=%d", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	SendClientMessage(playerid, 0x66CC33FF, "Список штрафов:");

	if(!rows)
		SendClientMessage(playerid, 0xFFCD00FF, "Штрафы отсутствуют");

	else
	{
		new paid_tickets;

		for(new idx; idx < rows; idx ++)
		{
			new id = cache_get_field_content_int(idx, "id"),
				amount = cache_get_field_content_int(idx, "amount"),
				status = cache_get_field_content_int(idx, "status"),
				desc[64],
				issuer[32];

			cache_get_field_content(idx, "description", desc);
			cache_get_field_content(idx, "issuer", issuer);

			format(query, sizeof query, "#%d | %d руб | %s | Выдал: %s | %s", id, amount, desc, issuer, status ? "{66CC33}Оплачен" : "{FF5533}Не оплачен");
			SendClientMessage(playerid, 0xFFCD00FF, query);

			if(status) paid_tickets ++;
		}

		format(query, sizeof query, "Общее количество штрафов: %d | Оплачены: %d | Не оплачены: %d", rows, paid_tickets, rows-paid_tickets);
		SendClientMessage(playerid, 0x66CC33FF, query);
	}

	cache_delete(result);

	return 1;
}

CMD:ptickets(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_DPS) return SendClientMessage(playerid, 0x999999FF, "Вы не работник ГИБДД");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /ptickets [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	new query[128],
		Cache: result,
		rows;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM tickets WHERE uid=%d", GetPlayerAccountID(to_player));
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	SendClientMessage(playerid, 0x66CC33FF, "Список штрафов:");

	if(!rows)
		SendClientMessage(playerid, 0xFFCD00FF, "Штрафы отсутствуют");

	else
	{
		new paid_tickets;

		for(new idx; idx < rows; idx ++)
		{
			new id = cache_get_field_content_int(idx, "id"),
				amount = cache_get_field_content_int(idx, "amount"),
				status = cache_get_field_content_int(idx, "status"),
				desc[64],
				issuer[32];

			cache_get_field_content(idx, "description", desc);
			cache_get_field_content(idx, "issuer", issuer);

			format(query, sizeof query, "#%d | %d руб | %s | Выдал: %s | %s", id, amount, desc, issuer, status ? "{66CC33}Оплачен" : "{FF5533}Не оплачен");
			SendClientMessage(playerid, 0xFFCD00FF, query);

			if(status) paid_tickets ++;
		}

		format(query, sizeof query, "Общее количество штрафов: %d | Оплачены: %d | Не оплачены: %d", rows, paid_tickets, rows-paid_tickets);
		SendClientMessage(playerid, 0x66CC33FF, query);
	}

	cache_delete(result);

	return 1;
}

/*CMD:radar(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_DPS) return SendClientMessage(playerid, 0x999999FF, "Вы не работник ГИБДД");

	Dialog
	(
		playerid, DIALOG_RADAR_SELECT, DIALOG_STYLE_LIST,
		"{FFCD00}Установка регистратора скорости",
		"1. Дворовые территории (20 км/ч)\n"\
		"2. Населенные пункты (60 км/ч)\n"\
		"3. Вне населенных пунктов (90 км/ч)\n"\
		"4. Автомагистрали (110 км/ч)\n"\
		"{888888}5. Удалить регистратор скорости",
		"Выбор", "Отмена"
	);

	return 1;
}*/

CMD:makegun(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_ARMY && !(TEAM_OPG_ARZAMASKAYA <= GetPlayerTeamEx(playerid) <= TEAM_OPG_LYTKARINSKAYA))
		return SendClientMessage(playerid, 0x999999FF, "Вы не можете использовать это");

	extract params -> new weapon_id, weapon_ammo;

	if(!(1 <= weapon_id <= 7))
	{
		Dialog
		(
			playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
			"Доступное оружие",
			"{66CCCC}\
			ID\tНазвание\t\tМеталл\n\n\
			{FFFFFF}1.\tSilenced 9mm\t\t3\n\
			2.\tDesert Eagle\t\t6\n\
			3.\tShotgun\t\t8\n\
			4.\tMP5\t\t\t9\n\
			5.\tAK47\t\t\t10\n\
			6.\tM4\t\t\t10\n\
			7.\tCountry Rifle\t\t11\n\n\
			Для добавления патронов к созданному оружию\n\
			необходимо держать его в руках\
			",
			"Закрыть", ""
		);

		SendClientMessage(playerid, 0xCECECEFF, "Используйте: /makegun [id оружия] [кол-во патронов]");

		return 1;
	}

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /makegun [id оружия] [кол-во патронов]");
	if(weapon_ammo <= 0) return SendClientMessage(playerid, 0xCECECEFF, "Неверное количество патронов");

	enum TEMP_GUN_INFO
	{
		GUN_ID,
		GUN_METAL,
		GUN_NAME[16]
	};

	new temp_gun[7][TEMP_GUN_INFO] =
	{
		{23, 3, 	"Silenced 9mm"},
		{24, 6, 	"Desert Eagle"},
		{25, 8, 	"Shotgun"},
		{29, 9, 	"MP5"},
		{30, 10, 	"AK47"},
		{31, 10, 	"M4"},
		{33, 11, 	"Country Rifle"}
	};

	if(weapon_id != GetPlayerWeapon(playerid) && GetPlayerData(playerid, P_METALL) < temp_gun[weapon_id-1][GUN_METAL])
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет нужного количества металла");
	if(GetPlayerData(playerid, P_AMMO) < weapon_ammo)
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет нужного количества патронов");

	new fmt_text[128];

	if(GetPlayerWeapon(playerid) == temp_gun[weapon_id-1][GUN_ID])
	{
		format(fmt_text, sizeof fmt_text, "добавил к %s %d патронов", temp_gun[weapon_id-1][GUN_NAME], weapon_ammo);

		Action(playerid, fmt_text, _, false);
	}
	else
	{
		new w_id, w_ammo;

		for(new i; i < 13; i++)
		{
			GetPlayerWeaponData(playerid, i, w_id, w_ammo);

			if(w_id == temp_gun[weapon_id-1][GUN_ID])
			{
				GivePlayerWeapon(playerid, w_id, -w_ammo);
				break;
			}
		}

		AddPlayerData(playerid, P_METALL, -, temp_gun[weapon_id-1][GUN_METAL]);
		UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_METALL));

		format(fmt_text, sizeof fmt_text, "сделал %s из металла и %d патронов", temp_gun[weapon_id-1][GUN_NAME], weapon_ammo);

		Action(playerid, fmt_text, _, false);
	}

	GivePlayerWeapon(playerid, temp_gun[weapon_id-1][GUN_ID], weapon_ammo);

	AddPlayerData(playerid, P_AMMO, -, weapon_ammo);
	UpdatePlayerDatabaseInt(playerid, "ammo", GetPlayerData(playerid, P_AMMO));

	return 1;
}

CMD:close(playerid, params[])
{
	if(!(TEAM_OPG_ARZAMASKAYA <= GetPlayerTeamEx(playerid) <= TEAM_OPG_LYTKARINSKAYA))
		return SendClientMessage(playerid, 0x999999FF, "Вы не можете использовать это");

	if(GetPlayerJob(playerid) < 8)
		return SendClientMessage(playerid, 0x999999FF, "Открывать или закрывать склад можно с 8-ого ранга");

	new repository = GetPlayerTeamEx(playerid) - TEAM_OPG_ARZAMASKAYA,
		fmt_text[70];

	SetGangRepositoryData(repository, GR_LOCK, GetGangRepositoryData(repository, GR_LOCK) ^ true);

	UpdateGangRepository(repository);

	format(fmt_text, sizeof fmt_text, "[Внимание] Склад был %s игроком %s[%d]",
	GetGangRepositoryData(repository, GR_LOCK) ? "открыт" : "закрыт", GetPlayerNameEx(playerid), playerid);

	SendMessageToTeam(GetPlayerTeamEx(playerid), fmt_text, GetGangRepositoryData(repository, GR_LOCK) ? 0x66CC00FF : 0xFF6600FF);

	return 1;
}

CMD:tie(playerid, params[])
{
	if(!(TEAM_OPG_ARZAMASKAYA <= GetPlayerTeamEx(playerid) <= TEAM_OPG_LYTKARINSKAYA))
		return SendClientMessage(playerid, 0x999999FF, "Вы не можете использовать это");
		
	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /tie [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится слишком далеко");

	if(GetPlayerData(to_player, P_CUFFED)) return SendClientMessage(playerid, 0xCECECEFF, "Игрок уже связан/закован в наручники");

	SetPlayerSpecialAction(to_player, SPECIAL_ACTION_CUFFED);
	//SetPlayerAttachedObject(to_player, A_OBJECT_SLOT_HAND, 19418, A_OBJECT_BONE_RIGHT_HAND, -0.011, 0.028, -0.022, -15.600012, -33.699977, -81.700035, 0.891999, 1.00, 1.168);
	SetPlayerData(to_player, P_CUFFED, true);

	TogglePlayerControllable(to_player, false);

	new fmt_str[90];

	format(fmt_str, sizeof fmt_str, "%s связал %s", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	return 1;
}

CMD:untie(playerid, params[])
{
	if(!(TEAM_OPG_ARZAMASKAYA <= GetPlayerTeamEx(playerid) <= TEAM_OPG_LYTKARINSKAYA))
		return SendClientMessage(playerid, 0x999999FF, "Вы не можете использовать это");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /untie [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится слишком далеко");

	if(!GetPlayerData(to_player, P_CUFFED)) return SendClientMessage(playerid, 0xCECECEFF, "Игрок не завязан");

	//if(GetPlayerData(to_player, P_FOLLOWED_BY) != INVALID_PLAYER_ID) return SendClientMessage(playerid, 0xCECECEFF, "Перестаньте вести игрока за собой (/follow)");

	SetPlayerSpecialAction(to_player, SPECIAL_ACTION_NONE);

	SetPlayerData(to_player, P_CUFFED, false);

	TogglePlayerControllable(to_player, true);

	new fmt_str[90];

	format(fmt_str, sizeof fmt_str, "%s развязал %s", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	return 1;
}

CMD:capture(playerid, params[])
{
	if(!(TEAM_OPG_ARZAMASKAYA <= GetPlayerTeamEx(playerid) <= TEAM_OPG_LYTKARINSKAYA))
		return SendClientMessage(playerid, 0x999999FF, "Вы не можете использовать это");

	if(GetPlayerJob(playerid) < 6)
		return SendClientMessage(playerid, 0x999999FF, "Организовывать захват территории можно только с 6-ого ранга");

	if(g_capture[C_STATUS])
		return SendClientMessage(playerid, 0x999999FF, "Дождитесь окончания текущего захвата");

	new gang_id = (GetPlayerTeamEx(playerid) - TEAM_OPG_ARZAMASKAYA) + 1;

	if(g_capture[C_WAIT_TIME][gang_id - 1] > gettime())
		return SendClientMessage(playerid, 0x999999FF, "С момента последнего Вашего захвата еще не прошел 1 час");

	new gang_zone_id = -1;

	for(new idx; idx < g_gang_zones_loaded; idx ++)
	{
		if(!IsPlayerInDynamicArea(playerid, GetGangZoneData(idx, GZ_AREA))) continue;

		gang_zone_id = idx;
		break;
	}

	if(gang_zone_id == -1)
		return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться на захваченной кем-то территории");

	new gang_zone_team = GetGangZoneData(gang_zone_id, GZ_GANG);

	if(!gang_zone_team)
		return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться на захваченной кем-то территории");

	if(gang_zone_team == gang_id)
		return SendClientMessage(playerid, 0x999999FF, "Вы не можете захватить свою территорию");

	if(g_capture[C_WAIT_TIME][gang_zone_team - 1] > gettime())
		return SendClientMessage(playerid, 0x999999FF, "Банда, чью территорию Вы хотите захватить, еще не окрепла с последнего захвата (не прошел 1 час)");

	new gang_players[2];

	foreach(new idx : Player)
	{
		if(GetPlayerTeamEx(idx) == GetPlayerTeamEx(playerid)) gang_players[0] ++;
		else if(GetPlayerTeamEx(idx) == (gang_zone_team - 1) + TEAM_OPG_ARZAMASKAYA) gang_players[1] ++;
		else continue;
	}

	if(gang_players[0] < MIN_PLAYERS_FOR_CAPTURE)
		return SendClientMessage(playerid, 0x999999FF, "В Вашей банде должно быть не менее 5-ти людей для захвата");

	if(gang_players[1] < MIN_PLAYERS_FOR_CAPTURE)
		return SendClientMessage(playerid, 0x999999FF, "В банде, территорию которой Вы хотите захватить, должно быть не менее 5-ти людей для захвата");

	StartCapture(playerid, gang_zone_id, gang_id, gang_zone_team);

	return 1;
}

stock StartCapture(playerid, gang_zone_id, attack_team, protect_team)
{
	// Time: 9:53~n~~w~Zhopa OPG__~r~~h~10~n~~w~Super-Analnaya OPG__~r~~h~5
	if(g_capture[C_STATUS]) return 0;

	new fmt_text[128],
		gps_icons[3] = {62, 61, 60};

	format(fmt_text, sizeof fmt_text, "%s начали захват территории у %s",
	GetTeamName( (attack_team + TEAM_OPG_ARZAMASKAYA) - 1), GetTeamName( (protect_team + TEAM_OPG_ARZAMASKAYA) - 1));

	SendMessageToGang(fmt_text, 0xFF5533FF);

	format(fmt_text, sizeof fmt_text, "%s %s[%d] инициировал захват",
	GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid);

	SendMessageToTeam(GetPlayerTeamEx(playerid), fmt_text, 0xFF5533FF);

	foreach(new idx : Player)
	{
		if(!(TEAM_OPG_ARZAMASKAYA <= GetPlayerTeamEx(idx) <= TEAM_OPG_LYTKARINSKAYA)) continue;

		TextDrawShowForPlayer(playerid, capture_TD[0]);
		TextDrawShowForPlayer(playerid, capture_TD[1]);

		format(fmt_text, sizeof fmt_text, "Место отмечено на GPS. Окажите сопротивление вражеской банде, чтобы %s территорию",
		GetPlayerTeamEx(idx) == ((attack_team + TEAM_OPG_ARZAMASKAYA) - 1) ? "захватить" : "сохранить свою");

		SendClientMessage(idx, 0xFFFF00FF, fmt_text);

		SetPlayerMapIcon
		(
			idx, 97,
			GetGangZoneData(gang_zone_id, GZ_MIN_X) + 50.0,
			GetGangZoneData(gang_zone_id, GZ_MIN_Y) + 50.0,
			0.0,
			gps_icons[ GetPlayerTeamEx(idx) - TEAM_OPG_ARZAMASKAYA ],
			0xFFFFFFFF,
			MAPICON_GLOBAL
		);
	}

	GangZoneFlashForAll(GetGangZoneData(gang_zone_id, GZ_ZONE), gang_zone_colors[attack_team]);

	g_capture[C_STATUS] = true;

	g_capture[C_GANG_ZONE] = gang_zone_id;

	g_capture[C_ATTACK_TEAM] = attack_team;
	g_capture[C_PROTECT_TEAM] = protect_team;

	g_capture[C_ATTACKER_KILLS] = 0;
	g_capture[C_PROTECTOR_KILLS] = 0;

	g_capture[C_TIME] = 7 * 60;

	UpdateCaptureTextDraw();

	return 1;
}

stock EndCapture()
{
	if(!g_capture[C_STATUS]) return 0;

	new fmt_text[90],
		attack_team = (g_capture[C_ATTACK_TEAM] + TEAM_OPG_ARZAMASKAYA) - 1,
		protect_team = (g_capture[C_PROTECT_TEAM] + TEAM_OPG_ARZAMASKAYA) - 1,
		gang_zone_id = g_capture[C_GANG_ZONE];

	if(g_capture[C_ATTACKER_KILLS] > g_capture[C_PROTECTOR_KILLS])
		format(fmt_text, sizeof fmt_text, "%s захватили территорию у %s", GetTeamName(attack_team), GetTeamName(protect_team));

	else
		format(fmt_text, sizeof fmt_text, "Попытка %s захватить территорию у %s провалилась", GetTeamName(attack_team), GetTeamName(protect_team));

	SendMessageToGang(fmt_text, 0xFF5533FF);

	new gz_index = GetGangZoneData(gang_zone_id, GZ_ZONE);

	GangZoneStopFlashForAll(gz_index);

	if(g_capture[C_ATTACKER_KILLS] > g_capture[C_PROTECTOR_KILLS])
	{
		SetGangZoneData(gang_zone_id, GZ_GANG, g_capture[C_ATTACK_TEAM]);
		SaveGangZone(gang_zone_id);

		GangZoneShowForAll(gz_index, gang_zone_colors[ GetGangZoneData(gang_zone_id, GZ_GANG) ]);

		UpdateGangRepository(g_capture[C_ATTACK_TEAM] - 1);
		UpdateGangRepository(g_capture[C_PROTECT_TEAM] - 1);
	}

	TextDrawHideForAll(capture_TD[0]);
	TextDrawHideForAll(capture_TD[1]);

	g_capture[C_STATUS] = false;

	g_capture[C_GANG_ZONE] = -1;

	g_capture[C_ATTACK_TEAM] =
	g_capture[C_PROTECT_TEAM] = -1;

	g_capture[C_ATTACKER_KILLS] =
	g_capture[C_PROTECTOR_KILLS] = 0;

	g_capture[C_TIME] = 0;

	g_capture[C_WAIT_TIME][attack_team - 1] =
	g_capture[C_WAIT_TIME][protect_team - 1] = gettime() + 3600;

	foreach(new idx : Player)
		RemovePlayerMapIcon(idx, 97);

	return 1;
}

stock UpdateCaptureTextDraw()
{
	new fmt_text[128];

	format
	(
		fmt_text, sizeof fmt_text,
		"Время: %d:%02d~n~"\
		"~w~%s__~r~~h~%d~n~"\
		"~w~%s__~r~~h~%d",
		g_capture[C_TIME] / 60,
		g_capture[C_TIME] % 60,
		GetTeamName( (g_capture[C_ATTACK_TEAM] + TEAM_OPG_ARZAMASKAYA) - 1 ),
		g_capture[C_ATTACKER_KILLS],
		GetTeamName( (g_capture[C_PROTECT_TEAM] + TEAM_OPG_ARZAMASKAYA) - 1 ),
		g_capture[C_PROTECTOR_KILLS]
	);

	TextDrawSetString(capture_TD[1], fmt_text);

	foreach(new idx : Player)
	{
		if(!IsPlayerConnected(idx)) continue;
		if(!IsPlayerLogged(idx)) continue;
		if(!(TEAM_OPG_ARZAMASKAYA <= GetPlayerTeamEx(idx) <= TEAM_OPG_LYTKARINSKAYA)) continue;

		TextDrawShowForPlayer(idx, capture_TD[0]);
		TextDrawShowForPlayer(idx, capture_TD[1]);
	}
}

stock IsPlayerInPoliceTeam(playerid)
{
	if(TEAM_DPS <= GetPlayerTeamEx(playerid) <= TEAM_FBI) return true;
	return false;
}

stock IsPlayerInPoliceCar(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(VEHICLE_ACTION_TYPE_DPS_CAR <= GetVehicleData(vehicleid, V_ACTION_TYPE) <= VEHICLE_ACTION_TYPE_FBI_CAR) return true;
	return false;
}

stock GenerateCarNumber()
{
	static const chars[11] = {'A', 'B', 'C', 'E', 'H', 'K', 'M', 'O', 'P', 'T', 'X'};
	new number[6];

	number[0] = chars[random(sizeof chars)];
	number[1] = random('9' - '0') + '0';
	number[2] = random('9' - '0') + '0';
	number[3] = random('9' - '0') + '0';

	if(number[1] == number[2] && number[2] == number[3] && number[3] == '0')
		number[3] = random('9' - '0') + '1';

	number[4] = chars[random(sizeof chars)];
	number[5] = chars[random(sizeof chars)];

	return number;
}

stock IsACarNumber(text[])
{
	new length = strlen(text);

	if(length != 6)
	{
		return 0;
	}

	for(new i; i < length; i ++)
	{
		switch(i)
		{
			case 0, 4, 5:
			{
				switch(text[i])
				{
					case 'A', 'B', 'C', 'E', 'H', 'K', 'M', 'O', 'P', 'T', 'X': continue;
					default: return 0;
				}
			}
			case 1..3:
			{
				switch(text[i])
				{
					case '0'..'9': continue;
					default: return 0;
				}
			}
		}
	}

	if(text[1] == text[2] && text[2] == text[3] && text[3] == '0')
	{
		return 0;
	}

	return 1;
}

stock GetCarNumberPrice(number[])
{
	if(strlen(number) != 6) return 0;

	new chars[4],
		price = GetDonatePrice(DONATE_PRICE_CAR_NUMBER);

	format(chars, sizeof chars, "%c%c%c", number[0], number[4], number[5]);

	if(!strcmp(chars, "amp", true)) price += 800;
	else if(!strcmp(chars, "ooo", true)) price += 700;
	else if(!strcmp(chars, "aaa", true)) price += 700;
	else if(!strcmp(chars, "ekx", true)) price += 600;
	else if(!strcmp(chars, "xam", true)) price += 600;
	else if(!strcmp(chars, "bop", true)) price += 300;
	else if(!strcmp(chars, "xep", true)) price += 200;
	else if(!strcmp(chars, "hax", true)) price += 200;
	else if(!strcmp(chars, "bbb", true)) price += 700;
	else if(!strcmp(chars, "ttt", true)) price += 700;
	else
	{
		if(chars[0] == chars[1] && chars[0] != chars[2]) price += 50;
		else if(chars[0] == chars[1] && chars[0] == chars[2]) price += 200;
		else if(chars[0] == chars[2] && chars[0] != chars[1]) price += 100;
	}

	if(number[1] == 0 && number[1] == 0) price += 200;
	else if(number[1] == number[2] && number[1] != number[3]) price += 150;
	else if(number[1] == number[2] && number[1] == number[3]) price += 250;

	return price;
}

CMD:checknumber(playerid, params[])
{
	extract params -> new string: number[7]; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /checknumber [номер]");

	if(strlen(number) != 6) return SendClientMessage(playerid, 0x999999FF, "Длина номера должна быть 6 символов");

	new fmt_text[90];
	format(fmt_text, sizeof fmt_text, "Стоимость введенного Вами номера: %d рублей", GetCarNumberPrice(number));
	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	return 1;
}

CMD:skill(playerid, params[])
{
	extract params -> new to_player; else return SendClientMessage(playerid, 0x999999FF, "Используйте: /skill [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(to_player == playerid)
	{
		ShowPlayerSkills(playerid);
		return Action(playerid, "просматривает свои навыки владения оружием", _, false);
	}

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0))
		return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_SHOW_SKILL);

	return 1;
}


CMD:creategift(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 13) return 1;

	new query[128],
		Cache: result,
		Float: X,
		Float: Y,
		Float: Z,
		idx = g_gift_loaded;

	GetPlayerPos(playerid, X, Y, Z);

	mysql_format(mysql, query, sizeof query, "INSERT INTO gift (x, y, z) VALUES (%f, %f, %f)", X, Y, Z);
	result = mysql_query(mysql, query, true);

	SetGiftData(idx, G_SQL_ID, 		cache_insert_id());

	SetGiftData(idx, G_POS_X,		X);
	SetGiftData(idx, G_POS_Y,		Y);
	SetGiftData(idx, G_POS_Z,		Z);

	CreatePickup
	(
		1279,
		23,
		X, Y, Z,
		-1,
		PICKUP_ACTION_TYPE_GIFT,
		idx
	);

	g_gift_loaded++;

	cache_delete(result);

	SendClientMessage(playerid, 0x32a44bFF, "Вы создали подарок!");

	return 1;
}

CMD:donat(playerid, params[])
{
	ShowPlayerDonateMenu(playerid);

	return 1;
}
alias:donat("donate")

stock ShowPlayerDonateMenu(playerid)
{
	new fmt_text[800];

	format
	(
		fmt_text,
		sizeof fmt_text,
		"{99cc00}1. Просмотреть последние пополнения\n"\
		"{99cc00}2. Конвертировать рубли в игровые деньги\n"\
		"3. Изменить имя\t\t\t\t\t{6699cc}%d руб.\n"\
		"4. Снять все предупреждения\t\t\t\t{6699cc}%d руб.\n"\
		"5. Получить наркотик ЛСД (8 доз)\t\t\t{6699cc}%d руб.\n"\
		"6. Подделка документов (законопослушность +10)\t{6699cc}%d руб.\n"\
		"7. Покупка 4-х значного номера телефона\t\t{6699cc}%d руб.\n"\
		"8. Прокачать силу или навыки владения оружием\t{6699cc}%d руб./1 ед.\n"\
		"9. Изменить номер транспортного средства\t\t{6699cc}от %d руб.\n"\
		"10. Увеличить количество слотов для транспорта\t{6699cc}%d руб./слот\n"\
		"11. Покупка всех лицензий\t\t\t\t{6699cc}%d руб.",
		GetDonatePrice(DONATE_PRICE_NAME),
		GetDonatePrice(DONATE_PRICE_WARNS),
		GetDonatePrice(DONATE_PRICE_DRUGS),
		GetDonatePrice(DONATE_PRICE_LAW_ABIDING),
		GetDonatePrice(DONATE_PRICE_PHONE_NUMBER),
		GetDonatePrice(DONATE_PRICE_SKILLS),
		GetDonatePrice(DONATE_PRICE_CAR_NUMBER),
		GetDonatePrice(DONATE_PRICE_CAR_SLOT),
		GetDonatePrice(DONATE_PRICE_LIC_PACK)
	);

	Dialog
	(
		playerid, DIALOG_DONATE_MENU, DIALOG_STYLE_LIST,
		"{FFCC00}Меню дополнительных возможностей",
		fmt_text,
		"Выбрать", "Закрыть"
	);
	

	return 1;
}

CMD:setspawn(playerid, params[])
{
    Dialog
    (
        playerid, DIALOG_SET_SPAWN, DIALOG_STYLE_LIST,
        "{FFCC00}Изменение места появления в игре",
        "1. На Ж/Д вокзале или автостанции\n\
        2. В собственном доме\n\
        3. В гостиничном номере\n\
        4. На базе организации\n\
        5. В гостях (совместное проживание)\n\
        6. На базе семьи",
        "Выбрать", "Отмена"
    );
    return 1;
}

alias:setspawn("spawnchange")

CMD:setspawnpos(playerid)
{
    if(GetPlayerData(playerid, P_FAMILY) && GetPlayerData(playerid, P_FAMILY_RANK) == 10)
    {
        Dialog
        (
            playerid, DIALOG_FAMILY_SPAWN_SET, DIALOG_STYLE_MSGBOX,
            "Настройки семьи",
            "Вы действительно хотите установить точку спавна вашей семьи\n\
            На то место где вы находитесь?",
            "Далее", "Отмена"
        );
    }
    return 1;
}

CMD:fleave(playerid, params[])
{
    //if(GetPlayerData(playerid, P_IMPROVEMENTS) < 2) return SendClientMessage(playerid, 0xCECECEFF, "Приобретите улучшение \"Решительность\", чтобы уволиться по собственному желанию");

    if(!GetPlayerData(playerid, P_FAMILY)) return SendClientMessage(playerid, 0xCECECEFF, "Вы не состоите в семье");

    new fmt_text[210];

    format
    (
        fmt_text, sizeof fmt_text,
        "{FFFFFF}Вы состоите в семье \"%s\".\n"\
        "Если Вы уволитесь, то потеряете все свои достижения в ней, такие как ранг.\n\n"\
        "Вы уверены, что хотите покинуть семью?",
        GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_NAME)
    );

    Dialog(playerid, DIALOG_FAMILY_LEAVE, DIALOG_STYLE_MSGBOX, "Предупреждение", fmt_text, "Да", "Нет");

    return 1;
}

CMD:fmenu(playerid, params[])
{
	if(GetPlayerData(playerid, P_FAMILY) == 0) return SendClientMessage(playerid, 0xCECECEFF, "Вы не состоите в семье");

	Dialog
	(
		playerid, DIALOG_FAMILY_MENU, DIALOG_STYLE_LIST,
		"Меню",
		""c_server"[1] "c_b"Статистика семьи\n"\
		""c_server"[2] "c_b"Управление семьей\n"\
		""c_server"[3] "c_b"Команды семьи\n"\
		""c_server"[4] "c_b"Склад семьи\n"\
		""c_server"[5] "c_b"Список участников",
		"Выбрать", "Закрыть"
	);
	return 1;
}
alias:fmenu("fm")


/*CMD:settint(playerid, params[])
{
	extract params -> new tint_id, tint_color; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /settint [id раскраски] [id цвета]");

	if(!(0 <= tint_id <= MAX_WEAPON_TINTS - 1)) return SendClientMessage(playerid, 0x999999FF, "Некорректный идентификатор раскраски");

	if(!(0 <= tint_color <= sizeof weapon_tints)) return SendClientMessage(playerid, 0x999999FF, "Некорректный идентификатор цвета");

	g_player[playerid][P_WEAPON_TINT][tint_id] = tint_color;

	SendClientMessage(playerid, -1, "Успешно изменено");

	return 1;
}*/

CMD:dice(playerid, params[])
{
	if(GetPlayerInBiz(playerid) == -1)
		return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться в казино");

	if(GetBusinessData(GetPlayerInBiz(playerid), B_TYPE) != BUSINESS_TYPE_CASINO)
		return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться в казино");

	if(!IsPlayerInRangeOfAnyCasinoTable(playerid)) return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться возле игрального стола");

	if(!PlayerTotalOnline(playerid, 10))
		return SendClientMessage(playerid, 0x999999FF, "Для игры в кости необходимо отыграть 10 часов");

	extract params -> new to_player, money; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /dice [id игрока] [сумма]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 4.0))
		return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	if(!(1 <= money <= 1_000_000))
		return SendClientMessage(playerid, 0x999999FF, "Сумма должна быть не более 1.000.000 рублей");

	if(GetPlayerMoneyEx(playerid) < money)
		return SendClientMessage(playerid, 0x999999FF, "У Вас нет такого количества денег");

	if(GetPlayerMoneyEx(to_player) < money)
		return SendClientMessage(playerid, 0x999999FF, "У игрока нет такого количества денег");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_CASINO_DICE, money);

	return 1;
}

CMD:ad(playerid, params[])
{
	if(!GetPlayerPhone(playerid))
		return SendClientMessage(playerid, 0x999999FF, "У Вас нет телефона, по которому могут с Вами связаться");

	new fmt_text[144];

	if(IsAIP(params))
	{
   		SendClientMessage(playerid, -1, "Подозрения в рекламе!");
       	return false;
    }

	for(new idx; idx < g_advert_created; idx ++)
	{
		if(GetAdvertData(idx, A_CREATOR) != playerid) continue;

		format(fmt_text, sizeof fmt_text, "Ваше объявление уже находится в очереди под {00CC99}номером %d", GetAdvertIndexInQueue(idx));
		SendClientMessage(playerid, 0xCECECEFF, fmt_text);

		/*
		if(idx)
			SendClientMessage(playerid, 0xCECECEFF, "Вы можете ускорить его публикацию {FF9900}с помощью команды /up. {CECECE}Услуга стоит {33CCFF}2000 руб");
		*/

		return 1;
	}

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /ad [текст объявления]");

	if(GetPlayerMoneyEx(playerid) < ADVERT_SEND_PRICE)
		return SendClientMessage(playerid, 0x999999FF, "Для отправки объявления необходимо иметь 250 руб");

	SendAdvert(playerid, params);

	GivePlayerMoneyEx(playerid, -250, "Отправка объявления", true, true);

	format(fmt_text, sizeof fmt_text, "Текст: %s", params);
	SendClientMessage(playerid, 0x00CC99FF, fmt_text);

	SendClientMessage(playerid, -1, "Ваше объявление было добавлено в очередь для публикации");
	SendClientMessage(playerid, -1, "Оставайтесь на связи, в противном случае объявление будет удалено из очереди");
	// SendClientMessage(playerid, -1, "Вы можете ускорить его публикацию {FF9900}с помощью команды /up. {FFFFFF}Услуга стоит {33CCFF}2000 руб");

	return 1;
}

CMD:edit(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_RADIO) return SendClientMessage(playerid, 0x999999FF, "Вам недоступна данная функция");

	if(!g_advert_created) return SendClientMessage(playerid, 0xCECECEFF, "Нет объявлений для редактирования");

	new fmt_text[360],
		bool: ad_is_found;

	for(new idx; idx < g_advert_created; idx ++)
	{
		if(GetAdvertData(idx, A_EDIT) || GetAdvertData(idx, A_CREATOR) == INVALID_PLAYER_ID) continue;

		format
		(
			fmt_text, sizeof fmt_text,
			"{FFFFFF}Отправитель: %s\n\nТекст:\n{FFCD00}%s\n\n"\
			"{FFFFFF}Для редактирования объявления введите новый текст и нажмите 'Отправить'.\n"\
			"Если редактирование объявлению не нужно, оставьте поле пустым.",
			GetPlayerNameEx(GetAdvertData(idx, A_CREATOR)), GetAdvertData(idx, A_TEXT)
		);

		Dialog(playerid, DIALOG_ADVERT_EDIT, DIALOG_STYLE_INPUT, "{00CC00}Публикация объявления", fmt_text, "Отправить", "Отклонить");

		SetAdvertData(idx, A_EDIT, true);

		SetPVarInt(playerid, "advert_id", idx);

		ad_is_found = true;

		break;
	}

	if(!ad_is_found) return SendClientMessage(playerid, 0xCECECEFF, "Нет объявлений для редактирования");

	return 1;
}

CMD:t(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_RADIO) return SendClientMessage(playerid, 0x999999FF, "Вам недоступна данная функция");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /t [текст]");

	new fmt_text[144];

	format(fmt_text, sizeof fmt_text, "[ГТРК «Ритм»] %s: %s", GetPlayerNameEx(playerid), params);
	SendClientMessageToAll(0x6666FFFF, fmt_text);

	return 1;
}

CMD:u(playerid, params[])
{
	if(!GetPVarInt(playerid, "radio_mic")) return SendClientMessage(playerid, 0x999999FF, "Вы не подключены к радио-эфиру");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /u [текст]");

	new fmt_text[144];

	format(fmt_text, sizeof fmt_text, "[ГТРК «Ритм»] Гость %s: %s", GetPlayerNameEx(playerid), params);
	SendClientMessageToAll(0x6666FFFF, fmt_text);

	return 1;
}

CMD:givemic(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_RADIO) return SendClientMessage(playerid, 0x999999FF, "Вам недоступна данная функция");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /givemic [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!GetPVarInt(to_player, "radio_mic"))
		SendPlayerOffer(playerid, to_player, OFFER_TYPE_GIVE_MIC);

	else
	{
		new fmt_text[128];

		format(fmt_text, sizeof fmt_text, "%s %s[%d] отключил Вас от радио-эфира",
		GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid);

		SendClientMessage(to_player, 0xFF5533FF, fmt_text);

		format(fmt_text, sizeof fmt_text, "Вы отключили %s[%d] от радио-эфира", GetPlayerNameEx(to_player), to_player);
		SendClientMessage(playerid, 0x3399FFFF, fmt_text);

		format(fmt_text, sizeof fmt_text, "[СМИ] %s %s[%d] отключил %s[%d] от радио-эфира",
		GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);

		SendMessageToTeam(GetPlayerTeamEx(playerid), fmt_text, 0x99CC99FF, playerid);

		SetPVarInt(to_player, "radio_mic", 0);
	}

	return 1;
}

/*CMD:gangzonegovnozhopa(playerid, params[])
{
	new gang_zone[100][4] =
	{
		{-2667, 149, -2567, 249},
		{-2567, 149, -2467, 249},
		{-2467, 149, -2367, 249},
		{-2367, 149, -2267, 249},
		{-2267, 149, -2167, 249},
		{-2167, 149, -2067, 249},
		{-2167, 49, -2067, 149},
		{-2267, 49, -2167, 149},
		{-2367, 49, -2267, 149},
		{-2467, 49, -2367, 149},
		{-2567, 49, -2467, 149},
		{-2667, 49, -2567, 149},
		{-2667, -51, -2567, 49},
		{-2567, -51, -2467, 49},
		{-2467, -51, -2367, 49},
		{-2367, -51, -2267, 49},
		{-2267, -51, -2167, 49},
		{-2167, -51, -2067, 49},
		{-2167, -151, -2067, -51},
		{-2267, -151, -2167, -51},
		{-2367, -151, -2267, -51},
		{-2467, -151, -2367, -51},
		{-2567, -151, -2467, -51},
		{-2667, -151, -2567, -51},
		{-2667, -251, -2567, -151},
		{-2567, -251, -2467, -151},
		{-2467, -251, -2367, -151},
		{-2367, -251, -2267, -151},
		{-2267, -251, -2167, -151},
		{-2167, -251, -2067, -151},
		{1974, 2007, 2074, 2107},
		{1874, 2007, 1974, 2107},
		{1774, 2007, 1874, 2107},
		{1674, 2007, 1774, 2107},
		{1574, 2007, 1674, 2107},
		{1574, 2107, 1674, 2207},
		{1674, 2107, 1774, 2207},
		{1774, 2107, 1874, 2207},
		{1874, 2107, 1974, 2207},
		{1974, 2107, 2074, 2207},
		{1974, 2207, 2074, 2307},
		{1874, 2207, 1974, 2307},
		{1774, 2207, 1874, 2307},
		{1674, 2207, 1774, 2307},
		{1574, 2207, 1674, 2307},
		{1574, 2307, 1674, 2407},
		{1674, 2307, 1774, 2407},
		{1774, 2307, 1874, 2407},
		{1874, 2307, 1974, 2407},
		{1974, 2307, 2074, 2407},
		{1974, 2407, 2074, 2507},
		{1874, 2407, 1974, 2507},
		{1774, 2407, 1874, 2507},
		{1674, 2407, 1774, 2507},
		{1574, 2407, 1674, 2507},
		{1574, 2507, 1674, 2607},
		{1674, 2507, 1774, 2607},
		{1774, 2507, 1874, 2607},
		{1874, 2507, 1974, 2607},
		{1974, 2507, 2074, 2607},
		{1751, -311, 1851, -211},
		{1751, -411, 1851, -311},
		{1651, -411, 1751, -311},
		{1651, -311, 1751, -211},
		{1551, -311, 1651, -211},
		{1551, -411, 1651, -311},
		{1451, -411, 1551, -311},
		{1451, -311, 1551, -211},
		{981, -265, 1081, -165},
		{981, -365, 1081, -265},
		{981, -465, 1081, -365},
		{881, -465, 981, -365},
		{881, -365, 981, -265},
		{881, -265, 981, -165},
		{781, -265, 881, -165},
		{781, -365, 881, -265},
		{781, -465, 881, -365},
		{681, -465, 781, -365},
		{681, -365, 781, -265},
		{681, -265, 781, -165},
		{581, -265, 681, -165},
		{581, -365, 681, -265},
		{581, -465, 681, -365},
		{481, -465, 581, -365},
		{481, -365, 581, -265},
		{481, -265, 581, -165},
		{381, -265, 481, -165},
		{381, -365, 481, -265},
		{381, -465, 481, -365},
		{281, -365, 381, -265},
		{2401, -330, 2501, -230},
		{2501, -330, 2601, -230},
		{2501, -230, 2601, -130},
		{2501, -130, 2601, -30},
		{2401, -230, 2501, -130},
		{2401, -130, 2501, -30},
		{2301, -230, 2401, -130},
		{2601, -330, 2701, -230},
		{2601, -230, 2701, -130},
		{2201, -230, 2301, -130}
	};

	for(new i; i < sizeof gang_zone; i ++)
	{
		new query[110];

		mysql_format(mysql, query, sizeof query, "INSERT INTO gang_zones (min_x, min_y, max_x, max_y) VALUES (%d, %d, %d, %d)", gang_zone[i][0], gang_zone[i][1], gang_zone[i][2], gang_zone[i][3]);
		mysql_query(mysql, query, false);
	}

	LoadGangZones();

	ShowGangZonesForPlayer(playerid);

	return 1;
}*/

/*stock KickForSoft(playerid)
{
	new fmt_text[80];

	format(fmt_text, sizeof fmt_text, "[A] %s[%d] пытается подключиться с запрещенным софтом", GetPlayerNameEx(playerid), playerid);
	SendMessageToAdmins(fmt_text, 0xFF5533FF);

	SendClientMessage(playerid, 0xFF5533FF, "Вы используете запрещенное программное обеспечение");
	SendClientMessage(playerid, 0xFF6600FF, "Доступ к серверу невозможен. Переустановите игру и подключитесь снова");
	SendClientMessage(playerid, 0xFFFFFFFF, "");

	printf("%s[%d] kicked. Reason: Forbidden software");

	Kick:(playerid, _, 1000);

	return 1;
}*/

stock CreateGreenZones()
{
	for(new idx; idx < sizeof g_green_zones; idx ++)
		g_green_zones[idx][GZ_AREA] = CreateDynamicSphere
		(
			g_green_zones[idx][GZ_X], g_green_zones[idx][GZ_Y],
			g_green_zones[idx][GZ_Z], g_green_zones[idx][GZ_SIZE]
		);

	return 1;
}


stock ShowPlayerGreenZoneText(playerid)
{
	TextDrawShowForPlayer(playerid, green_zone_TD[0]);
	
	return 1;
}

stock HidePlayerGreenZoneText(playerid)
{
	TextDrawHideForPlayer(playerid, green_zone_TD[0]);

	return 1;
}

/*public OnPlayerCheat(playerid,code)
{
	new fmt_text[80];

	format(fmt_text, sizeof fmt_text, "[A] Подозрение на читерство: %s[%d] (код: #%d)", GetPlayerNameEx(playerid), playerid, code);
	SendMessageToAdmins(fmt_text, 0xFF5533FF);

	return 1;
}*/

stock IsPlayerUseForbiddenSoftware(playerid)
{
	static const forbidden_soft_keys[][43 + 1] =
	{
		"5E1C1837D2C54B24EAAED18C3F96D9EA51A2A481003", // RakSAMP v0.5-0.3c
		"381356A6B4349449E8F818B06B405A4FBBE9F8DDDAB", // RakSAMP v0.5-0.3d
		"354A1F8D95B8384F9C365E2D7418C7EC06CD6EE2928", // RakSAMP v0.5-0.3eR2
		"38E4952825700FE3B8476C3F72D976E7447905BA45D" // BabaShura 2.6/2.7 (0.3e)
	};

	new player_key[64 + 1];

	gpci(playerid, player_key, sizeof(player_key));

	for(new i = 0; i < sizeof(forbidden_soft_keys); i++)
	{
		if(strcmp(player_key, forbidden_soft_keys[i]) == 0)
		{
			return 1;
		}
	}

	return 0;
}

CMD:setlights(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 6) return 1;

	new Float: x,
		Float: y;

	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if(player_test_label[playerid][0] == Text3D: INVALID_3DTEXT_ID)
		{
			for(new idx; idx < 4; idx ++)
			{
				GetVehicleTurnSignalPos(vehicleid, idx + 1, x, y);

				player_test_label[playerid][idx] = CreateDynamic3DTextLabel(IntToString(idx), 0xFFCC33FF, x, y, 0.0, 10.0, _, vehicleid);
			}
		}
		else
		{
			for(new idx; idx < 4; idx ++)
			{
				DestroyDynamic3DTextLabel(player_test_label[playerid][idx]);

				player_test_label[playerid][idx] = Text3D: INVALID_3DTEXT_ID;
			}
		}
	}
	else SendClientMessage(playerid, -1, "u r not in a vehicle");

	return 1;
}

CMD:setspeed(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 6) return 1;

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "u have to be in a vehicle");

	extract params -> new Float: speed; else return SendClientMessage(playerid, -1, "/setspeed [speed]");

	new vehicleid = GetPlayerVehicleID(playerid);

	SetVehicleSpeed(vehicleid, speed);

	SendClientMessage(playerid, -1, "speed changed");

	return 1;
}

CMD:supercarblya(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 6) return 1;

	new supercar = GetPVarInt(playerid, "supercar");

	supercar = supercar ^ 1;

	SetPVarInt(playerid, "supercar", supercar);

	new fmt_text[2][32] =
	{
		"supercar off",
		"supercar on"
	};

	SendClientMessage(playerid, -1, fmt_text[supercar]);

	return 1;
}

CMD:setmultiplier(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 6) return 1;

	extract params -> new multiplier; else return SendClientMessage(playerid, -1, "/setmultiplier [mult]");

	SetPVarInt(playerid, "supercar_multiplier", multiplier);

	SendClientMessage(playerid, -1, "multiplier changed");

	return 1;
}

CMD:getvehspeed(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 6) return 1;

	extract params -> new vehicleid; else return SendClientMessage(playerid, -1, "/getvehspeed [vehicleid]");

	new Float: speed = GetVehicleSpeed(vehicleid);

	new fmt_text[24];

	format(fmt_text, sizeof fmt_text, "vehicle speed: %f", speed);
	SendClientMessage(playerid, 0xFF5533FF, fmt_text);

	return 1;
}

CMD:pedaltype(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 6) return 1;

	new pedal_name[3][] = {"none", "gas", "brake"};

	new pedal_type = player_press_pedal[playerid];

	SendClientMessage(playerid, -1, pedal_name[pedal_type]);

	return 1;
}

CMD:createpromo(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 13) return 1;

	Dialog
	(
		playerid, DIALOG_PROMO_CREATE, DIALOG_STYLE_INPUT,
		"{FFCD00}Создание промокода",
		"{FFFFFF}Для создания промокода введите\n"\
		"следующие параметры в окно ниже:\n\n"\
		"{33CC66}Параметры: Код, Тип, Кол-во, Использования, PayDay\n\n"\
		"{888888}Примечание:\n"\
		"{FFFFFF}- Код может содержать от 1 до 30 символов\n"\
		"- Тип от 0 до 3 (0 - деньги, 1 - донат-монеты, 3 - exp)\n"\
		"- Количество от 1 до 1.000.000\n"\
		"- Количество использований от 1 до 1000\n"\
		"- Количество PayDay от 0 до 20",
		"Далее", "Отмена"
	);

	return 1;
}
stock ShowPlayerPromoActive(playerid)
{
	Dialog
	(
		playerid, DIALOG_PROMO_ACTIVATE, DIALOG_STYLE_INPUT,
		"{FFCD00}Активация промокода",
		"{FFFFFF}Введите промокод в окно ниже:",
		"Далее", "Отмена"
	);
}

CMD:ytpromo(playerid, params[])
{
    if(GetPlayerData(playerid, P_YTPROMO_ACTIVATE) == 1) return Send(playerid, COR_RED, "[Ошибка]: "c_b"Ютуберский промокод можно активировать только один раз!");
    
	Dialog
	(
		playerid, DIALOG_YTPROMO_ACTIVATE, DIALOG_STYLE_INPUT,
		"{FFCD00}Активация ютуберского промокода",
		"{FFFFFF}Введите ютуберский-промокод в окно ниже:",
		"Далее", "Отмена"
	);

	return 1;
}
CMD:promo(playerid, params[])
{
	Dialog
	(
		playerid, DIALOG_PROMO_ACTIVATE, DIALOG_STYLE_INPUT,
		"{FFCD00}Активация промокода",
		"{FFFFFF}Введите промокод в окно ниже:",
		"Далее", "Отмена"
	);

	return 1;
}
stock AdminAuthorization(playerid)
{
	if(GetPlayerData(playerid, P_ADMIN) && !GetPlayerData(playerid, P_ADMIN_LOGGED) && GetPlayerData(playerid, P_APASS) != 0)
		return Dialog(playerid, DIALOG_ADMIN_LOGIN, DIALOG_STYLE_INPUT, "{FF0000}Админ авторизация", "{ffffff}Введите ваш пароль {ffff00}действущий{ffffff} администратора в окошко ниже", "Далее", "");
 	else if(GetPlayerData(playerid, P_APASS) == 0)
 		return Dialog(playerid, DIALOG_ADMIN_REG, DIALOG_STYLE_INPUT, "{FF0000}Админ регистрация", "{FFFFFF}Придумайте пароль из 4-х цифр для авторизации в админ панеле\n{FFFFFF}Введите его в поле ниже:\n", "Далее", "Выход");
 	else
		return SendClientMessage(playerid, -1, "Ошибка");
}
stock GiveFamilyMoneyEx(fam_id, money)
{

    new fmt_str[185];
    AddFamilyData(fam_id, F_MONEY, +, money);

    format(fmt_str, sizeof fmt_str, "UPDATE family SET money=%d WHERE id=%d LIMIT 1", GetFamilyData(fam_id, F_MONEY), fam_id);
    mysql_query(mysql, fmt_str, false);
    return 1;
}
stock FInvitePlayer(playerid, fam_id, give_rang = 1, bool: save = false)
{
    if(!(1 <= give_rang <= 10))
        give_rang = 1;


    SetPlayerData(playerid, P_FAMILY, fam_id);
    SetPlayerData(playerid, P_FAMILY_RANK, give_rang);

    if(save)
    {
        new query[80];

        format(query, sizeof query, "UPDATE accounts SET family=%d,family_rank=%d WHERE id=%d",\
            GetPlayerData(playerid, P_FAMILY), GetPlayerData(playerid, P_FAMILY_RANK), GetPlayerAccountID(playerid));
        mysql_query(mysql, query, false);
    }

    return 1;
}
stock FUnInvite(playerid, to_player, reason[] = "")
{
    new fmt_msg[110];

    if(playerid != to_player)
    {
        format(fmt_msg, sizeof fmt_msg, "%s[%d] уволил Вас из семьи \"%s\"", GetPlayerNameEx(playerid), playerid, GetFamilyData(GetPlayerData(to_player, P_FAMILY), F_NAME));
        SendClientMessage(to_player, 0xCECECEFF, fmt_msg);

        if(GetPlayerTeamEx(playerid) == GetPlayerTeamEx(to_player))
        {
            format(fmt_msg, sizeof fmt_msg, "Вы уволили %s[%d] из своей семьи", GetPlayerNameEx(to_player), to_player);
            SendClientMessage(playerid, 0x1E90FFFF, fmt_msg);
        }
        else
        {
            format(fmt_msg, sizeof fmt_msg, "Вы уволили %s[%d] из семьи \"%s\"", GetPlayerNameEx(to_player), to_player, GetFamilyData(GetPlayerData(to_player, P_FAMILY), F_NAME));
            SendClientMessage(playerid, 0x1E90FFFF, fmt_msg);
        }

        format(fmt_msg, sizeof fmt_msg, "Уволил %s[acc:%d] из семьи %s. Причина: %s",
        GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), GetFamilyData(GetPlayerData(to_player, P_FAMILY), F_NAME), reason);

        SendLog(playerid, LOG_TYPE_FRACTION, fmt_msg);
    }
    else
    {
        format(fmt_msg, sizeof fmt_msg, "Покинул семью %s по собственному желанию", GetPlayerTeamName(to_player));
        SendLog(to_player, LOG_TYPE_FRACTION, fmt_msg);
    }

    FInvitePlayer(to_player, 0, 0, true);

    return 1;
}
public: LoadFamily()
{
    new idx;
    //new query[85];
    new Cache: result, rows;

    result = mysql_query(mysql, "SELECT * FROM family", true);
    rows = cache_num_rows();

    if(rows > 200)
    {
        rows = 200;
        print("[Family]: DB rows > 200");
    }


    for(idx = 0; idx < rows; idx ++)
    {
        SetFamilyData(idx+1, F_SQL_ID,        cache_get_field_content_int(idx, "id"));

        cache_get_field_content(idx, "name", g_family[idx+1][F_NAME], mysql, 64);

        SetFamilyData(idx+1, F_USER_ID,       cache_get_field_content_int(idx, "u_id"));
        SetFamilyData(idx+1, F_TIME,          cache_get_field_content_int(idx, "time"));
        SetFamilyData(idx+1, F_COLOR,         cache_get_field_content_int(idx, "color"));
        SetFamilyData(idx+1, F_LEVEL,         cache_get_field_content_int(idx, "level"));
        SetFamilyData(idx+1, F_EXP,           cache_get_field_content_int(idx, "exp"));

        cache_get_field_content(idx, "rank1", g_family[idx+1][F_RANK1], mysql, 32);
        cache_get_field_content(idx, "rank2", g_family[idx+1][F_RANK2], mysql, 32);
        cache_get_field_content(idx, "rank3", g_family[idx+1][F_RANK3], mysql, 32);
        cache_get_field_content(idx, "rank4", g_family[idx+1][F_RANK4], mysql, 32);
        cache_get_field_content(idx, "rank5", g_family[idx+1][F_RANK5], mysql, 32);
        cache_get_field_content(idx, "rank6", g_family[idx+1][F_RANK6], mysql, 32);
        cache_get_field_content(idx, "rank7", g_family[idx+1][F_RANK7], mysql, 32);
        cache_get_field_content(idx, "rank8", g_family[idx+1][F_RANK8], mysql, 32);
        cache_get_field_content(idx, "rank9", g_family[idx+1][F_RANK9], mysql, 32);
        cache_get_field_content(idx, "rank10", g_family[idx+1][F_RANK10], mysql, 32);

        g_family[idx+1][F_SPAWN_POSITION][0] = cache_get_field_content_float(idx, "pos_x");
        g_family[idx+1][F_SPAWN_POSITION][1] = cache_get_field_content_float(idx, "pos_y");
        g_family[idx+1][F_SPAWN_POSITION][2] = cache_get_field_content_float(idx, "pos_z");
        g_family[idx+1][F_SPAWN_POSITION][3] = cache_get_field_content_float(idx, "pos_fa");

        g_family[idx+1][F_SPAWN_IV][0] =    cache_get_field_content_int(idx, "inter");
        g_family[idx+1][F_SPAWN_IV][1] =    cache_get_field_content_int(idx, "world");

        SetFamilyData(idx+1, F_MONEY,         cache_get_field_content_int(idx, "money"));
        SetFamilyData(idx+1, F_DRUGS,         cache_get_field_content_int(idx, "drugs"));
        SetFamilyData(idx+1, F_TREE,          cache_get_field_content_int(idx, "tree"));
        SetFamilyData(idx+1, F_METAL,         cache_get_field_content_int(idx, "metal"));
        SetFamilyData(idx+1, F_AMMO,          cache_get_field_content_int(idx, "ammo"));
        SetFamilyData(idx+1, F_HOUSE_ID,      cache_get_field_content_int(idx, "house_id"));
        
        SetFamilyData(idx+1, F_TAKE_MONEY,	cache_get_field_content_int(idx, "r_TakeMoney"));
		SetFamilyData(idx+1, F_TAKE_DRUGS,	cache_get_field_content_int(idx, "r_TakeDrugs"));
		SetFamilyData(idx+1, F_TAKE_METALL,	cache_get_field_content_int(idx, "r_TakeMetall"));
		SetFamilyData(idx+1, F_TAKE_AMMO,		cache_get_field_content_int(idx, "r_TakeAmmo"));
		SetFamilyData(idx+1, F_RANG_INV,		cache_get_field_content_int(idx, "r_Inv"));
		SetFamilyData(idx+1, F_RANG_UNINV,		cache_get_field_content_int(idx, "r_UnInv"));
		SetFamilyData(idx+1, F_RANG_MUTE,		cache_get_field_content_int(idx, "r_Mute"));
		SetFamilyData(idx+1, F_RANG_UNMUTE,		cache_get_field_content_int(idx, "r_UnMute"));
		SetFamilyData(idx+1, F_RANG_WARN,		cache_get_field_content_int(idx, "r_Warn"));
		SetFamilyData(idx+1, F_RANG_UNWARN,		cache_get_field_content_int(idx, "r_UnWarn"));
		SetFamilyData(idx+1, F_RANG_GIVER,		cache_get_field_content_int(idx, "r_GiveRang"));
		
		SetFamilyData(idx+1, F_FAMILY_CARS,		cache_get_field_content_int(idx, "family_cars"));

        // -------------------------
    }
    g_family_loaded = rows;
    cache_delete(result);

    printf("[Family]: Семьи : %d", g_family_loaded);
	//LoadFamilyCars();
}
stock GetFamilyRang(fam_id, rang_id)
{
    new fmt_rank[32];

    switch(rang_id)
    {
        case 1: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK1]);
        case 2: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK2]);
        case 3: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK3]);
        case 4: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK4]);
        case 5: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK5]);
        case 6: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK6]);
        case 7: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK7]);
        case 8: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK8]);
        case 9: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK9]);
        case 10: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK10]);
        default: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK1]);
    }

    return fmt_rank;
}

stock ShowPayFamilyDialog(playerid)
{
    Dialog
    (
        playerid, DIALOG_PAY_FAMILY, DIALOG_STYLE_INPUT,
        "Банк семьи",
        "{FFFFFF} Введите сумму которую хотите снять с банка семьи",
        "Снять", "Назад"
    );
    return 1;
}

stock ShowChangeRangDialog(playerid)
{
    new fmt_text[1086],
        query[1086],
        fam_id = GetPlayerData(playerid, P_FAMILY);

    format(fmt_text, sizeof fmt_text, "");

    format(query, sizeof query, "{%s}1. %s\n", !strcmp(g_family[fam_id][F_RANK1], "Пусто") ? ("FFFFFF") : ("32a44b"), g_family[fam_id][F_RANK1]);
    strcat(fmt_text, query);
    format(query, sizeof query, "{%s}2. %s\n", !strcmp(g_family[fam_id][F_RANK2], "Пусто") ? ("FFFFFF") : ("32a44b"),g_family[fam_id][F_RANK2]);
    strcat(fmt_text, query);
    format(query, sizeof query, "{%s}3. %s\n", !strcmp(g_family[fam_id][F_RANK3], "Пусто") ? ("FFFFFF") : ("32a44b"),g_family[fam_id][F_RANK3]);
    strcat(fmt_text, query);
    format(query, sizeof query, "{%s}4. %s\n", !strcmp(g_family[fam_id][F_RANK4], "Пусто") ? ("FFFFFF") : ("32a44b"),g_family[fam_id][F_RANK4]);
    strcat(fmt_text, query);
    format(query, sizeof query, "{%s}5. %s\n", !strcmp(g_family[fam_id][F_RANK5], "Пусто") ? ("FFFFFF") : ("32a44b"),g_family[fam_id][F_RANK5]);
    strcat(fmt_text, query);
    format(query, sizeof query, "{%s}6. %s\n", !strcmp(g_family[fam_id][F_RANK6], "Пусто") ? ("FFFFFF") : ("32a44b"),g_family[fam_id][F_RANK6]);
    strcat(fmt_text, query);
    format(query, sizeof query, "{%s}7. %s\n", !strcmp(g_family[fam_id][F_RANK7], "Пусто") ? ("FFFFFF") : ("32a44b"),g_family[fam_id][F_RANK7]);
    strcat(fmt_text, query);
    format(query, sizeof query, "{%s}8. %s\n", !strcmp(g_family[fam_id][F_RANK8], "Пусто") ? ("FFFFFF") : ("32a44b"),g_family[fam_id][F_RANK8]);
    strcat(fmt_text, query);
    format(query, sizeof query, "{%s}9. %s\n", !strcmp(g_family[fam_id][F_RANK9], "Пусто") ? ("FFFFFF") : ("32a44b"),g_family[fam_id][F_RANK9]);
    strcat(fmt_text, query);
    format(query, sizeof query, "{%s}10. %s\n", !strcmp(g_family[fam_id][F_RANK10], "Пусто") ? ("FFFFFF") : ("32a44b"),g_family[fam_id][F_RANK10]);
    strcat(fmt_text, query);

    Dialog
    (
        playerid, DIALOG_FAMILY_RANG, DIALOG_STYLE_LIST,
        "Выберите номер ранга",
        fmt_text,
        "Выбрать", "Отмена"
    );
}
public: ShowFamilyAllPlayers(playerid)
{
    new rows = cache_num_rows();

    new p_name[21];
    new lvl, family_rank;

    new fmt_str[33];
    new text[1290] = "Уровень\tРанг\tИмя\n\n{FFFFFF}";

    new idx, j = rows;
    if(j > 45)
        j = 45;

    for(idx = 0; idx < j; idx ++)
    {
        cache_get_row(idx, 0, p_name);
        lvl = cache_get_row_int(idx, 1);
        family_rank = cache_get_row_int(idx,2);

        format(fmt_str, sizeof fmt_str, "%d\t%d\t%s\n", lvl, family_rank, p_name);
        strcat(text, fmt_str);
    }

    format(fmt_str, sizeof fmt_str, "Показаны %d/%d игроков", idx, rows);
    Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, fmt_str, text, "Закрыть", "");
    return 1;
}
stock ShowFamilyInfo(playerid)
{
    new fmt_text[256],
        fam_id = GetPlayerData(playerid, P_FAMILY);

    format(fmt_text, sizeof fmt_text,
    "{FFFFFF}Название: [%s]\n\
    Престиж: [%d (%d/500)]\n\n\
    Общак:\n\
    - Деньги: [$%d]\n\
    - Наркотики: [%d гр.]\n\
    - Древесина: [%d кг.]\n\
    - Металл: [%d кг.]\n\
    - Патроны: [%d шт.]",
    GetFamilyData(fam_id, F_NAME),
    GetFamilyData(fam_id, F_LEVEL),
    GetFamilyData(fam_id, F_EXP),
    GetFamilyData(fam_id, F_MONEY),
    GetFamilyData(fam_id, F_DRUGS),
    GetFamilyData(fam_id, F_TREE),
    GetFamilyData(fam_id, F_METAL),
    GetFamilyData(fam_id, F_AMMO));

    Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Статистика семьи", fmt_text, "Закрыть", "");
}
stock CreateRentBike()
{
    for(new idx; idx < sizeof rent_bike; idx ++)
    {
        CreatePickup(1239, 23, rent_bike[idx][0], rent_bike[idx][1], rent_bike[idx][2], -1, PICKUP_ACTION_RENT_BIKE, idx);
        CreateDynamic3DTextLabel("{6666CC}Аренда траспорта", 0x3399FFFF, rent_bike[idx][0], rent_bike[idx][1], rent_bike[idx][2]  + 1.8, 10.0);
    }
    return 1;
}
stock ShowPlayerBuyCommandDialog(playerid)
{
	if(GetPlayerAdminEx(playerid) < 9)
		return SendClientMessage(playerid, -1, "Покупка платных команд доступна с 9-ого уровня администратора");

	new big_fmt[568], description[64];
	for(new i; i < sizeof(g_admin_cmd_buy); i ++)
	{
		if(g_player[playerid][CMD_ACCESS][i] != '1') description = "{dd2e13}Не куплено";
            else description = "{23dc1b}Куплено";

		format(big_fmt, sizeof(big_fmt), "%s[%d] %s\t\t%s\t%d Руб\n",big_fmt, i+1, g_admin_cmd_buy[i][CMD_NAME], description, g_admin_cmd_buy[i][CMD_PRICE]);
	}
	Dialog
	(
		playerid, DIALOG_BUY_CMD, DIALOG_STYLE_LIST,
		"Покупка платных комманд",
		big_fmt,
		"Далее", "Отмена"
	);
	return 1;
}
stock GetPlayerAdminCMDAllow(playerid, CMD_id)
{
	if(GetPlayerAdminEx(playerid) < 1) return false;
	
    return (g_player[playerid][CMD_ACCESS][CMD_id]  == '1');
}

CMD:aprav(playerid, params[])
{
    if(!GetPlayerAdminEx(playerid)) return 1;

    new fmt_str[2000];

    format
	(
		fmt_str,sizeof fmt_str,
	    "{ffffff}Администраторам сервера запрещается:\n\
	    1. Ненормативная лексика в чат, а особенно в сторону игрока(ов) {FF6600}(Наказание: ВЫГОВОР!){ffffff} \n\
	    2. Угрозы игрокам {FF6600}(Наказание: ВЫГОВОР!){ffffff} \n\
	    3. Банить/Кикать/Сажать игрока(ов) из личной неприязни {FF6600}(Наказание: ВЫГОВОР!){ffffff} \n\
	    4. Банить/Кикать/Сажать игрока(ов) не проследив за ним и не сделав скриншота {FF6600}(Наказание: Предупреждение){ffffff} \n\
	    5. Выдавать игроку(ам) запрещённое оружие {FF6600}(Наказание: ВЫГОВОР!){ffffff} \n\
	    6. Игнорить репорт {FF6600}(Наказание: ВЫГОВОР!){ffffff} \n\
	    7. Оскорбление других модераторов/администраторов {FF6600}(Наказание: ВЫГОВОР!){ffffff} \n\
	    8. Допускать мат/оффтоп/metagaming в /ad,/vipad,/s {FF6600}(Наказание: ВЫГОВОР!){ffffff} \n\
	    9. Позволять игрокам оскорбление других игроков {FF6600}(Наказание: ВЫГОВОР!){ffffff} \n\
	    10. Просить повышение {FF6600}(Наказание: ВЫГОВОР!){ffffff} \n\
	    11. Находиться АФК больше 30 минут {FF6600}(Наказание: ВЫГОВОР!){ffffff} \n\
	    12. Флуди или оффтоп в /a {FF6600}(Наказание: ВЫГОВОР!){ffffff} \n\
	    13. Флуд или оффтоп в КФ ВК {FF6600}(Наказание: ВЫГОВОР!){ffffff} \n\
	    14. Помеха другим администраторам. {FF6600}(Наказание: ВЫГОВОР!){ffffff} \n\
	    15. Реклама {FF6600}(Наказание: Лишение админских прав){ffffff} \n\
	    16. ТП или помеха основателям {FF6600}(Наказание: ВЫГОВОР!){ffffff} \n\
	    17. Блат кого-то из игроков {FF6600}(Наказание: ВЫГОВОР!){ffffff} \n\
	    18. Использавание адм.в личных целях {FF6600}(Наказание: ВЫГОВОР!){ffffff} \n\
	    19. Помеха РП процессу {FF6600}(Наказание: ВЫГОВОР!){ffffff} \n\
	    20. Влезать в РП процесс {FF6600}(Наказание: ВЫГОВОР!){ffffff} \n\
	    21. Читерить, если ваш админ-лвл ниже 5{FF6600}(Наказание: ВЫГОВОР!){ffffff}"
	);

    Dialog(playerid,INVALID_DIALOG_ID,DIALOG_STYLE_MSGBOX,"{65c8ff}Правила Администраторов:",fmt_str,"Принять","");
    return true;
}
CMD:anak(playerid, params[])
{
    if(!GetPlayerAdminEx(playerid)) return 1;

	new fmt_str[2000];

    format
	(
		fmt_str,sizeof fmt_str,
		"{ffffff}Наказания для правонарушителей:\n\
	    1. Читы - {FF6600}(Наказание: Деморган до 30 мин.){ffffff} \n\
	    2. Оффтоп в любой чат - {FF6600}(Наказание: Мут до 10 мин.){ffffff} \n\
	    3. Metagaming - {FF6600}(Наказание: Мут до 10 мин.){ffffff} \n\
	    4. Powergaming - {FF6600}(Наказание: КПЗ до 15 мин.){ffffff} \n\
	    5. DM - {FF6600}(Наказание: КПЗ до 10 мин.){ffffff} \n\
	    6. DB - {FF6600}(Наказание: КПЗ до 10 мин.){ffffff} \n\
	    7. Реклама сторонних ресурсов - {FF6600}(Наказание: МУТ/БАН!){ffffff} \n\
	    8. Багоюз - {FF6600}(Наказание: КПЗ до 10 мин.){ffffff} \n\
	    9. Попрошайничество - {FF6600}(Наказание: Мут до 10 мин.){ffffff} \n\
	    10. Оскорбления игроков - {FF6600}(Наказание: Мут до 20 мин.){ffffff} \n\
	    11. Оскорбления администраторов - {FF6600}(Наказание: Мут на 60 минут, после бан если не успокоится..){ffffff} \n\
	    12. Оскорбления родителей игрока - {FF6600}(Наказание: Мут > Бан){ffffff} \n\
	    13. Мат в /ad, /vipad, /r, /d, /s, /me, обычный чат - {FF6600}(Наказание: Мут до 10 мин.){ffffff} \n\
	    14. DM в ЗЗ - {FF6600}(Наказание: /warn или КПЗ до 15 мин.){ffffff}\n\
	    15. Срыв Мероприятия - {FF6600}(Наказание: КПЗ до 10 мин.){ffffff}"
	);

    Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{65c8ff}Нормы наказаний | Команды:",fmt_str,"Принять","");
    return true;
}
CMD:licsog(playerid, params[])
{
    if(!GetPlayerAdminEx(playerid)) return 1;

    new fmt_str[2000];

    format
	(
		fmt_str,sizeof fmt_str,
	    "{ffffff}Лицензионное соглашение:\n\
	    1. Пользуясь административными правами вы полностью потдверждаете то, что вы прочитали лиц.соглашение.. \n\
	    правила проекта,и нормы наказаний и соглашаетесь соблюдать правила/ \n\
	    2. Не соблюдая правила, либо давая наказания не по нормам, вы будете получать выговоры, и будете сняты.. \n\
	    без единого возврата средств. \n\
	    3. Повышения происходит как повторной оплатой, так и отличной работой на админке. (Онлайн +5 стабильно) \n\
	    4. Повышение, или пополнение донат-счета возможно через сайт, либо через основателя проекта [vk.com/id568918059].. \n\
	    если вас кто-то обманул, выдавая себя за основателей проекта. Средства возвращены не будут, а то что вы покупали.. \n\
	    вам предоставлено не будет ! \n\
	    5. Официальный сайт проекта > LIGHTS-MOBILE.RU | Владелец проекта - Muller \n\
	    6. Официальное сообщество проекта > VK.COM/lightsrussia | Директор проекта - Prince \n\
	    7. Техническое сообщество проекта > VK.COM/lightsrussia | Разработчик проекта - Muller\n\
	    8. Если вы не работаете, не отвечаете на репорты, или не отыгрываете норму будьте готовы к снятию.. \n\
	    9. После оплаты всегда сохраняйте чеки, чтобы избежать проблем с получением донат-рублей и прочих услуг \n\
	    10. Если пополнить аккаунт не получается, пишите владельцу проекта. Либо в тех.раздел \n\
	    11. Также, вам запрещено превышать свои полномочия, точнее > Продавать донат-рубли, админ-права..\n\
	    и.т.д | За это вы будете сняты, и добавлены в ЧС проекта, все проданное вами будет удалено."
	);

    Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,"{65c8ff}Лицензионное соглашение:",fmt_str,"Принять","");
    return true;
}
stock IsBusinessNoEnter(action_id) //автосалоны
{
	switch(GetBusinessData(action_id, B_SQL_ID))
	{
		case 31, 32, 33:/*, 34, 35: //34, 35, 36, 37:*/
		{
			return 1;
		}
	}
	return 0;
}

stock IsBusinessNoBuy(action_id) // гостиницы
{
	switch(GetBusinessData(action_id, B_SQL_ID))
	{
		case 31,32,33:
		{
			return 1;
		}
	}
	return 0;
}


CMD:drugs(playerid, params[])
{
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /drugs [кол-во грамм]");
	
	extract params -> new drugs;
	
	if(!(1 <= drugs <= 3)) return SendClientMessage(playerid, 0xCECECEFF, "Количество грамм от 1 до 3");

	new fmt_msg[512];

	if(GetPlayerData(playerid, P_DRUGS) < drugs) return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет столько наркотиков");

	AddPlayerData(playerid, P_DRUGS, -, drugs);

	new Float:health;
    ApplyAnimation(playerid,"SMOKING","M_smk_drag",4.1,0,0,0,0,0);
	GetPlayerHealth(playerid, health);
	SetPlayerHealthEx(playerid, health + (drugs*20.0));

	SetPlayerWeather(playerid, -68);

	SetTimerEx("DrugEffectGone", 40000, false, "i", playerid);

	Action(playerid, "использовал наркотики", _, false);

	format(fmt_msg, sizeof fmt_msg, "Вы использовали %d грамм(а) наркотиков. Ваше здоровье (%d)", drugs, GetPlayerData(playerid, P_HEALTH));
	SendClientMessage(playerid, 0x32a44bFF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "UPDATE accounts SET drugs=%d WHERE id=%d", GetPlayerData(playerid, P_DRUGS), GetPlayerAccountID(playerid));
	mysql_query(mysql, fmt_msg, false);

	return 1;
}

forward DrugEffectGone(playerid);
public DrugEffectGone(playerid)
{
    new time[3];
    new pogoda;

    gettime(time[0], time[1], time[2]);
    SetPlayerTime(playerid, time[0], time[1]);
    SetPlayerWeather(playerid, pogoda);
    SetPlayerDrunkLevel(playerid, 0);
    return 1;
}

stock CreateQuestPickup()
{
	for(new idx; idx < sizeof quest_pos; idx ++)
	{
		CreatePickup(1276, 23, quest_pos[idx][0], quest_pos[idx][1], quest_pos[idx][2], -1, PICKUP_ACTION_QUEST_MENU, idx);
		CreateDynamic3DTextLabel(""c_i"Квесты", COR_SERVER, quest_pos[idx][0], quest_pos[idx][1], quest_pos[idx][2] + 0.7, 9.5);
	}
}
stock GromovLohAndPidr(playerid)
{
	Dialog(playerid,0,DIALOG_STYLE_MSGBOX,"","Пусть удача не подводит,\nЗа тобою следом ходит,\nНе теряй в глазах огня!\nС 23 Февраля!","Принять","");
	return 1;
}
stock ShowPlayerQuest23(playerid)
{
	Dialog(playerid,0,DIALOG_STYLE_MSGBOX,"","Здравия желаю боец,\nУ меня для тебя есть пару вопросов для проверки твоих знаний.\n\nЕсли ответишь на них правильно то получишь приз\nНаграда: 15 DRUB","Принять","Отмена");
	return 1;
}

stock ShowPlayerQuestMenuFrac(playerid)
{
	new fmt_text[700];

	format
	(
		fmt_text,
		sizeof fmt_text,
		""c_server"[1] "c_b"Невиновные люди должный быть на свободе| %s\n"\
		""c_server"[2] "c_b"Мы лучще всех | %s\n"\
		""c_server"[3] "c_b"Преступники должный быть в тюрьме | %s\n"\
		""c_server"[4] "c_b"Радиостанция на связи | %s\n"\
		""c_server"[5] "c_b"Люди должный жить | %s",
		GetPlayerData(playerid, P_F_QUEST_1) ? ("{32CD32}Выполнено") : ("{F81414}Не выполнено"),
		GetPlayerData(playerid, P_F_QUEST_2) ? ("{32CD32}Выполнено") : ("{F81414}Не выполнено"),
		GetPlayerData(playerid, P_F_QUEST_3) ? ("{32CD32}Выполнено") : ("{F81414}Не выполнено"),
		GetPlayerData(playerid, P_F_QUEST_4) ? ("{32CD32}Выполнено") : ("{F81414}Не выполнено"),
		GetPlayerData(playerid, P_F_QUEST_5) ? ("{32CD32}Выполнено") : ("{F81414}Не выполнено")
	);

	Dialog
	(
		playerid, DIALOG_ACTION_F_QUEST, DIALOG_STYLE_LIST,
		"Квесты",
		fmt_text,
		"Выбрать", "Закрыть"
	);

	return 1;
}

stock ShowPlayerQuestMenu(playerid)
{
	new fmt_text[700];

	format
	(
		fmt_text,
		sizeof fmt_text,
		""c_server"[1] "c_b"Первые деньги | %s\n"\
		""c_server"[2] "c_b"Без связи некуда | %s\n"\
		""c_server"[3] "c_b"Тяжелая профессия | %s\n"\
		""c_server"[4] "c_b"Высокие деревья | %s\n"\
		""c_server"[5] "c_b"Первый транспорт | %s\n"\
		""c_server"[6] "c_b"Пора приодеться | %s\n"\
		""c_server"[7] "c_b"Лучше вместе, чем одному | %s\n"\
		""c_server"[8] "c_b"Привет, большие деньги | %s",
		GetPlayerData(playerid, P_QUEST_1) ? ("{32CD32}Выполнено") : ("{F81414}Не выполнено"),
		GetPlayerData(playerid, P_QUEST_2) ? ("{32CD32}Выполнено") : ("{F81414}Не выполнено"),
		GetPlayerData(playerid, P_QUEST_3) ? ("{32CD32}Выполнено") : ("{F81414}Не выполнено"),
		GetPlayerData(playerid, P_QUEST_4) ? ("{32CD32}Выполнено") : ("{F81414}Не выполнено"),
		GetPlayerData(playerid, P_QUEST_5) ? ("{32CD32}Выполнено") : ("{F81414}Не выполнено"),
		GetPlayerData(playerid, P_QUEST_6) ? ("{32CD32}Выполнено") : ("{F81414}Не выполнено"),
		GetPlayerData(playerid, P_QUEST_7) ? ("{32CD32}Выполнено") : ("{F81414}Не выполнено"),
		GetPlayerData(playerid, P_QUEST_8) ? ("{32CD32}Выполнено") : ("{F81414}Не выполнено")
	);

	Dialog
	(
		playerid, DIALOG_ACTION_QUEST, DIALOG_STYLE_LIST,
		"Квесты",
		fmt_text,
		"Выбрать", "Закрыть"
	);

	return 1;
}

CMD:quest(playerid)
{
	Dialog(playerid,DIALOG_QUEST_OPEN,DIALOG_STYLE_LIST,
	"Донат",
	"1. Первая линия квестов\n"\
	"2. Вторая линия квестов",
	"Открыть","Отмена"
	);
	
	return 1;
}

CMD:vleave(playerid, params[])
{
	if(GetPlayerPremium(playerid) < 1) return 1;
//	if(GetPlayerData(playerid, P_IMPROVEMENTS) < 2) return SendClientMessage(playerid, 0xCECECEFF, "Приобретите улучшение \"Решительность\", чтобы уволиться по собственному желанию");

	if(!GetPlayerTeamEx(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Вы не состоите в организации");

	new fmt_text[210];

	format
	(
		fmt_text, sizeof fmt_text,
		"{FFFFFF}Вы состоите в организации \"%s\".\n"\
		"Если Вы уволитесь, то потеряете все свои достижения в ней, такие как ранг.\n\n"\
		"Вы уверены, что хотите покинуть организацию?",
		GetTeamName(GetPlayerTeamEx(playerid))
	);

	Dialog(playerid, DIALOG_TEAM_LEAVE, DIALOG_STYLE_MSGBOX, "Предупреждение", fmt_text, "Да", "Нет");

	return 1;
}

CMD:unj(playerid)
{
	if(!GetPlayerPremium(playerid) || GetPlayerData(playerid, P_UNJ)) return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет VIP, или вы уже воспользовались командой ранее");
    if(GetPlayerPremium(playerid) == 2)
	{
		SetPlayerData(playerid, P_JAIL ,GetPlayerData(playerid, P_JAIL) / 2);
	}
	else if(GetPlayerPremium(playerid) == 3)
	{
		SetPlayerData(playerid, P_JAIL ,GetPlayerData(playerid, P_JAIL) / 3);
	}
    SetPlayerData(playerid, P_UNJ, 1);
    UpdatePlayerDatabaseInt(playerid, "unj", GetPlayerData(playerid, P_UNJ));
    SendClientMessage(playerid, 0xCECECEFF, "Вы уменьшили срок тюрьмы!");
	return 1;
}

CMD:setpremium(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 13) return 1;

	extract params -> new to_player, premium; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setpremium [id игрока] [время (в днях)]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!(0 <= premium <= 30)) return SendClientMessage(playerid, 0xCECECEFF, "Количество дней от 0 до 30");

	new fmt_msg[100];

	SetPlayerData(to_player, P_PREMIUM, gettime() + premium * 86400);

	UpdatePlayerDatabaseInt(to_player, "premium", GetPlayerData(to_player, P_PREMIUM));

	format(fmt_msg, sizeof fmt_msg, "%s выдал Вам подписку "SERVER_NAME"+ на %d дн.", GetPlayerNameEx(playerid), premium);
	SendClientMessage(to_player, 0x1E90FFFF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Вы выдали %s подписку "SERVER_NAME"+ на %d дн.", GetPlayerNameEx(to_player), premium);
	SendClientMessage(playerid, 0x1E90FFFF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Установил %s[acc:%d] подписку "SERVER_NAME"+ на %d дн.", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), premium);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	return 1;
}

CMD:togphone(playerid, params[])
{
	if(!GetPlayerPhone(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет телефона. Его можно купить в сотовом салоне");
	if(!GetPlayerPremium(playerid))
	    return   SendClientMessage(playerid, 0xCECECEFF, "У Вас нет VIP аккаунта.");

	if(GetPlayerPhoneCall(playerid, PC_INCOMING_PLAYER) != INVALID_PLAYER_ID || GetPlayerPhoneCall(playerid, PC_OUTCOMING_PLAYER) != INVALID_PLAYER_ID)
		return SendClientMessage(playerid, 0xCECECEFF, "Закончите текущий разговор");

	if(GetPlayerPhoneCall(playerid, PC_ENABLED))
	{
		SetPlayerPhoneCall(playerid, PC_ENABLED, false);
		SendClientMessage(playerid, 0xCECECEFF, "Телефон отключен");
	}
	else
	{
		SetPlayerPhoneCall(playerid, PC_ENABLED, true);
		SendClientMessage(playerid, 0x32a44bFF, "Телефон включен");
	}
	return 1;
}

CMD:v(playerid, params[])
{
	if(GetPlayerPremium(playerid) < 1) return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет VIP аккаунта ");
	else if(IsPlayerMuted(playerid) > 0) return SendClientMessage(playerid, 0xCECECEFF, "Доступ в чат заблокирован. Время до разблокировки: {66CC33}/time");
	else if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /v [текст]");

	new fmt_msg[144];



	format(fmt_msg, sizeof fmt_msg, "[VIP] %s[%d]: %s", GetPlayerNameEx(playerid), playerid, params);

	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		if(!IsPlayerLogged(i)) continue;
		if(!GetPlayerPremium(i)) continue;
        if(!GetPlayerData(i, P_PREMIUM_CHAT)) continue;

		SendClientMessage(i, 0xEC174FFF, fmt_msg);
	}
	return 1;
}

CMD:voff(playerid, params[])
{
	if(GetPlayerPremium(playerid) < 1) return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет VIP аккаунта ");
	if(GetPlayerData(playerid, P_PREMIUM_CHAT))
	{
		SendClientMessage(playerid,-1,"Вы отключили VIP чат");
		SetPlayerData(playerid, P_PREMIUM_CHAT, 0);
		return 1;
	}
	if(!GetPlayerData(playerid, P_PREMIUM_CHAT))
	{
		SendClientMessage(playerid,-1,"Вы включили VIP чат");
		SetPlayerData(playerid, P_PREMIUM_CHAT, 1);
		return 1;
	}
	return 1;
}

stock SendMessageToYouTubers(message[], color, y_level = 1)
{
    if(y_level < 1)
        y_level = 1;

    new count;
    foreach(new playerid : Player)
    {
        if(!IsPlayerLogged(playerid)) continue;
        if(GetPlayerYouTubeEx(playerid) < y_level) continue;

        SendClientMessage(playerid, color, message);
        count ++;
    }
    return count;
}

CMD:yhelp(playerid, params[])
{
	if(GetPlayerYouTubeEx(playerid) < 1) return 1;

	new fmt_str[350 + 1];

	format
	(
		fmt_str, sizeof fmt_str,
		"{6666CC}/yz -{FFFFFF} телепорт в ютуберскую-зону{6666CC}\n\
		/yre -{FFFFFF} слежка за игроком{6666CC}\n\
		/yreoff -{FFFFFF} закончить слежку за игроком{6666CC}\n\
		/y -{FFFFFF}  ютуберский чат{6666CC}\n\
		/yhp -{FFFFFF} восстановить себе хп{6666CC}\n\
		/yveh -{FFFFFF} заспавнить транспорт{6666CC}\n\
		/yskin -{FFFFFF} выдать себе временный скин{6666CC}\n\
		/sptext -{FFFFFF} писать текст за игрока{6666CC}\n\
		\n\
		Доступ телепорта по метке на карте");

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Команды ютуберов", fmt_str, "Закрыть", "");
	return 1;
}

CMD:ythelp(playerid, params[])
{
	if(GetPlayerYouTubeEx(playerid) < 1) return 1;

	new fmt_str[350 + 1];

	format
	(
		fmt_str, sizeof fmt_str,
		"{6666CC}/yz -{FFFFFF} телепорт в ютуберскую-зону{6666CC}\n\
		/yre -{FFFFFF} слежка за игроком{6666CC}\n\
		/yreoff -{FFFFFF} закончить слежку за игроком{6666CC}\n\
		/y -{FFFFFF}  ютуберский чат{6666CC}\n\
		/yhp -{FFFFFF} восстановить себе хп{6666CC}\n\
		/yveh -{FFFFFF} заспавнить транспорт{6666CC}\n\
		/yskin -{FFFFFF} выдать себе временный скин{6666CC}\n\
		/sptext -{FFFFFF} писать текст за игрока{6666CC}\n\
		\n\
		Доступ телепорта по метке на карте");

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Команды ютуберов", fmt_str, "Закрыть", "");
	return 1;
}

CMD:yz(playerid)
{
    if(GetPlayerYouTubeEx(playerid) < 1) return 1;

	SetPlayerVirtualWorld(playerid, 1010);
	SetPlayerInterior(playerid, 17);
	SetPlayerPos(playerid,-959.5768,1955.6293,9.0000);
	return 1;
}

CMD:yreoff(playerid, params[])
{
	if(GetPlayerYouTubeEx(playerid) < 1) return 1;

	if(GetPlayerSpectateData(playerid, S_PLAYER) != -1)
	{
		StopSpectateY(playerid);

		SendClientMessage(playerid, -1,"Вы закончили слежку за игроком");
	}

	return 1;
}

CMD:yre(playerid, params[])
{
	if(GetPlayerYouTubeEx(playerid) < 1) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /yre [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

    if(GetPlayerAdminEx(to_player) < 1)
		return SendClientMessage(playerid, 0xCECECEFF, "Нельзя следить за администратором");

	if(GetPlayerSpectateData(playerid, S_PLAYER) == -1)
	{
		new Float: x,
			Float: y,
			Float: z,
			Float: a,
			skin = GetPlayerSkin(playerid);

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

		SetPlayerSpectateData(playerid, S_START_POS_X, x);
		SetPlayerSpectateData(playerid, S_START_POS_Y, y);
		SetPlayerSpectateData(playerid, S_START_POS_Z, z);
		SetPlayerSpectateData(playerid, S_START_ANGLE, a);

		SetPlayerSpectateData(playerid, S_START_INTERIOR, GetPlayerInterior(playerid));
		SetPlayerSpectateData(playerid, S_START_VIRTUAL_WORLD, GetPlayerVirtualWorld(playerid));

		SetSpawnInfo(playerid, 0, skin, x, y, z, a, 0, 0, 0, 0, 0, 0);
	}

	StartSpectateY(playerid, to_player);

	new fmt_text[90];

	format(fmt_text, sizeof fmt_text, "[Y] Ютубер %s[%d] начал следить за %s[%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
	SendMessageToYouTubers(fmt_text, 0xCECECEFF);

	format(fmt_text, sizeof fmt_text, "Ютубер Следит за %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:y(playerid, params[])
{
	if(GetPlayerYouTubeEx(playerid) >= 1)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /y [текст]");

		new fmt_str[128];

		format(fmt_str, sizeof fmt_str, "[YouTube] Ютубер %s[%d]: %s", GetPlayerNameEx(playerid), playerid, params);
		SendMessageToYouTubers(fmt_str, 0x99cc00FF);

		SendLog(playerid, LOG_TYPE_ADMIN_CHAT, params);
	}

	return 1;
}

CMD:yskin(playerid, params[])
{
	if(GetPlayerYouTubeEx(playerid) < 1) return 1;

	extract params -> new skin_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /skin [id скина]");

	if(!(-1 <= skin_id <= 299) || skin_id == 0) return SendClientMessage(playerid, 0xCECECEFF, "ID скина от 1 до 299");

	if(skin_id != -1)
		SetPlayerSkin(playerid, skin_id);
	else
		SetPlayerSkin(playerid, GetPlayerSkinEx(playerid));

	new fmt_text[100];

	format(fmt_text, sizeof fmt_text, "Вы выдали себе скин (ID: %s)", skin_id);
	SendClientMessage(playerid, -1, fmt_text);

	return 1;
}

CMD:yhp(playerid)
{
    if(GetPlayerYouTubeEx(playerid) < 1) return 1;

    SetPlayerData(playerid, P_HEALTH, 100);
	SetPlayerHealthEx(playerid, 100);

	if(GetPlayerData(playerid, P_HOSPITAL))
		SetPlayerData(playerid, P_HOSPITAL, false);

	SendClientMessage(playerid, -1, "Вы восстановили себе хп");

	return 1;
}

CMD:sptext(playerid, params[])
{
	if(GetPlayerYouTubeEx(playerid) < 1) return 1;

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sptext [id игрока] [текст]");

	extract params -> new to_player, string: message[144 + 1];

	if(GetPlayerAdminEx(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Нельзя писать за администратора");

	if(!IsPlayerConnected(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	OnPlayerText(to_player,message);

	return true;
}

CMD:yveh(playerid, params[])
{
	if(GetPlayerYouTubeEx(playerid) < 1) return 1;

	extract params -> new model_id, color_1, color_2; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /veh [id модели] [цвет 1] [цвет 2]");

	if(!(400 <= model_id <= 611)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте модель от 400 до 611");

	new status;

	sscanf(params, "{d}{d}{d}d", status);

	new Float: x,
		Float: y,
		Float: z,
		Float: a;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	new vehicleid = CreateVehicle(model_id, x, y, z, a, color_1, color_2, -1, 0, VEHICLE_ACTION_TYPE_ADMIN_CAR, 1);
	PutPlayerInVehicle(playerid, vehicleid, 0);

	new fmt_text[100];

	format(fmt_text, sizeof fmt_text, "[Y] Ютубер %s[%d] создал транспорт ID: %d. Цвет: %d,%d",
	GetPlayerNameEx(playerid), playerid, model_id, color_1, color_2);

	SendMessageToAdmins(fmt_text, 0xCECECEFF);

	format(fmt_text, sizeof fmt_text, "ютубер Создал транспорт (%d, %d, %d)", model_id, color_1, color_2);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}
stock StartSpectateY(playerid, for_player)
{
	if(GetPlayerYouTubeEx(playerid) < 1) return 1;

	SetPlayerSpectateData(playerid, S_PLAYER, for_player);

	SetPlayerInterior(playerid, GetPlayerInterior(for_player));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(for_player));

	TogglePlayerSpectating(playerid, true);

	if(IsPlayerInAnyVehicle(for_player))
	{
		PlayerSpectateVehicle(playerid, GetPlayerVehicleID(for_player));
	}
	else PlayerSpectatePlayer(playerid, for_player);

	return 1;
}
stock StopSpectateY(playerid)
{
	if(GetPlayerYouTubeEx(playerid) < 1) return 1;
	if(GetPlayerSpectateData(playerid, S_PLAYER) == -1) return 1;

	TogglePlayerSpectating(playerid, false);

	SetPlayerSpectateData(playerid, S_PLAYER, -1);

	SetPlayerPosEx
	(
		playerid,
		GetPlayerSpectateData(playerid, S_START_POS_X),
		GetPlayerSpectateData(playerid, S_START_POS_Y),
		GetPlayerSpectateData(playerid, S_START_POS_Z),
		GetPlayerSpectateData(playerid, S_START_ANGLE),
		GetPlayerSpectateData(playerid, S_START_INTERIOR),
		GetPlayerSpectateData(playerid, S_START_VIRTUAL_WORLD)
	);

	return 1;
}

CMD:setyt(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 13) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setyt [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(GetPlayerYouTubeEx(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "У игрока уже есть ютуберская админка");

	SetPlayerData(to_player, P_YOUTUBE, 1);
	UpdatePlayerDatabaseInt(to_player, "youtube", 1);

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "%s[%d] выдал вам ютуберскую админку", GetPlayerNameEx(playerid), playerid);
	SendClientMessage(to_player, 0xFF5533FF, fmt_text);

	format(fmt_text, sizeof fmt_text, "[A] %s %s[%d] выдал игроку %s[%d] ютуберскую админку",
	GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);

	SendMessageToAdmins(fmt_text, 0xFF5533FF);

	format(fmt_text, sizeof fmt_text, "Поставил %s[acc:%d] на пост ютубера", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, fmt_text);

	return 1;
}

CMD:delyt(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 13) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /delyt [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	SetPlayerData(to_player, P_YOUTUBE, 0);
	UpdatePlayerDatabaseInt(to_player, "youtube", 0);

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "%s[%d] забрал у Вас ютуберскую админку", GetPlayerNameEx(playerid), playerid);
	SendClientMessage(to_player, 0xFF5533FF, fmt_text);

	format(fmt_text, sizeof fmt_text, "[A] %s[%d] забрал у игрока %s[%d] ютуберскую админку",
	GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);

	SendMessageToAdmins(fmt_text, 0xFF5533FF);

	format(fmt_text, sizeof fmt_text, "забрал %s[acc:%d] пост ютубера", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, fmt_text);

	return 1;
}

public AntiBH(playerid)
{
	ApplyAnimation(playerid,"PED","getup_front",4.0,0,0,0,0,0);
	times[playerid] = false;

	SetTimerEx("AntiBH1",1500,false,"i",playerid);

	return 1;
}
public AntiBH1(playerid)
{
	times[playerid] = true;
}

stock FD(playerid)
{
    mysql_format(mysql, str, 250, "SELECT * FROM `full_dostup` WHERE name = '%s'", GetPlayerNameEx(playerid));
    mysql_query(mysql, str, true);

    if(cache_num_rows())
    	return 1;
    else
    	return 0;
}

CMD:so(playerid, params[])
{
	if(GetPlayerHelperEx(playerid) >= 1)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /so [текст]");

		new fmt_str[128];

		format(fmt_str, sizeof fmt_str, "[S] Хелпер %s[%d]: %s", GetPlayerNameEx(playerid), playerid, params);
		SendMessageToHelpers(fmt_str, 0x99CC00FF);

	}

	return 1;
}

CMD:shelp(playerid, params[])
{
	if(GetPlayerHelperEx(playerid) < 1) return 1;

	new fmt_str[200];

	format
	(
		fmt_str, sizeof fmt_str,
		"{6666CC}/so -{FFFFFF} чат помощников сервера{6666CC}\n\
		/ask -{FFFFFF} список вопросов{6666CC}\n\
		/pm -{FFFFFF} ответить игроку на вопрос{6666CC}");

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Команды хелперов", fmt_str, "Закрыть", "");
	return 1;
}

stock ShowPlayerReportMenuDialog(playerid)
{
    if(AntiTimerReport(playerid)) return true;
    new fmt_text[50];

    format
    (
        fmt_text,
        sizeof fmt_text,
        "{B5A8FF}Отправить жалобу\n"\
        "{B5A8FF}Отправить вопрос\n"
    );

    Dialog
    (
        playerid, DIALOG_ADMINCALL_MENU, DIALOG_STYLE_LIST,
        "{6666CC}Связь с администрацией",
        fmt_text,
        "Выбрать", "Закрыть"
    );

    return 1;
}
CMD:vipad(playerid, params[])
{
    if(GetPlayerPremium(playerid) < 1) return Send(playerid,-1,"У вас нет VIP Аккаунта");
    

    if(AntiTimerVipad(playerid)) return true;

    if(GetPlayerPhone(playerid) != 0)
	{
		if(GetPlayerMoneyEx(playerid) >= 50000)
		{
			if(!strlen(params))
				return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /vipad [текст]");

			extract params -> new string: message[144 + 1];

			if(IsAIP(message))
			{
	       		SendClientMessage(playerid, -1, "Подозрения в рекламе!");
	        	return false;
	    	}

			new fmt_str[128];

			GivePlayerMoneyEx(playerid, -50000, "vip объява", true, true);

			format(fmt_str, sizeof fmt_str, "LIGHTS Russia | "c_b"%s[%d]: %s Тел: %d", GetPlayerNameEx(playerid), playerid, message, GetPlayerPhone(playerid));
			SendClientMessageToAll(0xFF9945FF, fmt_str);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);



		}
		else
			return SendClientMessage(playerid, -1, "У Вас недостаточно денег, нужно 50.000$");
		
    }
	else SendClientMessage(playerid, 0x999999FF, "У Вас нет телефона. Его можно купить в сотовом салоне");

	return 1;
}

stock SellDebtorsHome()
{
	new query[800];
	for(new i; i < g_house_loaded; i ++)
	{
		if(GetHouseData(i, H_RENT_DATE) < gettime())
		{
		    new owner_id = GetHouseData(i, H_OWNER_ID);

			if(owner_id == 0) continue;


			format(query, sizeof query, "UPDATE accounts a,houses h SET `house`=-1,`house_room`=-1,`house_type`=-1, h.owner_id='0', h.lock='0', h.rent_time='0' WHERE a.id=h.owner_id AND h.id='%d'", GetHouseData(i, H_SQL_ID));
			mysql_query(mysql, query, false);

			new Cache: result, owner_name[21];

			mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE id=%d LIMIT 1", owner_id);
			result = mysql_query(mysql, query);

			if(cache_num_rows())
				cache_get_field_content(0, "name", owner_name, mysql, 21);
			cache_delete(result);

			new owner_player = GetPlayerIDBySqlID(owner_id);
			if(IsPlayerConnected(owner_player) && IsPlayerLogged(owner_player)) {
                SetPlayerData(owner_player, P_HOUSE, -1);
                SetPlayerData(owner_player, P_HOUSE_ROOM, -1);
                SetPlayerData(owner_player, P_HOUSE_TYPE, -1);
                mysql_format(mysql, query, sizeof query, "UPDATE accounts SET `house`=-1,`house_room`=-1,`house_type`=-1 WHERE `id`=%d LIMIT 1", GetPlayerAccountID(owner_player));
				mysql_query(mysql, query, false);
			} else {
				mysql_format(mysql, query, sizeof query, "UPDATE accounts SET `house`=-1,`house_room`=-1,`house_type`=-1 WHERE `id`=%d LIMIT 1", owner_id);
				mysql_query(mysql, query, false);
			}
			SetHouseData(i, H_OWNER_ID, 0);
			SetHouseData(i, H_IMPROVEMENTS,		0);

			SetHouseData(i, H_RENT_DATE,		0);
			SetHouseData(i, H_LOCK_STATUS,		false);

			format(query, sizeof query, "UPDATE houses SET `owner_id`=0,`store_x`=0.0,`store_y`=0.0,`store_z`=0.0,`store_metall`=0,`store_drugs`=0,`store_weapon`=0,`store_ammo`=0,`store_skin`=0,`lock`=0 WHERE id=%d", GetHouseData(i, H_SQL_ID));
			mysql_query(mysql, query, false);

			
			UpdateHouse(i);

			HouseHealthInit(i);
			HouseStoreInit(i);

			new fmt_text[256];

			new description[64];

			description = "слет дома";

			format
			(
				fmt_text, sizeof fmt_text,
				"INSERT INTO return_money \
				(uid, money, description, status)\
				VALUES ('%d', '%d', '%s', 0)",
				owner_id,
				GetHouseData(i, H_PRICE) / 2,
				description
			);

			mysql_query(mysql, fmt_text, true);
		}
	}
//	return 1;
}
stock SellDebtorsBusiness()
{
	new query[400];
	for(new i; i < g_business_loaded; i ++)
	{
		if(GetBusinessData(i, B_RENT_DATE) < gettime())
		{
		    new owner_id = GetBusinessData(i, B_OWNER_ID);
		    if(owner_id == 0) continue;

			format(query, sizeof query, "UPDATE accounts a,business b SET a.business=-1,b.owner_id=0,b.products=0,b.prod_price=0,b.lock=0,b.rent_time=0 WHERE a.id=b.owner_id AND b.id=%d", GetBusinessData(i, B_SQL_ID));
			mysql_query(mysql, query, false);

			format(query, sizeof query, "DELETE FROM `business_gps` WHERE id = '%d'", i);
			mysql_query(mysql, query, false);
			new Cache: result, owner_name[21];

			mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE id=%d LIMIT 1", owner_id);
			result = mysql_query(mysql, query);

			if(cache_num_rows())
				cache_get_field_content(0, "name", owner_name, mysql, 21);
			cache_delete(result);

			format(query, sizeof query, "UPDATE accounts a,business b SET a.business=-1,b.owner_id=0,b.name='',b.products=0,b.prod_price=0,b.lock=0 WHERE a.id=%d AND b.id=%d", owner_id, GetBusinessData(i, B_SQL_ID));
			mysql_query(mysql, query, false);
			new owner_player = GetPlayerIDBySqlID(owner_id);
			if(IsPlayerConnected(owner_player) && IsPlayerLogged(owner_player)) {
				SetPlayerData(owner_player, P_BUSINESS, -1);
                mysql_format(mysql, query, sizeof query, "UPDATE accounts SET `business`=-1 WHERE `id`=%d LIMIT 1", GetPlayerAccountID(owner_player));
				mysql_query(mysql, query, false);
			} else {
			    mysql_format(mysql, query, sizeof query, "UPDATE accounts SET `business`=-1 WHERE `id`=%d LIMIT 1", owner_id);
				mysql_query(mysql, query, false);
			}
			SetBusinessData(i, B_OWNER_ID, 0);
			SetBusinessData(i, B_IMPROVEMENTS, 		0);

			SetBusinessData(i, B_PRODS, 			0);
			SetBusinessData(i, B_PROD_PRICE,		0);

			SetBusinessData(i, B_BALANCE,			0);
			SetBusinessData(i, B_RENT_DATE,			0);
			SetBusinessData(i, B_ENTER_MUSIC,		0);
			SetBusinessData(i, B_LOCK_STATUS,		false);

			BusinessHealthPickupInit(i);

			format(query, sizeof query, "DELETE FROM business_gps WHERE bid=%d", i);
			mysql_query(mysql, query, false);

			g_business_gps_init = false;

			CallLocalFunction("UpdateBusinessLabel", "i", i);

			new fmt_text[256];

			new description[64];

			description = "слет бизнеса";

			format
			(
				fmt_text, sizeof fmt_text,
				"INSERT INTO return_money \
				(uid, money, description, status)\
				VALUES ('%d', '%d', '%s', 0)",
				owner_id,
				GetBusinessData(i, B_PRICE) / 2,
				description
			);

			mysql_query(mysql, fmt_text, true);
		}
	}
//	return 1;
}
stock SellDebtorsFuel()
{
	new query[400];
	for(new i; i < g_fuel_station_loaded; i ++)
	{

		if(GetFuelStationData(i, FS_RENT_DATE) < gettime())
		{
			new owner_id = GetFuelStationData(i, FS_OWNER_ID);

			if(owner_id == 0) continue;

			format(query, sizeof query, "UPDATE accounts a,fuel_stations f SET a.fuel_st=-1,f.owner_id=0,f.fuels=1000,f.fuel_price=3,f.lock=0,f.rent_time=0 WHERE a.id=f.owner_id AND f.id=%d", GetFuelStationData(i, FS_SQL_ID));
			mysql_query(mysql, query, false);

			new Cache: result, owner_name[21];

			mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE id=%d LIMIT 1", owner_id);
			result = mysql_query(mysql, query);

			if(cache_num_rows())
				cache_get_field_content(0, "name", owner_name, mysql, 21);
			cache_delete(result);

			new owner_player = GetPlayerIDBySqlID(owner_id);
			if(IsPlayerConnected(owner_player) && IsPlayerLogged(owner_player)) {
	            SetPlayerData(owner_player, P_FUEL_ST, -1);
				format(query, sizeof query, "UPDATE accounts SET `fuel_st`=-1 WHERE `id`=%d LIMIT 1", GetPlayerAccountID(owner_player));
				mysql_query(mysql, query, false);
			} else {
				format(query, sizeof query, "UPDATE accounts SET `fuel_st`=-1 WHERE `id`=%d LIMIT 1", owner_id);
				mysql_query(mysql, query, false);
			}

			SetFuelStationData(i, FS_OWNER_ID, 0);
			SetFuelStationData(i, FS_IMPROVEMENTS, 0);

			SetFuelStationData(i, FS_FUELS, 		1000);
			SetFuelStationData(i, FS_FUEL_PRICE,	3);
			SetFuelStationData(i, FS_BUY_FUEL_PRICE,0);

			SetFuelStationData(i, FS_BALANCE,		0);
			SetFuelStationData(i, FS_RENT_DATE,		0);
			SetFuelStationData(i, FS_LOCK_STATUS,	false);

			CallLocalFunction("UpdateFuelStationLabel", "i", i);

			new fmt_text[256];

			new description[64];

			description = "слет АЗС";

			format
			(
				fmt_text, sizeof fmt_text,
				"INSERT INTO return_money \
				(uid, money, description, status)\
				VALUES ('%d', '%d', '%s', 0)",
				owner_id,
				GetFuelStationData(i, FS_PRICE) / 10,
				description
			);

			mysql_query(mysql, fmt_text, true);
		}
	}
//	return 1;
}

CMD:slethouse(playerid)
{
	if(GetPlayerAdminEx(playerid) != 13) return 1;

	//SendClientMessageToAll(-1,"тест слет всего!");
	SellDebtorsHome();

	return 1;
}

CMD:slet(playerid)
{
	if(GetPlayerAdminEx(playerid) != 13) return 1;

	//SendClientMessageToAll(-1,"тест слет всего!");
	SellDebtorsHome();
    SellDebtorsFuel();
	SellDebtorsBusiness();

	return 1;
}

stock CreateFractionCar()
{
	for(new i = 0; i < sizeof(g_org_car); i++)
    {
        format(sctring, sizeof(sctring), "{009900}Фракционный транпорт \n {FF8800}%s", g_org_car[i][O_NAME]);
        CreateDynamic3DTextLabel(sctring, -1, g_org_car[i][O_PICKUP][0], g_org_car[i][O_PICKUP][1], g_org_car[i][O_PICKUP][2], 15.0);
        g_org_car[i][O_PICKUP_ID] = CreatePickup(1239, 23, g_org_car[i][O_PICKUP][0], g_org_car[i][O_PICKUP][1], g_org_car[i][O_PICKUP][2], 0, PICKUP_ACTION_TYPE_ORG_CAR, i);
    }
    printf("Загружено фракционных пикапов авто %d штук", sizeof(g_org_car));
}

stock IsAIP(text[])
{
    new numbers;
    for(new i = 0; i < strlen(text); i++) if('0' <= text[i] <= '9') if(!('0' <= text[i+1] <= '9')) numbers ++;
    if(numbers >= 4) return 1;
    return 0;
}

stock AntiTimerAdminNakaz(playerid)
{
    if(use_commad_time[playerid][adm_nakaz] > gettime())
        return SendClientMessage(playerid, -1, "Команду можно использовать раз в 60 секунд");

    use_commad_time[playerid][adm_nakaz] = gettime()+60;
    
    return false;
}

stock AntiTimerVipad(playerid)
{
    if(use_commad_time[playerid][vipad] > gettime())
        return SendClientMessage(playerid, -1, "Команду можно использовать раз в 5 минут");

    use_commad_time[playerid][adm_nakaz] = gettime()+300;

    return false;
}

stock AntiTimerReport(playerid)
{
    if(use_commad_time[playerid][report] > gettime())
        return SendClientMessage(playerid, -1, "Команду можно использовать раз в минуту");

    use_commad_time[playerid][adm_nakaz] = gettime()+60;

    return false;
}

stock AntiSliv(playerid, action[])
{
    if(GetPlayerData(playerid, P_ANTISLIV) > gettime())
    {
        SendClientMessage(playerid, -1, "{FFFF00}[!]{FFFFFF} Ошибка, ваши админ действия заблокированы!");

      	format(sctring, sizeof(sctring), "{FFFF00}[!]{FFFFFF} %s [%d] Подозрение на слив аккаунта (действие %s)", GetPlayerNameEx(playerid), playerid, action);
      	SendMessageToAdmins(sctring, 0x999999FF);
        return true;
    }
    g_player[playerid][P_ANTISLIV] = gettime() + 15;
    UpdatePlayerDatabaseInt(playerid, "antisliv", GetPlayerData(playerid, P_ANTISLIV));
    return false;
}

public: DonateQiwi(playerid, response_code, data[])
{
    if(response_code == 200)
    {
        SendClientMessage(playerid, -1, "Донат найден!");
        if(strfind(data, "success", true) != -1)
        {
            SendClientMessage(playerid, -1, "Донат оплачен!");

            new Cache:result;
            mysql_format(mysql, sctring, sizeof(sctring), "SELECT * FROM `payments` WHERE `user_id` = '%d' AND `status` = 1 LIMIT 1", GetPlayerAccountID(playerid));
            result = mysql_query(mysql, sctring, true);
            if(cache_num_rows())
            {

                new sum,id_pay;
                id_pay = cache_get_field_content_int(0, "id");
                sum = cache_get_field_content_int(0, "sum");

                mysql_format(mysql, sctring, sizeof(sctring), "UPDATE `payments` SET `status` = 2 WHERE `id` = '%d'", id_pay);
                mysql_query(mysql, sctring, false);

                format(sctring, sizeof(sctring), "{0099CC}Ваш баланс успешно пополнен на {FFD700}%i рублей! (QIWI)", sum);
                SendClientMessage(playerid, -1, sctring);

                if(Config[sDonPower] != 1)
                {
                    format(sctring, sizeof(sctring), "{0099CC}С учетом акции (X%d) на аккаунт зачислено {FFD700}%i рублей!",Config[sDonPower], sum*Config[sDonPower]);
                    SendClientMessage(playerid, -1, sctring);
                }
                GivePlayerDonate(playerid, sum*Config[sDonPower], "Донат QIWI");
                cache_delete(result);
                return 1;
            }
        }
    }
    else
    {
    	format(sctring, sizeof(sctring), "Пополнения по QIWI не найдены: (code: %d)", response_code);
        SendClientMessage(playerid, 0x999999FF, sctring);
    }
    return 1;
}


stock PlayerTotalOnline(playerid, count)
{
	if(GetPlayerPremium(playerid) == 0)
	{
		if(GetPlayerData(playerid, P_TOTALHOUR) < count)
			return 0;
		else
			return 1;
	}
	return 1;
}

stock ShowVehicleImproveDialog(playerid = INVALID_PLAYER_ID, vehicle_type = 1) // VEHICLE_TYPE_OWNABLE_CAR)
{
	if(playerid == INVALID_PLAYER_ID)
	    return 0;

	if(!vehicle_type)
	    return 0;

	new vehicleid = GetPlayerOwnableCar(playerid);

	if(vehicleid == INVALID_VEHICLE_ID)
	    return 0;

	new index = GetVehicleData(vehicleid, V_ACTION_ID);

	new pt_engine = GetOwnableCarData(index, OC_PT_ENGINE),
	    pt_brake = GetOwnableCarData(index, OC_PT_BRAKE),
	    pt_stability = GetOwnableCarData(index, OC_PT_STABILITY);

	new fmt_text[128];

	format
	(
	    fmt_text,
	    sizeof fmt_text,
		"{FFFFFF}1. Улучшения двигателя [%d/5]\n"\
	    "2. Улучшения тормозной системы [%d/5]\n"\
	    "3. Улучшения устойчивости [%d/5]",
	    pt_engine, pt_brake, pt_stability
	);

	Dialog(playerid, DIALOG_OWNABLE_CAR_PT, DIALOG_STYLE_LIST, "Performance Tuning", fmt_text, "Выбрать", "Отмена");

	return 1;
}

stock ShowPerformanceItem(playerid, item_type = PT_ITEM_TYPE_NONE)
{
	if(item_type == PT_ITEM_TYPE_NONE)
		return 0;

    new vehicleid = GetPlayerOwnableCar(playerid);

	if(vehicleid == INVALID_VEHICLE_ID)
	    return 0;

	new index = GetVehicleData(vehicleid, V_ACTION_ID);

	new pt_engine = GetOwnableCarData(index, OC_PT_ENGINE),
	    pt_brake = GetOwnableCarData(index, OC_PT_BRAKE),
	    pt_stability = GetOwnableCarData(index, OC_PT_STABILITY);

	new fmt_text[128],
		fmt_dialog[128 * 5];

	for(new idx; idx < 5; idx ++)
	{
	    // if(GetOwnableCarData(index, OC_PT_ENGINE) > idx)

        format(fmt_text, sizeof fmt_text, "{FFFFFF}%d. ", idx + 1);

		new price,
		    item_level;

		switch(item_type)
		{
			case PT_ITEM_TYPE_ENGINE:
			{
				strcat(fmt_text, engine_ptune[idx]);

				price = engine_ptune_price[idx];
				item_level = pt_engine;
			}
			case PT_ITEM_TYPE_BRAKE:
			{
			    strcat(fmt_text, brake_ptune[idx]);

			    price = brake_ptune_price[idx];
			    item_level = pt_brake;
			}
			case PT_ITEM_TYPE_STABILITY:
			{
			    strcat(fmt_text, stability_ptune[idx]);

			    price = stability_ptune_price[idx];
			    item_level = pt_stability;
			}

			default:
			    return 0;
		}

		if(item_level > idx)
			format(fmt_text, sizeof fmt_text, "%s {FFCD00}[Установлено]", fmt_text);

		else
		    format(fmt_text, sizeof fmt_text, "%s {66CC33}[$%d]", fmt_text, price);

		if(idx > 2)
		    strcat(fmt_text, " {EC174F}[VIP Gold]\n");

		else
		    strcat(fmt_text, "\n");

		strcat(fmt_dialog, fmt_text);
	}

	new dialog_title[3][23] = {"Улучшения двигателя", "Улучшения тормозов", "Улучшения устойчивости"};

	Dialog(playerid, DIALOG_OWNABLE_CAR_PT_ITEM, DIALOG_STYLE_LIST, dialog_title[item_type - 1], fmt_dialog, "Выбрать", "Отмена");

	SetPVarInt(playerid, "pt_item_type", item_type);

	return 1;
}



CMD:flip(playerid)
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;
	
	new vehicleid = GetPlayerVehicleID(playerid);

    if(vehicleid == 0)
    {
            SendClientMessage(playerid, -1, "Вы должны сидеть в транспорте!");
            return 0;
    }

    // переменные которые будут хранить позицию и угол поворота
    new Float:x, Float:y, Float:z;
    new Float:angle;

    // получаем позицию и угол поворота
    GetVehiclePos(vehicleid, x, y, z);
    GetVehicleZAngle(vehicleid, angle);

    // устанавливаем позицию и угол поворота
    SetVehiclePos(vehicleid, x, y, z + 1.5);
    SetVehicleZAngle(vehicleid, angle);

    SendClientMessage(playerid, -1, "Вы успешно поставили транспорт на колёса и починили его!");
        
	RepairVehicle(vehicleid);
	SetVehicleHealth(vehicleid,1000);
	
	return 1;
}

CMD:setmoney(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 13) return 1;

	extract params -> new to_player, money; else return SendClientMessage(playerid, -1, "Используйте: /setmoney [id игрока] [количество]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
	return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	
	SetPlayerData(to_player, P_MONEY, money);
	UpdatePlayerDatabaseInt(to_player, "money", money);
	GivePlayerMoney(to_player, money);

	return 1;

}


CMD:setplayerhouse(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 13) return 1;

	extract params -> new to_player, health; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setplayerhouse [id игрока] [id house]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	else if(!(-1 <= health <= 1000)) return SendClientMessage(playerid, 0xCECECEFF, "Номер дома от -1 до 1000 ( -1 выселить )");

	SetPlayerData(to_player, P_HOUSE, health);
	SetPlayerData(playerid, P_HOUSE_ROOM, -1);
	SetPlayerData(playerid, P_HOUSE_TYPE, HOUSE_TYPE_HOME);
	if(health == -1)
	{
	    SetPlayerData(to_player, P_HOUSE, -1);
		SetPlayerData(playerid, P_HOUSE_ROOM, -1);
		SetPlayerData(playerid, P_HOUSE_TYPE, HOUSE_TYPE_NONE);
	}

	new fmt_msg[105];
	format(fmt_msg, sizeof fmt_msg, "Администратор %s изменил Вам номер дома", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, -1, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Вы изменили игроку %s номер дома на %d", GetPlayerNameEx(to_player),health);
	SendClientMessage(playerid, -1, fmt_msg);
	new query[90];

	format(query, sizeof query, "UPDATE accounts SET house_type=%d,house=%d, WHERE id=%d LIMIT 1", HOUSE_TYPE_HOME, health, GetPlayerAccountID(playerid));
	mysql_query(mysql, query, false);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_msg, sizeof fmt_msg, "[A] %s[%d] изменил номер дому %s[%d] на %d", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, health);
		SendMessageToAdmins(fmt_msg, 0xCECECEFF);
	}

	format(fmt_msg, sizeof fmt_msg, "Установил %s[acc:%d] номер дома %d", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), health);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	return 1;
}
CMD:setplayerbiz(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	extract params -> new to_player, health; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setplayerbiz [id игрока] [id biz]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	else if(!(-1 <= health <= 1000)) return SendClientMessage(playerid, 0xCECECEFF, "Номер biz от -1 до 1000 ( -1 выселить )");

	SetPlayerData(to_player, P_BUSINESS, health);


	new fmt_msg[105];
	format(fmt_msg, sizeof fmt_msg, "Администратор %s изменил Вам номер biz", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, -1, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Вы изменили игроку %s номер biz", GetPlayerNameEx(to_player));
	SendClientMessage(playerid, -1, fmt_msg);
	new query[90];
	mysql_format(mysql, query, sizeof query, "UPDATE accounts SET business=%d WHERE id=%d LIMIT 1", health, GetPlayerAccountID(playerid));
	mysql_query(mysql, query, false);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_msg, sizeof fmt_msg, "[A] %s[%d] изменил номер biz %s[%d] на %d", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, health);
		SendMessageToAdmins(fmt_msg, 0xCECECEFF);
	}

	format(fmt_msg, sizeof fmt_msg, "Установил %s[acc:%d] номер biz %d", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), health);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	return 1;
}

stock ShowFamilyWarehouseMenu(playerid)
{
	new fmt_text[700],
		fam_id = GetPlayerData(playerid, P_FAMILY);

 	format(fmt_text, sizeof fmt_text,
	""c_server"[1] "c_b"Положить деньги | "c_m"%d$"c_b"\n\
	"c_server"[2] "c_b"Положить наркотики | "c_i"%d гр."c_b"\n\
	"c_server"[3] "c_b"Положить металл | "c_i"%d кг."c_b"\n\
	"c_server"[4] "c_b"Положить патроны | "c_i"%d шт."c_b"\n\
	"c_server"[5] "c_b"Взять деньги | "c_m"%d$"c_b" | Ранг доступа: "c_i"%d+\n\
	"c_server"[6] "c_b"Взять наркотики | "c_i"%d гр."c_b" | Ранг доступа: "c_i"%d+\n\
	"c_server"[7] "c_b"Взять металл | "c_i"%d кг."c_b" | Ранг доступа: "c_i"%d+\n\
	"c_server"[8] "c_b"Взять патроны | "c_i"%d шт."c_b" | Ранг доступа: "c_i"%d+",
	GetPlayerData(playerid, P_MONEY),
	GetPlayerData(playerid, P_DRUGS),
	GetPlayerData(playerid, P_METALL),
	GetPlayerData(playerid, P_AMMO),
	GetFamilyData(fam_id, F_MONEY),
	GetFamilyData(fam_id, F_TAKE_MONEY),
	GetFamilyData(fam_id, F_DRUGS),
	GetFamilyData(fam_id, F_TAKE_DRUGS),
	GetFamilyData(fam_id, F_METAL),
	GetFamilyData(fam_id, F_TAKE_METALL),
	GetFamilyData(fam_id, F_AMMO),
	GetFamilyData(fam_id, F_TAKE_AMMO));

	Dialog(playerid, DIALOG_FAMILY_WAREHOUSE, DIALOG_STYLE_LIST, "Склад семьи", fmt_text, "Далее", "Закрыть");
}

CMD:owarn(playerid, params[])
{
	if(!(1 <= GetPlayerTeamEx(playerid) < MAX_ORG)) return SendClientMessage(playerid, 0x999999FF, "Вам недоступна данная функция");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна лидерам организации и их заместителям");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /owarn [id игрока] [причина]");

	extract params -> new to_player, string:reason[32];

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!(1 <= strlen(reason) <= 32))
		return SendClientMessage(playerid, 0xCECECEFF, "Введите причину увольнения");

	if(GetPlayerTeamEx(to_player) != GetPlayerTeamEx(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок не состоит в Вашей организации");

	if(GetPlayerJob(to_player) >= GetPlayerJob(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Нельзя выдать пред. заместителю/лидеру организации");
		
		
    AddPlayerData(to_player, P_OWARN, +, 1);

	new fmt_msg[128];

    format(fmt_msg, sizeof fmt_msg, "[ORG]: "c_b"%s[%d] выдал предупреждение игроку %s [%d/3]. Причина: %s",GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), GetPlayerData(to_player, P_OWARN), reason);

	SendMessageToTeam(GetPlayerTeamEx(playerid), fmt_msg, 0x33CC66FF);

	new uid = GetPlayerAccountID(to_player);
	new warns = GetPlayerData(to_player, P_OWARN);

	if(warns >= 3)
	{
		SendClientMessage(to_player, 0xFF5533FF, "Вы были исключены из организации. Причина: 3 варна.");

		format(fmt_msg, sizeof fmt_msg, "UPDATE accounts SET owarn=0,team=0,job=0 WHERE id=%d", uid);
		mysql_query(mysql, fmt_msg, false);
		
		SetPlayerData(to_player, P_OWARN, 0);
		SetPlayerData(to_player, P_TEAM, 0);
		SetPlayerData(to_player, P_JOB, 0);
	}

	format(fmt_msg, sizeof fmt_msg, "UPDATE accounts SET owarn=%d WHERE id=%d", warns, uid);
	mysql_query(mysql, fmt_msg, false);


	return 1;
}

CMD:ounwarn(playerid, params[])
{
	if(!(1 <= GetPlayerTeamEx(playerid) < MAX_ORG)) return SendClientMessage(playerid, 0x999999FF, "Вам недоступна данная функция");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна лидерам организации и их заместителям");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /ounwarn [id игрока]");

	extract params -> new to_player;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
		
    if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя снять варн с самого себя");


	if(GetPlayerTeamEx(to_player) != GetPlayerTeamEx(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок не состоит в Вашей организации");


    AddPlayerData(to_player, P_OWARN, -, 1);

	new fmt_msg[128];

    format(fmt_msg, sizeof fmt_msg, "[ORG]: "c_b"%s[%d] снял предупреждение игроку %s [%d/3].",GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), GetPlayerData(to_player, P_OWARN));

	SendMessageToTeam(GetPlayerTeamEx(playerid), fmt_msg, 0x33CC66FF);

	new uid = GetPlayerAccountID(to_player);
	new warns = GetPlayerData(to_player, P_OWARN);

	format(fmt_msg, sizeof fmt_msg, "UPDATE accounts SET owarn=%d WHERE id=%d", warns, uid);
	mysql_query(mysql, fmt_msg, false);


	return 1;
}


CMD:fwarn(playerid, params[])
{
    new fam_id = fam_id = GetPlayerData(playerid, P_FAMILY),
	    rang_id = GetPlayerData(playerid, P_FAMILY_RANK);

    new rank = GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_RANG_WARN);

    if(!GetPlayerData(playerid, P_FAMILY)) return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная функция");

	if(GetPlayerData(playerid, P_FAMILY_RANK) < rank) return Send(playerid, COR_RED, "[Ошибка]: "c_b" У вас не достаточно нужный ранг в семье, чтобы выдавать семейное предупреждение.");


	if(GetPlayerAdminEx(playerid) < 2) return 1;
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /fwarn [id игрока] [причина (необязательно)]");

	extract params -> new to_player, string:reason[66];

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

    if(GetPlayerData(to_player, P_FAMILY) != GetPlayerData(playerid, P_FAMILY))
		return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок не состоит в Вашей семье");

	if(GetPlayerData(to_player, P_FAMILY_RANK) >= GetPlayerData(playerid, P_FAMILY_RANK))
		return SendClientMessage(playerid, 0xCECECEFF, "Нельзя выдать мут заместителю/лидеру семьи");

	//if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя выдать предупреждение самому себе");

	AddPlayerData(to_player, P_FWARN, +, 1);

	new fmt_msg[128];

    format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] выдал предупреждение игроку %s [%d|3]. Причина: %s", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), GetPlayerData(to_player, P_FWARN), reason);

	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		if(!IsPlayerLogged(i)) continue;
		if(GetPlayerData(i, P_FAMILY) == 0) continue;
		if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

		if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

		SendClientMessage(i, 0x6699CCFF, fmt_msg);
	}

	new uid = GetPlayerAccountID(to_player);
	new warns = GetPlayerData(to_player, P_FWARN);

	if(warns >= 3)
	{
		SendClientMessage(to_player, 0xFF5533FF, "Вы были исключены из семьи. Причина: 3 варна.");

		format(fmt_msg, sizeof fmt_msg, "UPDATE accounts SET fwarn=0,family=0,family_rank=1 WHERE id=%d", uid);
		mysql_query(mysql, fmt_msg, false);
		
		SetPlayerData(to_player, P_FWARN, 0);
		SetPlayerData(to_player, P_FAMILY, 0);
	}

	format(fmt_msg, sizeof fmt_msg, "UPDATE accounts SET fwarn=%d WHERE id=%d", warns, uid);
	mysql_query(mysql, fmt_msg, false);

	return 1;
}

CMD:funwarn(playerid, params[])
{
    new fam_id = fam_id = GetPlayerData(playerid, P_FAMILY),
	    rang_id = GetPlayerData(playerid, P_FAMILY_RANK);

    new rank = GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_RANG_UNWARN);

    if(!GetPlayerData(playerid, P_FAMILY)) return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная функция");

	if(GetPlayerData(playerid, P_FAMILY_RANK) < rank) return Send(playerid, COR_RED, "[Ошибка]: "c_b" У вас не достаточно нужный ранг в семье, чтобы снимать семейное предупреждение.");


	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /warn [id игрока] [причина (необязательно)]");

	extract params -> new to_player, string: reason[66];
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(GetPlayerData(to_player, P_FAMILY) != GetPlayerData(playerid, P_FAMILY))
		return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок не состоит в Вашей семье");

    if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя снять варн с самого себя");

	SetPlayerData(to_player, P_FWARN, 		0);
	UpdatePlayerDatabaseInt(to_player, "fwarn", 		0);

	new fmt_msg[128];

    format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] снял все предупреждения с игрока %s. Причина: %s", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), reason);

	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		if(!IsPlayerLogged(i)) continue;
		if(GetPlayerData(i, P_FAMILY) == 0) continue;
		if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

		if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

		SendClientMessage(i, 0x6699CCFF, fmt_msg);
	}

	return 1;
}

CMD:fmute(playerid, params[])
{
	new fam_id = fam_id = GetPlayerData(playerid, P_FAMILY),
	    rang_id = GetPlayerData(playerid, P_FAMILY_RANK);

    new rank = GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_RANG_MUTE);

    if(!GetPlayerData(playerid, P_FAMILY)) return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная функция");

	if(GetPlayerData(playerid, P_FAMILY_RANK) < rank) return Send(playerid, COR_RED, "[Ошибка]: "c_b" У вас не достаточно нужный ранг в семье, чтобы выдавать бан семейного чата.");


	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /fmute [id игрока] [время в минутах] [причина (необязательно)]");

	extract params -> new to_player, mute_time, string: reason[30];

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

    if(GetPlayerData(to_player, P_FAMILY) != GetPlayerData(playerid, P_FAMILY))
		return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок не состоит в Вашей семье");

	if(GetPlayerData(to_player, P_FAMILY_RANK) >= GetPlayerData(playerid, P_FAMILY_RANK))
		return SendClientMessage(playerid, 0xCECECEFF, "Нельзя выдать мут заместителю/лидеру семьи");

	if(!(1 <= mute_time <= 360)) return SendClientMessage(playerid, 0xCECECEFF, "Время должно быть не меньше 1 и не больше 360 минут");
	if(GetPlayerData(to_player, P_FMUTE) > 0) return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока уже есть мут");
//	if(GetPlayerAdminEx(to_player) > GetPlayerAdminEx(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя поставить затычку администратору выше по рангу");
	//else if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя поставить затычку самому себе");

	new fmt_msg[150];

	format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] поставил затычку игроку %s на %d минут. Причина: %s", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), mute_time, reason);

	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		if(!IsPlayerLogged(i)) continue;
		if(GetPlayerData(i, P_FAMILY) == 0) continue;
		if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

		if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

		SendClientMessage(i, 0x6699CCFF, fmt_msg);
	}

	SetPlayerData(to_player, P_FMUTE, mute_time * 60);
	UpdatePlayerDatabaseInt(to_player, "fmute", mute_time * 60);

	SendClientMessage(to_player, 0xCECECEFF, "Время до окончания бана чата семейного чата: {CCCC00}/time");

	return 1;
}

CMD:funmute(playerid, params[])
{
    new fam_id = fam_id = GetPlayerData(playerid, P_FAMILY),
        rang_id = GetPlayerData(playerid, P_FAMILY_RANK);

    new rank = GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_RANG_UNMUTE);

    if(!GetPlayerData(playerid, P_FAMILY)) return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная функция");

	if(GetPlayerData(playerid, P_FAMILY_RANK) < rank) return Send(playerid, COR_RED, "[Ошибка]: "c_b" У вас не достаточно нужный ранг в семье, чтобы снимать бан семейного чата.");


	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /funmute [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

    if(GetPlayerData(to_player, P_FAMILY) != GetPlayerData(playerid, P_FAMILY))
		return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок не состоит в Вашей семье");

    if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя снять затычку с самого себя");

	else if(GetPlayerData(to_player, P_FMUTE) <= 0) return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока нет мута");

	new fmt_msg[100];

	format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] снял затычку с игрока %s", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player));

	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		if(!IsPlayerLogged(i)) continue;
		if(GetPlayerData(i, P_FAMILY) == 0) continue;
		if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

		if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

		SendClientMessage(i, 0x6699CCFF, fmt_msg);
	}

	SetPlayerData(to_player, P_FMUTE, 0);
	UpdatePlayerDatabaseInt(to_player, "fmute", 0);

	SendClientMessage(to_player, 0x32a44bFF, "Доступ в чат восстановлен");

	return 1;
}

CMD:finvite(playerid, params[])
{
    new rank = GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_RANG_INV);

	if(GetPlayerData(playerid, P_FAMILY_RANK) < rank) return Send(playerid, COR_RED, "[Ошибка]: "c_b" У вас не достаточно нужный ранг в семье, чтобы приглашать людей в семью.");

	if(!GetPlayerData(playerid, P_FAMILY)) return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная функция");
//	if(!(9 <= GetPlayerData(playerid, P_FAMILY_RANK) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна сотздателю семьи и его заместителям");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /finvite [id игрока]");

	extract params -> new to_player;
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	if(GetPlayerData(to_player, P_FAMILY)) return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок уже состоит в семье");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 10.0)) return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится слишком далеко");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_FINVITE);
	return 1;
}

CMD:funinvite(playerid, params[])
{
    new rank = GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_RANG_UNINV);

	if(GetPlayerData(playerid, P_FAMILY_RANK) < rank) return Send(playerid, COR_RED, "[Ошибка]: "c_b" У вас не достаточно нужный ранг в семье, чтобы увольнять людей с семьи.");

	if(!GetPlayerData(playerid, P_FAMILY)) return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная функция");
//	if(!(9 <= GetPlayerData(playerid, P_FAMILY_RANK) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна сотздателю семьи и его заместителям");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /funinvite [id игрока] [причина]");

	extract params -> new to_player, string:reason[32];

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!(1 <= strlen(reason) <= 32))
		return SendClientMessage(playerid, 0xCECECEFF, "Введите причину увольнения");

	if(GetPlayerData(to_player, P_FAMILY) != GetPlayerData(playerid, P_FAMILY))
		return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок не состоит в Вашей семье");

	if(GetPlayerData(to_player, P_FAMILY_RANK) >= GetPlayerData(playerid, P_FAMILY_RANK))
		return SendClientMessage(playerid, 0xCECECEFF, "Нельзя уволить уволить заместителя/лидера организации");

	FUnInvite(playerid, to_player, reason);

	return 1;
}

CMD:frang(playerid, params[])
{
	if(!GetPlayerData(playerid, P_FAMILY)) return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная функция");

	new rank = GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_RANG_GIVER);

	if(GetPlayerData(playerid, P_FAMILY_RANK) < rank) return Send(playerid, COR_RED, "[Ошибка]: "c_b" У вас не достаточно нужный ранг в семье, чтобы изменять ранги в семье.");

	//if(!(9 <= GetPlayerData(playerid, P_FAMILY_RANK) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна сотздателю семьи и его заместителям");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /frang [id игрока] [ранг]");
	extract params -> new to_player, give_rang;
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	if(GetPlayerData(to_player, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок не состоит в Вашей семье");
	if(GetPlayerData(to_player, P_FAMILY_RANK) >= GetPlayerData(playerid, P_FAMILY_RANK)) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя уволить уволить заместителя/лидера организации");
	if(1 < give_rang > 9) return SendClientMessage(playerid, 0xCECECEFF, "Ранг от 1 до 9");

	new fmt_msg[512];

	SetPlayerData(to_player, P_FAMILY_RANK, give_rang);
	format(fmt_msg, sizeof fmt_msg, "Ваш ранг в семье был изменен на %d (%s)", GetPlayerData(to_player, P_FAMILY_RANK), GetFamilyRang(GetPlayerData(to_player, P_FAMILY), GetPlayerData(to_player, P_FAMILY_RANK)));
	SendClientMessage(to_player, 0x1E90FFFF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Вы изменили ранг %s[%d] до %d (%s)",  GetPlayerNameEx(to_player), to_player, GetPlayerData(to_player, P_FAMILY_RANK), GetFamilyRang(GetPlayerData(to_player, P_FAMILY), GetPlayerData(to_player, P_FAMILY_RANK)));
	SendClientMessage(playerid, 0x1E90FFFF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "UPDATE accounts SET family_rank=%d WHERE id=%d", GetPlayerData(to_player, P_FAMILY_RANK), GetPlayerAccountID(to_player));
	mysql_query(mysql, fmt_msg, false);

	return 1;
}
/*CMD:sellmyskin(playerid, params[])
{
	new skinid = GetPlayerData(playerid, P_SKIN);
	if(skinid == 252) return false;
	if(GetPlayerSkin(playerid) == 252) return SendClientMessage(playerid, -1, "{FFFF00}[Информация]{FFFFFF} Вы не можете продать скин!");
	if(!strlen(params))
	return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sellmyskin [id игрока] [стоимость]");

	extract params -> new to_player, price;
	if(price == 0) return false;
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

   	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0))
		return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится далеко от Вас");

	if(GetPlayerMoneyEx(to_player) < price)
		return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока нет такой суммы");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_SELL_SKIN, skinid, price);
	return 1;
}*/

CMD:f(playerid, params[])
{
	if(GetPlayerData(playerid, P_FAMILY) == 0) return SendClientMessage(playerid, 0xCECECEFF, "Вы не состоите в семье");
	if(IsPlayerFMuted(playerid) > 0) return Send(playerid, -1, "У вас бан семейного чата");
	if(IsPlayerMuted(playerid) > 0) return SendClientMessage(playerid, 0xCECECEFF, "Доступ в чат заблокирован. Время до разблокировки: {66CC33}/time");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /f [текст]");

	new fmt_msg[144],
		fam_id = GetPlayerData(playerid, P_FAMILY),
		rang_id = GetPlayerData(playerid, P_FAMILY_RANK) + 1;

	format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d]: %s", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id + 1, rang_id), GetPlayerNameEx(playerid), playerid, params);

	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		if(!IsPlayerLogged(i)) continue;
		if(GetPlayerData(i, P_FAMILY) == 0) continue;
		if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

		if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

		SendClientMessage(i, 0x6699CCFF, fmt_msg);
	}
	return 1;
}

CMD:fn(playerid, params[])
{
	if(GetPlayerData(playerid, P_FAMILY) == 0) return SendClientMessage(playerid, 0xCECECEFF, "Вы не состоите в семье");
	if(IsPlayerMuted(playerid) > 0) return SendClientMessage(playerid, 0xCECECEFF, "Доступ в чат заблокирован. Время до разблокировки: {66CC33}/time");
	if(IsPlayerFMuted(playerid) > 0) return Send(playerid, -1, "У вас бан семейного чата");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /fn [текст]");

	new fmt_msg[144],
		fam_id = GetPlayerData(playerid, P_FAMILY) + 1,
		rang_id = GetPlayerData(playerid, P_FAMILY_RANK);

	format(fmt_msg, sizeof fmt_msg, "(( {%06x}OOC: [F] %s %s[%d]: %s ))", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id + 1, rang_id), GetPlayerNameEx(playerid), playerid, params);

	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		if(!IsPlayerLogged(i)) continue;
		if(GetPlayerData(i, P_FAMILY) == 0) continue;
		if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

		if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

		SendClientMessage(i, 0x6699CCFF, fmt_msg);
	}
	return 1;
}

stock ShowChangeNameDialog(playerid)
{
	if(GetPlayerData(playerid, P_DONATE_MONEY) < 100) return SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно рублей, требуется 100");

	Dialog
	(
		playerid, DIALOG_FAMILY_NCHANGE, DIALOG_STYLE_INPUT,
		"Смена названия семьи",
		"{FFFFFF}Введите название, которое Вы хотите {ffff00}установить:",
		"Далее", "Отмена"
	);

	return 1;
}

stock ShowFamilyRangSetMenu(playerid)
{
	new fmt_text[800],
		fam_id = GetPlayerData(playerid, P_FAMILY);

 	format(fmt_text, sizeof fmt_text,
	""c_server"[1] "c_b"Команда /finvite | Ранг доступа: "c_i"%d+\n\
	"c_server"[2] "c_b"Команда /funinvite | Ранг доступа: "c_i"%d+\n\
	"c_server"[3] "c_b"Команда /fmute | Ранг доступа: "c_i"%d+\n\
	"c_server"[4] "c_b"Команда /funmute | Ранг доступа: "c_i"%d+\n\
	"c_server"[5] "c_b"Команда /fwarn | Ранг доступа: "c_i"%d+\n\
	"c_server"[6] "c_b"Команда /funwarn | Ранг доступа: "c_i"%d+\n\
	"c_server"[7] "c_b"Команда /frang | Ранг доступа: "c_i"%d+\n\
	"c_server"[8] "c_b"Взятие денег со склада | Ранг доступа: "c_i"%d+\n\
	"c_server"[9] "c_b"Взятие наркотиков со склада | Ранг доступа: "c_i"%d+\n\
	"c_server"[10] "c_b"Взятие металла со склада | Ранг доступа: "c_i"%d+\n\
	"c_server"[11] "c_b"Взятие патронов со склада | Ранг доступа: "c_i"%d+",
	GetFamilyData(fam_id, F_RANG_INV),
	GetFamilyData(fam_id, F_RANG_UNINV),
	GetFamilyData(fam_id, F_RANG_MUTE),
	GetFamilyData(fam_id, F_RANG_UNMUTE),
	GetFamilyData(fam_id, F_RANG_WARN),
	GetFamilyData(fam_id, F_RANG_UNWARN),
	GetFamilyData(fam_id, F_RANG_GIVER),
	GetFamilyData(fam_id, F_TAKE_MONEY),
	GetFamilyData(fam_id, F_TAKE_DRUGS),
	GetFamilyData(fam_id, F_TAKE_METALL),
	GetFamilyData(fam_id, F_TAKE_AMMO));

	Dialog(playerid, DIALOG_FAMILY_SETRANG_MENU, DIALOG_STYLE_LIST, "Настройка доступа", fmt_text, "Далее", "Закрыть");
}

stock ShowFamilyHelpCommands(playerid)
{
	new fmt_text[800],
		fam_id = GetPlayerData(playerid, P_FAMILY);

 	format(fmt_text, sizeof fmt_text,
	""c_server"/finvite "c_b"- принять игрока в семью "c_i"| "c_b"Ранг доступа: "c_server"%d+\n\
	"c_server"/funinvite "c_b"- выгнать игрока с семьи "c_i"| "c_b"Ранг доступа: "c_server"%d+\n\
    "c_server"/fmute "c_b"- выдать бан семейного чата "c_i"| "c_b"Ранг доступа: "c_server"%d+\n\
    "c_server"/funmute "c_b"- снять бан семейного чата "c_i"| "c_b"Ранг доступа: "c_server"%d+\n\
    "c_server"/fwarn "c_b"- выдать семейное предупреждение "c_i"| "c_b"Ранг доступа: "c_server"%d+\n\
    "c_server"/funwarn "c_b"- снять семейное предупреждение "c_i"| "c_b"Ранг доступа: "c_server"%d+\n\
	"c_server"/frang "c_b"- сменить игроку ранг в семье "c_i"| "c_b"Ранг доступа: "c_server"%d+\n\
	"c_server"/f "c_b"- чат семьи\n\
	"c_server"/fn "c_b"- NonRP чат семьи\n\
	"c_server"/fpark "c_b"- припарковать семейный транспорт\n\
	"c_server"/sellfcar "c_b"- продать семейный транспорт",
	GetFamilyData(fam_id, F_RANG_INV),
	GetFamilyData(fam_id, F_RANG_UNINV),
	GetFamilyData(fam_id, F_RANG_MUTE),
	GetFamilyData(fam_id, F_RANG_UNMUTE),
	GetFamilyData(fam_id, F_RANG_WARN),
	GetFamilyData(fam_id, F_RANG_UNWARN),
	GetFamilyData(fam_id, F_RANG_GIVER));

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Команды семьи", fmt_text, "Закрыть", "");

}

CMD:setfcolor(playerid)
{

    Dialog
    (
        playerid, DIALOG_COLOR_FAMILY_SET, DIALOG_STYLE_MSGBOX,
        "Смена цвета семьи","Стоимость смены цвета семьи составляет: "c_m"20 донат-рублей\n\
		\n\
		"c_b"Вы уверены что хотите сменить цвет семьи?",
		"Далее", "Назад");
}

stock ShowFamilyColorSet(playerid)
{
    if(GetPlayerData(playerid, P_FAMILY_RANK) != 10) return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет доступа");

    Dialog
    (
        playerid, DIALOG_FAMILY_COLOR, DIALOG_STYLE_LIST,
        "Смена цвета семьи",
		""c_server"[1] "f_2"Багровый\n\
		"c_server"[2] "f_3"Красный\n\
		"c_server"[3] "f_4"Темно-красный\n\
		"c_server"[4] "f_5"Светло-розовый\n\
		"c_server"[5] "f_6"Цвет кожи\n\
		"c_server"[6] "f_7"Желтый\n\
		"c_server"[7] "f_8"Золотой\n\
		"c_server"[8] "f_9"Фиолетовый\n\
		"c_server"[9] "f_10"Темно-фиолетовый\n\
		"c_server"[10] "f_11"Серый\n\
		"c_server"[11] "f_12"Серебристый\n\
		"c_server"[12] "f_13"Лайм\n\
		"c_server"[13] "f_14"Зеленый\n\
		"c_server"[14] "f_15"Лесной\n\
		"c_server"[15] "f_16"Синий\n\
		"c_server"[16] "f_17"Цвет неба",
        "Далее", "Назад"
    );

    return 1;

}

CMD:hihi(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;
	
	Send(playerid, -1,"test");

	SetPlayerData(playerid, P_HELPER, 0);
	UpdatePlayerDatabaseInt(playerid, "helper", 0);

	return 1;

}

CMD:addpadik(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 13) return 1;

	new fmt_text[300];


	new Cache: result,
		idx = g_entrance_loaded;

	GetPlayerPos(playerid, g_entrance[idx][E_POS_X], g_entrance[idx][E_POS_Y], g_entrance[idx][E_POS_Z]);

	SetEntranceData(idx, E_FLOORS,			2);

	//SetEntranceData(idx, _ENTRACE,		-1);

	format
	(
		fmt_text, sizeof fmt_text,
		"INSERT INTO entrances \
		(floors, x, y, z)\
		VALUES ('%d', '%f', '%f', '%f')",
		GetEntranceData(idx, E_FLOORS),
		GetEntranceData(idx, E_POS_X),
		GetEntranceData(idx, E_POS_Y),
		GetEntranceData(idx, E_POS_Z)
	);

	result = mysql_query(mysql, fmt_text, true);

	SetEntranceData(idx, E_SQL_ID, 		cache_insert_id());

	cache_delete(result);

	g_entrance_loaded ++;
	
	new e_houses = 0;

	UpdateEntrance(idx, e_houses);

	new city[MAX_ZONES_NAME + 1], area[MAX_ZONES_NAME + 1];
	GetCityName(GetEntranceData(idx, E_POS_X), GetEntranceData(idx, E_POS_Y), city);
	GetAreaName(GetEntranceData(idx, E_POS_X), GetEntranceData(idx, E_POS_Y), area);
	format(fmt_text, sizeof fmt_text, "[A] %s[%d] создал подъезд №%d (%s / %s)", GetPlayerNameEx(playerid), playerid, idx, city, area);

	SendMessageToAdmins(fmt_text, 0x66CC33FF);

	SendClientMessage(playerid, 0x3399FFFF, "Используйте {FFFF00}/esetexitpos {3399FF}- чтобы установить координаты выхода ");

	return 1;
}

CMD:esetexitpos(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 13) return 1;

	extract params -> new house_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /esetexitpos [id подъезда]");

	if(!(0 <= house_id <= g_entrance_loaded - 1)) return SendClientMessage(playerid, 0x999999FF, "Данного подъезда не существует на сервере");

	GetPlayerPos(playerid, g_entrance[house_id][E_EXIT_POS_X], g_entrance[house_id][E_EXIT_POS_Y], g_entrance[house_id][E_EXIT_POS_Z]);
	GetPlayerFacingAngle(playerid, g_entrance[house_id][E_EXIT_ANGLE]);

	new fmt_text[144];

	format
	(
		fmt_text, sizeof fmt_text,
		"UPDATE entrances SET exit_x='%f', exit_y='%f', exit_z='%f', exit_angle='%f' WHERE id=%d",
		GetEntranceData(house_id, E_EXIT_POS_X),
		GetEntranceData(house_id, E_EXIT_POS_Y),
		GetEntranceData(house_id, E_EXIT_POS_Z),
		GetEntranceData(house_id, E_EXIT_ANGLE),
		GetEntranceData(house_id, E_SQL_ID)
	);

	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы успешно изменили координаты выхода у подэезда №%d", house_id);

	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	return 1;
}

public: LoadFamilyCars()
{
    new rows, vehicleid;
    new Cache: result;

    result = mysql_query(mysql, "SELECT * FROM `family_cars` WHERE 1", true);
    rows = cache_num_rows();

    for(new idx; idx < rows; idx ++)
    {
        SetFamilyCarData(idx, F_SQL_ID,       cache_get_field_content_int(idx, "id"));

        new idm = GetFamilyData(idx, F_SQL_ID);

        SetFamilyCarData(idm, F_OWNER_ID,     cache_get_field_content_int(idx, "owner_id"));

        SetFamilyCarData(idm, F_MODEL_ID,     cache_get_field_content_int(idx, "model_id"));
        SetFamilyCarData(idm, F_COLOR_1,      cache_get_field_content_int(idx, "color_1"));
        SetFamilyCarData(idm, F_COLOR_2,      cache_get_field_content_int(idx, "color_2"));
        SetFamilyCarData(idm, F_RANG,         cache_get_field_content_int(idx, "rang"));

        SetFamilyCarData(idm, F_POS_X,        cache_get_field_content_float(idx, "pos_x"));
        SetFamilyCarData(idm, F_POS_Y,        cache_get_field_content_float(idx, "pos_y"));
        SetFamilyCarData(idm, F_POS_Z,        cache_get_field_content_float(idx, "pos_z"));
        SetFamilyCarData(idm, F_ANGLE,        cache_get_field_content_float(idx, "angle"));

        SetFamilyCarData(idm, OC_FUEL,        cache_get_field_content_float(idx, "fuel"));

        // ----------------------------------------------------------------------------------------
        vehicleid = CreateVehicle
        (
            GetFamilyCarData(idm, F_MODEL_ID),
            GetFamilyCarData(idm, F_POS_X),
            GetFamilyCarData(idm, F_POS_Y),
            GetFamilyCarData(idm, F_POS_Z),
            GetFamilyCarData(idm, F_ANGLE),
            GetFamilyCarData(idm, F_COLOR_1),
            GetFamilyCarData(idm, F_COLOR_2),
            -1,
            0,
            VEHICLE_ACTION_TYPE_FAMILY_CAR,
            GetFamilyData(idx, F_SQL_ID)
        );
        printf("%d, %f %f %f %f %d %d", GetFamilyCarData(idm, F_MODEL_ID), GetFamilyCarData(idm, F_POS_X), GetFamilyCarData(idm, F_POS_Y), GetFamilyCarData(idm, F_POS_Z), GetFamilyCarData(idm, F_ANGLE), GetFamilyCarData(idm, F_COLOR_1), GetFamilyCarData(idm, F_COLOR_2));
        if(vehicleid != INVALID_VEHICLE_ID)
        {
            CreateVehicleLabel(vehicleid, GetFamilyData(GetFamilyCarData(idm, F_OWNER_ID), F_NAME), 0x6666CCEE, 0.0, 0.0, 1.3, 20.0);
            SetVehicleParam(vehicleid, V_LOCK, bool: cache_get_field_content_int(idm, "status"));

            SetVehicleData(vehicleid, V_MILEAGE, cache_get_field_content_float(idm, "mileage"));
        }
    }
    g_family_car_loaded = rows;
    cache_delete(result);

    printf("[FamilyCars]: Aвто загружено: %d", g_family_car_loaded);
}

stock GetFreeFamilyCarID()
{
    for(new idx; idx < sizeof g_ownable_car; idx ++)
    {
        if(GetOwnableCarData(idx, OC_CREATE)) continue;

        return idx;
    }

    return -1;
}

public: SaveFamilyCar(vehicleid)
{
    if(IsAFamilyCar(vehicleid))
    {
        new query[300];
        new index = GetVehicleData(vehicleid, V_ACTION_ID);

        new Float: health;

        GetVehicleHealth(vehicleid, health);

        format
        (
            query, sizeof query,
            "UPDATE family_cars SET "\
            "pos_x=%f,"\
            "pos_y=%f,"\
            "pos_z=%f,"\
            "angle=%f"\
            " WHERE id=%d LIMIT 1",
            GetFamilyCarData(index, F_POS_X),
            GetFamilyCarData(index, F_POS_Y),
            GetFamilyCarData(index, F_POS_Z),
            GetFamilyCarData(index, F_ANGLE),
            index-1
        );
        mysql_query(mysql, query, false);
        print(query);
        return mysql_errno();
    }
    return -1;
}

stock IsAFamilyCar(vehicleid)
{
    if(IsValidVehicleID(vehicleid))
    {
        if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_FAMILY_CAR)
        {
            return 1;
        }
    }
    return 0;
}

CMD:setfamilycar(playerid)
{
    if(GetPlayerData(playerid, P_FAMILY) && GetPlayerData(playerid, P_FAMILY_RANK) == 10)
    {
        ViewFamilyCar(playerid);
    }
    return 1;
}

CMD:fpark(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в транспорте");

    new vehicleid = GetPlayerVehicleID(playerid);
    new action_id = GetVehicleData(vehicleid, V_ACTION_ID);

    if(g_family_car[action_id][F_OWNER_ID] == GetPlayerData(playerid, P_FAMILY)+1)
        return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в транспорте семьи");

/*	new green_zone_id = GetPVarInt(playerid, "player_in_green_zone") - 1;

	if(green_zone_id != -1)
	{
		if(!g_green_zones[green_zone_id][GZ_ALLOW_PARK])
		{
			new fmt_text[144];

			format(fmt_text, sizeof fmt_text, "На территории {FFFF00}'%s' {1E90FF}парковка личного транспорта запрещена. Выберите другое место для парковки", g_green_zones[green_zone_id][GZ_NAME]);
			SendClientMessage(playerid, 0x1E90FFFF, fmt_text);

			return 1;
		}
	}*/
	new query[200];
	
	new index = GetVehicleData(vehicleid, V_ACTION_ID);
	
	new idx = GetFamilyCarData(index, F_SQL_ID);

	
	//SetFamilyCarData(idx, F_RANG, input);

	new Float: veh_x,
		Float: veh_y,
		Float: veh_z,
		Float: veh_angle;

	GetVehiclePos(vehicleid, veh_x, veh_y, veh_z);
	GetVehicleZAngle(vehicleid, veh_angle);
	
	SetFamilyCarData(idx, F_POS_X, veh_x);
	SetFamilyCarData(idx, F_POS_Y, veh_y);
	SetFamilyCarData(idx, F_POS_Z, veh_z);
	SetFamilyCarData(idx, F_ANGLE, veh_angle);

    mysql_format(mysql, query, sizeof query, "UPDATE family_cars SET pos_x = '%d', pos_y = '%d', pos_z = '%d', angle = '%d' WHERE id='%d'", veh_x, veh_y, veh_z, veh_angle, GetFamilyCarData(index, F_SQL_ID));
    mysql_query(mysql, query, false);

/*	new index = GetPlayerVehicleID(playerid);

	GetVehiclePos(vehicleid, GetFamilyCarData(index, F_POS_X), GetFamilyCarData(index, F_POS_Y), GetFamilyCarData(index, F_POS_Z));
	GetVehicleZAngle(vehicleid, GetFamilyCarData(index, F_ANGLE));*/

//	SetOwnableCarData(index, OC_World, GetPlayerVirtualWorld(playerid));

//	SetOwnableCarData(index, OC_Int, GetPlayerInterior(playerid));

	SaveFamilyCar(vehicleid);
	SendClientMessage(playerid, 0x66CC00FF, "Транспорт семьи припаркован");
	
	return 1;
}

CMD:fparkk(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в транспорте");

    new vehicleid = GetPlayerVehicleID(playerid);
    new action_id = GetVehicleData(vehicleid, V_ACTION_ID);

    if(g_family_car[action_id][F_OWNER_ID] == GetPlayerData(playerid, P_FAMILY)+1)
        return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в транспорте семьи");

	new green_zone_id = GetPVarInt(playerid, "player_in_green_zone") - 1;

	if(green_zone_id != -1)
	{
		if(!g_green_zones[green_zone_id][GZ_ALLOW_PARK])
		{
			new fmt_text[144];

			format(fmt_text, sizeof fmt_text, "На территории {FFFF00}'%s' {1E90FF}парковка личного транспорта запрещена. Выберите другое место для парковки", g_green_zones[green_zone_id][GZ_NAME]);
			SendClientMessage(playerid, 0x1E90FFFF, fmt_text);

			return 1;
		}
	}

	new index = GetVehicleData(vehicleid, V_ACTION_ID);

	GetVehiclePos(vehicleid, GetFamilyCarData(index, F_POS_X), GetFamilyCarData(index, F_POS_Y), GetFamilyCarData(index, F_POS_Z));
	GetVehicleZAngle(vehicleid, GetFamilyCarData(index, F_ANGLE));

//	SetOwnableCarData(index, OC_World, GetPlayerVirtualWorld(playerid));

//	SetOwnableCarData(index, OC_Int, GetPlayerInterior(playerid));

	SaveFamilyCar(vehicleid);
	return SendClientMessage(playerid, 0x66CC00FF, "Транспорт семьи припаркован");
}

stock ViewFamilyCar(playerid)
{
    new fmt_text[640],
            id,
            Cache: result;

    mysql_format(mysql, fmt_text, sizeof fmt_text, "SELECT * FROM family_cars WHERE owner_id='%d'", GetPlayerData(playerid, P_FAMILY));
    result = mysql_query(mysql, fmt_text, true);

    new rows = cache_num_rows();

    if(!rows)
        SendClientMessage(playerid, 0x999999FF, "У Вашей семьи нет транспорта");

    else
    {
        new query[60],
            model_id,
            rang;

        format(fmt_text, sizeof fmt_text, "");

        for(new i = 0; i < rows; i ++)
        {
            id = cache_get_field_content_int(i, "id");
            model_id = cache_get_field_content_int(i, "model_id") - 400;
            rang = cache_get_field_content_int(i, "rang");

            format(query, sizeof query, "{FFFFFF}%d. %s {888888}\tДоступ с %d ранга\n", i + 1, GetVehicleInfo(model_id, VI_NAME), rang);
            strcat(fmt_text, query);
            SetPVarInt(playerid, "sql_id", id);
            SetPlayerListitemValue(playerid, i, id);
        }

        Dialog
        (
            playerid, DIALOG_FAMILY_CAR_RANG, DIALOG_STYLE_LIST,
            "{FFCD00}Транспорт семьи",
            fmt_text,
            "Выбрать", "Закрыть"
        );
    }
    cache_delete(result);
    return 1;
}

public: ShowBuyCarFamilyAndOwnable(playerid)
{
	Dialog
    (
        playerid, DIALOG_AUTOSALON_CAR_BUY, DIALOG_STYLE_LIST,
        "Автосалон",
        ""c_s"[1]"c_b" Личный транспорт\n\
        "c_s"[2]"c_b" Транспорт семьи",
        "Купить", "Отмена"
    );

	return 1;
}

CMD:gromov_gay(playerid, params[])
{
	new fmt_str[30];
 	new fam_id = GetPlayerData(playerid, P_FAMILY) + 1;

	format
	(
		fmt_str, sizeof fmt_str,
		"%d",
		GetFamilyData(fam_id, F_FAMILY_CARS)
	);

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "test", fmt_str, "Закрыть", "");
	return 1;
}

CMD:binder(playerid)
{
	new string_qm[(128 * 20) + 34];

	format(string_qm, sizeof string_qm,
	""c_server"[1] {FFFFFF}%s\n\
	"c_server"[2] {FFFFFF}%s\n\
	"c_server"[3] {FFFFFF}%s\n\
	"c_server"[4] {FFFFFF}%s\n\
	"c_server"[5] {FFFFFF}%s\n\
	"c_server"[6] {FFFFFF}%s\n\
	"c_server"[7] {FFFFFF}%s\n\
	"c_server"[8] {FFFFFF}%s\n\
	"c_server"[9] {FFFFFF}%s\n\
	"c_server"[10] {FFFFFF}%s\n\
	"c_server"[11] {FFFFFF}%s\n\
	"c_server"[12] {FFFFFF}%s\n\
	"c_server"[13] {FFFFFF}%s\n\
	"c_server"[14] {FFFFFF}%s\n\
	"c_server"[15] {FFFFFF}%s\n\
	"c_server"[16] {FFFFFF}%s\n\
	"c_server"[17] {FFFFFF}%s\n\
	"c_server"[18] {FFFFFF}%s\n\
	"c_server"[19] {FFFFFF}%s\n\
	"c_server"[20] {FFFFFF}%s\n \n\
	{FFBF00}Отправить все сообщения\n\
	{FFBF00}Редактировать",
	quick_mes[playerid][0][line],
	quick_mes[playerid][1][line],
	quick_mes[playerid][2][line],
	quick_mes[playerid][3][line],
	quick_mes[playerid][4][line],//5
	quick_mes[playerid][5][line],
	quick_mes[playerid][6][line],
	quick_mes[playerid][7][line],
	quick_mes[playerid][8][line],
	quick_mes[playerid][9][line], //10
	quick_mes[playerid][10][line],
	quick_mes[playerid][11][line],
	quick_mes[playerid][12][line],
	quick_mes[playerid][13][line],
	quick_mes[playerid][14][line], //15
	quick_mes[playerid][15][line],
	quick_mes[playerid][16][line],
	quick_mes[playerid][17][line],
	quick_mes[playerid][18][line],
	quick_mes[playerid][19][line]); //20

	return Dialog(playerid, DIALOG_QM, DIALOG_STYLE_LIST, "Биндер", string_qm, "Выбрать", "Закрыть");
}

editMessage(playerid)
{
    new string_qm[(128 * 20) + 34];

    format(string_qm, sizeof string_qm,
    ""c_server"[1] {FFFFFF}%s\n\
    "c_server"[2] {FFFFFF}%s\n\
    "c_server"[3] {FFFFFF}%s\n\
    "c_server"[4] {FFFFFF}%s\n\
    "c_server"[5] {FFFFFF}%s\n\
    "c_server"[6] {FFFFFF}%s\n\
    "c_server"[7] {FFFFFF}%s\n\
    "c_server"[8] {FFFFFF}%s\n\
    "c_server"[9] {FFFFFF}%s\n\
    "c_server"[10] {FFFFFF}%s\n\
    "c_server"[11] {FFFFFF}%s\n\
    "c_server"[12] {FFFFFF}%s\n\
    "c_server"[13] {FFFFFF}%s\n\
    "c_server"[14] {FFFFFF}%s\n\
    "c_server"[15] {FFFFFF}%s\n\
    "c_server"[16] {FFFFFF}%s\n\
    "c_server"[17] {FFFFFF}%s\n\
    "c_server"[18] {FFFFFF}%s\n\
    "c_server"[19] {FFFFFF}%s\n\
    "c_server"[20] {FFFFFF}%s\n\
    {FFBF00}Очистить всё",
    quick_mes[playerid][0][line],
    quick_mes[playerid][1][line],
    quick_mes[playerid][2][line],
    quick_mes[playerid][3][line],
    quick_mes[playerid][4][line],//5
    quick_mes[playerid][5][line],
    quick_mes[playerid][6][line],
    quick_mes[playerid][7][line],
    quick_mes[playerid][8][line],
    quick_mes[playerid][9][line], //10
    quick_mes[playerid][10][line],
    quick_mes[playerid][11][line],
    quick_mes[playerid][12][line],
    quick_mes[playerid][13][line],
    quick_mes[playerid][14][line], //15
    quick_mes[playerid][15][line],
    quick_mes[playerid][16][line],
    quick_mes[playerid][17][line],
    quick_mes[playerid][18][line],
    quick_mes[playerid][19][line] //20
    );

    Dialog(playerid, DIALOG_EDIT_QM, DIALOG_STYLE_LIST, "Редактировать", string_qm, "Выбрать", "Назад");
    return 1;//save_QuickMessage(playerid);
}

sendQuickMessage(playerid, string_qm[]) //Обработчик текста
{
	if(strfind(string_qm, "Введите текст", true) != -1)
		return 1; //если поле не заполнено, блокируем.
	new p_name[ MAX_PLAYER_NAME ];

	strmid(str, string_qm, 0, strlen(string_qm), 255);

	GetPlayerName( playerid, p_name, MAX_PLAYER_NAME );
/*	if(strfind(str, "@name", true) != -1)
	{
		new macros = strfind(str, "@name");
		strdel(str, macros, macros + strlen("@name"));
		strins(str, p_name, macros, strlen(str));
	}
	if(strfind(str, "@frac", true)!= -1)
	{
		new macros = strfind(str, "@frac");
		strdel(str, macros, macros + strlen("@frac"));
		new string[ 24 ]; format(string, sizeof string, "%s", GetPlayerTeamName(playerid));
		strins(str, string, macros, strlen(str));
	}
	if(strfind(str, "@pass", true)!= -1)
	{
		new macros = strfind(str, "@pass");
		strdel(str, macros, macros + strlen("@pass"));
		new string[16 + 1];
		format(string, sizeof(string), "(( /pass %d ))", playerid);
		strins(str, string, macros, strlen(str));
	}
	if(strfind(str, "@lic", true)!= -1)
	{
		new macros = strfind(str, "@lic");

		strdel(str, macros, macros + strlen("@lic"));
		new string[15 + 1];
		format(string, sizeof(string), "(( /lic %d ))", playerid);
		strins(str, string, macros, strlen(str));
	}
	if(strfind(str, "@alldoc", true)!= -1)
	{
		new macros = strfind(str, "@alldoc");
		strdel(str, macros, macros + strlen("@alldoc"));
		new string[25 + 1];
		format(string, sizeof(string), "(( /pass %d /lic %d ))", playerid, playerid);
		strins(str, string, macros, strlen(str));
	}*/
	if(strfind(str, "/me", true) != -1)
	{
		new macros = strfind(str, "/me ");
		strdel(str, macros, macros + strlen("/me "));
		return callcmd::me(playerid, str);//pc_cmd_me (if pawn.cmd)
	}
	if(strfind(str, "/do", true) != -1)
	{
		new macros = strfind(str, "/do ");
		strdel(str, macros, macros + strlen("/do "));
		return callcmd::do(playerid, str); //pc_cmd_me (if pawn.cmd)
	}
	if(strfind(str, "/try", true) != -1)
	{
		new macros = strfind(str, "/try ");
		strdel(str, macros, macros + strlen("/try "));
		return callcmd::try(playerid, str);//pc_cmd_me (if pawn.cmd)
	}
	if(strfind(str, "/todo", true) != -1)
	{
		new macros = strfind(str, "/todo ");
		strdel(str, macros, macros + strlen("/todo "));
		return callcmd::todo(playerid, str);//pc_cmd_me (if pawn.cmd)
	}
	if(strfind(str, "/f", true) != -1)
	{
		new macros = strfind(str, "/f ");
		strdel(str, macros, macros + strlen("/f "));
		return callcmd::f(playerid, str);//pc_cmd_me (if pawn.cmd)
	}
	if(strfind(str, "/fn", true) != -1)
	{
		new macros = strfind(str, "/fn ");
		strdel(str, macros, macros + strlen("/fn "));
		return callcmd::fn(playerid, str);//pc_cmd_me (if pawn.cmd)
	}
	if(strfind(str, "/r", true) != -1)
	{
		new macros = strfind(str, "/r ");
		strdel(str, macros, macros + strlen("/r "));
		return callcmd::r(playerid, str);//pc_cmd_me (if pawn.cmd)
	}
	if(strfind(str, "/rn", true) != -1)
	{
		new macros = strfind(str, "/rn ");
		strdel(str, macros, macros + strlen("/rn "));
		return callcmd::rn(playerid, str);//pc_cmd_me (if pawn.cmd)
	}
	if(strfind(str, "/s", true) != -1)
	{
		new macros = strfind(str, "/s ");
		strdel(str, macros, macros + strlen("/s "));
		return callcmd::s(playerid, str);//pc_cmd_me (if pawn.cmd)
	}
	if(strfind(str, "/n", true) != -1)
	{
		new macros = strfind(str, "/n ");
		strdel(str, macros, macros + strlen("/n "));
		return callcmd::n(playerid, str);//pc_cmd_me (if pawn.cmd)
	}
	if(strfind(str, "/w", true) != -1)
	{
		new macros = strfind(str, "/w ");
		strdel(str, macros, macros + strlen("/w "));
		return callcmd::w(playerid, str);//pc_cmd_me (if pawn.cmd)
	}
	if(strfind(str, "/u", true) != -1)
	{
		new macros = strfind(str, "/u ");
		strdel(str, macros, macros + strlen("/u "));
		return callcmd::u(playerid, str);//pc_cmd_me (if pawn.cmd)
	}
	if(strfind(str, "/gnews", true) != -1)
	{
		new macros = strfind(str, "/gnews ");
		strdel(str, macros, macros + strlen("/gnews "));
		return callcmd::gnews(playerid, str);//pc_cmd_me (if pawn.cmd)
	}
	if(strfind(str, "/msg", true) != -1)
	{
		new macros = strfind(str, "/msg ");
		strdel(str, macros, macros + strlen("/msg "));
		return callcmd::msg(playerid, str);//pc_cmd_me (if pawn.cmd)
	}
	if(strfind(str, "/o", true) != -1)
	{
		new macros = strfind(str, "/o ");
		strdel(str, macros, macros + strlen("/o "));
		return callcmd::msg(playerid, str);//pc_cmd_me (if pawn.cmd)
	}

	format(str, sizeof(str), "%s[%d] говорит: {FFFFFF}%s ",p_name, playerid, str);
	ProxDetector(playerid, 30.0, 0xFFFFFFFF, str); str[0] = EOS; return 1;
}

forward load_QuickMessage(playerid);
public load_QuickMessage(playerid)
{
    new query[128];
    new Cache: result;
    mysql_format(mysql, query, sizeof query, "SELECT * FROM quick_message WHERE name= '%s'", GetPlayerNameEx(playerid));
    result = mysql_query(mysql, query);

    printf("query load %s", query);


    if(!cache_num_rows())
    {

        format(query, sizeof query , "INSERT INTO `quick_message` (`name`) VALUES ('%s')", GetPlayerNameEx(playerid));
        mysql_tquery(mysql, query, "", "");

        for(new i = 0; i < 20; i++)
            format(quick_mes[playerid][i][line], 128, "Введите текст для поля №%d", i+1);

        return SendClientMessage(playerid, -1, "Binder успешно создал сток текст!");
    }

    for(new i = 0; i < 20; i++)
    {
            format(query, 12, "text_%d", i+1);
            cache_get_field_content(0, query, quick_mes[playerid][i][line], 128);
    }
    cache_delete(result);
    return SendClientMessage(playerid, -1, "Binder успешно загружен!");


}
save_QuickMessage(playerid, id_text)
{
    new query_string[256];

    format(query_string, sizeof(query_string), "UPDATE `quick_message` SET `text_%d` = '%s' WHERE name = '%s'",id_text+1, quick_mes[playerid][id_text][line], GetPlayerNameEx(playerid));
   // format(query_string, sizeof(query_string), "UPDATE `quick_message` SET `text_1` = '%s', `text_2` = '%s', `text_3` = '%s', `text_4` = '%s', `text_5` = '%s', `text_6` = '%s', `text_7` = '%s', `text_8` = '%s', `text_9` = '%s', `text_10` = '%s', `text_11` = '%s', `text_12` = '%s', `text_13` = '%s', `text_14` = '%s', `text_15` = '%s', `text_16` = '%s', `text_17` = '%s', `text_18` = '%s', `text_19` = '%s', `text_20` = '%s' WHERE `name` = '%s'", quick_mes[playerid][0][line], quick_mes[playerid][1][line], quick_mes[playerid][2][line], quick_mes[playerid][3][line], quick_mes[playerid][4][line], quick_mes[playerid][5][line],quick_mes[playerid][6][line],quick_mes[playerid][7][line],quick_mes[playerid][8][line],quick_mes[playerid][9][line],quick_mes[playerid][10][line],quick_mes[playerid][11][line],quick_mes[playerid][12][line],quick_mes[playerid][13][line],quick_mes[playerid][14][line],quick_mes[playerid][15][line],quick_mes[playerid][16][line],quick_mes[playerid][17][line],quick_mes[playerid][18][line],quick_mes[playerid][19][line], GetPlayerNameEx(playerid));
    printf("save %s", query_string);
    return mysql_tquery(mysql, query_string, "", "");
}

stock ProxDetector(playerid, Float:max_range, color, const string[], Float:max_ratio = 1.6)
{
	new Float:pos_x,
		Float:pos_y,
		Float:pos_z,
		Float:range,
		Float:range_ratio,
		Float:range_with_ratio,
		clr_r,
		clr_g,
		clr_b,
		Float:color_r,
		Float:color_g,
		Float:color_b;

	if (!GetPlayerPos(playerid, pos_x, pos_y, pos_z)) {
		return 0;
	}
	color_r = float(color >> 24 & 0xFF);
	color_g = float(color >> 16 & 0xFF);
	color_b = float(color >> 8 & 0xFF);
	range_with_ratio = max_range * max_ratio;

#if defined foreach
	foreach (new i : Player) {
#else
	for (new i = GetPlayerPoolSize(); i != -1; i--) {
#endif
		if (!IsPlayerStreamedIn(playerid, i))
		{
			continue;
		}
		range = GetPlayerDistanceFromPoint(i, pos_x, pos_y, pos_z);
		if (range > max_range)
		{
			continue;
		}

		range_ratio = (range_with_ratio - range) / range_with_ratio;
		clr_r = floatround(range_ratio * color_r);
		clr_g = floatround(range_ratio * color_g);
		clr_b = floatround(range_ratio * color_b);

		SendClientMessage(i, (color & 0xFF) | (clr_b << 8) | (clr_g << 16) | (clr_r << 24), string);
	}

	SendClientMessage(playerid, color, string);
	return 1;
}

CMD:todo(playerid, params[])
{
	if(strlen(params) > 95) return SCM(playerid, -1, !"Слишком длинный текст и действие");

	new message[48], action[49];

	if(sscanf(params, "p<*>s[47]s[48]", message, action)) return SCM(playerid, -1, !"Используйте /todo [текст*действие]");

	if(strlen(message) < 2 || strlen(action) < 2) return SCM(playerid, -1, !"Используйте /todo [текст*действие]");
	new string[144];

	format(string, sizeof(string), "- '%s' - {DE92FF}сказал(-а) %s[%d], %s", message, GetPlayerNameEx(playerid), playerid, action);
	Action(playerid, string);
	return 1;
}

stock GetNearestBiz(playerid, type, Float: dist = 15.0)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;

	new biz_id = -1;
	new Float: my_dist;

	for(new idx; idx < g_business_loaded; idx ++)
	{
	    if(GetBusinessData(idx, B_TYPE) != type) continue;
		my_dist = GetPlayerDistanceFromPoint(playerid, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z));
		if(my_dist < dist)
		{
			dist = my_dist,
			biz_id = idx;
		}
	}
	return biz_id;
}

stock ShowTime(playerid)
{
	new
		hour, minute,
		year, month, day;

	gettime(hour, minute);
	getdate(year, month, day);

	if(!IsPlayerInAnyVehicle(playerid))
		ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_watch", 4.0, false, 0, 0, 0, 0, 1);

	new fmt_str[350];

	format(fmt_str, sizeof fmt_str, "~y~%d:%02d~n~~b~~h~%02d.%02d.%d", hour, minute, day, month, year);
	GameTextForPlayer(playerid, fmt_str, 3000, 1);

	return 1;
}

CMD:lmenu(playerid)
{
    if(!(1 <= GetPlayerTeamEx(playerid) <= 7)) return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная функция");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна лидерам организации и их заместителям");
	Dialog(playerid, DIALOG_LEADER_MENU,DIALOG_STYLE_LIST,"Панель лидера",
	""c_s"[1] "c_b"Уволить игрока оффлайн\n\
	"c_s"[2] "c_b"Посмотреть всех сотрудников\n\
	"c_s"[3] "c_b"Меню вакансий",
	"Выбрать", "Закрыть");
	return 1;
}

CMD:uninviteoff(playerid, params[])
{
	if(!(1 <= GetPlayerTeamEx(playerid) < MAX_ORG)) return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная функция");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна лидерам организации и их заместителям");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /uninviteoff [ник игрока]");

	extract params -> new string: player_name[21];

	if(IsPlayerConnected(GetPlayerID(player_name))) return SendClientMessage(playerid, 0xCECECEFF, "Игрок с таким именем находится на сервере");

	new query[144],
		Cache: result,
		rows,
		team,
		rank;

	mysql_format(mysql, query, sizeof query, "SELECT team, job FROM accounts WHERE name='%s'", player_name);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	if(rows)
	{
		team = cache_get_row_int(0, 0);
		rank = cache_get_row_int(0, 1);
	}

	cache_delete(result);

	if(!rows) return SendClientMessage(playerid, 0xCECECEFF, "Игрок с таким именем не найден");

	if(team != GetPlayerTeamEx(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок не состоит в Вашей организации");

	if(rank >= GetPlayerJob(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Нельзя уволить уволить заместителя/лидера организации");

	format(query, sizeof query, "Вы уволили игрока %s в оффлайне", player_name);
	SendClientMessage(playerid, 0xFF5533FF, query);

	format(query, sizeof query, "UPDATE accounts SET team=0,org_skin=0,job=0 WHERE name='%s'", player_name);
	mysql_query(mysql, query, false);

	return 1;
}

CMD:addvacancy(playerid)
{
	
	if(!(1 <= GetPlayerTeamEx(playerid) <= 7)) return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная функция");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна лидерам организации и их заместителям");
	Dialog(playerid, 30000,DIALOG_STYLE_INPUT,"Создать собеседование","Введите время, на которое вы хотите назначить собеседование","Ввести","Закрыть");
	return 1;
}

CMD:delvacancy(playerid)
{

	if(!(1 <= GetPlayerTeamEx(playerid) <= 7)) return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная функция");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна лидерам организации и их заместителям");
	switch(GetPlayerTeamEx(playerid))
	{
	    case TEAM_ARMY:
	    {
	    	if(strlen(interview[TEAM_ARMY][text_time]) == 0) return SendClientMessage(playerid,-1,"{FFFF00}[Информация]{FFFFFF} Вакансии не существует!");
			interview[TEAM_ARMY][text_time] = EOS; interview[TEAM_ARMY][text_crit] = EOS;
		}
		case TEAM_DPS:
		{
		    if(strlen(interview[TEAM_DPS][text_time]) == 0) return SendClientMessage(playerid,-1,"{FFFF00}[Информация]{FFFFFF} Вакансии не существует!");
		    interview[TEAM_DPS][text_time] = EOS; interview[TEAM_DPS][text_crit] = EOS;
		}
		case TEAM_HOSPITAL:
		{
		    if(strlen(interview[TEAM_HOSPITAL][text_time]) == 0) return SendClientMessage(playerid,-1,"{FFFF00}[Информация]{FFFFFF} Вакансии не существует!");
		    interview[TEAM_ARMY][text_time] = EOS; interview[TEAM_HOSPITAL][text_crit] = EOS;
		}
		case TEAM_FBI:
		{
		    if(strlen(interview[TEAM_FBI][text_time]) == 0) return SendClientMessage(playerid,-1,"{FFFF00}[Информация]{FFFFFF} Вакансии не существует!");
		    interview[TEAM_FBI][text_time] = EOS; interview[TEAM_FBI][text_crit] = EOS;
		}
		case TEAM_RADIO:
		{
		    if(strlen(interview[TEAM_RADIO][text_time]) == 0) return SendClientMessage(playerid,-1,"{FFFF00}[Информация]{FFFFFF} Вакансии не существует!");
		    interview[TEAM_RADIO][text_time] = EOS; interview[TEAM_RADIO][text_crit] = EOS;
		}
		case TEAM_GOVERNMENT:
		{
		    if(strlen(interview[TEAM_GOVERNMENT][text_time]) == 0) return SendClientMessage(playerid,-1,"{FFFF00}[Информация]{FFFFFF} Вакансии не существует!");
		    interview[TEAM_GOVERNMENT][text_time] = EOS; interview[TEAM_GOVERNMENT][text_crit] = EOS;
		}
		case TEAM_PPS:
		{
		    if(strlen(interview[TEAM_PPS][text_time]) == 0) return SendClientMessage(playerid,-1,"{FFFF00}[Информация]{FFFFFF} Вакансии не существует!");
		    interview[TEAM_PPS][text_time] = EOS; interview[TEAM_PPS][text_crit] = EOS;
		}
	}

	SendClientMessage(playerid, -1,"{FFFF00}[Информация]{FFFFFF} Вы успешно удалили вакансию из журнала собеседований");
	return 1;
}

CMD:vacancy(playerid)
{
	Dialog(playerid, 29000, DIALOG_STYLE_LIST,"Журнал вакансий","\
	"c_s"[1] "c_b"ВМФ\n\
	"c_s"[2] "c_b"Мэрия\n\
	"c_s"[3] "c_b"ГИБДД\n\
	"c_s"[4] "c_b"Больница\n\
	"c_s"[5] "c_b"СМИ\n\
	"c_s"[6] "c_b"FBI\n\
	"c_s"[7] "c_b"УМВД","Выбрать","Закрыть");
	return 1;
}

CMD:duel(playerid, params[])
{
	new id,
		cash,
		string[400];

	if(GetPVarInt(playerid, "antifloodduel") > gettime()) return SendClientMessage(playerid, -1, "Предлагать дуэли можно раз в минуту!");

	if(sscanf(params, "ii", id, cash)) return SendClientMessage(playerid, -1, "Используй: /duel [id игрока] [ставка]");

	if(!ProxDetectorS(10, playerid, id)) return SendClientMessage(playerid, -1, "Вы далеко друг от друга!");

	if(DuelOffer[id] != -1)return SendClientMessage(playerid, -1, "Данному игроку уже предложили дуэль!");

	if(DuelOffer[id] == playerid)return SendClientMessage(playerid, -1, "Вы уже предложили дуэль данному игроку!");

	if(cash < 1000 || cash > 10000000)return SendClientMessage(playerid, -1, "Нельзя предложить меньше 1.000$ или больше 10.000.000$!");

	if(playerid == id)return SendClientMessage(playerid, -1, "Нельзя самому себе предложить дуэль!");

	new bool: gun = false;

	new ammo,
		gunid;

	new ammo2,
		gunid2;

	for(new i; i < 13; i ++)
	{
		GetPlayerWeaponData(id, i, gunid, ammo);
		GetPlayerWeaponData(playerid, i, gunid2, ammo2);

		if(!gunid || !ammo) continue;
		if(!gunid2 || !ammo2) continue;
		gun = true;
		break;
	}
	if(!gun)return SendClientMessage(playerid, -1, "У Вас или же у Вашего соперника нет оружия!");
	
	SendClientMessage(playerid, -1, "Вы успешно предложили игроку дуэль!");

	new Name[MAX_PLAYER_NAME];

	GetPlayerName(playerid, Name, MAX_PLAYER_NAME); f("Игрок {99CC00}%s[%d] {ffffff}предлагает Вам дуэль на {99CC00}%d${ffffff}!", Name, playerid, cash);

	Dialog(id, 3000, 0, "Дуэль", string, "Принять", "Отклонить");

	DuelOffer[id] = playerid;
	DuelCash[id] = cash;
	DuelCash[playerid] = cash;
	DuelOffer[playerid] = id;

	return true;
}

forward DuelOn(playerid, id);
public DuelOn(playerid, id)
{
	new string[50];
	timeduel[playerid]--;
	f("~g~Duel: %d", timeduel[playerid]);
	GameTextForPlayer(playerid, string, 1000, 3);
	GameTextForPlayer(id, string, 1000, 3);
	if(timeduel[playerid] <= 0)
	{
		if(!IsPlayerConnected(id) || !IsPlayerConnected(playerid))
		{
			SendClientMessage(id, -1, "Один из игроков вышел!");
			SendClientMessage(playerid, -1, "Один из игроков вышел!");

			KillTimer(DuelTimer[playerid]);
			timeduel[playerid] = 11;
			DuelOffer[playerid] = -1;
			DuelOffer[id] = -1;
			DuelCash[id] = 0;
			DuelCash[playerid] = 0;

			return false;
		}
		KillTimer(DuelTimer[playerid]);
		timeduel[playerid] = 11;
		SendClientMessage(playerid, -1, "Дуэль началась!");
		SendClientMessage(id, -1, "Дуэль началась!");
		TogglePlayerControllable(id, 1);
		TogglePlayerControllable(playerid, 1);
	}
	return true;
}

stock ProxDetectorS(Float:radi, playerid, targetid, spec = 0)
{
	new Float:p[3];

	if(!IsPlayerConnected(playerid)) return false;

	if(!IsPlayerConnected(targetid)) return false;

	if(!spec)
	{
		if(GetPlayerState(playerid) == 9) return false;

		if(GetPlayerState(targetid) == 9) return false;
	}
	if(!GetPlayerPos(targetid, p[0], p[1], p[2])) return false;
	if(!IsPlayerInRangeOfPoint(playerid, radi, p[0], p[1], p[2])) return false;

	return true;
}

stock SpawnDeathMatch(playerid)
{
    
    switch(random(3))
    {
        case 0:
		{
			SetPlayerPos(playerid, -1640.5254,1549.8359,35.6990);
			GivePlayerWeapon(playerid, 24, 999);
			SetPlayerHealth(playerid, 100);// 100 HP
    		SetPlayerVirtualWorld(playerid, 1);
		}
        case 1:
		{
			SetPlayerPos(playerid, -1653.5463,1545.7468,35.7859);
			SetPlayerHealth(playerid, 100);// 100 HP
    		SetPlayerVirtualWorld(playerid, 1);
    		GivePlayerWeapon(playerid, 25, 999);
		}
        case 2:
		{
			SetPlayerPos(playerid, -1647.5599,1533.6190,35.7066);
			SetPlayerHealth(playerid, 100);// 100 HP
    		SetPlayerVirtualWorld(playerid, 1);
    		GivePlayerWeapon(playerid, 31, 999);
		}
        case 3:
		{
			SetPlayerPos(playerid, -1632.4246,1539.5050,35.6734);
			SetPlayerHealth(playerid, 100);// 100 HP
    		SetPlayerVirtualWorld(playerid, 1);
    		GivePlayerWeapon(playerid, 31, 999);
		}
    }
    
    return 1;
}

CMD:dmzexit(playerid)
{
    if(GetPlayerData(playerid, P_DMZ_STATUS) == 1)
	{
		SetPlayerPos(playerid, -33.8257,618.0629,12.1541);
	    SetPlayerVirtualWorld(playerid, 0);
	    ResetPlayerWeapons(playerid);
	    SetPlayerHealth(playerid, 100);// 100 HP

	    SetPlayerData(playerid, P_DMZ_STATUS, 0);
	}
}

CMD:mycoins(playerid)
{
	new fmt_text[80];
    format(fmt_text, sizeof fmt_text, "У вас %d монет.", GetPlayerData(playerid, P_COINS));
	SendClientMessage(playerid, 0xFF5533FF, fmt_text);


	return 1;
}

CMD:dmztop(playerid)
{
	new fmt_text[80];
    format(fmt_text, sizeof fmt_text, "У вас %d киллов на DeathMatch.", GetPlayerData(playerid, P_DMZ_KILL));
	SendClientMessage(playerid, 0xFF5533FF, fmt_text);
		
	new string[256];
	format(string, 256, "SELECT * FROM `accounts` ORDER BY dmz_kills DESC LIMIT 10");
	mysql_tquery(mysql, string, "TopDMZKills", "d",playerid);

	return 1;
}

public: TopDMZKills(playerid)
{
	new name[24], cash,rows,fields, string[2000];
	cache_get_data(rows, fields);
	if(rows)
	{
		for(new i; i < rows; i++)
		{
			name[0] = EOS;
			cash = 0;
			cache_get_field_content(i, "name", name, mysql);
			cash = cache_get_field_content_int(i, "dmz_kills", mysql);
			format(string, sizeof(string), "%s\n"c_b"Ник: "c_server"%s "c_b"Kills: "c_server"%d", string, name, cash);
			strcat(string, string, 0);
		}
	}

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Топ 10 игроков", string, "Закрыть", "");

	return 1;
}

CMD:reward(playerid)
{
    ShowPlayerProgressFMenu(playerid);
}

stock ShowPlayerProgressFMenu(playerid)
{
	new fmt_text[1000];

	format
	(
		fmt_text,
		sizeof fmt_text,
		""c_server"[1] "c_b"Больница | %s\n"\
		""c_server"[2] "c_b"Полиция №1 | %s\n"\
		""c_server"[3] "c_b"Полиция №1 | %s\n"\
		""c_server"[4] "c_b"Полиция №1 | %s\n"\
		""c_server"[5] "c_b"Радиоцентр | %s\n"\
		""c_server"[6] "c_b"Мэрия | %s",
		GetPlayerData(playerid, P_PROGRESS_1) ? ("{32CD32}Выполнено") : ("{F81414}Не выполнено"),
		GetPlayerData(playerid, P_PROGRESS_2) ? ("{32CD32}Выполнено") : ("{F81414}Не выполнено"),
		GetPlayerData(playerid, P_PROGRESS_3) ? ("{32CD32}Выполнено") : ("{F81414}Не выполнено"),
		GetPlayerData(playerid, P_PROGRESS_4) ? ("{32CD32}Выполнено") : ("{F81414}Не выполнено"),
		GetPlayerData(playerid, P_PROGRESS_5) ? ("{32CD32}Выполнено") : ("{F81414}Не выполнено"),
        GetPlayerData(playerid, P_PROGRESS_6) ? ("{32CD32}Выполнено") : ("{F81414}Не выполнено")
	);
	Dialog
	(
		playerid, DIALOG_ACTION_F_PROGRESS, DIALOG_STYLE_LIST,
		"Достижения | Фракционные",
		fmt_text,
		"Выбрать", "Закрыть"
	);

	return 1;
}

CMD:killstop(playerid)
{
	if(!(TEAM_OPG_ARZAMASKAYA <= GetPlayerTeamEx(playerid) <= TEAM_OPG_LYTKARINSKAYA))
		return SendClientMessage(playerid, 0x999999FF, "Вы не можете использовать это");

	new string[256];
	format(string, 256, "SELECT * FROM `accounts` ORDER BY capt_kills DESC LIMIT 5");
	mysql_tquery(mysql, string, "TopCaptKills", "d",playerid);

	return 1;
}

public: TopCaptKills(playerid)
{
	new name[24], cash,rows,fields, string[2000];
	cache_get_data(rows, fields);
	if(rows)
	{
		for(new i; i < rows; i++)
		{
			name[0] = EOS;
			cash = 0;
			cache_get_field_content(i, "name", name, mysql);
			cash = cache_get_field_content_int(i, "capt_kills", mysql);
			format(string, sizeof(string), "%s\n"c_b"Ник: "c_server"%s "c_b"Kills: "c_server"%d", string, name, cash);
			strcat(string, string, 0);
		}
	}

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Топ 5 игроков", string, "Закрыть", "");

	return 1;
}

CMD:opencase(playerid)
{
    ShowPlayerOpenCase(playerid);
}

stock ShowPlayerOpenCase(playerid)
{
    Dialog(playerid,DIALOG_DONATE_CASE,DIALOG_STYLE_MSGBOX,
	"Открытие кейса",
	"У Вас есть возможность выиграть VIP-статус, слот для транспорта, деньги и донат коины\n"\
	"Вы уверены что хотите открыть кейс?",
	"Открыть","Отмена"
	);
}

stock ShowPlayerOpenDonate(playerid)
{
    Dialog(playerid,DIALOG_DONATE_OPEN,DIALOG_STYLE_LIST,
	"Донат",
	"1. Получить донат который Вы пополнили\n"\
	"2. Донат-Меню",
	"Открыть","Отмена"
	);
}

public: GetPlayerPrise(playerid)
{
	new fmt_text[256];
	
	AddPlayerData(playerid, P_DONATE_CASE, -, 1);
	UpdatePlayerDatabaseInt(playerid, "case", GetPlayerData(playerid, P_DONATE_CASE));
	
    switch(random(15))
	{
		case 0..6:
		{
			new rand = random(10000000);

			GivePlayerMoneyEx(playerid, rand,"Открытие кейса", true, true);
			format(fmt_text, sizeof fmt_text, "Поздравляем! Вы выиграли: %d$", rand);
			SendClientMessage(playerid, 0x66CC00FF, fmt_text);
			return 1;
		}
		case 7..8:
		{
		    new rand = random(15);
		    
		    GivePlayerDonate(playerid, rand, "Открытие кейса", true/*, true*/);
			format(fmt_text, sizeof fmt_text, "Поздравляем! Вы выиграли: %d DONATE-RUB", rand);
			SendClientMessage(playerid, 0x66CC00FF, fmt_text);
			return 1;
		}
		case 9:
		{
		    AddPlayerData(playerid, P_CAR_SLOTS, +, 1);
			UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));
			
			format(fmt_text, sizeof fmt_text, "Вы выиграли слот для транспорта. Текущее количество слотов: %d",
			GetPlayerData(playerid, P_CAR_SLOTS));
			SendClientMessage(playerid, 0x66CC00FF, fmt_text);
			return 1;
		}
		case 10..13:
		{
		    new rand = random(500) + 300;

		    GivePlayerDonate(playerid, rand,"Открытие кейса", true);
			format(fmt_text, sizeof fmt_text, "Поздравляем! Вы выиграли: %d DONATE-COINS", rand);
			SendClientMessage(playerid, 0x66CC00FF, fmt_text);
		}
		case 14..15:
		{
		    new premium = GetPlayerPremium(playerid);
      		if(!premium)
        	{
         		SetPlayerData(playerid, P_PREMIUM, 1);
         		SetPlayerData(playerid, P_PREMIUM_DATE, gettime() + 3 * 86400);
			}
			else
			{
   				AddPlayerData(playerid, P_PREMIUM_DATE, +, 3 * 86400);
			}

			new prem_day,
   			prem_month,
   			prem_year;

			timestamp_to_date(GetPlayerData(playerid, P_PREMIUM_DATE), prem_year, prem_month, prem_day);

			format(fmt_text, sizeof fmt_text, "Вы успешно выиграли {EC174F} VIP {FFFFFF}до {EC174F}%02d.%02d.%d", prem_day, prem_month, prem_year);
			SendClientMessage(playerid, -1, fmt_text);
			UpdatePlayerDatabaseInt(playerid, "premium_date", GetPlayerData(playerid, P_PREMIUM_DATE));
			UpdatePlayerDatabaseInt(playerid, "premium", 1);
			return 1;
		}
 	}
	return false;
}

/*CMD:8marta(playerid)
{
    if(GetPlayerData(playerid, P_FLOWER_3) >= 1) return Send(playerid, -1, "Не доступно!");
    
    ShowPlayerQuestIn8marta(playerid);
    
    return 1;
}*/

CMD:test(playerid)
{
    SetPlayerAttachedObject(playerid,3,1210,5,0.299999,0.099999,0.000000,0.000000,-83.000000,0.000000,1.000000,1.000000,1.000000);
}

CMD:testoff(playerid)
{
    RemovePlayerAttachedObject(playerid, 3);
}

CMD:online(playerid)
{
    new query[70];
    format(query, sizeof query, "[Информация]: "c_b"Текущий онлайн: {FFFF00}%d "c_b"человек", Iter_Count(Player));
	SendClientMessage(playerid, COR_SERVER, query);
	return 1;
}

stock MessageInSpawn(playerid)
{
	new query[70];
    format(query, sizeof query, "[Информация]: "c_b"Текущий онлайн: {FFFF00}%d "c_b"человек", Iter_Count(Player));
	SendClientMessage(playerid, COR_SERVER, query);

	Send(playerid, COR_SERVER, "[Информация]: "c_b"С 30 мая по 30 Июня действует акция, каждый час Вам будут выдаваться монеты.");
	Send(playerid, COR_SERVER, "[Информация]: "c_b"Монеты можно будет обменять на транспорт. Подробнее "c_s"/gps > Обмен монет");
	Send(playerid, COR_SERVER, "[Информация]: "c_b"Зарабатывай более "c_s"1.000 DONATE-RUB "c_b"каждый месяц. Подробнее "c_i"/mtop");
	return 1;
}

stock ShowPlayerObmenMonet(playerid)
{
	new fmt_str[500];
	
    format
	(
		fmt_str, sizeof fmt_str,
		""c_b"1. Пожарная машина (ID: 407) - "c_s"1.000 монет "c_b"| Осталось "c_s"%d из 5\n\
		"c_b"2. Автобус (ID: 431) - "c_s"1.000 монет "c_b"| Осталось "c_s"%d из 5\n\
		"c_b"3. Пожарный вертолет (ID: 563) - "c_s"1.000 монет "c_b"| Осталось "c_s"%d из 5\n\
		"c_b"4. Полицейская машина (ID: 597) - "c_s"1.000 монет "c_b"| Осталось "c_s"%d из 5\n\
		"c_b"5. Монстер (ID: 444) - "c_s"3.000 монет "c_b"| Осталось "c_s"%d из 1",
		Cars[car_1],
		Cars[car_2],
		Cars[car_3],
		Cars[car_4],
		Cars[car_5]
	);

	Dialog(playerid, DIALOG_OBMEN_MONET, DIALOG_STYLE_LIST, "Обмен монет", fmt_str, "Обменять", "Закрыть");
	return 1;

}



public: LoadCarObmen()
{
	new Cache: result;

	result = mysql_query(mysql, "SELECT * FROM `car_obmen`", true);

	Cars[car_1] = cache_get_field_content_int(0, "car_1", mysql);
    Cars[car_2] = cache_get_field_content_int(0, "car_2", mysql);
    Cars[car_3] = cache_get_field_content_int(0, "car_3", mysql);
    Cars[car_4] = cache_get_field_content_int(0, "car_4", mysql);
    Cars[car_5] = cache_get_field_content_int(0, "car_5", mysql);


	cache_delete(result);

	printf("[CAR_OBMEN]: Load!");
}

CMD:givecar(playerid, params[])
{
    if(GetPlayerAdminEx(playerid) != 13) return 1;
    
    extract params -> new to_player, modelid; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /givecar [id игрока] [id транспорта]");

    new color_1 = 15, color_2 = 15;
    
    new Float:POS[3];
    GetPlayerPos(to_player, POS[0],POS[1],POS[2]);

    new Float: pos_x = POS[0];
	new Float: pos_y = POS[1];
	new Float: pos_z = POS[2];
	new Float: angle = 356.7986;

	new query[220],
		Cache: result,
		idx;

	idx = GetFreeOwnableCarID();

	SetOwnableCarData(idx, OC_OWNER_ID, 	GetPlayerAccountID(to_player));

	SetOwnableCarData(idx, OC_MODEL_ID, 	modelid);
	SetOwnableCarData(idx, OC_COLOR_1, 		color_1);
	SetOwnableCarData(idx, OC_COLOR_2, 		color_2);

	SetOwnableCarData(idx, OC_POS_X, 		pos_x);
	SetOwnableCarData(idx, OC_POS_Y, 		pos_y);
	SetOwnableCarData(idx, OC_POS_Z, 		pos_z);
	SetOwnableCarData(idx, OC_ANGLE, 		angle);

	strmid(g_ownable_car[idx][OC_NUMBER], "------", 0, 8, 8);

	SetOwnableCarData(idx, OC_ALARM, 		false);
	SetOwnableCarData(idx, OC_KEY_IN, 		false);

	SetOwnableCarData(idx, OC_CREATE, 		gettime());

	format(g_ownable_car[idx][OC_OWNER_NAME], 21, GetPlayerNameEx(to_player));
	// ----------------------------------------------------------------------------------------

	new vehicleid = CreateVehicle
	(
		GetOwnableCarData(idx, OC_MODEL_ID),
		GetOwnableCarData(idx, OC_POS_X),
		GetOwnableCarData(idx, OC_POS_Y),
		GetOwnableCarData(idx, OC_POS_Z),
		GetOwnableCarData(idx, OC_ANGLE),
		GetOwnableCarData(idx, OC_COLOR_1),
		GetOwnableCarData(idx, OC_COLOR_2),
		-1,
		0,
		VEHICLE_ACTION_TYPE_OWNABLE_CAR,
		idx
	);
	if(vehicleid != INVALID_VEHICLE_ID)
	{
		CreateVehicleLabel(vehicleid, GetOwnableCarData(idx, OC_NUMBER), 0xFFFF00EE, 0.0, 0.0, 1.3, 20.0);
		SetVehicleParam(vehicleid, V_LOCK, false);

		SetVehicleData(vehicleid, V_MILEAGE, 0.0);
	}

	SetPlayerData(to_player, P_OWNABLE_CAR, vehicleid);

	format
	(
		query, sizeof query,
		"INSERT INTO ownable_cars \
		(owner_id,model_id,color_1,color_2,pos_x,pos_y,pos_z,angle,create_time) \
		VALUES \
		('%d','%d','%d','%d','%f','%f','%f','%f','%d')",
		GetPlayerAccountID(to_player),
		modelid,
		color_1,
		color_2,
		pos_x,
		pos_y,
		pos_z,
		angle,
		gettime()
	);
	result = mysql_query(mysql, query, true);

	SetOwnableCarData(idx, OC_SQL_ID, cache_insert_id());

	cache_delete(result);

	SendClientMessage(playerid, 0x66CC00FF, "ok");
//	SendClientMessage(playerid, 0x66CC00FF, "Напишите {0099FF}/car {66CC00}чтобы узнать о возможностях");
    return 1;
}

CMD:createytpromo(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 13) return 1;

	Dialog
	(
		playerid, DIALOG_YTPROMO_CREATE, DIALOG_STYLE_INPUT,
		"Создание промокода ютубера",
		"{FFFFFF}Для создания промокода введите\n"\
		"следующие параметры в окно ниже:\n\n"\
		"{33CC66}Параметры: Код, Тип, Кол-во\n\n"\
		"{888888}Примечание:\n"\
		"{FFFFFF}- Код может содержать от 1 до 30 символов\n"\
		"- Тип от 0 до 3 (0. деньги, 1.донат, 3. exp)\n"\
		"- Количество от 1 до 10.000.000",
		"Далее", "Отмена"
	);

	return 1;
}
public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	if (s_autorace_Pos_PickupID[0] == pickupid) {
		TogglePlayerDynamicCP(playerid, s_autorace_Main_CPID, false);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, AUTORACE_ENTER_POS);
		SetPlayerFacingAngle(playerid, AUTORACE_ENTER_F_ANGLE);
		SetCameraBehindPlayer(playerid);
		return 1;
	}
	if (s_autorace_Pos_PickupID[1] == pickupid) {
		/*SetPlayerVirtualWorld(playerid, AUTORACE_EXIT_WORLD);
		SetPlayerInterior(playerid, AUTORACE_EXIT_INTERIOR);
		SetPlayerPos(playerid, AUTORACE_EXIT_POS);
		SetPlayerFacingAngle(playerid, AUTORACE_EXIT_F_ANGLE);
		TogglePlayerDynamicCP(playerid, s_autorace_Main_CPID, true);
		SetCameraBehindPlayer(playerid);*/

		new
			AutoRaceType:ar_type = s_autorace_Server_Type;

		if (ar_type == t_AutoRaceNone) {
			SendClientMessage(playerid, 0xCECECEFF, "Регистрация закрыта");
			return 1;
		}
		if (s_autorace_Server_Stage == s_AutoRaceNone) {
			SendClientMessage(playerid, 0xCECECEFF, "Вы опоздали на гонку");
			return 1;
		}
		if (s_autorace_Server_Count[_:ar_type] >= s_autorace_Vehicle_Amount[_:ar_type]) {
			SendClientMessage(playerid, 0xCECECEFF, "Слишком много участников");
			return 1;
		}
		if ((p_autorace_Player_Type[playerid] != t_AutoRaceNone)
			&& (p_autorace_Player_State[playerid] != AUTORACE_STATE_NONE)) {
			SendClientMessage(playerid, 0xCECECEFF, "Вы уже зарегестрированы на гонку");
		} else {
			Dialog_Show::P_AUTORACE(playerid);
		}
		return 1;
	}
	return 1;
}

public OnPlayerEnterDynamicRaceCP(playerid, checkpointid)
{
	if (p_autorace_Player_RaceCPID[playerid] == checkpointid) {

		new
			AutoRaceType:ar_type = p_autorace_Player_Type[playerid];

		if ((ar_type != t_AutoRaceNone)
			&& (p_autorace_Player_State[playerid] == AUTORACE_STATE_DRIVER)) {

			new
				ar_racecp = ++p_autorace_Player_RaceCP{playerid};

			DestroyDynamicRaceCP(p_autorace_Player_RaceCPID[playerid]);
			if (ar_racecp == s_autorace_RaceCP_Amount[_:ar_type]) {

				new
					string[128 + 1],
					ar_count = p_autorace_Player_Count{playerid};

				s_autorace_Server_PlayerID[_:ar_type][ar_count] = INVALID_PLAYER_ID;
				p_autorace_Player_Type[playerid] = t_AutoRaceNone;
				p_autorace_Player_State[playerid] = AUTORACE_STATE_NONE;
				p_autorace_Player_Count{playerid} = 0;
				if (p_autorace_Player_VehicleID[playerid] != INVALID_VEHICLE_ID) {
					DestroyVehicle(p_autorace_Player_VehicleID[playerid]);
					p_autorace_Player_VehicleID[playerid] = INVALID_VEHICLE_ID;
				}
				p_autorace_Player_RaceCPID[playerid] = INVALID_STREAMER_ID;
				GameTextForPlayer(playerid, "~g~Finish", 5000, 3);
				//SetPlayerVirtualWorld(playerid, AUTORACE_EXIT_WORLD);
				//SetPlayerInterior(playerid, AUTORACE_EXIT_INTERIOR);

				switch (++s_autorace_Server_Places[_:ar_type]) {
					case 1: {
						GivePlayerDonate(playerid, 20, "Победе за 1 место в гонке");
						format(string, sizeof(string), "[Информация]: Первое место в гонке одержал %s и получает приз 20 донат рублей", GetPlayerNameEx(playerid));
						SendClientMessageToAll(COR_SERVER, string);
					}
					case 2: {
						GivePlayerDonate(playerid, 10, "Победе за 2 место в гонке");
						format(string, sizeof(string), "[Информация]: Второе место в гонке одержал %s и получает приз 10 донат рублей", GetPlayerNameEx(playerid));
						SendClientMessageToAll(COR_SERVER, string);
					}
					case 3: {
						AddPlayerData(playerid, P_COINS, +, 500);
						UpdatePlayerDatabaseInt(playerid, "coins", GetPlayerData(playerid, P_COINS));
						format(string, sizeof(string), "[Информация]: Третье место в гонке одержал %s и получает приз 500 донат монет", GetPlayerNameEx(playerid));
						SendClientMessageToAll(COR_SERVER, string);
					}
				}

				/*new
					rand = random(sizeof(s_autorace_Player_Spawn));

				SetPlayerPos(playerid, s_autorace_Player_Spawn[rand][0], s_autorace_Player_Spawn[rand][1], s_autorace_Player_Spawn[rand][2]);
				SetPlayerFacingAngle(playerid, s_autorace_Player_Spawn[rand][3]);*/
				SetPlayerPos(playerid, 156.5571,779.7189,11.9949);
				SetCameraBehindPlayer(playerid);
				return 1;
			}

			new
				string[8 + 1];

			format(string, sizeof(string), "~g~%i/%i", ar_racecp, s_autorace_RaceCP_Amount[_:ar_type]);
			GameTextForPlayer(playerid, string, 5000, 3);
			p_autorace_Player_RaceCPID[playerid] = CreateDynamicRaceCP(0, s_autorace_RaceCP_PosS[_:ar_type][ar_racecp][0], s_autorace_RaceCP_PosS[_:ar_type][ar_racecp][1], s_autorace_RaceCP_PosS[_:ar_type][ar_racecp][2],
																		  s_autorace_RaceCP_PosS[_:ar_type][ar_racecp + 1][0], s_autorace_RaceCP_PosS[_:ar_type][ar_racecp + 1][1], s_autorace_RaceCP_PosS[_:ar_type][ar_racecp + 1][2], 6.0, .playerid = playerid, .streamdistance = FLOAT_INFINITY);
			Streamer_Update(playerid, STREAMER_TYPE_RACE_CP);
		}
		return 1;
	}
	return 1;
}


CMD:asellhouse(playerid, params[])
{
	if (GetPlayerAdminEx(playerid) != 13) {
		return 0;
	}
	extract params -> new i; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /asellhouse [id дома]");

	new
		query[180];
	//if(!GetHouseData(i, H_EVICTION)) continue;
	//if(GetHouseData(i, H_RENT_DATE) < cur_time) continue;

	format(query, sizeof query, "UPDATE houses SET owner_id='0',lock='0',eviction='0' WHERE id='%d'", GetHouseData(i, H_SQL_ID));
	mysql_query(mysql, query, false);

	new owner_player = GetPlayerIDBySqlID(GetHouseData(i, H_OWNER_ID));
	if(IsPlayerConnected(owner_player) && IsPlayerLogged(owner_player)) {
		SetPlayerData(owner_player, P_HOUSE, -1);
		SetPlayerData(owner_player, P_HOUSE_ROOM, -1);
		SetPlayerData(owner_player, P_HOUSE_TYPE, -1);
		mysql_format(mysql, query, sizeof query, "UPDATE accounts SET `house`=-1,`house_room`=-1,`house_type`=-1 WHERE `id`=%d LIMIT 1", GetPlayerAccountID(owner_player));
		mysql_query(mysql, query, false);
	} else {
		mysql_format(mysql, query, sizeof query, "UPDATE accounts SET `house`=-1,`house_room`=-1,`house_type`=-1 WHERE `id`=%d LIMIT 1", GetHouseData(i, H_OWNER_ID));
		mysql_query(mysql, query, false);
	}
	SetHouseData(i, H_OWNER_ID, 0);
	SetHouseData(i, H_IMPROVEMENTS,		0);

	SetHouseData(i, H_EVICTION, 0);

	SetHouseData(i, H_RENT_DATE,		0);
	SetHouseData(i, H_LOCK_STATUS,		false);

	UpdateHouse(i);

	HouseHealthInit(i);
	HouseStoreInit(i);
	return 1;
}

CMD:asellbiz(playerid, params[])
{
	if (GetPlayerAdminEx(playerid) != 13) {
		return 0;
	}
	extract params -> new i; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /asellbiz [id бизнеса]");

	new
		query[180];
	//if(!GetBusinessData(i, B_EVICTION)) continue;
	//if(GetBusinessData(i, B_RENT_DATE) < cur_time) continue;

	format(query, sizeof query, "UPDATE business SET owner_id='0',products='0',prod_price='0',lock='0',eviction='0' WHERE id='%d'", GetBusinessData(i, B_SQL_ID));
	mysql_query(mysql, query, false);

	new owner_player = GetPlayerIDBySqlID(GetBusinessData(i, B_OWNER_ID));
	if(IsPlayerConnected(owner_player) && IsPlayerLogged(owner_player)) {
		SetPlayerData(owner_player, P_BUSINESS, -1);
		mysql_format(mysql, query, sizeof query, "UPDATE accounts SET `business`=-1 WHERE `id`=%d LIMIT 1", GetPlayerAccountID(owner_player));
		mysql_query(mysql, query, false);
	} else {
		mysql_format(mysql, query, sizeof query, "UPDATE accounts SET `business`=-1 WHERE `id`=%d LIMIT 1", GetBusinessData(i, B_OWNER_ID));
		mysql_query(mysql, query, false);
	}

	SetBusinessData(i, B_OWNER_ID, 0);
	SetBusinessData(i, B_IMPROVEMENTS, 		0);

	SetBusinessData(i, B_EVICTION, 0);

	SetBusinessData(i, B_PRODS, 			0);
	SetBusinessData(i, B_PROD_PRICE,		0);

	SetBusinessData(i, B_BALANCE,			0);
	SetBusinessData(i, B_RENT_DATE,			0);
	SetBusinessData(i, B_ENTER_MUSIC,		0);
	SetBusinessData(i, B_LOCK_STATUS,		false);

	BusinessHealthPickupInit(i);

	format(query, sizeof query, "DELETE FROM business_gps WHERE bid=%d", i);
	mysql_query(mysql, query, false);

	g_business_gps_init = false;
	CallLocalFunction("UpdateBusinessLabel", "i", i);
	return 1;
}

CMD:asellfuel(playerid, params[])
{
	if (GetPlayerAdminEx(playerid) != 13) {
		return 0;
	}
	extract params -> new i; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /asellfuel [id заправки]");

	new
		query[180];
	//if(!GetFuelStationData(i, FS_EVICTION)) continue;
	//if(GetFuelStationData(i, FS_RENT_DATE) < cur_time) continue;

	format(query, sizeof query, "UPDATE fuel_stations SET owner_id='0',fuels='1000',fuel_price='3',lock='0',eviction='0' WHERE id='%d'", GetFuelStationData(i, FS_SQL_ID));
	mysql_query(mysql, query, false);

	new owner_player = GetPlayerIDBySqlID(GetFuelStationData(i, FS_OWNER_ID));
	if(IsPlayerConnected(owner_player) && IsPlayerLogged(owner_player)) {
		SetPlayerData(owner_player, P_FUEL_ST, -1);
		format(query, sizeof query, "UPDATE accounts SET `fuel_st`=-1 WHERE `id`=%d LIMIT 1", GetPlayerAccountID(owner_player));
		mysql_query(mysql, query, false);
	} else {
		format(query, sizeof query, "UPDATE accounts SET `fuel_st`=-1 WHERE `id`=%d LIMIT 1", GetFuelStationData(i, FS_OWNER_ID));
		mysql_query(mysql, query, false);
	}

	SetFuelStationData(i, FS_OWNER_ID, 0);
	SetFuelStationData(i, FS_IMPROVEMENTS, 0);

	SetFuelStationData(i, FS_EVICTION, 0);

	SetFuelStationData(i, FS_FUELS, 		1000);
	SetFuelStationData(i, FS_FUEL_PRICE,	3);
	SetFuelStationData(i, FS_BUY_FUEL_PRICE,0);

	SetFuelStationData(i, FS_BALANCE,		0);
	SetFuelStationData(i, FS_RENT_DATE,		0);
	SetFuelStationData(i, FS_LOCK_STATUS,	false);
	CallLocalFunction("UpdateFuelStationLabel", "i", i);
	return 1;
}

CMD:mtop(playerid)
{
	new fmt_str[3000];
    format
	(
		fmt_str, sizeof fmt_str,
		""c_b"Получай Донат-Коины за игру на сервере!\n\
		\n\
		Каждый месяц топ 1 игроки будут получать вознаграждение, список вознаграждений\n\
		можно посмотреть с помощью команды: "c_s"/mpriz\n\
		"c_b"Так же, каждый месяц список топ-игроков будет обнуляться.\n\
		\n\
		"c_i"1. "c_b"ТОП: Заработанных денег на начальных работах.\n\
		\tЗарабатывая деньги на начальных работах, Вы будете увеличивать прогресс данного этапа.\n\
		\t"c_i"Список работ: "c_b"Грузчик, Шахтер, Завод, Лесоруб.\n\
		\n\
		"c_i"2. "c_b"ТОП: Заработанных денег на гос. работах.\n\
		\tЗарабатывая деньги на гос. работах, Вы будете увеличивать прогресс данного этапа.\n\
		\t"c_i"Список работ: "c_b"Водитель автобуса, Таксист, Механик.\n\
		\n\
		"c_i"3. "c_b"ТОП: Полученных PayDay\n\
		\tКаждый собранный PayDay, Вам будет прибавлять +1 к прогрессу данного этапа.\n\
		\t"c_i"Информация: "c_b"PayDay происходит каждый час. Например в 11:00, 12:00\n\
		\n\
		"c_i"4. "c_b"ТОП: Выполненных достижений\n\
		\tВыполняя достижения, Вы будете увеличивать прогресс данного этапа\n\
  		\t"c_s"/reward"c_b"- информация о достижениях и список достижений.\n\
  		\n\
		"c_i"5. "c_b"ТОП: Выполненных квестов\n\
		\tВыполняя квесты, Вы будете увеличивать прогресс данного этапа.\n\
		\t"c_s"/quest "c_b"- информация о квестах и список квестов."
	);

	Dialog(playerid, DIALOG_MTOP, DIALOG_STYLE_MSGBOX, ""c_i"ТОП: "c_b"Информация", fmt_str, "Далее", "Закрыть");
	return 1;
}

stock MtopMenu(playerid)
{
    Dialog
	(
		playerid, DIALOG_MTOP_MENU, DIALOG_STYLE_LIST,
		"Меню ТОП-Игроков",
		""c_server"1. "c_i"ТОП: "c_b"Заработанных денег на начальных работах\n"\
		""c_server"2. "c_i"ТОП: "c_b"Заработанных денег на гос. работах\n"\
		""c_server"3. "c_i"ТОП: "c_b"Полученных PayDay\n"\
		""c_server"4. "c_i"ТОП: "c_b"Выполненных достижений\n"\
		""c_server"5. "c_i"ТОП: "c_b"Выполненных квестов\n"\
	    ""c_i"ТОП Игроки по скиллам на работах",
		"Выбрать", "Закрыть"
	);
	return 1;
}

CMD:top_salary_new_work(playerid)
{
	new string[256];
	format(string, 256, "SELECT * FROM `accounts` ORDER BY TOP_SalaryNewWork DESC LIMIT 25");
	mysql_tquery(mysql, string, "TopSalaryNewWork", "d",playerid);

	return 1;
}

CMD:top_salary_gos_work(playerid)
{
	new string[256];
	format(string, 256, "SELECT * FROM `accounts` ORDER BY TOP_SalaryGosWork DESC LIMIT 25");
	mysql_tquery(mysql, string, "TopSalaryGovWork", "d",playerid);

	return 1;
}

public: TopSalaryNewWork(playerid)
{
	new name[24], top,rows,fields, string[2000];
	cache_get_data(rows, fields);
	if(rows)
	{
		for(new i; i < rows; i++)
		{
			name[0] = EOS;
			top = 0;
			cache_get_field_content(i, "name", name, mysql);
			top = cache_get_field_content_int(i, "TOP_SalaryNewWork", mysql);
			format(string, sizeof(string), "%s\n"c_b" %s: "c_i"%d", string, name, top);
			strcat(string, string, 0);
		}
	}

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""c_i"ТОП: "c_b"Заработанных денег на начальных работах", string, "Закрыть", "");

	return 1;
}

public: TopSalaryGovWork(playerid)
{
	new name[24], top,rows,fields, string[2000];
	cache_get_data(rows, fields);
	if(rows)
	{
		for(new i; i < rows; i++)
		{
			name[0] = EOS;
			top = 0;
			cache_get_field_content(i, "name", name, mysql);
			top = cache_get_field_content_int(i, "TOP_SalaryGosWork", mysql);
			format(string, sizeof(string), "%s\n"c_b" %s: "c_i"%d", string, name, top);
			strcat(string, string, 0);
		}
	}

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""c_i"ТОП: "c_b"Заработанных денег на гос. работах", string, "Закрыть", "");

	return 1;
}

public: TopPayDay(playerid)
{
	new name[24], top,rows,fields, string[2000];
	cache_get_data(rows, fields);
	if(rows)
	{
		for(new i; i < rows; i++)
		{
			name[0] = EOS;
			top = 0;
			cache_get_field_content(i, "name", name, mysql);
			top = cache_get_field_content_int(i, "TOP_PayDay", mysql);
			format(string, sizeof(string), "%s\n"c_b" %s: "c_i"%d", string, name, top);
			strcat(string, string, 0);
		}
	}

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""c_i"ТОП: "c_b"Полученных PayDay", string, "Закрыть", "");

	return 1;
}

CMD:top_payday(playerid)
{
	new string[256];
	format(string, 256, "SELECT * FROM `accounts` ORDER BY TOP_PayDay DESC LIMIT 25");
	mysql_tquery(mysql, string, "TopPayDay", "d",playerid);

	return 1;
}

public: TopQuest(playerid)
{
	new name[24], top,rows,fields, string[2000];
	cache_get_data(rows, fields);
	if(rows)
	{
		for(new i; i < rows; i++)
		{
			name[0] = EOS;
			top = 0;
			cache_get_field_content(i, "name", name, mysql);
			top = cache_get_field_content_int(i, "TOP_Quest", mysql);
			format(string, sizeof(string), "%s\n"c_b" %s: "c_i"%d", string, name, top);
			strcat(string, string, 0);
		}
	}

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""c_i"ТОП: "c_b"Выполненных квестов", string, "Закрыть", "");

	return 1;
}

CMD:top_quest(playerid)
{
	new string[256];
	format(string, 256, "SELECT * FROM `accounts` ORDER BY TOP_Quest DESC LIMIT 25");
	mysql_tquery(mysql, string, "TopQuest", "d",playerid);

	return 1;
}

CMD:mpriz(playerid)
{
    Top1PlayerAndPriz(playerid);

	return 1;
}

public: Top1PlayerAndPriz(playerid)
{
	new string[400];


	format(string, sizeof(string),
	""c_i"1. "c_b"2000 донат-рублей.\n\
	"c_i"2. "c_b"2000 донат-рублей.\n\
	"c_i"3. "c_b"1500 донат-рублей.\n\
	"c_i"4. "c_b"2000 донат-рублей.\n\
	"c_i"5. "c_b"1000 донат-рублей."
	);

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""c_i"ТОП: "c_b"Награды", string, "Закрыть", "");

	return 1;
}

public: TopProgress(playerid)
{
	new name[24], top,rows,fields, string[2000];
	cache_get_data(rows, fields);
	if(rows)
	{
		for(new i; i < rows; i++)
		{
			name[0] = EOS;
			top = 0;
			cache_get_field_content(i, "name", name, mysql);
			top = cache_get_field_content_int(i, "TOP_Progress", mysql);
			format(string, sizeof(string), "%s\n"c_b" %s: "c_i"%d", string, name, top);
			strcat(string, string, 0);
		}
	}

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""c_i"ТОП: "c_b"Выполненных достижений", string, "Закрыть", "");

	return 1;
}

CMD:top_progress(playerid)
{
	new string[256];
	format(string, 256, "SELECT * FROM `accounts` ORDER BY TOP_Progress DESC LIMIT 25");
	mysql_tquery(mysql, string, "TopProgress", "d",playerid);

	return 1;
}

CMD:placeboomboxx(playerid, params[])
{
    new string[128], Float:BBCoord[4], pName[MAX_PLAYER_NAME];
    GetPlayerPos(playerid, BBCoord[0], BBCoord[1], BBCoord[2]);
    GetPlayerFacingAngle(playerid, BBCoord[3]);
    SetPVarFloat(playerid, "BBX", BBCoord[0]);
    SetPVarFloat(playerid, "BBY", BBCoord[1]);
    SetPVarFloat(playerid, "BBZ", BBCoord[2]);
    GetPlayerName(playerid, pName, sizeof(pName));
    BBCoord[0] += (2 * floatsin(-BBCoord[3], degrees));
   	BBCoord[1] += (2 * floatcos(-BBCoord[3], degrees));
   	BBCoord[2] -= 1.0;
	//if(Boombox[playerid] == 0) return SCM(playerid, COLOR_WHITE, "You don't have a Boombox - Ask a Admin for one"); // Part of Variable
	if(GetPVarInt(playerid, "PlacedBB")) return SCM(playerid, -1, "Вы уже поставили бумбокс");
	foreach(Player, i)
	{
 		if(GetPVarType(i, "PlacedBB"))
   		{
  			if(IsPlayerInRangeOfPoint(playerid, 30.0, GetPVarFloat(i, "BBX"), GetPVarFloat(i, "BBY"), GetPVarFloat(i, "BBZ")))
			{
   				SendClientMessage(playerid, COLOR_WHITE, "Вы не можете поместить свой бумбокс в этом месте, так как в этом месте уже есть бумбокс.");
			    return 1;
			}
		}
	}
	new string2[128];
	format(string2, sizeof(string2), "%s поставил бумбокс", pName);
	SendNearbyMessage(playerid, 15, string2, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	SetPVarInt(playerid, "PlacedBB", 0);
	format(string, sizeof(string), "Бумбокс\nВладелец: %s", pName);
	SetPVarInt(playerid, "BBLabel", _:CreateDynamic3DTextLabel(string, -1, BBCoord[0], BBCoord[1], BBCoord[2]+0.6, 5, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid)));
	SetPVarInt(playerid, "BBArea", CreateDynamicSphere(BBCoord[0], BBCoord[1], BBCoord[2], 30.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid)));
	SetPVarInt(playerid, "BBInt", GetPlayerInterior(playerid));
	SetPVarInt(playerid, "BBVW", GetPlayerVirtualWorld(playerid));
	ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
    ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
	return 1;
}

CMD:boombox(playerid)
{
    if(GetPlayerData(playerid, P_BOOMBOX) == 1)
    {
		Dialog(playerid, DIALOG_BOOMBOX_MENU, DIALOG_STYLE_LIST,"Меню BoomBox",
		""c_b"Поставить BoomBox\n\
		Забрать BoomBox\n\
		Включить BoomBox\n\
		Выключить BoomBox",
		"Далее", "Закрыть");
	}
	else
	    return Send(playerid,-1,"У вас нет бумбокса");
	    
	return 1;

}

CMD:setboomboxx(playerid, params[])
{
	if(GetPVarType(playerid, "PlacedBB"))
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ")))
		{
			Dialog(playerid,DIALOG_BOOMBOX,DIALOG_STYLE_LIST,"Меню BoomBox",
			""c_b"Радиостанции\n\
			"c_b"Музыкант: "c_s"Макс Корж\n\
			"c_b"Музыканты: "c_s"Miyagi & Эндшпиль\n\
			"c_b"Музыкант: "c_s"Канги",
			/*Мэвл\n\
			Канги\n\
			Country\n\
			Morgenshtern\n\
			Slava Marlow\n\
			VAVAN\n\
			Выключить",*/
			"Далее", "Закрыть");
		}
		else
		{
   			return SendClientMessage(playerid, -1, "Вы далеко от своего BoomBox!");
		}
    }
    else
    {
        SendClientMessage(playerid, -1, "Вы не поставили BoomBox!");
	}
	return 1;
}

CMD:placeboomboxxx(playerid, params [])
{

	PickUpBoombox(playerid);

}

stock StopStream(playerid)
{
	DeletePVar(playerid, "pAudioStream");
    StopAudioStreamForPlayer(playerid);
}

stock PlayStream(playerid, url[], Float:posX = 0.0, Float:posY = 0.0, Float:posZ = 0.0, Float:distance = 50.0, usepos = 0)
{
	if(GetPVarType(playerid, "pAudioStream")) StopAudioStreamForPlayer(playerid);
	else SetPVarInt(playerid, "pAudioStream", 1);
    PlayAudioStreamForPlayer(playerid, url, posX, posY, posZ, distance, usepos);
}

stock PickUpBoombox(playerid)
{
    foreach(Player, i)
	{
 		if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
   		{
     		StopStream(i);
		}
	}
	//DeletePVar(playerid, "BBArea");
	DeletePVar(playerid, "PlacedBB");
	DestroyDynamic3DTextLabel(Text3D:GetPVarInt(playerid, "BBLabel"));
	DeletePVar(playerid, "PlacedBB"); DeletePVar(playerid, "BBLabel");
 	DeletePVar(playerid, "BBX"); DeletePVar(playerid, "BBY"); DeletePVar(playerid, "BBZ");
	DeletePVar(playerid, "BBInt");
	DeletePVar(playerid, "BBVW");
	DeletePVar(playerid, "BBStation");
	return 1;
}

stock SendNearbyMessage(playerid, Float:radius, string[], col1, col2, col3, col4, col5)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	new Float:ix, Float:iy, Float:iz;
	new Float:cx, Float:cy, Float:cz;
	foreach(Player, i)
	{
 		if(gPlayerLoggin{i})
	    {
	        if(GetPlayerInterior(playerid) == GetPlayerInterior(i) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
	        {
				GetPlayerPos(i, ix, iy, iz);
				cx = (x - ix);
				cy = (y - iy);
				cz = (z - iz);
				if(((cx < radius/16) && (cx > -radius/16)) && ((cy < radius/16) && (cy > -radius/16)) && ((cz < radius/16) && (cz > -radius/16)))
				{
				    SendClientMessage(i, col1, string);
				}
				else if(((cx < radius/8) && (cx > -radius/8)) && ((cy < radius/8) && (cy > -radius/8)) && ((cz < radius/8) && (cz > -radius/8)))
				{
				    SendClientMessage(i, col2, string);
				}
				else if(((cx < radius/4) && (cx > -radius/4)) && ((cy < radius/4) && (cy > -radius/4)) && ((cz < radius/4) && (cz > -radius/4)))
				{
				    SendClientMessage(i, col3, string);
				}
				else if(((cx < radius/2) && (cx > -radius/2)) && ((cy < radius/2) && (cy > -radius/2)) && ((cz < radius/2) && (cz > -radius/2)))
				{
				    SendClientMessage(i, col4, string);
				}
				else if(((cx < radius) && (cx > -radius)) && ((cy < radius) && (cy > -radius)) && ((cz < radius) && (cz > -radius)))
				{
				    SendClientMessage(i, col5, string);
				}
			}
	    }
	}
	return 1;
}

CMD:gandon(playerid)
{
	new string[256];
	format(string, 256, "SELECT * FROM `accounts` ORDER BY admin DESC LIMIT 20");
	mysql_tquery(mysql, string, "gandon", "d",playerid);

	return 1;
}

public: gandon(playerid)
{
	new name[24], cash,rows,fields, string[2000];
	cache_get_data(rows, fields);
	if(rows)
	{
		for(new i; i < rows; i++)
		{
			name[0] = EOS;
			cash = 0;
			cache_get_field_content(i, "name", name, mysql);
			cash = cache_get_field_content_int(i, "admin", mysql);
			format(string, sizeof(string), "%s\n"c_b"Гандон: "c_server"%s\t "c_b"| \t"c_b"Ур: "c_server"%d", string, name, cash);
			strcat(string, string, 0);
		}
	}

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Гандон", string, "Закрыть", "");

	return 1;
}

stock BuyDonateCar(playerid)
{
    new text[700];


	format
	(
		text, sizeof text,
		""c_s"1) "c_b"%s (ID: %d) Цена: %d DONATE_RUB\n\
		"c_s"2) "c_b"%s (ID: %d) Цена: %d DONATE_RUB\n\
		"c_s"3) "c_b"%s (ID: %d) Цена: %d DONATE_RUB\n\
		"c_s"4) "c_b"%s (ID: %d) Цена: %d DONATE_RUB\n\
		"c_s"5) "c_b"%s (ID: %d) Цена: %d DONATE_RUB\n\
		"c_s"6) "c_b"%s (ID: %d) Цена: %d DONATE_RUB\n\
		"c_s"7) "c_b"%s (ID: %d) Цена: %d DONATE_RUB\n\
		"c_s"8) "c_b"%s (ID: %d) Цена: %d DONATE_RUB\n\
		"c_s"9) "c_b"%s (ID: %d) Цена: %d DONATE_RUB\n\
		"c_s"10) "c_b"%s (ID: %d) Цена: %d DONATE_RUB",
		GetVehicleInfo(DONATE_CAR_ID_1, VI_NAME),
		DONATE_CAR_ID_1,
		DONATE_CAR_PRICE_1,
		GetVehicleInfo(DONATE_CAR_ID_2, VI_NAME),
		DONATE_CAR_ID_2,
		DONATE_CAR_PRICE_2,
		GetVehicleInfo(DONATE_CAR_ID_3, VI_NAME),
		DONATE_CAR_ID_3,
		DONATE_CAR_PRICE_3,
		GetVehicleInfo(DONATE_CAR_ID_4, VI_NAME),
		DONATE_CAR_ID_4,
		DONATE_CAR_PRICE_4,
		GetVehicleInfo(DONATE_CAR_ID_5, VI_NAME),
		DONATE_CAR_ID_5,
		DONATE_CAR_PRICE_5,
		GetVehicleInfo(DONATE_CAR_ID_6, VI_NAME),
		DONATE_CAR_ID_6,
		DONATE_CAR_PRICE_6,
		GetVehicleInfo(DONATE_CAR_ID_7, VI_NAME),
		DONATE_CAR_ID_7,
		DONATE_CAR_PRICE_7,
		GetVehicleInfo(DONATE_CAR_ID_8, VI_NAME),
		DONATE_CAR_ID_8,
		DONATE_CAR_PRICE_8,
		GetVehicleInfo(DONATE_CAR_ID_9, VI_NAME),
		DONATE_CAR_ID_9,
		DONATE_CAR_PRICE_9,
		GetVehicleInfo(DONATE_CAR_ID_10, VI_NAME),
		DONATE_CAR_ID_10,
		DONATE_CAR_PRICE_10
	);

	Dialog(playerid, DIALOG_BUY_DONATE_CAR, DIALOG_STYLE_LIST, "Покупка транспорта", text, "Купить", "Закрыть");
}

stock FixBugMoneyMinus(playerid)
{
	new money = GetPlayerData(playerid, P_MONEY);
	
	if(GetPlayerMoneyEx(playerid) < 0)
	{
		SendClientMessage(playerid,-1, "Ваш баланс выведен из минуса");
		
		SetPlayerData(playerid, P_MONEY, 2000000000);
		UpdatePlayerDatabaseInt(playerid, "money", 2000000000);
		GivePlayerMoney(playerid, money);

	}
	
	if(GetPlayerData(playerid, P_BANK) < 0)
	{
        SetPlayerData(playerid, P_BANK, 2000000000);
	    UpdatePlayerDatabaseInt(playerid, "bank", 2000000000);
	    SendClientMessage(playerid,-1, "Ваш баланс банка выведен из минуса");
	
	}
}
stock CreateAutosalonTextDraws(playerid)
{
    new biz_id = GetPlayerInBiz(playerid);
    new car_market_id = biz_id - 34;
    new fmt_str[50];
	new fmt_text[50];
	new select_car = buy_car_select_car[playerid];
	new modelid = car_market_data[car_market_id][select_car][0];
	
	SelectTextDraw(playerid, COR_SERVER);
	
	CreateTDAutosalon(playerid);

	for(new idx; idx < sizeof autosalon_select_TD; idx ++)
		TextDrawShowForPlayer(playerid, autosalon_select_TD[idx]);

    for(new idx; idx < sizeof autosalon_price_TD; idx ++)
		TextDrawShowForPlayer(playerid, autosalon_price_TD[idx]);

    for(new idx; idx < sizeof autosalon_price_PTD[]; idx ++)
		PlayerTextDrawShow(playerid, autosalon_price_PTD[playerid][idx]);

    for(new idx; idx < sizeof autosalon_select_PTD[]; idx ++)
		PlayerTextDrawShow(playerid, autosalon_select_PTD[playerid][idx]);

    for(new idx; idx < sizeof autosalon_color_TD; idx ++)
		TextDrawShowForPlayer(playerid, autosalon_color_TD[idx]);
		
    format(fmt_str, sizeof fmt_str, "%dP", GetVehicleInfo(modelid - 400, VI_PRICE));
	PlayerTextDrawSetString(playerid, autosalon_price_PTD[playerid][0], fmt_str);

    format(fmt_text, sizeof fmt_text, "%s", GetVehicleInfo(modelid - 400, VI_NAME));
	PlayerTextDrawSetString(playerid, autosalon_select_PTD[playerid][0], fmt_text);

	return 1;
}

stock HideAutosalonTextDraws(playerid)
{
	for(new idx; idx < sizeof autosalon_select_TD; idx ++)
		TextDrawHideForPlayer(playerid, autosalon_select_TD[idx]);

    for(new idx; idx < sizeof autosalon_price_TD; idx ++)
		TextDrawHideForPlayer(playerid, autosalon_price_TD[idx]);

    for(new idx; idx < sizeof autosalon_color_TD; idx ++)
		TextDrawHideForPlayer(playerid, autosalon_color_TD[idx]);

    for(new idx; idx < sizeof autosalon_price_PTD[]; idx ++)
		PlayerTextDrawHide(playerid, autosalon_price_PTD[playerid][idx]);
		
    for(new idx; idx < sizeof autosalon_select_PTD[]; idx ++)
		PlayerTextDrawHide(playerid, autosalon_select_PTD[playerid][idx]);
		
    CancelSelectTextDraw(playerid);

}

stock CreateTDAutosalon(playerid)
{
	autosalon_select_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 297.1998, 399.5642, "BMW_X5"); // ?????
	PlayerTextDrawLetterSize(playerid, autosalon_select_PTD[playerid][0], 0.3619, 1.2017);
	PlayerTextDrawAlignment(playerid, autosalon_select_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, autosalon_select_PTD[playerid][0], -2139062017);
	PlayerTextDrawBackgroundColor(playerid, autosalon_select_PTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, autosalon_select_PTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, autosalon_select_PTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, autosalon_select_PTD[playerid][0], 0);


	autosalon_price_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 89.6000, 214.3911, "25000000_P"); // пусто
	PlayerTextDrawLetterSize(playerid, autosalon_price_PTD[playerid][0], 0.3615, 1.4805);
	PlayerTextDrawTextSize(playerid, autosalon_price_PTD[playerid][0], -20.0000, 0.0000);
	PlayerTextDrawAlignment(playerid, autosalon_price_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, autosalon_price_PTD[playerid][0], 8388863);
	PlayerTextDrawBackgroundColor(playerid, autosalon_price_PTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, autosalon_price_PTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, autosalon_price_PTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, autosalon_price_PTD[playerid][0], 0);

}

stock CreateBusinessMenuTextDraws(playerid)
{
    new fmt_str[80];
	new fmt_text[80];
	new string[80];
	new businessid = GetPlayerBusiness(playerid);

	SelectTextDraw(playerid, COR_SERVER);

	CreateTDBusinessMenu(playerid);

	for(new idx; idx < sizeof business_menu_TD; idx ++)
		TextDrawShowForPlayer(playerid, business_menu_TD[idx]);


    for(new idx; idx < sizeof business_menu_PTD[]; idx ++)
		PlayerTextDrawShow(playerid, business_menu_PTD[playerid][idx]);


    format(fmt_str, sizeof fmt_str, "%s", GetBusinessInteriorInfo(GetBusinessData(businessid, B_INTERIOR), BT_NAME));
	PlayerTextDrawSetString(playerid, business_menu_PTD[playerid][0], fmt_str);
	
	format(fmt_str, sizeof fmt_str, "%s", GetBusinessData(businessid, B_OWNER_NAME));
	PlayerTextDrawSetString(playerid, business_menu_PTD[playerid][1], fmt_str);
	
	format(string, sizeof string, "%dP", GetBusinessData(businessid, B_PRICE));
	PlayerTextDrawSetString(playerid, business_menu_PTD[playerid][2], string);
	
	format(fmt_text, sizeof fmt_text, "%dP", GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? (GetBusinessData(businessid, B_RENT_PRICE)) : (GetBusinessData(businessid, B_RENT_PRICE) / 2));
	PlayerTextDrawSetString(playerid, business_menu_PTD[playerid][3], fmt_text);

	return 1;
}

stock HideBusinessMenuTextDraws(playerid)
{
	for(new idx; idx < sizeof business_menu_TD; idx ++)
		TextDrawHideForPlayer(playerid, business_menu_TD[idx]);

    for(new idx; idx < sizeof business_menu_PTD[]; idx ++)
		PlayerTextDrawHide(playerid, business_menu_PTD[playerid][idx]);

    CancelSelectTextDraw(playerid);

}

stock CreateTDBusinessMenu(playerid)
{
    business_menu_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 205.1999, 144.7021, "Business_Name"); // ?????
	PlayerTextDrawLetterSize(playerid, business_menu_PTD[playerid][0], 0.2031, 1.2167);
	PlayerTextDrawAlignment(playerid, business_menu_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, business_menu_PTD[playerid][0], -16776961);
	PlayerTextDrawBackgroundColor(playerid, business_menu_PTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, business_menu_PTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, business_menu_PTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, business_menu_PTD[playerid][0], 0);

	business_menu_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 205.1999, 189.5022, "Jackson_Vendetta"); // ?????
	PlayerTextDrawLetterSize(playerid, business_menu_PTD[playerid][1], 0.1951, 1.4257);
	PlayerTextDrawAlignment(playerid, business_menu_PTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, business_menu_PTD[playerid][1], -16776961);
	PlayerTextDrawBackgroundColor(playerid, business_menu_PTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, business_menu_PTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, business_menu_PTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, business_menu_PTD[playerid][1], 0);

	business_menu_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 206.4000, 235.2977, "100000000$"); // ?????
	PlayerTextDrawLetterSize(playerid, business_menu_PTD[playerid][2], 0.2627, 1.5552);
	PlayerTextDrawAlignment(playerid, business_menu_PTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, business_menu_PTD[playerid][2], 8388863);
	PlayerTextDrawBackgroundColor(playerid, business_menu_PTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, business_menu_PTD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, business_menu_PTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, business_menu_PTD[playerid][2], 0);

	business_menu_PTD[playerid][3] = CreatePlayerTextDraw(playerid, 209.1999, 282.5866, "50000$"); // ?????
	PlayerTextDrawLetterSize(playerid, business_menu_PTD[playerid][3], 0.2643, 1.4855);
	PlayerTextDrawAlignment(playerid, business_menu_PTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, business_menu_PTD[playerid][3], 8388863);
	PlayerTextDrawBackgroundColor(playerid, business_menu_PTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, business_menu_PTD[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, business_menu_PTD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, business_menu_PTD[playerid][3], 0);
}

stock CreateClothesShopTextDraws(playerid)
{

	SelectTextDraw(playerid, COR_SERVER);

	CreateTDClothesShop(playerid);

	for(new idx; idx < sizeof shop_clothes_TD; idx ++)
		TextDrawShowForPlayer(playerid, shop_clothes_TD[idx]);


 //   for(new idx; idx < sizeof shop_clothes_PTD[]; idx ++)
//		PlayerTextDrawShow(playerid, shop_clothes_PTD[playerid][idx]);
		

    PlayerTextDrawShow(playerid, shop_clothes_PTD[playerid][0]);
 //   PlayerTextDrawShow(playerid, shop_clothes_PTD[playerid][0]);



	return 1;
}

stock HideClothesShopTextDraws(playerid)
{
	for(new idx; idx < sizeof shop_clothes_TD; idx ++)
		TextDrawHideForPlayer(playerid, shop_clothes_TD[idx]);

 //   for(new idx; idx < sizeof shop_clothes_PTD[]; idx ++)
//		PlayerTextDrawHide(playerid, shop_clothes_PTD[playerid][idx]);
		
    //PlayerTextDrawHide(playerid, shop_clothes_PTD[playerid][0]);
    PlayerTextDrawHide(playerid, shop_clothes_PTD[playerid][0]);

    CancelSelectTextDraw(playerid);

}

stock CreateTDClothesShop(playerid)
{
	shop_clothes_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 75.5999, 208.9155, ""); // ?????
	PlayerTextDrawLetterSize(playerid, shop_clothes_PTD[playerid][0], 0.4000, 1.6000);
	PlayerTextDrawAlignment(playerid, shop_clothes_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, shop_clothes_PTD[playerid][0], 8388863);
	PlayerTextDrawBackgroundColor(playerid, shop_clothes_PTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, shop_clothes_PTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, shop_clothes_PTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, shop_clothes_PTD[playerid][0], 0);

}
//================================[тест команды]==============
CMD:shop(playerid)
{
    ShowPlayerClothingShopPanel(playerid);
    
    return 1;
}

CMD:speed0(playerid)
{
    SetPlayerData(playerid, P_SPEEDOMETR, 0);
	UpdatePlayerDatabaseInt(playerid, "speedometr", 0);
}

CMD:bizid(playerid)
{
    new query[70];
    format(query, sizeof query, "[Информация]: "c_b"%d", GetPlayerData(playerid,P_IN_BUSINESS));
	SendClientMessage(playerid, COR_SERVER, query);
	return 1;
}

CMD:skinid(playerid)
{
    new query[70];
    format(query, sizeof query, "[Информация]: "c_b"%d", GetPlayerSelectSkin(playerid));
	SendClientMessage(playerid, COR_SERVER, query);
	return 1;
}

//==============================================================

stock CreateBuyCarNumberTextDraws(playerid)
{

	SelectTextDraw(playerid, COR_SERVER);

	CreateTDBuyCarNumber(playerid);

	for(new idx; idx < sizeof buy_car_number_TD; idx ++)
		TextDrawShowForPlayer(playerid, buy_car_number_TD[idx]);


    for(new idx; idx < sizeof buy_car_number_PTD[]; idx ++)
		PlayerTextDrawShow(playerid, buy_car_number_PTD[playerid][idx]);
		
    TextDrawHideForPlayer(playerid, buy_car_number_TD[1]); //rus
    TextDrawHideForPlayer(playerid, buy_car_number_TD[10]); //kz
    TextDrawHideForPlayer(playerid, buy_car_number_TD[12]); //ua
    TextDrawHideForPlayer(playerid, buy_car_number_TD[13]); //by

	return 1;
}

stock HideBuyCarNumberTextDraws(playerid)
{
	for(new idx; idx < sizeof buy_car_number_TD; idx ++)
		TextDrawHideForPlayer(playerid, buy_car_number_TD[idx]);

    for(new idx; idx < sizeof buy_car_number_PTD[]; idx ++)
		PlayerTextDrawHide(playerid, buy_car_number_PTD[playerid][idx]);


    CancelSelectTextDraw(playerid);

}

stock CreateTDBuyCarNumber(playerid)
{
    buy_car_number_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 214.3997, 197.4667, ""); // ?????
	PlayerTextDrawLetterSize(playerid, buy_car_number_PTD[playerid][0], 1.0231, 5.7761);
	PlayerTextDrawAlignment(playerid, buy_car_number_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, buy_car_number_PTD[playerid][0], -1378294017);
	PlayerTextDrawBackgroundColor(playerid, buy_car_number_PTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, buy_car_number_PTD[playerid][0], 3);
	PlayerTextDrawSetProportional(playerid, buy_car_number_PTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, buy_car_number_PTD[playerid][0], 0);

	buy_car_number_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 585.2005, 203.9378, ""); // ?????
	PlayerTextDrawLetterSize(playerid, buy_car_number_PTD[playerid][1], 0.4338, 2.0878);
	PlayerTextDrawAlignment(playerid, buy_car_number_PTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, buy_car_number_PTD[playerid][1], 16711935);
	PlayerTextDrawBackgroundColor(playerid, buy_car_number_PTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, buy_car_number_PTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, buy_car_number_PTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, buy_car_number_PTD[playerid][1], 0);

}

/*stock CreateLogo(playerid)
{
    logo_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 62.8000, 395.5822, "X2"); // ?????
	PlayerTextDrawLetterSize(playerid, logo_PTD[playerid][0], 0.1715, 0.8533);
	PlayerTextDrawAlignment(playerid, logo_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, logo_PTD[playerid][0], -2139062017);
	PlayerTextDrawBackgroundColor(playerid, logo_PTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, logo_PTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, logo_PTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, logo_PTD[playerid][0], 0);

	logo_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 79.1998, 430.4266, "1/1000"); // ?????
	PlayerTextDrawLetterSize(playerid, logo_PTD[playerid][1], 0.2107, 1.0325);
	PlayerTextDrawAlignment(playerid, logo_PTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, logo_PTD[playerid][1], -1061109505);
	PlayerTextDrawBackgroundColor(playerid, logo_PTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, logo_PTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, logo_PTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, logo_PTD[playerid][1], 0);
	
	for(new idx; idx < sizeof logo_TD; idx ++)
		TextDrawShowForPlayer(playerid, logo_TD[idx]);
		
    for(new idx; idx < sizeof logo_PTD[]; idx ++)
		PlayerTextDrawShow(playerid, logo_PTD[playerid][idx]);
}*/

stock report_Send(playerid, const text[])
{
	mysql_query_[0] = EOS;

    new report_id, Cache:insert_result;
	mysql_format(mysql, mysql_query_, sizeof (mysql_query_), "INSERT INTO `"TABLE_REPORTS"` \
		(player_name, player_id, text, date) VALUES ('%s', %d, '%s',NOW())", GetPlayerData(playerid,P_NAME), playerid, text
	);

	insert_result = mysql_query(mysql, mysql_query_);

	mysql_query_[0] = EOS;
	report_id = cache_insert_id();

	cache_delete(insert_result);

	new Cache:result = mysql_query(mysql, "SELECT id FROM `"TABLE_REPORTS"` WHERE status=0 AND admin=0"), rows;
	rows = cache_num_rows();

	format(stringer1, sizeof (stringer1), "{afafaf}Ваш запрос №%d успешно отправлен администрации. Вы на %d месте в очереди!",
		report_id, rows
	);
	SendClientMessage(playerid, COLOR_WHITE, stringer1), stringer1[0] = EOS;

	cache_delete(result);

	format(stringer1, sizeof (stringer1), ""c_server"[ANS] %s[%d]: %s (%d в очереди) {FFFFFF}[/reps %d]",GetPlayerData(playerid,P_NAME), playerid, text, rows, report_id);
	
	SendMessageToAdmins(stringer1, COLOR_WHITE)/*, stringer1[0] = EOS*/;

	return true;
}

stock report_Show(playerid) {
	new
		Cache:result, report_id, report_playerid, report_player_name[MAX_PLAYER_NAME + 1], report_date[20], report_text[144];

	result = mysql_query(mysql, "SELECT * FROM "TABLE_REPORTS" WHERE status="#REPORT_STATUS_NONE" AND admin=0 LIMIT 1");

	mysql_query_[0] = EOS;

	new rows = cache_num_rows();

	if (!rows) {
		cache_delete(result);
		SendClientMessage(playerid, COLOR_WHITE, !"{afafaf}В очереди нет запросов от игроков!");
		return true;
	}
	report_id = cache_get_field_content_int(0, "id");
	report_playerid = cache_get_field_content_int(0, "player_id");

	cache_get_field_content(0, "player_name", report_player_name, mysql, sizeof(report_player_name));

	cache_get_field_content(0, "text", report_text, mysql, sizeof (report_text));
	cache_get_field_content(0, "date", report_date, mysql, sizeof (report_date));

	mysql_format(mysql, mysql_query_, sizeof (mysql_query_), "SELECT * FROM "TABLE_REPORTS" WHERE \
		status>"#REPORT_STATUS_NONE" AND player_name='%s' ORDER BY id DESC LIMIT 3", report_player_name
	);
	mysql_tquery(mysql, mysql_query_, "report_ShowDialog", "ddsdss", playerid, report_id, report_player_name, report_playerid, report_text, report_date);

	cache_delete(result);
	return true;
}
public: report_ShowDialog(playerid, report_id, const report_player_name[], report_playerid, const report_text[], const report_date[]) {
	new rows = cache_num_rows();

	mysql_format(mysql, mysql_query_, sizeof (mysql_query_),
		"UPDATE "TABLE_REPORTS" SET admin=%d WHERE id=%d LIMIT 1", playerid + 1, report_id
	);
	mysql_tquery(mysql, mysql_query_, "", ""), mysql_query_[0] = EOS;

	format(stringer, sizeof (stringer), ""c_server"Предыдущие запросы от %s[%d]:\n \n",
		report_player_name, report_playerid
	);
	if (rows) {
		for (new i = 0, id, text[144], date_str[20]; i < rows; i++) {
			id = cache_get_field_content_int(i, "id");
			cache_get_field_content(i, "text", text, mysql, sizeof (text));
			cache_get_field_content(i, "date", date_str, mysql, sizeof (date_str));

			format(stringer1, sizeof (stringer1), ""c_server"№%d {afafaf}[%s] %s\n", id, date_str, text);
			strcat(stringer, stringer1), stringer1[0] = EOS;
		}
		strcat(stringer, " \n");
	}
	format(stringer1, sizeof (stringer1), "\
		{FFFFFF}Номер запроса: "c_server"#%i\n\
		{FFFFFF}Дата подачи: {afafaf}%s\n\
		{FFFFFF}Запрос: "c_server"%s",
		report_id,
		report_date,
		report_text
	);
	strcat(stringer, stringer1), stringer1[0] = EOS;

	TempReportInfo[playerid][reportID] = report_id;
	TempReportInfo[playerid][reportPlayerID] = report_playerid;
	strmid(TempReportInfo[playerid][reportText], report_text, 0, strlen(report_text), 144);
	strmid(TempReportInfo[playerid][reportDate], report_date, 0, strlen(report_date), 20);

	Dialog(playerid, 5512, DIALOG_STYLE_INPUT, !""c_server"Ответ на запрос игрока", stringer, !"Ответить", !"Пропустить");

	stringer[0] = EOS;
}

//alias:an("ans", "reps", "pm");
alias:ans("reps", "pm")
CMD:ans(playerid, params[])
{
    if(GetPlayerAdminEx(playerid))
    {
		new targetid, text[81];

		if (sscanf(params, "is[81]", targetid, text) || targetid < 0 ) {
			if (!report_Show(playerid) && strlen(params) > 2) {
				SendClientMessage(playerid, COLOR_WHITE, !"{afafaf}Используйте: /an [playerid / reportid] [текст / ответ]");
			}
			return true;
		}
		if (targetid >= MAX_PLAYERS) {

			new report_id = targetid, status = REPORT_STATUS_ANSWERED, Cache:result;

			mysql_query_[0] = EOS;

			mysql_format(mysql, mysql_query_, sizeof (mysql_query_), "SELECT * FROM "TABLE_REPORTS" \
				WHERE status=0 AND id=%i", report_id
			);
			result = mysql_query(mysql, mysql_query_, true);

			targetid = cache_get_field_content_int(0, "player_id");
			cache_get_field_content(0, "text", TempReportInfo[playerid][reportText], mysql, 144);
			cache_get_field_content(0, "date", TempReportInfo[playerid][reportDate], mysql, 20);

			mysql_query_[0] = EOS;
			new rows = cache_num_rows();

			if(!rows) {
				cache_delete(result);
				SendClientMessage(playerid, COLOR_WHITE, !"{afafaf}На данный запрос уже был дан ответ!");
				return true;
			}
			mysql_format(mysql, mysql_query_, sizeof (mysql_query_), "UPDATE "TABLE_REPORTS" SET \
				status=%d, answer='%s' WHERE status=0 AND id=%d", status, text, report_id
			);
			mysql_query(mysql, mysql_query_);

			format(stringer1, sizeof (stringer1), "\
				{FFFFFF}Дата запроса: {afafaf}%s\n \n\
				{FFFFFF}Ваш запрос №%d:\n\
				{afafaf}| {afafaf}%s\n \n\
				{FFFFFF}Ответ от администрации:\n\
				{afafaf}| "c_server"%s",
				TempReportInfo[playerid][reportDate], report_id, TempReportInfo[playerid][reportText], text
			);
			Dialog(targetid, 0000, DIALOG_STYLE_MSGBOX, ""c_server"Ответ администрации", stringer1, !"Спасибо", !"");

			format(stringer1, sizeof (stringer1), ""c_server"Ваш запрос №%d: {FFFFFF}%s", report_id, TempReportInfo[playerid][reportText]);
			SendClientMessage(targetid, COLOR_YELLOW, stringer1);
			format(stringer1, sizeof (stringer1), ""c_server"Ответ от администратора %s[%d]: {FFFFFF}%s", GetPlayerNameEx(playerid), playerid, text);
			SendClientMessage(targetid, COLOR_YELLOW, stringer1), stringer1[0] = EOS;

			format(stringer1, sizeof(stringer1), "{afafaf}[A] %s[%d] ответил игроку %s[%i]: %s",
				GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(targetid), targetid, text
			);
			SendMessageToAdmins(stringer1,0xFfa500AA);

            /*if(PlayerInfo[playerid][pAdmin]) PlayerInfo[playerid][pRepAdm]++;
            else PlayerInfo[playerid][pHotvet] ++;*/

			cache_delete(result);

		} else {
			if (!IsPlayerConnected(targetid))
				return SendClientMessage(playerid, COLOR_WHITE, !"{afafaf}Игрок не найден");

			if (strlen(text) > 80)
				return SendClientMessage(playerid, COLOR_WHITE, !"{afafaf}Нельзя писать больше 80 символов!");

			if (targetid == playerid)
				return SendClientMessage(playerid, COLOR_WHITE, !"{afafaf}Нельзя ответить самому себе");

			format(stringer1, sizeof(stringer1), ""c_server"Ответ от администратора %s[%d]: {FFFFFF}%s",
				GetPlayerNameEx(playerid), playerid, text
			);
			SendClientMessage(targetid, 0xffa141FF, stringer1);

			format(stringer1, sizeof(stringer1), "{afafaf}[A] %s[%d] ответил игроку %s[%d]: %s",
				GetPlayerNameEx(playerid), playerid, GetPlayerData(targetid, P_NAME), targetid, text
			);
			SendMessageToAdmins(stringer1,0xFfa500AA);

            /*if(PlayerInfo[playerid][pAdmin]) PlayerInfo[playerid][pRepAdm]++;
            else PlayerInfo[playerid][pHotvet] ++;*/

			stringer1[0] = EOS;
		}
	}
	return true;
}

report_OnGameModeInit() {
	mysql_tquery(mysql, "UPDATE "TABLE_REPORTS" SET status="#REPORT_STATUS_SKIPPED" WHERE status=0", "", "");
	mysql_tquery(mysql, "TRUNCATE "TABLE_REPORTS"", "", "");
	mysql_tquery(mysql, "ALTER TABLE "TABLE_REPORTS" AUTO_INCREMENT=1000", "", "");
}
report_OnPlayerDisconnect(playerid) {
	mysql_query_[0] = EOS;

	mysql_format(mysql, mysql_query_, sizeof (mysql_query_),
		"UPDATE "TABLE_REPORTS" SET status="#REPORT_STATUS_DISCONNECT" WHERE \
		status=0 AND player_name='%s' LIMIT 1", GetPlayerNameEx(playerid)
	);
	mysql_tquery(mysql, mysql_query_, "", ""), mysql_query_[0] = EOS;

	if (TempReportInfo[playerid][reportID]) {
		mysql_format(mysql, mysql_query_, sizeof (mysql_query_),
			"UPDATE "TABLE_REPORTS" SET admin=0 WHERE admin=%d LIMIT 1", playerid + 1
		);
		mysql_tquery(mysql, mysql_query_, "", ""), mysql_query_[0] = EOS;
		TempReportInfo[playerid][reportID] = 0;
	}
}

stock SpeedometrShowForPlayer(playerid)
{
	if(GetPlayerData(playerid, P_SPEEDOMETR) == 0)
	{
	    SpeedometrEnterShowForPlayer(playerid);
	}
	
	if(GetPlayerData(playerid, P_SPEEDOMETR) == 1)
	{
        Speedometr01ShowForPlayer(playerid);
	}
	
	if(GetPlayerData(playerid, P_SPEEDOMETR) == 2)
	{
        Speedometr02ShowForPlayer(playerid);
	}
}

stock SpeedometrEnterShowForPlayer(playerid)
{
    SelectTextDraw(playerid, COR_SERVER);
    
    for(new idx; idx < sizeof enter_speedometr_TD; idx ++)
		TextDrawShowForPlayer(playerid, enter_speedometr_TD[idx]);
		
		
}

stock SpeedometrEnterHideForPlayer(playerid)
{
    CancelSelectTextDraw(playerid);
    
    for(new idx; idx < sizeof enter_speedometr_TD; idx ++)
		TextDrawHideForPlayer(playerid, enter_speedometr_TD[idx]);
		
    RemovePlayerFromVehicle(playerid);
}

CMD:speedometr(playerid)
{
    SpeedometrEnterShowForPlayer(playerid);
}

stock CreateAnimTD(playerid)
{
    SelectTextDraw(playerid, COR_SERVER);
    
    TextDrawShowForPlayer(playerid, stop_anim_TD[0]);
}

stock HideAnimTD(playerid)
{
    CancelSelectTextDraw(playerid);
    TextDrawHideForPlayer(playerid, stop_anim_TD[0]);
}

CMD:psave(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /psave [описание]");

    extract params -> new string:text[66];


	new Float:POS[4];
	GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
	GetPlayerFacingAngle(playerid, POS[3]);

	printf("SAVECOORD: COORD: %f,%f,%f,%f | Описание: %s",POS[0],POS[1],POS[2],POS[3], text);

	Send(playerid,-1,"Координаты игрока успешно сохранены в консоль");

	return 1;
}
